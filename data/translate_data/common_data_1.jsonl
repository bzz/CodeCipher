{"text": "Maximum Prefix Sum possible by merging two given arrays ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxPresum(int[] a, int[] b) {\n    int X = Math.max(a[0], 0);\n    for (int i = 1; i < a.length; i++) {\n      a[i] += a[i - 1];\n      X = Math.max(X, a[i]);\n    }\n    int Y = Math.max(b[0], 0);\n    for (int i = 1; i < b.length; i++) {\n      b[i] += b[i - 1];\n      Y = Math.max(Y, b[i]);\n    }\n    return X + Y;\n  }\n\n  public static void main(String[] args) {\n    int[] A = {2, -1, 4, -5};\n    int[] B = {4, -3, 12, 4, -3};\n    System.out.print(maxPresum(A, B));\n  }\n}\n", "python": "def maxPresum(a, b):\n    X = max(a[0], 0)\n    for i in range(1, len(a)):\n        a[i] += a[i - 1]\n        X = max(X, a[i])\n    Y = max(b[0], 0)\n    for i in range(1, len(b)):\n        b[i] += b[i - 1]\n        Y = max(Y, b[i])\n    return X + Y\n\n\nA = [2, -1, 4, -5]\nB = [4, -3, 12, 4, -3]\nprint(maxPresum(A, B))\n"}
{"text": "Nth natural number after removing all numbers consisting of the digit 9 ", "java": "import java.util.*;\n\nclass GFG {\n  static long findNthNumber(long N) {\n    long result = 0;\n    long p = 1;\n    while (N > 0) {\n      result += (p * (N % 9));\n      N = N / 9;\n      p = p * 10;\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int N = 9;\n    System.out.print(findNthNumber(N));\n  }\n}\n", "python": "def findNthNumber(N):\n    result = 0\n    p = 1\n    while N > 0:\n        result += p * (N % 9)\n        N = N // 9\n        p = p * 10\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 9\n    print(findNthNumber(N))\n"}
{"text": "Count ways to place M objects in distinct partitions of N boxes ", "java": "import java.io.*;\n\nclass GFG {\n  public static int MOD = 1000000007;\n\n  static int power(int x, int y, int p) {\n    p = MOD;\n    int res = 1;\n    x = x % p;\n    while (y > 0) {\n      if ((y & 1) != 0) res = (res * x) % p;\n      y = y >> 1;\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  static void totalWays(int N, int M) {\n    int X = N / 2;\n    int S = (X * (X + 1)) % MOD;\n    System.out.println(power(S, M, MOD));\n  }\n\n  public static void main(String[] args) {\n    int N = 5, M = 2;\n    totalWays(N, M);\n  }\n}\n", "python": "MOD = 1000000007\n\n\ndef power(x, y, p=MOD):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\n\ndef totalWays(N, M):\n    X = N // 2\n    S = (X * (X + 1)) % MOD\n    print(power(S, M, MOD))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N, M = 5, 2\n    totalWays(N, M)\n"}
{"text": "Evaluate the expression ( N1 * ( N ", "java": "class GFG {\n  static int mod = 1000000007;\n\n  static int ValOfTheExpression(int n) {\n    int[] factorial = new int[n + 1];\n    factorial[0] = factorial[1] = 1;\n    for (int i = 2; i <= n; i++) {\n      factorial[i] = ((factorial[i - 1] % mod) * (i % mod)) % mod;\n    }\n    int[] dp = new int[n + 1];\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n      dp[i] = ((dp[i - 1] % mod) * (factorial[i] % mod)) % mod;\n    }\n    return dp[n];\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(ValOfTheExpression(n));\n  }\n}\n", "python": "mod = 1000000007\n\n\ndef ValOfTheExpression(n):\n    global mod\n    factorial = [0 for i in range(n + 1)]\n    factorial[0] = 1\n    factorial[1] = 1\n    for i in range(2, n + 1, 1):\n        factorial[i] = ((factorial[i - 1] % mod) * (i % mod)) % mod\n    dp = [0 for i in range(n + 1)]\n    dp[1] = 1\n    for i in range(2, n + 1, 1):\n        dp[i] = ((dp[i - 1] % mod) * (factorial[i] % mod)) % mod\n    return dp[n]\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(ValOfTheExpression(n))\n"}
{"text": "Least Square Regression Line ", "java": "import java.util.Arrays;\n\npublic class GFG {\n  private static double calculateB(int[] x, int[] y) {\n    int n = x.length;\n    int sx = Arrays.stream(x).sum();\n    int sy = Arrays.stream(y).sum();\n    int sxsy = 0;\n    int sx2 = 0;\n    for (int i = 0; i < n; i++) {\n      sxsy += x[i] * y[i];\n      sx2 += x[i] * x[i];\n    }\n    double b = (double) (n * sxsy - sx * sy) / (n * sx2 - sx * sx);\n    return b;\n  }\n\n  public static void leastRegLine(int X[], int Y[]) {\n    double b = calculateB(X, Y);\n    int n = X.length;\n    int meanX = Arrays.stream(X).sum() / n;\n    int meanY = Arrays.stream(Y).sum() / n;\n    double a = meanY - b * meanX;\n    System.out.println(\" Regression \u2581 line : \");\n    System.out.print(\" Y \u2581 = \u2581 \");\n    System.out.printf(\" % .3f \", a);\n    System.out.print(\" \u2581 + \u2581 \");\n    System.out.printf(\" % .3f \", b);\n    System.out.print(\" * X \");\n  }\n\n  public static void main(String[] args) {\n    int X[] = {95, 85, 80, 70, 60};\n    int Y[] = {90, 80, 70, 65, 60};\n    leastRegLine(X, Y);\n  }\n}\n", "python": "def calculateB(x, y, n):\n    sx = sum(x)\n    sy = sum(y)\n    sxsy = 0\n    sx2 = 0\n    for i in range(n):\n        sxsy += x[i] * y[i]\n        sx2 += x[i] * x[i]\n    b = (n * sxsy - sx * sy) / (n * sx2 - sx * sx)\n    return b\n\n\ndef leastRegLine(X, Y, n):\n    b = calculateB(X, Y, n)\n    meanX = int(sum(X) / n)\n    meanY = int(sum(Y) / n)\n    a = meanY - b * meanX\n    print(\" Regression \u2581 line : \")\n    print(\" Y \u2581 = \u2581 \", \" % .3f \" % a, \" \u2581 + \u2581 \", \" % .3f \" % b, \" * X \", sep=\" \")\n\n\nX = [95, 85, 80, 70, 60]\nY = [90, 80, 70, 65, 60]\nn = len(X)\nleastRegLine(X, Y, n)\n"}
{"text": "Find temperature of missing days using given sum and average ", "java": "class GFG {\n  static void findTemperature(int x, int y, int s) {\n    double Day1, Day2;\n    double diff = (x - y) * 6;\n    Day2 = (diff + s) / 2;\n    Day1 = s - Day2;\n    System.out.println(\" Day1 \u2581 : \u2581 \" + Day1);\n    System.out.println(\" Day2 \u2581 : \u2581 \" + Day2);\n  }\n\n  public static void main(String[] args) {\n    int x = 5, y = 10, s = 40;\n    findTemperature(x, y, s);\n  }\n}\n", "python": "def findTemperature(x, y, s):\n    diff = (x - y) * 6\n    Day2 = (diff + s) // 2\n    Day1 = s - Day2\n    print(\" Day1 \u2581 : \u2581 \", Day1)\n    print(\" Day2 \u2581 : \u2581 \", Day2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    x = 5\n    y = 10\n    s = 40\n    findTemperature(x, y, s)\n"}
{"text": "Find the value of P and modular inverse of Q modulo 998244353 ", "java": "import java.util.*;\n\nclass GFG {\n  static long calculate(long p, long q) {\n    long mod = 998244353, expo;\n    expo = mod - 2;\n    while (expo != 0) {\n      if ((expo & 1) == 1) {\n        p = (p * q) % mod;\n      }\n      q = (q * q) % mod;\n      expo >>= 1;\n    }\n    return p;\n  }\n\n  public static void main(String[] args) {\n    long p = 1, q = 4;\n    System.out.println(calculate(p, q));\n  }\n}\n", "python": "def calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = (p * q) % mod\n        q = (q * q) % mod\n        expo >>= 1\n    return p\n\n\nif __name__ == \" _ _ main _ _ \":\n    p = 1\n    q = 4\n    print(calculate(p, q))\n"}
{"text": "Count of distinct index pair ( i , j ) such that element sum of First Array is greater ", "java": "class GFG {\n  static int count_pairs(int[] a, int b[], int N) {\n    int i, j;\n    int count = 0;\n    for (i = 0; i < (N - 1); i++) {\n      for (j = (i + 1); j < N; j++) {\n        if ((a[i] + a[j]) > (b[i] + b[j])) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    int a[] = new int[] {1, 2, 3, 4, 5};\n    int b[] = new int[] {2, 5, 6, 1, 9};\n    System.out.println(count_pairs(a, b, N));\n  }\n}\n", "python": "from bisect import bisect_left\n\n\ndef numberOfPairs(a, b, n):\n    c = [0 for i in range(n)]\n    for i in range(n):\n        c[i] = a[i] - b[i]\n    c = sorted(c)\n    answer = 0\n    for i in range(1, n):\n        if c[i] <= 0:\n            continue\n        pos = bisect_left(c, -c[i] + 1)\n        answer += i - pos\n    return answer\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    a = [1, 2, 3, 4, 5]\n    b = [2, 5, 6, 1, 9]\n    print(numberOfPairs(a, b, n))\n"}
{"text": "Count of distinct index pair ( i , j ) such that element sum of First Array is greater ", "java": "import java.util.*;\n\nclass GFG {\n  static int numberOfPairs(int[] a, int[] b, int n) {\n    int c[] = new int[n];\n    for (int i = 0; i < n; i++) {\n      c[i] = a[i] - b[i];\n    }\n    Arrays.sort(c);\n    int answer = 0;\n    for (int i = 1; i < n; i++) {\n      if (c[i] <= 0) continue;\n      int pos = -1;\n      for (int j = 0; j < n; j++) {\n        if (c[i] + c[j] > 0) {\n          pos = j;\n          break;\n        }\n      }\n      answer += (i - pos);\n    }\n    return answer;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    int a[] = {1, 2, 3, 4, 5};\n    int b[] = {2, 5, 6, 1, 9};\n    System.out.println(numberOfPairs(a, b, n));\n  }\n}\n", "python": "from bisect import bisect_left\n\n\ndef numberOfPairs(a, b, n):\n    c = [0 for i in range(n)]\n    for i in range(n):\n        c[i] = a[i] - b[i]\n    c = sorted(c)\n    answer = 0\n    for i in range(1, n):\n        if c[i] <= 0:\n            continue\n        pos = bisect_left(c, -c[i] + 1)\n        answer += i - pos\n    return answer\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    a = [1, 2, 3, 4, 5]\n    b = [2, 5, 6, 1, 9]\n    print(numberOfPairs(a, b, n))\n"}
{"text": "Prefix Product Array ", "java": "class GFG {\n  static int prefixProduct(int[] a, int n) {\n    for (int i = 1; i < n; i++) {\n      a[i] = a[i] * a[i - 1];\n    }\n    for (int j = 0; j < n; j++) {\n      System.out.print(a[j] + \" , \u2581 \");\n    }\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = new int[] {2, 4, 6, 5, 10};\n    int N = 5;\n    prefixProduct(arr, N);\n  }\n}\n", "python": "def prefixProduct(a, n):\n    for i in range(1, n):\n        a[i] = a[i] * a[i - 1]\n    for j in range(0, n):\n        print(a[j], end=\" , \u2581 \")\n    return 0\n\n\narr = [2, 4, 6, 5, 10]\nN = len(arr)\nprefixProduct(arr, N)\n"}
{"text": "Sum of sum ", "java": "class GFG {\n  static long sumOfSumSeries(int N) {\n    long sum = 0L;\n    for (int i = 1; i <= N; i++) {\n      sum = sum + (i * (i + 1)) / 2;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.println(sumOfSumSeries(N));\n  }\n}\n", "python": "def sumOfSumSeries(N):\n    _sum = 0\n    for i in range(N + 1):\n        _sum = _sum + (i * (i + 1)) // 2\n    return _sum\n\n\nN = 5\nprint(sumOfSumSeries(N))\n"}
{"text": "Sum of sum ", "java": "class GFG {\n  static long sumOfSumSeries(int n) {\n    return (n * (n + 1) * (n + 2)) / 6;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.println(sumOfSumSeries(N));\n  }\n}\n", "python": "def sumOfSumSeries(N):\n    _sum = 0\n    for i in range(N + 1):\n        _sum = _sum + (i * (i + 1)) // 2\n    return _sum\n\n\nN = 5\nprint(sumOfSumSeries(N))\n"}
{"text": "Sum of series formed by difference between product and sum of N natural numbers ", "java": "\nclass GFG {\n  static int seriesSum(int n) {\n    int sum = 0;\n    int currProd = 1;\n    int currSum = 1;\n    for (int i = 2; i <= n; i++) {\n      currProd *= i;\n      currSum += i;\n      sum += currProd - currSum;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.print(seriesSum(N));\n  }\n}\n", "python": "def seriesSum(n):\n    sum1 = 0\n    currProd = 1\n    currSum = 1\n    for i in range(2, n + 1):\n        currProd *= i\n        currSum += i\n        sum1 += currProd - currSum\n    return sum1\n\n\nN = 5\nprint(seriesSum(N), end=\" \u2581 \")\n"}
{"text": "Smallest N digit number divisible by N ", "java": "import java.util.*;\n\nclass GFG {\n  static int smallestNumber(int N) {\n    return (int) (N * Math.ceil(Math.pow(10, (N - 1)) / N));\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    System.out.print(smallestNumber(N));\n  }\n}\n", "python": "import math\n\n\ndef smallestNumber(N):\n    return N * math.ceil(pow(10, (N - 1)) // N)\n\n\nN = 2\nprint(smallestNumber(N))\n"}
{"text": "Check if A can be converted to B by reducing with a Prime number ", "java": "class GFG {\n  static boolean isPossible(int A, int B) {\n    return (A - B > 1);\n  }\n\n  public static void main(String[] args) {\n    int A = 10, B = 4;\n    if (isPossible(A, B)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def isPossible(A, B):\n    return A - B > 1\n\n\nA = 10\nB = 4\nif isPossible(A, B):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Product of N terms of a given Geometric series ", "java": "import java.util.*;\n\nclass GFG {\n  static float productOfGP(float a, float r, int n) {\n    float product = 1;\n    for (int i = 0; i < n; i++) {\n      product = product * a;\n      a = a * r;\n    }\n    return product;\n  }\n\n  public static void main(String args[]) {\n    float a = 1, r = 2;\n    int N = 4;\n    System.out.print(productOfGP(a, r, N));\n  }\n}\n", "python": "def productOfGP(a, r, n):\n    product = 1\n    for i in range(0, n):\n        product = product * a\n        a = a * r\n    return product\n\n\na = 1\nr = 2\nN = 4\nprint(productOfGP(a, r, N))\n"}
{"text": "Sum of given N fractions in reduced form ", "java": "import java.util.*;\n\nclass GFG {\n  static int gcd(int a, int b) {\n    if (b == 0) {\n      return a;\n    }\n    return gcd(b, a % b);\n  }\n\n  static int findlcm(int arr[], int n) {\n    int ans = arr[0];\n    for (int i = 1; i < n; i++) {\n      ans = (((arr[i] * ans)) / (gcd(arr[i], ans)));\n    }\n    return ans;\n  }\n\n  static void addReduce(int n, int num[], int den[]) {\n    int final_numerator = 0;\n    int final_denominator = findlcm(den, n);\n    for (int i = 0; i < n; i++) {\n      final_numerator = final_numerator + (num[i]) * (final_denominator / den[i]);\n    }\n    int GCD = gcd(final_numerator, final_denominator);\n    final_numerator /= GCD;\n    final_denominator /= GCD;\n    System.out.println(final_numerator + \" / \" + final_denominator);\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    int arr1[] = {1, 2, 5};\n    int arr2[] = {2, 1, 6};\n    addReduce(N, arr1, arr2);\n  }\n}\n", "python": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef findlcm(arr, n):\n    ans = arr[0]\n    for i in range(1, n):\n        ans = ((arr[i] * ans)) // (gcd(arr[i], ans))\n    return ans\n\n\ndef addReduce(n, num, den):\n    final_numerator = 0\n    final_denominator = findlcm(den, n)\n    for i in range(n):\n        final_numerator = final_numerator + (num[i]) * (final_denominator // den[i])\n    GCD = gcd(final_numerator, final_denominator)\n    final_numerator //= GCD\n    final_denominator //= GCD\n    print(final_numerator, \" / \", final_denominator)\n\n\nN = 3\narr1 = [1, 2, 5]\narr2 = [2, 1, 6]\naddReduce(N, arr1, arr2)\n"}
{"text": "Count of integers up to N which represent a Binary number ", "java": "import java.util.*;\n\nclass GFG {\n  static int countBinaries(int N) {\n    int ctr = 1;\n    int ans = 0;\n    while (N > 0) {\n      if (N % 10 == 1) {\n        ans += Math.pow(2, ctr - 1);\n      } else if (N % 10 > 1) {\n        ans = (int) (Math.pow(2, ctr) - 1);\n      }\n      ctr++;\n      N /= 10;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 20;\n    System.out.print(countBinaries(N));\n  }\n}\n", "python": "from math import *\n\n\ndef countBinaries(N):\n    ctr = 1\n    ans = 0\n    while N > 0:\n        if N % 10 == 1:\n            ans += pow(2, ctr - 1)\n        elif N % 10 > 1:\n            ans = pow(2, ctr) - 1\n        ctr += 1\n        N //= 10\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 20\n    print(int(countBinaries(N)))\n"}
{"text": "Count of integers up to N which represent a Binary number ", "java": "import java.util.*;\n\nclass GFG {\n  static int countBinaries(int N) {\n    Vector<Integer> powersOfTwo = new Vector<Integer>(11);\n    powersOfTwo.add(1);\n    for (int i = 1; i < 11; i++) {\n      powersOfTwo.add(powersOfTwo.get(i - 1) * 2);\n    }\n    int ctr = 1;\n    int ans = 0;\n    while (N > 0) {\n      if (N % 10 == 1) {\n        ans += powersOfTwo.get(ctr - 1);\n      } else if (N % 10 > 1) {\n        ans = powersOfTwo.get(ctr) - 1;\n      }\n      ctr++;\n      N /= 10;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 20;\n    System.out.print(countBinaries(N));\n  }\n}\n", "python": "from math import *\n\n\ndef countBinaries(N):\n    ctr = 1\n    ans = 0\n    while N > 0:\n        if N % 10 == 1:\n            ans += pow(2, ctr - 1)\n        elif N % 10 > 1:\n            ans = pow(2, ctr) - 1\n        ctr += 1\n        N //= 10\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 20\n    print(int(countBinaries(N)))\n"}
{"text": "Find the sum of the first Nth Centered Hexadecagonal Number ", "java": "class GFG {\n  public static int Centered_Hexadecagonal_num(int n) {\n    return (8 * n * n - 8 * n + 1);\n  }\n\n  public static int sum_Centered_Hexadecagonal_num(int n) {\n    int summ = 0;\n    for (int i = 1; i < n + 1; i++) {\n      summ += Centered_Hexadecagonal_num(i);\n    }\n    return summ;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(sum_Centered_Hexadecagonal_num(n));\n  }\n}\n", "python": "def Centered_Hexadecagonal_num(n):\n    return 8 * n * n - 8 * n + 1\n\n\ndef sum_Centered_Hexadecagonal_num(n):\n    summ = 0\n    for i in range(1, n + 1):\n        summ += Centered_Hexadecagonal_num(i)\n    return summ\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(sum_Centered_Hexadecagonal_num(n))\n"}
{"text": "Find the sum of the first N Centered heptagonal number ", "java": "class GFG {\n  public static int center_heptagonal_num(int n) {\n    return (7 * n * n - 7 * n + 2) / 2;\n  }\n\n  public static int sum_center_heptagonal_num(int n) {\n    int summ = 0;\n    for (int i = 1; i < n + 1; i++) {\n      summ += center_heptagonal_num(i);\n    }\n    return summ;\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.print(sum_center_heptagonal_num(n));\n  }\n}\n", "python": "def center_heptagonal_num(n):\n    return (7 * n * n - 7 * n + 2) // 2\n\n\ndef sum_center_heptagonal_num(n):\n    summ = 0\n    for i in range(1, n + 1):\n        summ += center_heptagonal_num(i)\n    return summ\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(sum_center_heptagonal_num(n))\n"}
{"text": "Find the sum of the first N Centered Dodecagonal Number ", "java": "class GFG {\n  static int Centered_Dodecagonal_num(int n) {\n    return 6 * n * (n - 1) + 1;\n  }\n\n  static int sum_Centered_Dodecagonal_num(int n) {\n    int summ = 0;\n    for (int i = 1; i < n + 1; i++) {\n      summ += Centered_Dodecagonal_num(i);\n    }\n    return summ;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.print(sum_Centered_Dodecagonal_num(n));\n  }\n}\n", "python": "def Centered_Dodecagonal_num(n):\n    return 6 * n * (n - 1) + 1\n\n\ndef sum_Centered_Dodecagonal_num(n):\n    summ = 0\n    for i in range(1, n + 1):\n        summ += Centered_Dodecagonal_num(i)\n    return summ\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(sum_Centered_Dodecagonal_num(n))\n"}
{"text": "Find the sum of the first N Centered Octagonal Number ", "java": "class GFG {\n  static int center_Octagonal_num(int n) {\n    return (4 * n * n - 4 * n + 1);\n  }\n\n  static int sum_center_Octagonal_num(int n) {\n    int summ = 0;\n    for (int i = 1; i < n + 1; i++) {\n      summ += center_Octagonal_num(i);\n    }\n    return summ;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(sum_center_Octagonal_num(n));\n  }\n}\n", "python": "def center_Octagonal_num(n):\n    return 4 * n * n - 4 * n + 1\n\n\ndef sum_center_Octagonal_num(n):\n    summ = 0\n    for i in range(1, n + 1):\n        summ += center_Octagonal_num(i)\n    return summ\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(sum_center_Octagonal_num(n))\n"}
{"text": "Find the sum of the first N Centered Decagonal Numbers ", "java": "class GFG {\n  static int Centered_decagonal_num(int n) {\n    return (5 * n * n - 5 * n + 1);\n  }\n\n  static int sum_Centered_decagonal_num(int n) {\n    int summ = 0;\n    for (int i = 1; i < n + 1; i++) {\n      summ += Centered_decagonal_num(i);\n    }\n    return summ;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(sum_Centered_decagonal_num(n));\n  }\n}\n", "python": "def Centered_decagonal_num(n):\n    return 5 * n * n - 5 * n + 1\n\n\ndef sum_Centered_decagonal_num(n):\n    summ = 0\n    for i in range(1, n + 1):\n        summ += Centered_decagonal_num(i)\n    return summ\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(sum_Centered_decagonal_num(n))\n"}
{"text": "Find the sum of the first N Centered Octadecagonal Numbers ", "java": "class GFG {\n  static int center_octadecagon_num(int n) {\n    return (9 * n * n - 9 * n + 1);\n  }\n\n  static int sum_center_octadecagon_num(int n) {\n    int summ = 0;\n    for (int i = 1; i < n + 1; i++) {\n      summ += center_octadecagon_num(i);\n    }\n    return summ;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(sum_center_octadecagon_num(n));\n  }\n}\n", "python": "def center_octadecagon_num(n):\n    return 9 * n * n - 9 * n + 1\n\n\ndef sum_center_octadecagon_num(n):\n    summ = 0\n    for i in range(1, n + 1):\n        summ += center_octadecagon_num(i)\n    return summ\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(sum_center_octadecagon_num(n))\n"}
{"text": "Find the sum of the first Nth Centered Pentadecagonal Number ", "java": "class GFG {\n  static int Centered_Pentadecagonal_num(int n) {\n    return (15 * n * n - 15 * n + 2) / 2;\n  }\n\n  static int sum_Centered_Pentadecagonal_num(int n) {\n    int summ = 0;\n    for (int i = 1; i < n + 1; i++) {\n      summ += Centered_Pentadecagonal_num(i);\n    }\n    return summ;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(sum_Centered_Pentadecagonal_num(n));\n  }\n}\n", "python": "def Centered_Pentadecagonal_num(n):\n    return (15 * n * n - 15 * n + 2) // 2\n\n\ndef sum_Centered_Pentadecagonal_num(n):\n    summ = 0\n    for i in range(1, n + 1):\n        summ += Centered_Pentadecagonal_num(i)\n    return summ\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(sum_Centered_Pentadecagonal_num(n))\n"}
{"text": "Program to check if N is a Octagonal Number ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static boolean isoctagonal(int N) {\n    double n = (2 + Math.sqrt(12 * N + 4)) / 6;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    if (isoctagonal(N)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "from math import sqrt\n\n\ndef isoctagonal(N):\n    n = (2 + sqrt(12 * N + 4)) / 6\n    return (n - int(n)) == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    if isoctagonal(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Program to check if N is a Pentadecagonal Number ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static boolean isPentadecagon(int N) {\n    double n = (11 + Math.sqrt(104 * N + 121)) / 26;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 15;\n    if (isPentadecagon(N)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "from math import sqrt\n\n\ndef isPentadecagon(N):\n    n = (11 + sqrt(104 * N + 121)) / 26\n    return n - int(n) == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 15\n    if isPentadecagon(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Program to check if N is a Tetradecagonal Number ", "java": "\nclass GFG {\n  public static boolean istetradecagonal(int N) {\n    double n = (10 + Math.sqrt(96 * N + 100)) / 24;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 11;\n    if (istetradecagonal(N)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef istetradecagonal(N):\n    n = (10 + math.sqrt(96 * N + 100)) / 24\n    if (n - int(n)) == 0:\n        return True\n    return False\n\n\nN = 11\nif istetradecagonal(N):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Find the sum of the first Nth Icosagonal Numbers ", "java": "class GFG {\n  public static int Icosagonal_num(int n) {\n    return (18 * n * n - 16 * n) / 2;\n  }\n\n  public static int sum_Icosagonal_num(int n) {\n    int summ = 0;\n    for (int i = 1; i <= n; i++) {\n      summ += Icosagonal_num(i);\n    }\n    return summ;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(sum_Icosagonal_num(n));\n  }\n}\n", "python": "def Icosagonal_num(n):\n    return (18 * n * n - 16 * n) // 2\n\n\ndef sum_Icosagonal_num(n):\n    summ = 0\n    for i in range(1, n + 1):\n        summ += Icosagonal_num(i)\n    return summ\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(sum_Icosagonal_num(n))\n"}
{"text": "Find the sum of the first N Centered Pentagonal Number ", "java": "class GFG {\n  static int Centered_Pentagonal_num(int n) {\n    return (5 * n * n - 5 * n + 2) / 2;\n  }\n\n  static int sum_Centered_Pentagonal_num(int n) {\n    int summ = 0;\n    for (int i = 1; i < n + 1; i++) {\n      summ += Centered_Pentagonal_num(i);\n    }\n    return summ;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.print((sum_Centered_Pentagonal_num(n)));\n  }\n}\n", "python": "def Centered_Pentagonal_num(n):\n    return (5 * n * n - 5 * n + 2) // 2\n\n\ndef sum_Centered_Pentagonal_num(n):\n    summ = 0\n    for i in range(1, n + 1):\n        summ += Centered_Pentagonal_num(i)\n    return summ\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(sum_Centered_Pentagonal_num(n))\n"}
{"text": "Find the sum of the first Nth Centered Tridecagonal Numbers ", "java": "class GFG {\n  public static int Centered_tridecagonal_num(int n) {\n    return (13 * n * (n - 1) + 2) / 2;\n  }\n\n  public static int sum_Centered_tridecagonal_num(int n) {\n    int summ = 0;\n    for (int i = 1; i <= n; i++) {\n      summ += Centered_tridecagonal_num(i);\n    }\n    return summ;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(sum_Centered_tridecagonal_num(n));\n  }\n}\n", "python": "def Centered_tridecagonal_num(n):\n    return (13 * n * (n - 1) + 2) // 2\n\n\ndef sum_Centered_tridecagonal_num(n):\n    summ = 0\n    for i in range(1, n + 1):\n        summ += Centered_tridecagonal_num(i)\n    return summ\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(sum_Centered_tridecagonal_num(n))\n"}
{"text": "Program to check if N is a Concentric Hexagonal Number ", "java": "class GFG {\n  static boolean isConcentrichexagonal(int N) {\n    float n = (float) Math.sqrt((2 * N) / 3);\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 6;\n    if (isConcentrichexagonal(N)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isConcentrichexagonal(N):\n    n = math.sqrt((2 * N) / 3)\n    return (n - int(n)) == 0\n\n\nN = 6\nif isConcentrichexagonal(N):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Count of ways to write N as a sum of three numbers ", "java": "class GFG {\n  static void countWays(int n) {\n    if (n <= 2) {\n      System.out.print(\" - 1\");\n    } else {\n      int ans = (n - 1) * (n - 2) / 2;\n      System.out.print(ans);\n    }\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    countWays(N);\n  }\n}\n", "python": "def countWays(N):\n    if N <= 2:\n        print(\" - 1\")\n    else:\n        ans = (N - 1) * (N - 2) / 2\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    countWays(N)\n"}
{"text": "Logarithm tricks for Competitive Programming ", "java": "\nclass GFG {\n  public static boolean isPowerOfTwo(int n) {\n    return (Math.ceil(Math.log(n) / Math.log(2)) == Math.floor(Math.log(n) / Math.log(2)));\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    if (isPowerOfTwo(N)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isPowerOfTwo(n):\n    return math.ceil(math.log(n) // math.log(2)) == math.floor(\n        math.log(n) // math.log(2)\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    if isPowerOfTwo(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Print any pair of integers with sum of GCD and LCM equals to N ", "java": "class GFG {\n  static void printPair(int n) {\n    System.out.print(1 + \" \u2581 \" + (n - 1));\n  }\n\n  public static void main(String[] args) {\n    int n = 14;\n    printPair(n);\n  }\n}\n", "python": "def printPair(n):\n    print(\"1\", end=\" \u2581 \")\n    print(n - 1)\n\n\nn = 14\nprintPair(n)\n"}
{"text": "Number of ways to color boundary of each block of M * N table ", "java": "import java.util.*;\n\nclass GFG {\n  static int CountWays(int N, int M) {\n    int count = 1;\n    count = (int) Math.pow(3, M + N);\n    count *= (int) Math.pow(2, M * N);\n    return count;\n  }\n\n  public static void main(String args[]) {\n    int N = 3;\n    int M = 2;\n    System.out.println(CountWays(N, M));\n  }\n}\n", "python": "def CountWays(N, M):\n    count = 1\n    count = pow(3, M + N)\n    count *= pow(2, M * N)\n    return count\n\n\nN = 3\nM = 2\nprint(CountWays(N, M))\n"}
{"text": "Unique element in an array where all elements occur K times except one ", "java": "import java.util.*;\n\nclass GFG {\n  static void findUniqueElements(int arr[], int N, int K) {\n    Set<Integer> s = new HashSet<>();\n    for (int i = 0; i < N; i++) s.add(arr[i]);\n    int arr_sum = 0;\n    for (int i = 0; i < N; i++) arr_sum += arr[i];\n    int set_sum = 0;\n    Iterator it = s.iterator();\n    while (it.hasNext()) {\n      set_sum += (int) it.next();\n    }\n    System.out.println((K * set_sum - arr_sum) / (K - 1));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {12, 1, 12, 3, 12, 1, 1, 2, 3, 2, 2, 3, 7};\n    int N = arr.length;\n    int K = 3;\n    findUniqueElements(arr, N, K);\n  }\n}\n", "python": "def findUniqueElements(arr, N, K):\n    s = set()\n    for x in arr:\n        s.add(x)\n    arr_sum = sum(arr)\n    set_sum = 0\n    for x in s:\n        set_sum += x\n    print((K * set_sum - arr_sum) // (K - 1))\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [12, 1, 12, 3, 12, 1, 1, 2, 3, 2, 2, 3, 7]\n    N = len(arr)\n    K = 3\n    findUniqueElements(arr, N, K)\n"}
{"text": "Form the Cubic equation from the given roots ", "java": "class GFG {\n  static void findEquation(int a, int b, int c) {\n    int X = (a + b + c);\n    int Y = (a * b) + (b * c) + (c * a);\n    int Z = a * b * c;\n    System.out.print(\" x ^ 3 \u2581 - \u2581 \" + X + \" x ^ 2 \u2581 + \u2581 \" + Y + \" x \u2581 - \u2581 \" + Z + \" \u2581 = \u2581 0\");\n  }\n\n  public static void main(String[] args) {\n    int a = 5, b = 2, c = 3;\n    findEquation(a, b, c);\n  }\n}\n", "python": "def findEquation(a, b, c):\n    X = a + b + c\n    Y = (a * b) + (b * c) + (c * a)\n    Z = a * b * c\n    print(\" x ^ 3 \u2581 - \u2581 \", X, \" x ^ 2 \u2581 + \u2581 \", Y, \" x \u2581 - \u2581 \", Z, \" \u2581 = \u2581 0\")\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 5\n    b = 2\n    c = 3\n    findEquation(a, b, c)\n"}
{"text": "Gill 's 4th Order Method to solve Differential Equations ", "java": "class GFG {\n  static double dydx(double x, double y) {\n    return (x - y) / 2;\n  }\n\n  static double Gill(double x0, double y0, double x, double h) {\n    int n = (int) ((x - x0) / h);\n    double k1, k2, k3, k4;\n    double y = y0;\n    for (int i = 1; i <= n; i++) {\n      k1 = h * dydx(x0, y);\n      k2 = h * dydx(x0 + 0.5 * h, y + 0.5 * k1);\n      k3 =\n          h\n              * dydx(\n                  x0 + 0.5 * h, y + 0.5 * (-1 + Math.sqrt(2)) * k1 + k2 * (1 - 0.5 * Math.sqrt(2)));\n      k4 = h * dydx(x0 + h, y - (0.5 * Math.sqrt(2)) * k2 + k3 * (1 + 0.5 * Math.sqrt(2)));\n      y = y + (1.0 / 6) * (k1 + (2 - Math.sqrt(2)) * k2 + (2 + Math.sqrt(2)) * k3 + k4);\n      x0 = x0 + h;\n    }\n    return y;\n  }\n\n  public static void main(String[] args) {\n    double x0 = 0, y = 3.0, x = 5.0, h = 0.2;\n    System.out.printf(\" y ( x ) \u2581 = \u2581 % .6f \", Gill(x0, y, x, h));\n  }\n}\n", "python": "from math import sqrt\n\n\ndef dydx(x, y):\n    return (x - y) / 2\n\n\ndef Gill(x0, y0, x, h):\n    n = (x - x0) / h\n    y = y0\n    for i in range(1, int(n + 1), 1):\n        k1 = h * dydx(x0, y)\n        k2 = h * dydx(x0 + 0.5 * h, y + 0.5 * k1)\n        k3 = h * dydx(\n            x0 + 0.5 * h, y + 0.5 * (-1 + sqrt(2)) * k1 + k2 * (1 - 0.5 * sqrt(2))\n        )\n        k4 = h * dydx(x0 + h, y - (0.5 * sqrt(2)) * k2 + k3 * (1 + 0.5 * sqrt(2)))\n        y = y + (1 / 6) * (k1 + (2 - sqrt(2)) * k2 + (2 + sqrt(2)) * k3 + k4)\n        x0 = x0 + h\n    return y\n\n\nif __name__ == \" _ _ main _ _ \":\n    x0 = 0\n    y = 3.0\n    x = 5.0\n    h = 0.2\n    print(\" y ( x ) \u2581 = \", round(Gill(x0, y, x, h), 6))\n"}
{"text": "Minimum decrements to make integer A divisible by integer B ", "java": "import java.util.*;\n\nclass GFG {\n  static void movesRequired(int a, int b) {\n    int total_moves = a % b;\n    System.out.println(total_moves);\n  }\n\n  public static void main(String[] args) {\n    int A = 10, B = 3;\n    movesRequired(A, B);\n  }\n}\n", "python": "def movesRequired(a, b):\n    total_moves = a % b\n    print(total_moves)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = 10\n    B = 3\n    movesRequired(A, B)\n"}
{"text": "Minimum number of operations to convert array A to array B by adding an integer into a subarray ", "java": "class GFG {\n  static void checkArray(int a[], int b[], int n) {\n    int operations = 0;\n    int i = 0;\n    while (i < n) {\n      if (a[i] - b[i] == 0) {\n        i++;\n        continue;\n      }\n      int diff = a[i] - b[i];\n      i++;\n      while (i < n && a[i] - b[i] == diff) {\n        i++;\n      }\n      operations++;\n    }\n    System.out.println(operations);\n  }\n\n  public static void main(String[] args) {\n    int a[] = {3, 7, 1, 4, 1, 2};\n    int b[] = {3, 7, 3, 6, 3, 2};\n    int size = a.length;\n    checkArray(a, b, size);\n  }\n}\n", "python": "def checkArray(a, b, n):\n    operations = 0\n    i = 0\n    while i < n:\n        if a[i] - b[i] == 0:\n            i += 1\n            continue\n        diff = a[i] - b[i]\n        i += 1\n        while i < n and a[i] - b[i] == diff:\n            i += 1\n        operations += 1\n    print(operations)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [3, 7, 1, 4, 1, 2]\n    b = [3, 7, 3, 6, 3, 2]\n    size = len(a)\n    checkArray(a, b, size)\n"}
{"text": "Length of Smallest subarray in range 1 to N with sum greater than a given value ", "java": "class GFG {\n  static int countNumber(int N, int S) {\n    int countElements = 0;\n    int currSum = 0;\n    while (currSum <= S) {\n      currSum += N;\n      N--;\n      countElements++;\n    }\n    return countElements;\n  }\n\n  public static void main(String[] args) {\n    int N, S;\n    N = 5;\n    S = 11;\n    int count = countNumber(N, S);\n    System.out.println(count);\n  }\n}\n", "python": "def countNumber(N, S):\n    countElements = 0\n    currSum = 0\n    while currSum <= S:\n        currSum += N\n        N = N - 1\n        countElements = countElements + 1\n    return countElements\n\n\nN = 5\nS = 11\ncount = countNumber(N, S)\nprint(count)\n"}
{"text": "Find maximum unreachable height using two ladders ", "java": "class GFG {\n  static int maxHeight(int h1, int h2) {\n    return ((h1 * h2) - h1 - h2);\n  }\n\n  public static void main(String args[]) {\n    int h1 = 7, h2 = 5;\n    System.out.println(Math.max(0, maxHeight(h1, h2)));\n  }\n}\n", "python": "def maxHeight(h1, h2):\n    return (h1 * h2) - h1 - h2\n\n\nh1 = 7\nh2 = 5\nprint(max(0, maxHeight(h1, h2)))\n"}
{"text": "Append two elements to make the array satisfy the given condition ", "java": "class GFG {\n  static void findNums(int arr[], int n) {\n    int S = 0, X = 0;\n    for (int i = 0; i < n; i++) {\n      S += arr[i];\n      X ^= arr[i];\n    }\n    System.out.println(X + \" \u2581 \" + (X + S));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 7};\n    int n = arr.length;\n    findNums(arr, n);\n  }\n}\n", "python": "def findNums(arr, n):\n    S = 0\n    X = 0\n    for i in range(n):\n        S += arr[i]\n        X ^= arr[i]\n    print(X, X + S)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 7]\n    n = len(arr)\n    findNums(arr, n)\n"}
{"text": "Satisfy the parabola when point ( A , B ) and the equation is given ", "java": "class GFG {\n  static void solve(int A, int B) {\n    double p = B / 2.0;\n    double M = Math.ceil(4 * p);\n    int N = 1;\n    int O = -2 * A;\n    double Q = Math.ceil(A * A + 4 * p * p);\n    System.out.println(M + \" \u2581 \" + N + \" \u2581 \" + O + \" \u2581 \" + Q);\n  }\n\n  public static void main(String[] args) {\n    int a = 1;\n    int b = 1;\n    solve(a, b);\n  }\n}\n", "python": "def solve(A, B):\n    p = B / 2\n    M = int(4 * p)\n    N = 1\n    O = -2 * A\n    Q = int(A * A + 4 * p * p)\n    return [M, N, O, Q]\n\n\na = 1\nb = 1\nprint(*solve(a, b))\n"}
{"text": "Largest number dividing maximum number of elements in the array ", "java": "class GFG {\n  static int findLargest(int[] arr, int n) {\n    int gcd = 0;\n    for (int i = 0; i < n; i++) gcd = __gcd(arr[i], gcd);\n    return gcd;\n  }\n\n  static int __gcd(int a, int b) {\n    return b == 0 ? a : __gcd(b, a % b);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 6, 9};\n    int n = arr.length;\n    System.out.print(findLargest(arr, n));\n  }\n}\n", "python": "from math import gcd as __gcd\n\n\ndef findLargest(arr, n):\n    gcd = 0\n    for i in range(n):\n        gcd = __gcd(arr[i], gcd)\n    return gcd\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 6, 9]\n    n = len(arr)\n    print(findLargest(arr, n))\n"}
{"text": "Check if the sum of digits of N is palindrome ", "java": "import java.util.*;\n\nclass GFG {\n  static int digitSum(int n) {\n    int sum = 0;\n    while (n > 0) {\n      sum += (n % 10);\n      n /= 10;\n    }\n    return sum;\n  }\n\n  static boolean isPalindrome(int n) {\n    int divisor = 1;\n    while (n / divisor >= 10) divisor *= 10;\n    while (n != 0) {\n      int leading = n / divisor;\n      int trailing = n % 10;\n      if (leading != trailing) return false;\n      n = (n % divisor) / 10;\n      divisor = divisor / 100;\n    }\n    return true;\n  }\n\n  static boolean isDigitSumPalindrome(int n) {\n    int sum = digitSum(n);\n    if (isPalindrome(sum)) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 56;\n    if (isDigitSumPalindrome(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def digitSum(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n\n\ndef isPalindrome(n):\n    divisor = 1\n    while n // divisor >= 10:\n        divisor *= 10\n    while n != 0:\n        leading = n // divisor\n        trailing = n % 10\n        if leading != trailing:\n            return False\n        n = (n % divisor) // 10\n        divisor = divisor // 100\n    return True\n\n\ndef isDigitSumPalindrome(n):\n    sum = digitSum(n)\n    if isPalindrome(sum):\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 56\n    if isDigitSumPalindrome(n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Find the value of N XOR 'ed to itself K times ", "java": "class GFG {\n  static int xorK(int n, int k) {\n    if (k % 2 == 1) return n;\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int n = 123, k = 3;\n    System.out.print(xorK(n, k));\n  }\n}\n", "python": "def xorK(n, k):\n    if k % 2 == 1:\n        return n\n    return 0\n\n\nn = 123\nk = 3\nprint(xorK(n, k))\n"}
{"text": "Find the Nth digit in the proper fraction of two numbers ", "java": "class GFG {\n  static int findNthDigit(int p, int q, int N) {\n    int res = 0;\n    while (N > 0) {\n      N--;\n      p *= 10;\n      res = p / q;\n      p %= q;\n    }\n    return res;\n  }\n\n  public static void main(String args[]) {\n    int p = 1, q = 2, N = 1;\n    System.out.println(findNthDigit(p, q, N));\n  }\n}\n", "python": "def findNthDigit(p, q, N):\n    while N > 0:\n        N -= 1\n        p *= 10\n        res = p // q\n        p %= q\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    p = 1\n    q = 2\n    N = 1\n    print(findNthDigit(p, q, N))\n"}
{"text": "Sum of the updated array after performing the given operation ", "java": "class GFG {\n  static int sumArr(int arr[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum += arr[i];\n    return sum;\n  }\n\n  static int sumModArr(int arr[], int n) {\n    int subSum = arr[n - 1];\n    for (int i = n - 2; i >= 0; i--) {\n      int curr = arr[i];\n      arr[i] -= subSum;\n      subSum += curr;\n    }\n    return sumArr(arr, n);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {40, 25, 12, 10};\n    int n = arr.length;\n    System.out.println(sumModArr(arr, n));\n  }\n}\n", "python": "def sumArr(arr, n):\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    return sum\n\n\ndef sumModArr(arr, n):\n    subSum = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        curr = arr[i]\n        arr[i] -= subSum\n        subSum += curr\n    return sumArr(arr, n)\n\n\narr = [40, 25, 12, 10]\nn = len(arr)\nprint(sumModArr(arr, n))\n"}
{"text": "Cake Distribution Problem ", "java": "class GFG {\n  static int cntCakes(int n, int m) {\n    int sum = (n * (n + 1)) / 2;\n    int quo = m / sum;\n    int rem = m % sum;\n    double ans = m - quo * sum;\n    double x = (-1 + Math.pow((8 * rem) + 1, 0.5)) / 2;\n    ans = ans - x * (x + 1) / 2;\n    return (int) ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    int m = 8;\n    int ans = cntCakes(n, m);\n    System.out.println(ans);\n  }\n}\n", "python": "def cntCakes(n, m):\n    sum = (n * (n + 1)) // 2\n    quo, rem = m // sum, m % sum\n    ans = m - quo * sum\n    x = int((-1 + (8 * rem + 1) ** 0.5) / 2)\n    ans = ans - x * (x + 1) // 2\n    return ans\n\n\ndef main():\n    n = 4\n    m = 11\n    ans = cntCakes(n, m)\n    print(ans)\n\n\nmain()\n"}
{"text": "Find the number of squares inside the given square grid ", "java": "class GFG {\n  static int cntSquares(int n) {\n    return n * (n + 1) * (2 * n + 1) / 6;\n  }\n\n  public static void main(String args[]) {\n    System.out.println(cntSquares(4));\n  }\n}\n", "python": "def cntSquares(n):\n    return int(n * (n + 1) * (2 * n + 1) / 6)\n\n\nif __name__ == \" _ _ main _ _ \":\n    print(cntSquares(4))\n"}
{"text": "Count the pairs in an array such that the difference between them and their indices is equal ", "java": "import java.util.HashMap;\n\nclass GFG {\n  static int countPairs(int arr[], int n) {\n    HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n    for (int i = 0; i < n; i++) map.put(arr[i] - i, 0);\n    for (int i = 0; i < n; i++) map.put(arr[i] - i, map.get(arr[i] - i) + 1);\n    int res = 0;\n    for (int x : map.values()) {\n      int cnt = x;\n      res += ((cnt * (cnt - 1)) / 2);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 5, 6, 7, 9};\n    int n = arr.length;\n    System.out.println(countPairs(arr, n));\n  }\n}\n", "python": "def countPairs(arr, n):\n    map = dict()\n    for i in range(n):\n        map[arr[i] - i] = map.get(arr[i] - i, 0) + 1\n    res = 0\n    for x in map:\n        cnt = map[x]\n        res += (cnt * (cnt - 1)) // 2\n    return res\n\n\narr = [1, 5, 6, 7, 9]\nn = len(arr)\nprint(countPairs(arr, n))\n"}
{"text": "Reduce N to 1 with minimum number of given operations ", "java": "class GFG {\n  static long minOperations(long n) {\n    long count = 0;\n    long d = 0;\n    if (n == 1) return 0;\n    while (n > 9) {\n      d = Math.max(n % 10, d);\n      n /= 10;\n      count += 10;\n    }\n    d = Math.max(d, n - 1);\n    count += Math.abs(d);\n    return count - 1;\n  }\n\n  public static void main(String[] args) {\n    long n = 240;\n    System.out.println(minOperations(n));\n  }\n}\n", "python": "def minOperations(n):\n    count = 0\n    d = 0\n    if n == 1:\n        return 0\n    while n > 9:\n        d = max(n % 10, d)\n        n //= 10\n        count += 10\n    d = max(d, n - 1)\n    count += abs(d)\n    return count - 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 240\n    print(minOperations(n))\n"}
{"text": "Number of occurrences of a given angle formed using 3 vertices of a n ", "java": "class GFG {\n  static int solve(int ang, int n) {\n    if ((ang * n) > (180 * (n - 2))) {\n      return 0;\n    } else if ((ang * n) % 180 != 0) {\n      return 0;\n    }\n    int ans = 1;\n    int freq = (ang * n) / 180;\n    ans = ans * (n - 1 - freq);\n    ans = ans * n;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int ang = 90, n = 4;\n    System.out.println(solve(ang, n));\n  }\n}\n", "python": "def solve(ang, n):\n    if (ang * n) > (180 * (n - 2)):\n        return 0\n    elif (ang * n) % 180 != 0:\n        return 0\n    ans = 1\n    freq = (ang * n) // 180\n    ans = ans * (n - 1 - freq)\n    ans = ans * n\n    return ans\n\n\nang = 90\nn = 4\nprint(solve(ang, n))\n"}
{"text": "Total ways of selecting a group of X men from N men with or without including a particular man ", "java": "import java.io.*;\n\nclass GFG {\n  static int nCr(int n, int r) {\n    int ans = 1;\n    for (int i = 1; i <= r; i += 1) {\n      ans *= (n - r + i);\n      ans /= i;\n    }\n    return ans;\n  }\n\n  static int total_ways(int N, int X) {\n    return (nCr(N - 1, X - 1) + nCr(N - 1, X));\n  }\n\n  public static void main(String[] args) {\n    int N = 5, X = 3;\n    System.out.println(total_ways(N, X));\n  }\n}\n", "python": "def nCr(n, r):\n    ans = 1\n    for i in range(1, r + 1):\n        ans *= n - r + i\n        ans //= i\n    return ans\n\n\ndef total_ways(N, X):\n    return nCr(N - 1, X - 1) + nCr(N - 1, X)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    X = 3\n    print(total_ways(N, X))\n"}
{"text": "Maximum subsequence sum such that all elements are K distance apart ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxSubArraySum(int a[], int n, int k, int i) {\n    int max_so_far = Integer.MIN_VALUE, max_ending_here = 0;\n    while (i < n) {\n      max_ending_here = max_ending_here + a[i];\n      if (max_so_far < max_ending_here) max_so_far = max_ending_here;\n      if (max_ending_here < 0) max_ending_here = 0;\n      i += k;\n    }\n    return max_so_far;\n  }\n\n  static int find(int arr[], int n, int k) {\n    int maxSum = 0;\n    for (int i = 0; i <= Math.min(n, k); i++) {\n      int sum = 0;\n      maxSum = Math.max(maxSum, maxSubArraySum(arr, n, k, i));\n    }\n    return maxSum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, -3, -1, -1, 2};\n    int n = arr.length;\n    int k = 2;\n    System.out.println(find(arr, n, k));\n  }\n}\n", "python": "import sys\n\n\ndef maxSubArraySum(a, n, k, i):\n    max_so_far = -sys.maxsize\n    max_ending_here = 0\n    while i < n:\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n        i += k\n    return max_so_far\n\n\ndef find(arr, n, k):\n    maxSum = 0\n    for i in range(0, min(n, k) + 1):\n        sum = 0\n        maxSum = max(maxSum, maxSubArraySum(arr, n, k, i))\n    return maxSum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, -3, -1, -1, 2]\n    n = len(arr)\n    k = 2\n    print(find(arr, n, k))\n"}
{"text": "Probability that a N digit number is palindrome ", "java": "import java.util.*;\n\nclass GFG {\n  static void solve(int n) {\n    int n_2 = n / 2;\n    String den;\n    den = \"1\";\n    while (n_2-- > 0) den += '0';\n    System.out.println(1 + \" / \" + den);\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    solve(N);\n  }\n}\n", "python": "def solve(n):\n    n_2 = n // 2\n    den = \"1\"\n    while n_2:\n        den += \"0\"\n        n_2 -= 1\n    print(str(1) + \" / \" + str(den))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    solve(N)\n"}
{"text": "Ways to choose balls such that at least one ball is chosen ", "java": "class GFG {\n  static int MOD = 1000000007;\n\n  static int countWays(int n) {\n    int ans = 1;\n    for (int i = 0; i < n; i++) {\n      ans *= 2;\n      ans %= MOD;\n    }\n    return ((ans - 1 + MOD) % MOD);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(countWays(n));\n  }\n}\n", "python": "MOD = 1000000007\n\n\ndef countWays(n):\n    return ((2 ** n) - 1) % MOD\n\n\nn = 3\nprint(countWays(n))\n"}
{"text": "Proizvolov 's Identity ", "java": "class GFG {\n  static int proizvolov(int a[], int b[], int n) {\n    return n * n;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {1, 5, 6, 8, 10};\n    int b[] = {9, 7, 4, 3, 2};\n    int n = a.length;\n    System.out.println(proizvolov(a, b, n));\n  }\n}\n", "python": "def proizvolov(a, b, n):\n    return n * n\n\n\na = [1, 5, 6, 8, 10]\nb = [9, 7, 4, 3, 2]\nn = len(a)\nprint(\n    proizvolov(\n        a,\n        b,\n        n,\n    )\n)\n"}
{"text": "Find the ln ( X ) and log10X with the help of expansion ", "java": "import java.io.*;\n\nclass GFG {\n  static double calculateLnx(double n) {\n    double num, mul, cal, sum = 0;\n    num = (n - 1) / (n + 1);\n    for (int i = 1; i <= 1000; i++) {\n      mul = (2 * i) - 1;\n      cal = Math.pow(num, mul);\n      cal = cal / mul;\n      sum = sum + cal;\n    }\n    sum = 2 * sum;\n    return sum;\n  }\n\n  static double calculateLogx(double lnx) {\n    return (lnx / 2.303);\n  }\n\n  public static void main(String[] args) {\n    double lnx, logx, n = 5;\n    lnx = calculateLnx(n);\n    logx = calculateLogx(lnx);\n    System.out.println(\" ln \u2581 \" + n + \" \u2581 = \u2581 \" + lnx);\n    System.out.println(\" log10 \u2581 \" + n + \" \u2581 = \u2581 \" + logx);\n  }\n}\n", "python": "from math import pow\n\n\ndef calculateLnx(n):\n    sum = 0\n    num = (n - 1) / (n + 1)\n    for i in range(1, 1001, 1):\n        mul = (2 * i) - 1\n        cal = pow(num, mul)\n        cal = cal / mul\n        sum = sum + cal\n    sum = 2 * sum\n    return sum\n\n\ndef calculateLogx(lnx):\n    return lnx / 2.303\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    lnx = calculateLnx(n)\n    logx = calculateLogx(lnx)\n    print(\" ln \", \" { 0 : . 3f } \".format(n), \" = \", \" { 0 : . 3f } \".format(lnx))\n    print(\" log10\", \" { 0 : . 3f } \".format(n), \" = \", \" { 0 : . 3f } \".format(logx))\n"}
{"text": "Find the sum of elements of the Matrix generated by the given rules ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int sum(int A, int B, int R) {\n    int sum = 0;\n    for (int i = 1; i <= R; i++) {\n      sum = sum + (i * A);\n      A = A + B;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) throws java.lang.Exception {\n    int A = 5, B = 3, R = 3;\n    System.out.print(sum(A, B, R));\n  }\n}\n", "python": "def Sum(A, B, R):\n    ssum = 0\n    for i in range(1, R + 1):\n        ssum = ssum + (i * A)\n        A = A + B\n    return ssum\n\n\nA, B, R = 5, 3, 3\nprint(Sum(A, B, R))\n"}
{"text": "Count total set bits in all numbers from 1 to n ", "java": "class GFG {\n  static int countSetBits(int n) {\n    n++;\n    int powerOf2 = 2;\n    int cnt = n / 2;\n    while (powerOf2 <= n) {\n      int totalPairs = n / powerOf2;\n      cnt += (totalPairs / 2) * powerOf2;\n      cnt += (totalPairs % 2 == 1) ? (n % powerOf2) : 0;\n      powerOf2 <<= 1;\n    }\n    return cnt;\n  }\n\n  public static void main(String[] args) {\n    int n = 14;\n    System.out.println(countSetBits(n));\n  }\n}\n", "python": "def countSetBits(n):\n    n += 1\n    powerOf2 = 2\n    cnt = n // 2\n    while powerOf2 <= n:\n        totalPairs = n // powerOf2\n        cnt += (totalPairs // 2) * powerOf2\n        if totalPairs & 1:\n            cnt += n % powerOf2\n        else:\n            cnt += 0\n        powerOf2 <<= 1\n    return cnt\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 14\n    print(countSetBits(n))\n"}
{"text": "Find the height of a right ", "java": "import java.io.*;\nimport java.util.*;\n\nclass Gfg {\n  static int getHeight(int X) {\n    return (2 * X);\n  }\n\n  public static void main(String[] args) throws java.lang.Exception {\n    int X = 35;\n    System.out.println(getHeight(X));\n  }\n}\n", "python": "def getHeight(X):\n    return 2 * X\n\n\nif __name__ == \" _ _ main _ _ \":\n    X = 35\n    print(getHeight(X))\n"}
{"text": "Find sum of inverse of the divisors when sum of divisors and the number is given ", "java": "import java.io.*;\nimport java.math.*;\n\nclass GFG {\n  static double SumofInverseDivisors(int N, int Sum) {\n    double ans = (double) (Sum) * 1.0 / (double) (N);\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 9;\n    int Sum = 13;\n    System.out.println(SumofInverseDivisors(N, Sum));\n  }\n}\n", "python": "def SumofInverseDivisors(N, Sum):\n    ans = float(Sum) * 1.0 / float(N)\n    return round(ans, 2)\n\n\nN = 9\nSum = 13\nprint SumofInverseDivisors(N, Sum)\n"}
{"text": "Find a number containing N ", "java": "import java.io.*;\n\nclass GFG {\n  static int findNumber(int n) {\n    int num = n - 1;\n    num = 2 * (int) Math.pow(4, num);\n    num = (int) Math.floor(num / 3.0);\n    return num;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(findNumber(n));\n  }\n}\n", "python": "def findNumber(n):\n    num = n - 1\n    num = 2 * (4 ** num)\n    num = num // 3\n    return num\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(findNumber(n))\n"}
{"text": "Number of trees whose sum of degrees of all the vertices is L ", "java": "import java.io.*;\n\nclass GFG {\n  static long power(int x, long y) {\n    long res = 1;\n    while (y > 0) {\n      if (y == 1) res = (res * x);\n      y = y >> 1;\n      x = (x * x);\n    }\n    return res;\n  }\n\n  static long solve(int L) {\n    int n = L / 2 + 1;\n    long ans = power(n, n - 2);\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int L = 6;\n    System.out.println(solve(L));\n  }\n}\n", "python": "def power(x, y):\n    res = 1\n    while y > 0:\n        if y % 2 == 1:\n            res = res * x\n        y = int(y) >> 1\n        x = x * x\n    return res\n\n\ndef solve(L):\n    n = L / 2 + 1\n    ans = power(n, n - 2)\n    return int(ans)\n\n\nL = 6\nprint(solve(L))\n"}
{"text": "Change one element in the given array to make it an Arithmetic Progression ", "java": "\nclass AP {\n  static void makeAP(int arr[], int n) {\n    int initial_term, common_difference;\n    if (n == 3) {\n      common_difference = arr[2] - arr[1];\n      initial_term = arr[1] - common_difference;\n    } else if ((arr[1] - arr[0]) == arr[2] - arr[1]) {\n      initial_term = arr[0];\n      common_difference = arr[1] - arr[0];\n    } else if ((arr[2] - arr[1]) == (arr[3] - arr[2])) {\n      common_difference = arr[2] - arr[1];\n      initial_term = arr[1] - common_difference;\n    } else {\n      common_difference = (arr[3] - arr[0]) / 3;\n      initial_term = arr[0];\n    }\n    for (int i = 0; i < n; i++) System.out.print(initial_term + (i * common_difference) + \" \u2581 \");\n    System.out.println();\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 3, 7};\n    int n = arr.length;\n    makeAP(arr, n);\n  }\n}\n", "python": "def makeAP(arr, n):\n    initial_term, common_difference = 0, 0\n    if n == 3:\n        common_difference = arr[2] - arr[1]\n        initial_term = arr[1] - common_difference\n    elif (arr[1] - arr[0]) == arr[2] - arr[1]:\n        initial_term = arr[0]\n        common_difference = arr[1] - arr[0]\n    elif (arr[2] - arr[1]) == (arr[3] - arr[2]):\n        common_difference = arr[2] - arr[1]\n        initial_term = arr[1] - common_difference\n    else:\n        common_difference = (arr[3] - arr[0]) / 3\n        initial_term = arr[0]\n    for i in range(n):\n        print(int(initial_term + (i * common_difference)), end=\" \u2581 \")\n    print()\n\n\narr = [1, 3, 7]\nn = len(arr)\nmakeAP(arr, n)\n"}
{"text": "Find if nCr is divisible by the given prime ", "java": "import java.io.*;\n\nclass GFG {\n  static int getfactor(int n, int p) {\n    int pw = 0;\n    while (n != 0) {\n      n /= p;\n      pw += n;\n    }\n    return pw;\n  }\n\n  static int isDivisible(int n, int r, int p) {\n    int x1 = getfactor(n, p);\n    int x2 = getfactor(r, p);\n    int x3 = getfactor(n - r, p);\n    if (x1 > x2 + x3) return 1;\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int n = 7, r = 2, p = 7;\n    if (isDivisible(n, r, p) == 1) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def getfactor(n, p):\n    pw = 0\n    while n:\n        n //= p\n        pw += n\n    return pw\n\n\ndef isDivisible(n, r, p):\n    x1 = getfactor(n, p)\n    x2 = getfactor(r, p)\n    x3 = getfactor(n - r, p)\n    if x1 > x2 + x3:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 7\n    r = 2\n    p = 7\n    if isDivisible(n, r, p):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Choose X such that ( A xor X ) + ( B xor X ) is minimized ", "java": "import java.io.*;\n\nclass GFG {\n  public static int findX(int A, int B) {\n    return A & B;\n  }\n\n  public static int findSum(int A, int B) {\n    return A ^ B;\n  }\n\n  public static void main(String[] args) {\n    int A = 2, B = 3;\n    System.out.print(\" X \u2581 = \u2581 \" + findX(A, B) + \" , \u2581 Sum \u2581 = \u2581 \" + findSum(A, B));\n  }\n}\n", "python": "def findX(A, B):\n    j = 0\n    x = 0\n    while A or B:\n        if (A & 1) and (B & 1):\n            x += 1 << j\n        A >>= 1\n        B >>= 1\n        j += 1\n    return x\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = 2\n    B = 3\n    X = findX(A, B)\n    print(\" X \u2581 = \", X, \" , \u2581 Sum \u2581 = \", (A ^ X) + (B ^ X))\n"}
{"text": "Compare sum of first N ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isSumEqual(int ar[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n - 1; i++) sum += ar[i];\n    if (sum == ar[n - 1]) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 10};\n    int n = arr.length;\n    if (isSumEqual(arr, n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isSumEqual(ar, n):\n    sum = 0\n    for i in range(n - 1):\n        sum += ar[i]\n    if sum == ar[n - 1]:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4, 10]\n    n = len(arr)\n    if isSumEqual(arr, n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Count number of 1 s in the array after N moves ", "java": "import java.io.*;\n\nclass GFG {\n  static double perfectSquares(int a, int b) {\n    return (Math.floor(Math.sqrt(b)) - Math.ceil(Math.sqrt(a)) + 1);\n  }\n\n  static double countOnes(int arr[], int n) {\n    return perfectSquares(1, n);\n  }\n\n  public static void main(String[] args) {\n    int N = 10;\n    int arr[] = {0};\n    System.out.println(countOnes(arr, N));\n  }\n}\n", "python": "from math import sqrt, ceil, floor\n\n\ndef perfectSquares(a, b):\n    return floor(sqrt(b)) - ceil(sqrt(a)) + 1\n\n\ndef countOnes(arr, n):\n    return perfectSquares(1, n)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 10\n    arr = [0] * 10\n    print(countOnes(arr, N))\n"}
{"text": "Sum of Fibonacci Numbers in a range ", "java": "class GFG {\n  static int fib(int n) {\n    double phi = (1 + Math.sqrt(5)) / 2;\n    return (int) Math.round(Math.pow(phi, n) / Math.sqrt(5));\n  }\n\n  static int calculateSum(int l, int r) {\n    int sum = fib(r + 2) - fib(l + 1);\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int l = 4, r = 8;\n    System.out.println(calculateSum(l, r));\n  }\n}\n", "python": "import math\n\n\ndef fib(n):\n    phi = (1 + math.sqrt(5)) / 2\n    return int(round(pow(phi, n) / math.sqrt(5)))\n\n\ndef calculateSum(l, r):\n    sum = fib(r + 2) - fib(l + 1)\n    return sum\n\n\nl = 4\nr = 8\nprint(calculateSum(l, r))\n"}
{"text": "Count numbers having N 0 ' s \u2581 and \u2581 and \u2581 M \u2581 1' s with no leading zeros ", "java": "import java.io.*;\n\nclass GFG {\n  static int factorial(int f) {\n    int fact = 1;\n    for (int i = 2; i <= f; i++) fact *= (int) i;\n    return fact;\n  }\n\n  static int findPermutation(int N, int M) {\n    int permutation = factorial(N + M - 1) / (factorial(N) * factorial(M - 1));\n    return permutation;\n  }\n\n  public static void main(String[] args) {\n    int N = 3, M = 3;\n    System.out.println(findPermutation(N, M));\n  }\n}\n", "python": "def factorial(f):\n    fact = 1\n    for i in range(2, f + 1):\n        fact *= i\n    return fact\n\n\ndef findPermuatation(N, M):\n    permutation = factorial(N + M - 1) // (factorial(N) * factorial(M - 1))\n    return permutation\n\n\nN = 3\nM = 3\nprint(findPermuatation(N, M))\n"}
{"text": "Maximum value of ", "java": "class GFG {\n  static int maxValue(int n) {\n    if (n == 1) return 0;\n    return ((n * n / 2) - 1);\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.print(maxValue(n));\n  }\n}\n", "python": "def maxValue(n):\n    if n == 1:\n        return 0\n    return (n * n // 2) - 1\n\n\nn = 4\nprint(maxValue(n))\n"}
{"text": "Count permutations that are first decreasing then increasing . ", "java": "class GFG {\n  static final int mod = 1000000007;\n\n  static long power(long a, long n) {\n    if (n == 0) return 1;\n    long p = power(a, n / 2) % mod;\n    p = (p * p) % mod;\n    if ((n & 1) == 1) p = (p * a) % mod;\n    return p;\n  }\n\n  static int countPermutations(int n) {\n    if (n == 1) {\n      return 0;\n    }\n    return ((int) power(2, n - 1) - 2) % mod;\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.println(countPermutations(n));\n  }\n}\n", "python": "mod = 1000000007\n\n\ndef power(a, n):\n    if n == 0:\n        return 1\n    p = power(a, int(n / 2)) % mod\n    p = (p * p) % mod\n    if n & 1:\n        p = (p * a) % mod\n    return p\n\n\ndef countPermutations(n):\n    if n == 1:\n        return 0\n    return (power(2, n - 1) - 2) % mod\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(countPermutations(n))\n"}
{"text": "Find the count of numbers that can be formed using digits 3 , 4 only and having length at max N . ", "java": "class GFG {\n  static long numbers(int n) {\n    return (long) (Math.pow(2, n + 1)) - 2;\n  }\n\n  public static void main(String args[]) {\n    int n = 2;\n    System.out.println(numbers(n));\n  }\n}\n", "python": "def numbers(n):\n    return pow(2, n + 1) - 2\n\n\nn = 2\nprint(numbers(n))\n"}
{"text": "Ways to place 4 items in n ^ 2 positions such that no row / column contains more than one ", "java": "class GFG {\n  static long NumberofWays(int n) {\n    long x = (1l * (n) * (n - 1) * (n - 2) * (n - 3)) / (4 * 3 * 2 * 1);\n    long y = (1l * (n) * (n - 1) * (n - 2) * (n - 3));\n    return (1l * x * y);\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(NumberofWays(n));\n  }\n}\n", "python": "def NumbersofWays(n):\n    x = (n * (n - 1) * (n - 2) * (n - 3)) // (4 * 3 * 2 * 1)\n    y = n * (n - 1) * (n - 2) * (n - 3)\n    return x * y\n\n\nn = 4\nprint(NumbersofWays(n))\n"}
{"text": "Find Nth term of the series 1 , 6 , 18 , 40 , 75 , ... . ", "java": "class GFG {\n  public static int nthTerm(int N) {\n    int nth = 0;\n    nth = (N * N * (N + 1)) / 2;\n    return nth;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(N):\n    nth = 0\n    nth = (N * N * (N + 1)) // 2\n    return nth\n\n\nN = 5\nprint(nthTerm(N))\n"}
{"text": "Missing even and odd elements from the given arrays ", "java": "class GFG {\n  static void findMissingNums(int even[], int sizeEven, int odd[], int sizeOdd) {\n    int minEven = Integer.MAX_VALUE;\n    int maxEven = Integer.MIN_VALUE;\n    int minOdd = Integer.MAX_VALUE;\n    int maxOdd = Integer.MIN_VALUE;\n    int sumEvenArr = 0, sumOddArr = 0;\n    for (int i = 0; i < sizeEven; i++) {\n      minEven = Math.min(minEven, even[i]);\n      maxEven = Math.max(maxEven, even[i]);\n      sumEvenArr += even[i];\n    }\n    for (int i = 0; i < sizeOdd; i++) {\n      minOdd = Math.min(minOdd, odd[i]);\n      maxOdd = Math.max(maxOdd, odd[i]);\n      sumOddArr += odd[i];\n    }\n    int totalTerms = 0, reqSum = 0;\n    totalTerms = minEven / 2;\n    int evenSumMin = (totalTerms * (totalTerms + 1));\n    totalTerms = maxEven / 2;\n    int evenSumMax = (totalTerms * (totalTerms + 1));\n    reqSum = evenSumMax - evenSumMin + minEven;\n    System.out.println(\" Even \u2581 = \u2581 \" + (reqSum - sumEvenArr));\n    totalTerms = (minOdd / 2) + 1;\n    int oddSumMin = totalTerms * totalTerms;\n    totalTerms = (maxOdd / 2) + 1;\n    int oddSumMax = totalTerms * totalTerms;\n    reqSum = oddSumMax - oddSumMin + minOdd;\n    System.out.println(\" Odd \u2581 = \u2581 \" + (reqSum - sumOddArr));\n  }\n\n  public static void main(String[] args) {\n    int even[] = {6, 4, 8, 14, 10};\n    int sizeEven = even.length;\n    int odd[] = {7, 5, 3, 11, 13};\n    int sizeOdd = odd.length;\n    findMissingNums(even, sizeEven, odd, sizeOdd);\n  }\n}\n", "python": "import sys\n\n\ndef findMissingNums(even, sizeEven, odd, sizeOdd):\n    minEven = sys.maxsize\n    maxEven = -(sys.maxsize - 1)\n    minOdd = sys.maxsize\n    maxOdd = -(sys.maxsize - 1)\n    sumEvenArr = 0\n    sumOddArr = 0\n    for i in range(sizeEven):\n        minEven = min(minEven, even[i])\n        maxEven = max(maxEven, even[i])\n        sumEvenArr += even[i]\n    for i in range(sizeOdd):\n        minOdd = min(minOdd, odd[i])\n        maxOdd = max(maxOdd, odd[i])\n        sumOddArr += odd[i]\n    totalTerms = 0\n    reqSum = 0\n    totalTerms = minEven // 2\n    evenSumMin = totalTerms * (totalTerms + 1)\n    totalTerms = maxEven // 2\n    evenSumMax = totalTerms * (totalTerms + 1)\n    reqSum = evenSumMax - evenSumMin + minEven\n    print(\" Even \u2581 = \", reqSum - sumEvenArr)\n    totalTerms = (minOdd // 2) + 1\n    oddSumMin = totalTerms * totalTerms\n    totalTerms = (maxOdd // 2) + 1\n    oddSumMax = totalTerms * totalTerms\n    reqSum = oddSumMax - oddSumMin + minOdd\n    print(\" Odd \u2581 = \", reqSum - sumOddArr)\n\n\nif __name__ == \" _ _ main _ _ \":\n    even = [6, 4, 8, 14, 10]\n    sizeEven = len(even)\n    odd = [7, 5, 3, 11, 13]\n    sizeOdd = len(odd)\n    findMissingNums(even, sizeEven, odd, sizeOdd)\n"}
{"text": "Sum of minimum element of all subarrays of a sorted array ", "java": "class GfG {\n  static int findMinSum(int arr[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum += arr[i] * (n - i);\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 5, 7, 8};\n    int n = arr.length;\n    System.out.println(findMinSum(arr, n));\n  }\n}\n", "python": "def findMinSum(arr, n):\n    sum = 0\n    for i in range(0, n):\n        sum += arr[i] * (n - i)\n    return sum\n\n\narr = [3, 5, 7, 8]\nn = len(arr)\nprint(findMinSum(arr, n))\n"}
{"text": "Count of pairs ( x , y ) in an array such that x < y ", "java": "class GFG {\n  static int getPairs(int a[]) {\n    int n = a.length;\n    int count = (n * (n - 1)) / 2;\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {2, 4, 3, 1};\n    System.out.println(getPairs(a));\n  }\n}\n", "python": "def getPairs(a):\n    n = len(a)\n    count = (n * (n - 1)) // 2\n    return count\n\n\na = [2, 4, 3, 1]\nprint(getPairs(a))\n"}
{"text": "Count the total number of squares that can be visited by Bishop in one move ", "java": "class GFG {\n  static int countSquares(int row, int column) {\n    int topLeft = Math.min(row, column) - 1;\n    int bottomRight = 8 - Math.max(row, column);\n    int topRight = Math.min(row, 9 - column) - 1;\n    int bottomLeft = 8 - Math.max(row, 9 - column);\n    return (topLeft + topRight + bottomRight + bottomLeft);\n  }\n\n  public static void main(String[] args) {\n    int row = 4, column = 4;\n    System.out.println(countSquares(row, column));\n  }\n}\n", "python": "def countSquares(row, column):\n    topLeft = min(row, column) - 1\n    bottomRight = 8 - max(row, column)\n    topRight = min(row, 9 - column) - 1\n    bottomLeft = 8 - max(row, 9 - column)\n    return topLeft + topRight + bottomRight + bottomLeft\n\n\nrow = 4\ncolumn = 4\nprint(countSquares(row, column))\n"}
{"text": "Make all elements of an array equal with the given operation ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isPossible(int n, int k, int arr[]) {\n    int sum = arr[0];\n    int maxVal = arr[0];\n    for (int i = 1; i < n; i++) {\n      sum += arr[i];\n      maxVal = Math.max(maxVal, arr[i]);\n    }\n    if ((float) maxVal > (float) (sum + k) / n) return false;\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int k = 8;\n    int arr[] = {1, 2, 3, 4};\n    int n = arr.length;\n    if (isPossible(n, k, arr)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isPossible(n, k, arr):\n    sum = arr[0]\n    maxVal = arr[0]\n    for i in range(1, n):\n        sum += arr[i]\n        maxVal = max(maxVal, arr[i])\n    if int(maxVal) > int((sum + k) / n):\n        return False\n    return True\n\n\nif __name__ == \" _ _ main _ _ \":\n    k = 8\n    arr = [1, 2, 3, 4]\n    n = len(arr)\n    if isPossible(n, k, arr):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Count of pairs of ( i , j ) such that ( ( n % i ) % j ) % n is maximized ", "java": "class GFG {\n  public static int countPairs(int n) {\n    if (n == 2) return 4;\n    int num = ((n / 2) + 1);\n    int max = n % num;\n    int count = n - max;\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(countPairs(n));\n  }\n}\n", "python": "def countPairs(n):\n    if n == 2:\n        return 4\n    num = (n // 2) + 1\n    max = n % num\n    count = n - max\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\nprint(countPairs(n))\n"}
{"text": "Sum of P terms of an AP if Mth and Nth terms are given ", "java": "import java.util.*;\n\nclass GFG {\n  static ArrayList<Integer> findingValues(int m, int n, int mth, int nth) {\n    int d = (Math.abs(mth - nth)) / Math.abs((m - 1) - (n - 1));\n    int a = mth - ((m - 1) * d);\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    res.add(a);\n    res.add(d);\n    return res;\n  }\n\n  static int findSum(int m, int n, int mth, int nth, int p) {\n    ArrayList<Integer> ad = findingValues(m, n, mth, nth);\n    int a = ad.get(0);\n    int d = ad.get(1);\n    int sum = (p * (2 * a + (p - 1) * d)) / 2;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int m = 6, n = 10, mTerm = 12, nTerm = 20, p = 5;\n    System.out.println(findSum(m, n, mTerm, nTerm, p));\n  }\n}\n", "python": "import math as mt\n\n\ndef findingValues(m, n, mth, nth):\n    d = (abs(mth - nth)) / abs((m - 1) - (n - 1))\n    a = mth - ((m - 1) * d)\n    return a, d\n\n\ndef findSum(m, n, mth, nth, p):\n    a, d = findingValues(m, n, mth, nth)\n    Sum = (p * (2 * a + (p - 1) * d)) / 2\n    return Sum\n\n\nm = 6\nn = 10\nmTerm = 12\nnTerm = 20\np = 5\nprint(findSum(m, n, mTerm, nTerm, p))\n"}
{"text": "Minimum absolute difference between N and a power of 2 ", "java": "class GFG {\n  static int minAbsDiff(int n) {\n    int left = 1 << ((int) Math.floor(Math.log(n) / Math.log(2)));\n    int right = left * 2;\n    return Math.min((n - left), (right - n));\n  }\n\n  public static void main(String[] args) {\n    int n = 15;\n    System.out.println(minAbsDiff(n));\n  }\n}\n", "python": "import math\n\n\ndef minAbsDiff(n):\n    left = 1 << (int)(math.floor(math.log2(n)))\n    right = left * 2\n    return min((n - left), (right - n))\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 15\n    print(minAbsDiff(n))\n"}
{"text": "Find probability that a player wins when probabilities of hitting the target are given ", "java": "import java.text.DecimalFormat;\nimport java.util.*;\n\nclass solution {\n  static double find_probability(double p, double q, double r, double s) {\n    double t = (1 - p / q) * (1 - r / s);\n    double ans = (p / q) / (1 - t);\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    double p = 1, q = 2, r = 1, s = 2;\n    DecimalFormat dec = new DecimalFormat(\" # 0.000000000\");\n    System.out.println(dec.format(find_probability(p, q, r, s)));\n  }\n}\n", "python": "def find_probability(p, q, r, s):\n    t = (1 - p / q) * (1 - r / s)\n    ans = (p / q) / (1 - t)\n    return round(ans, 9)\n\n\nif __name__ == \" _ _ main _ _ \":\n    p, q, r, s = 1, 2, 1, 2\n    print(find_probability(p, q, r, s))\n"}
{"text": "Check whether a + b = c or not after removing all zeroes from a , b and c ", "java": "public class GfG {\n  public static int removeZero(int n) {\n    int res = 0;\n    int d = 1;\n    while (n > 0) {\n      if (n % 10 != 0) {\n        res += (n % 10) * d;\n        d *= 10;\n      }\n      n /= 10;\n    }\n    return res;\n  }\n\n  public static boolean isEqual(int a, int b) {\n    if (removeZero(a) + removeZero(b) == removeZero(a + b)) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int a = 105, b = 106;\n    if (isEqual(a, b) == true) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def removeZero(n):\n    res = 0\n    d = 1\n    while n > 0:\n        if n % 10 != 0:\n            res += (n % 10) * d\n            d *= 10\n        n //= 10\n    return res\n\n\ndef isEqual(a, b):\n    if removeZero(a) + removeZero(b) == removeZero(a + b):\n        return True\n    return False\n\n\na = 105\nb = 106\nif isEqual(a, b):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Sum of first N natural numbers which are divisible by X or Y ", "java": "public class GFG {\n  static int sum(int N, int X, int Y) {\n    int S1, S2, S3;\n    S1 = ((N / X)) * (2 * X + (N / X - 1) * X) / 2;\n    S2 = ((N / Y)) * (2 * Y + (N / Y - 1) * Y) / 2;\n    S3 = ((N / (X * Y))) * (2 * (X * Y) + (N / (X * Y) - 1) * (X * Y)) / 2;\n    return S1 + S2 - S3;\n  }\n\n  public static void main(String[] args) {\n    int N = 14;\n    int X = 3, Y = 5;\n    System.out.println(sum(N, X, Y));\n  }\n}\n", "python": "from math import ceil, floor\n\n\ndef sum(N, X, Y):\n    S1 = floor(floor(N / X) * floor(2 * X + floor(N / X - 1) * X) / 2)\n    S2 = floor(floor(N / Y)) * floor(2 * Y + floor(N / Y - 1) * Y) / 2\n    S3 = (\n        floor(floor(N / (X * Y)))\n        * floor(2 * (X * Y) + floor(N / (X * Y) - 1) * (X * Y))\n        / 2\n    )\n    return S1 + S2 - S3\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 14\n    X = 3\n    Y = 5\n    print(int(sum(N, X, Y)))\n"}
{"text": "Sum of the digits of a number N written in all bases from 2 to N / 2 ", "java": "import java.io.*;\n\nclass GFG {\n  static int solve(int n, int base) {\n    int sum = 0;\n    while (n > 0) {\n      int remainder = n % base;\n      sum += remainder;\n      n = n / base;\n    }\n    return sum;\n  }\n\n  static void SumsOfDigits(int n) {\n    int sum = 0;\n    for (int base = 2; base <= n / 2; ++base) sum += solve(n, base);\n    System.out.println(sum);\n  }\n\n  public static void main(String[] args) {\n    int n = 8;\n    SumsOfDigits(n);\n  }\n}\n", "python": "from math import floor\n\n\ndef solve(n, base):\n    sum = 0\n    while n > 0:\n        remainder = n % base\n        sum = sum + remainder\n        n = int(n / base)\n    return sum\n\n\ndef SumsOfDigits(n):\n    sum = 0\n    N = floor(n / 2)\n    for base in range(2, N + 1, 1):\n        sum = sum + solve(n, base)\n    print(sum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 8\n    SumsOfDigits(n)\n"}
{"text": "Check if N can be represented as sum of integers chosen from set { A , B } ", "java": "import java.util.*;\n\nclass solution {\n  static void checkIfPossibleRec(int x, int a, int b, boolean isPossible[], int n) {\n    if (x > n) return;\n    if (isPossible[x]) return;\n    isPossible[x] = true;\n    checkIfPossibleRec(x + a, a, b, isPossible, n);\n    checkIfPossibleRec(x + b, a, b, isPossible, n);\n  }\n\n  static boolean checkPossible(int n, int a, int b) {\n    boolean isPossible[] = new boolean[n + 1];\n    for (int i = 0; i <= n; i++) isPossible[i] = false;\n    checkIfPossibleRec(0, a, b, isPossible, n);\n    return isPossible[n];\n  }\n\n  public static void main(String args[]) {\n    int a = 3, b = 7, n = 8;\n    if (checkPossible(a, b, n)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def checkIfPossibleRec(x, a, b, isPossible, n):\n    if x > n:\n        return\n    if isPossible[x]:\n        return\n    isPossible[x] = True\n    checkIfPossibleRec(x + a, a, b, isPossible, n)\n    checkIfPossibleRec(x + b, a, b, isPossible, n)\n\n\ndef checkPossible(n, a, b):\n    isPossible = [False] * (n + 1)\n    checkIfPossibleRec(0, a, b, isPossible, n)\n    return isPossible[n]\n\n\nif __name__ == \" _ _ main _ _ \":\n    a, b, n = 3, 7, 8\n    if checkPossible(a, b, n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Sum of all odd natural numbers in range L and R ", "java": "import java.io.*;\n\nclass GFG {\n  static int sumOdd(int n) {\n    int terms = (n + 1) / 2;\n    int sum = terms * terms;\n    return sum;\n  }\n\n  static int suminRange(int l, int r) {\n    return sumOdd(r) - sumOdd(l - 1);\n  }\n\n  public static void main(String[] args) {\n    int l = 2, r = 5;\n    System.out.print(\n        \" Sum \u2581 of \u2581 odd \u2581 natural \u2581 numbers \u2581 from \u2581 L \u2581 to \u2581 R \u2581 is \u2581 \" + suminRange(l, r));\n  }\n}\n", "python": "def sumOdd(n):\n    terms = (n + 1) // 2\n    sum1 = terms * terms\n    return sum1\n\n\ndef suminRange(l, r):\n    return sumOdd(r) - sumOdd(l - 1)\n\n\nl = 2\nr = 5\nprint(\n    \" Sum \u2581 of \u2581 odd \u2581 natural \u2581 number \", \" from \u2581 L \u2581 to \u2581 R \u2581 is \", suminRange(l, r)\n)\n"}
{"text": "Fibonacci problem ( Value of Fib ( N ) * Fib ( N ) ", "java": "import java.io.*;\n\nclass GFG {\n  static int getResult(int n) {\n    if ((n & 1) > 0) return 1;\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(getResult(n));\n  }\n}\n", "python": "def getResult(n):\n    if n & 1:\n        return 1\n    return -1\n\n\nn = 3\nprint(getResult(n))\n"}
{"text": "Find two numbers with sum and product both same as N ", "java": "class GFG {\n  static void findAandB(double N) {\n    double val = N * N - 4.0 * N;\n    if (val < 0) {\n      System.out.println(\" NO \");\n      return;\n    }\n    double a = (N + Math.sqrt(val)) / 2.0;\n    double b = (N - Math.sqrt(val)) / 2.0;\n    System.out.println(\" a \u2581 = \u2581 \" + a);\n    System.out.println(\" b \u2581 = \u2581 \" + b);\n  }\n\n  public static void main(String[] args) {\n    double N = 69.0;\n    findAandB(N);\n  }\n}\n", "python": "from math import sqrt\n\n\ndef findAandB(N):\n    val = N * N - 4.0 * N\n    if val < 0:\n        print(\" NO \")\n        return\n    a = (N + sqrt(val)) / 2.0\n    b = (N - sqrt(val)) / 2.0\n    print(\" a \u2581 = \", \" { 0 : . 6 } \".format(a))\n    print(\" b \u2581 = \", \" { 0 : . 6 } \".format(b))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 69.0\n    findAandB(N)\n"}
{"text": "GCD of a number raised to some power and another number ", "java": "import java.util.*;\n\nclass Solution {\n  static long power(long x, long y, long p) {\n    while (y > 0) {\n      if ((y & 1) != 0) res = (res * x) % p;\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  static long gcd(long a, long b) {\n    if (a == 0) return b;\n    return gcd(b % a, a);\n  }\n\n  static long powerGCD(long a, long b, long n) {\n    long e = power(a, n, b);\n    return gcd(e, b);\n  }\n\n  public static void main(String args[]) {\n    long a = 5, b = 4, n = 2;\n    System.out.print(powerGCD(a, b, n));\n  }\n}\n", "python": "def power(x, y, p):\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        x = (x * x) % p\n    return res\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef powerGCD(a, b, n):\n    e = power(a, n, b)\n    return gcd(e, b)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 5\n    b = 4\n    n = 2\n    print(powerGCD(a, b, n))\n"}
{"text": "Count number less than N which are product of perfect squares ", "java": "import java.util.*;\n\nclass solution {\n  static int countNumbers(int N) {\n    return (int) Math.sqrt(N) - 1;\n  }\n\n  public static void main(String args[]) {\n    int N = 36;\n    System.out.println(countNumbers(N));\n  }\n}\n", "python": "import math\n\n\ndef countNumbers(N):\n    return int(math.sqrt(N)) - 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 36\n    print(countNumbers(N))\n"}
{"text": "Find the sum of all multiples of 2 and 5 below N ", "java": "class GFG {\n  static long sumAP(long n, long d) {\n    n /= d;\n    return (n) * (1 + n) * d / 2;\n  }\n\n  static long sumMultiples(long n) {\n    n--;\n    return sumAP(n, 2) + sumAP(n, 5) - sumAP(n, 10);\n  }\n\n  public static void main(String[] args) {\n    long n = 20;\n    System.out.println(sumMultiples(n));\n  }\n}\n", "python": "def sumAP(n, d):\n    n = int(n / d)\n    return (n) * (1 + n) * (d / 2)\n\n\ndef sumMultiples(n):\n    n -= 1\n    return int(sumAP(n, 2) + sumAP(n, 5) - sumAP(n, 10))\n\n\nn = 20\nprint(sumMultiples(n))\n"}
{"text": "Check if there is any pair in a given range with GCD is divisible by k ", "java": "class GFG {\n  static boolean Check_is_possible(int l, int r, int k) {\n    int div_count = (r / k) - (l / k);\n    if (l % k == 0) {\n      div_count++;\n    }\n    return (div_count > 1);\n  }\n\n  public static void main(String[] args) {\n    int l = 30, r = 70, k = 10;\n    if (Check_is_possible(l, r, k)) {\n      System.out.println(\" YES \");\n    } else {\n      System.out.println(\" NO \");\n    }\n  }\n}\n", "python": "def Check_is_possible(l, r, k):\n    div_count = (r // k) - (l // k)\n    if l % k == 0:\n        div_count += 1\n    return div_count > 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    l, r, k = 30, 70, 10\n    if Check_is_possible(l, r, k) == True:\n        print(\" YES \")\n    else:\n        print(\" NO \")\n    DEDENT\n"}
{"text": "Find sum of N ", "java": "import java.util.*;\n\nclass GFG {\n  static int nth_group(int n) {\n    return n * (2 * (int) Math.pow(n, 2) + 1);\n  }\n\n  public static void main(String arr[]) {\n    int N = 5;\n    System.out.println(nth_group(N));\n  }\n}\n", "python": "def nth_group(n):\n    return n * (2 * pow(n, 2) + 1)\n\n\nN = 5\nprint(nth_group(N))\n"}
{"text": "Find the sum of first N terms of the series 2 \u00c3 \u2014 3 + 4 \u00c3 \u2014 4 + 6 \u00c3 \u2014 5 + 8 \u00c3 \u2014 6 + ... ", "java": "import java.io.*;\n\nclass GFG {\n  static void Sum_upto_nth_Term(int n) {\n    int r = n * (n + 1) * (2 * n + 7) / 3;\n    System.out.println(r);\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    Sum_upto_nth_Term(N);\n  }\n}\n", "python": "def Sum_upto_nth_Term(n):\n    return n * (n + 1) * (2 * n + 7) // 3\n\n\nN = 5\nprint(Sum_upto_nth_Term(N))\n"}
{"text": "Program to find sum of 1 + x / 2 ! + x ^ 2 / 3 ! + ... + x ^ n / ( n + 1 ) ! ", "java": "public class GFG {\n  static double sum(int x, int n) {\n    double total = 1.0;\n    double previous = 1.0;\n    for (int i = 1; i <= n; i++) {\n      previous = (previous * x) / (i + 1);\n      total = total + previous;\n    }\n    return total;\n  }\n\n  public static void main(String[] args) {\n    int x = 5, n = 4;\n    System.out.print(\" Sum \u2581 is : \u2581 \" + sum(x, n));\n  }\n}\n", "python": "def sum(x, n):\n    total = 1.0\n    previous = 1.0\n    for i in range(1, n + 1):\n        previous = (previous * x) / (i + 1)\n        total = total + previous\n    return total\n\n\nif __name__ == \" _ _ main _ _ \":\n    x = 5\n    n = 4\n    print(\" Sum \u2581 is : \u2581 \", sum(x, n))\n"}
{"text": "Find the number of rectangles of size 2 * 1 which can be placed inside a rectangle of size n * m ", "java": "public class GFG {\n  static int NumberOfRectangles(int n, int m) {\n    if (n % 2 == 0) return (n / 2) * m;\n    else if (m % 2 == 0) return (m / 2) * n;\n    return (n * m - 1) / 2;\n  }\n\n  public static void main(String args[]) {\n    int n = 3, m = 3;\n    System.out.println(NumberOfRectangles(n, m));\n  }\n}\n", "python": "def NumberOfRectangles(n, m):\n    if n % 2 == 0:\n        return (n / 2) * m\n    elif m % 2 == 0:\n        return (m // 2) * n\n    return (n * m - 1) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    m = 3\n    print(NumberOfRectangles(n, m))\n"}
{"text": "Next greater Number than N with the same quantity of digits A and B ", "java": "public class GFG {\n  static long findNumUtil(long res, int a, int aCount, int b, int bCount, int n) {\n    if (res > 1e11) return (long) 1e11;\n    if (aCount == bCount && res >= n) return res;\n    return Math.min(\n        findNumUtil(res * 10 + a, a, aCount + 1, b, bCount, n),\n        findNumUtil(res * 10 + b, a, aCount, b, bCount + 1, n));\n  }\n\n  static int findNum(int n, int a, int b) {\n    int result = 0;\n    int aCount = 0;\n    int bCount = 0;\n    return (int) findNumUtil(result, a, aCount, b, bCount, n);\n  }\n\n  public static void main(String args[]) {\n    int N = 4500;\n    int A = 4;\n    int B = 7;\n    System.out.println(findNum(N, A, B));\n  }\n}\n", "python": "def findNumUtil(res, a, aCount, b, bCount, n):\n    if res > 1e11:\n        return 1e11\n    if aCount == bCount and res >= n:\n        return res\n    return min(\n        findNumUtil(res * 10 + a, a, aCount + 1, b, bCount, n),\n        findNumUtil(res * 10 + b, a, aCount, b, bCount + 1, n),\n    )\n\n\ndef findNum(n, a, b):\n    result = 0\n    aCount = 0\n    bCount = 0\n    return findNumUtil(result, a, aCount, b, bCount, n)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4500\n    A = 4\n    B = 7\n    print(findNum(N, A, B))\n"}
{"text": "Minimum and maximum number of N chocolates after distribution among K students ", "java": "public class Improve {\n  public static void main(String args[]) {\n    int n = 7;\n    int k = 3;\n    if (n % k == 0) System.out.println(n / k + \" \u2581 \" + n / k);\n    else System.out.println((n - (n % k)) / k + \" \u2581 \" + (((n - (n % k)) / k) + 1));\n  }\n}\n", "python": "n, k = 7, 3\nif n % k == 0:\n    print(n // k, n // k)\nelse:\n    print((n - n % k) // k, (n - n % k) // k + 1)\n"}
{"text": "Total money to be paid after traveling the given number of hours ", "java": "import java.io.*;\n\nclass GFG {\n  public static void main(String[] args) {\n    float m = 50, n = 5, x = 67, h = 2927;\n    int z = (int) (Math.ceil(h / 60 * 1.0));\n    if (z <= n) System.out.println(z * m);\n    else System.out.println(n * m + (z - n) * x);\n  }\n}\n", "python": "import math as ma\n\nm, n, x, h = 50, 5, 67, 2927\nz = int(ma.ceil(h / 60))\nif z <= n:\n    print(z * m)\nelse:\n    print(n * m + (z - n) * x)\n"}
{"text": "Absolute difference between sum and product of roots of a quartic equation ", "java": "public class GFG {\n  static double sumProductDifference(int a, int b, int c, int d, int e) {\n    double rootSum = (double) (-1 * b) / a;\n    double rootProduct = (double) e / a;\n    return Math.abs(rootSum - rootProduct);\n  }\n\n  public static void main(String args[]) {\n    System.out.println(sumProductDifference(8, 4, 6, 4, 1));\n  }\n}\n", "python": "def sumProductDifference(a, b, c, d, e):\n    rootSum = (-1 * b) / a\n    rootProduct = e / a\n    return abs(rootSum - rootProduct)\n\n\nprint(sumProductDifference(8, 4, 6, 4, 1))\n"}
{"text": "Program to find minimum number of lectures to attend to maintain 75 % ", "java": "public class GFG {\n  static int minimumLectures(int m, int n) {\n    int ans = 0;\n    if (n < (int) Math.ceil(0.75 * m)) ans = (int) Math.ceil(((0.75 * m) - n) / 0.25);\n    else ans = 0;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int M = 9, N = 1;\n    System.out.println(minimumLectures(M, N));\n  }\n}\n", "python": "import math\n\n\ndef minimumLecture(m, n):\n    ans = 0\n    if n < math.ceil(0.75 * m):\n        ans = math.ceil(((0.75 * m) - n) / 0.25)\n    else:\n        ans = 0\n    return ans\n\n\nM = 9\nN = 1\nprint(minimumLecture(M, N))\n"}
{"text": "Count Numbers with N digits which consists of odd number of 0 's ", "java": "import java.io.*;\n\nclass GFG {\n  static int countNumbers(int N) {\n    return (int) (Math.pow(10, N) - Math.pow(8, N)) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(countNumbers(n));\n  }\n}\n", "python": "def countNumbers(N):\n    return (pow(10, N) - pow(8, N)) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(countNumbers(n))\n"}
{"text": "Sum of the first N terms of the series 5 , 12 , 23 , 38. ... ", "java": "import java.io.*;\n\nclass GFG {\n  static int calculateSum(int n) {\n    return 2 * (n * (n + 1) * (2 * n + 1) / 6) + n * (n + 1) / 2 + 2 * (n);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(\" Sum \u2581 = \u2581 \" + calculateSum(n));\n  }\n}\n", "python": "def calculateSum(n):\n    return 2 * (n * (n + 1) * (2 * n + 1) // 6) + n * (n + 1) // 2 + 2 * (n)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(\" Sum \u2581 = \", calculateSum(n))\n"}
{"text": "Program to convert KiloBytes to Bytes and Bits ", "java": "import java.io.*;\nimport java.math.BigInteger;\nimport java.util.*;\n\nclass GFG {\n  static BigInteger Bits(int kilobytes) {\n    BigInteger Bits = new BigInteger(\"0\");\n    BigInteger kilo = BigInteger.valueOf(kilobytes);\n    Bits = kilo.multiply(BigInteger.valueOf(8192));\n    return Bits;\n  }\n\n  static BigInteger Bytes(int kilobytes) {\n    BigInteger Bytes = new BigInteger(\"0\");\n    BigInteger kilo = BigInteger.valueOf(kilobytes);\n    Bytes = kilo.multiply(BigInteger.valueOf(1024));\n    return Bytes;\n  }\n\n  public static void main(String args[]) {\n    int kilobytes = 1;\n    System.out.print(\n        kilobytes\n            + \" \u2581 Kilobytes \u2581 = \u2581 \"\n            + Bytes(kilobytes)\n            + \" \u2581 Bytes \u2581 and \u2581 \"\n            + Bits(kilobytes)\n            + \" \u2581 Bits . \");\n  }\n}\n", "python": "def Bits(kilobytes):\n    Bits = kilobytes * 8192\n    return Bits\n\n\ndef Bytes(kilobytes):\n    Bytes = kilobytes * 1024\n    return Bytes\n\n\nif __name__ == \" _ _ main _ _ \":\n    kilobytes = 1\n    print(\n        kilobytes,\n        \" Kilobytes \u2581 = \",\n        Bytes(kilobytes),\n        \" Bytes \u2581 and \",\n        Bits(kilobytes),\n        \" Bits \",\n    )\n"}
{"text": "Program to find the Hidden Number ", "java": "public class GFG {\n  public static void main(String args[]) {\n    int n = 3;\n    int a[] = {1, 2, 3};\n    int i = 0;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n      sum += a[i];\n    }\n    long x = sum / n;\n    if (x * n == sum) System.out.println(x);\n    else System.out.println(\" - 1\");\n  }\n}\n", "python": "if __name__ == \" _ _ main _ _ \":\n    n = 3\n    a = [1, 2, 3]\n    i = 0\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    x = sum // n\n    if x * n == sum:\n        print(x)\n    else:\n        print(\" - 1\")\n    DEDENT\n"}
{"text": "Find sum of the series ? 3 + ? 12 + ... ... ... upto N terms ", "java": "import java.io.*;\n\nclass GFG {\n  static double findSum(long n) {\n    return Math.sqrt(3) * (n * (n + 1) / 2);\n  }\n\n  public static void main(String[] args) {\n    long n = 10;\n    System.out.println(findSum(n));\n  }\n}\n", "python": "import math\n\n\ndef findSum(n):\n    return math.sqrt(3) * (n * (n + 1) / 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    print(findSum(n))\n"}
{"text": "Find the sum of the series x ( x + y ) + x ^ 2 ( x ^ 2 + y ^ 2 ) + x ^ 3 ( x ^ 3 + y ^ 3 ) + ... + x ^ n ( x ^ n + y ^ n ) ", "java": "public class GFG {\n  static int sum(int x, int y, int n) {\n    int sum1 = (int) ((Math.pow(x, 2) * (Math.pow(x, 2 * n) - 1)) / (Math.pow(x, 2) - 1));\n    int sum2 = (int) ((x * y * (Math.pow(x, n) * Math.pow(y, n) - 1)) / (x * y - 1));\n    return sum1 + sum2;\n  }\n\n  public static void main(String args[]) {\n    int x = 2, y = 2, n = 2;\n    System.out.println(sum(x, y, n));\n  }\n}\n", "python": "def sum(x, y, n):\n    sum1 = ((x ** 2) * (x ** (2 * n) - 1)) // (x ** 2 - 1)\n    sum2 = (x * y * (x ** n * y ** n - 1)) // (x * y - 1)\n    return sum1 + sum2\n\n\nif __name__ == \" _ _ main _ _ \":\n    x = 2\n    y = 2\n    n = 2\n    print(sum(x, y, n))\n"}
{"text": "Find any pair with given GCD and LCM ", "java": "import java.io.*;\n\nclass GFG {\n  static void printPair(int g, int l) {\n    System.out.print(g + \" \u2581 \" + l);\n  }\n\n  public static void main(String[] args) {\n    int g = 3, l = 12;\n    printPair(g, l);\n  }\n}\n", "python": "def printPair(g, l):\n    print(g, l)\n\n\ng = 3\nl = 12\nprintPair(g, l)\n"}
{"text": "Sum of first n terms of a given series 3 , 6 , 11 , ... . . ", "java": "import java.io.*;\n\nclass GFG {\n  static int calculateSum(int n) {\n    int a1 = 1, a2 = 2;\n    int r = 2;\n    int d = 1;\n    return (n) * (2 * a1 + (n - 1) * d) / 2 + a2 * (int) (Math.pow(r, n) - 1) / (r - 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.print(\" Sum \u2581 = \u2581 \" + calculateSum(n));\n  }\n}\n", "python": "def calculateSum(n):\n    a1 = 1\n    a2 = 2\n    r = 2\n    d = 1\n    return (n) * (2 * a1 + (n - 1) * d) / 2 + a2 * (pow(r, n) - 1) / (r - 1)\n\n\nn = 5\nprint(\" Sum \u2581 = \", int(calculateSum(n)))\n"}
{"text": "Count of subsets of integers from 1 to N having no adjacent elements ", "java": "class GFG {\n  static int countSubsets(int N) {\n    if (N <= 2) return N;\n    if (N == 3) return 2;\n    int[] DP = new int[N + 1];\n    DP[0] = 0;\n    DP[1] = 1;\n    DP[2] = 2;\n    DP[3] = 2;\n    for (int i = 4; i <= N; i++) {\n      DP[i] = DP[i - 2] + DP[i - 3];\n    }\n    return DP[N];\n  }\n\n  public static void main(String[] args) {\n    int N = 20;\n    System.out.print(countSubsets(N));\n  }\n}\n", "python": "def countSubsets(N):\n    if N <= 2:\n        return N\n    if N == 3:\n        return 2\n    DP = [0] * (N + 1)\n    DP[0] = 0\n    DP[1] = 1\n    DP[2] = 2\n    DP[3] = 2\n    for i in range(4, N + 1):\n        DP[i] = DP[i - 2] + DP[i - 3]\n    return DP[N]\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 20\n    print(countSubsets(N))\n"}
{"text": "Count the Arithmetic sequences in the Array of size at least 3 ", "java": "class GFG {\n  static int numberOfArithmeticSequences(int L[], int N) {\n    if (N <= 2) return 0;\n    int count = 0;\n    int res = 0;\n    for (int i = 2; i < N; ++i) {\n      if (L[i] - L[i - 1] == L[i - 1] - L[i - 2]) {\n        ++count;\n      } else {\n        count = 0;\n      }\n      res += count;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int L[] = {1, 3, 5, 6, 7, 8};\n    int N = L.length;\n    System.out.print(numberOfArithmeticSequences(L, N));\n  }\n}\n", "python": "def numberOfArithmeticSequences(L, N):\n    if N <= 2:\n        return 0\n    count = 0\n    res = 0\n    for i in range(2, N):\n        if (L[i] - L[i - 1]) == (L[i - 1] - L[i - 2]):\n            count += 1\n        else:\n            count = 0\n        res += count\n    return res\n\n\nL = [1, 3, 5, 6, 7, 8]\nN = len(L)\nprint(numberOfArithmeticSequences(L, N))\n"}
{"text": "Count triplet of indices ( i , j , k ) such that XOR of elements between [ i , j ) equals [ j , k ] ", "java": "import java.io.*;\n\nclass GFG {\n  static int CountOfTriplets(int a[], int n) {\n    int answer = 0;\n    int x = 0;\n    int count[] = new int[100005];\n    int ways[] = new int[100005];\n    for (int i = 0; i < n; i++) {\n      x ^= a[i];\n      answer += count[x] * i - ways[x];\n      count[x]++;\n      ways[x] += (i + 1);\n    }\n    return answer;\n  }\n\n  public static void main(String[] args) {\n    int Arr[] = {3, 6, 12, 8, 6, 2, 1, 5};\n    int N = Arr.length;\n    System.out.print(CountOfTriplets(Arr, N));\n  }\n}\n", "python": "def CountOfTriplets(a, n):\n    answer = 0\n    x = 0\n    count = [0 for i in range(100005)]\n    ways = [0 for i in range(100005)]\n    for i in range(n):\n        x ^= a[i]\n        answer += count[x] * i - ways[x]\n        count[x] += 1\n        ways[x] += i + 1\n    return answer\n\n\nif __name__ == \" _ _ main _ _ \":\n    Arr = [3, 6, 12, 8, 6, 2, 1, 5]\n    N = len(Arr)\n    print(CountOfTriplets(Arr, N))\n"}
{"text": "Maximum value obtained by performing given operations in an Array ", "java": "class GFG {\n  static void findMax(int[] a, int n) {\n    int dp[][] = new int[n][2];\n    int i, j;\n    for (i = 0; i < n; i++) for (j = 0; j < 2; j++) dp[i][j] = 0;\n    dp[0][0] = a[0] + a[1];\n    dp[0][1] = a[0] * a[1];\n    for (i = 1; i <= n - 2; i++) {\n      dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1]) + a[i + 1];\n      dp[i][1] = dp[i - 1][0] - a[i] + a[i] * a[i + 1];\n    }\n    System.out.println(Math.max(dp[n - 2][0], dp[n - 2][1]));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {5, -1, -5, -3, 2, 9, -4};\n    findMax(arr, 7);\n  }\n}\n", "python": "import numpy as np\n\n\ndef findMax(a, n):\n    dp = np.zeros((n, 2))\n    dp[0][0] = a[0] + a[1]\n    dp[0][1] = a[0] * a[1]\n    for i in range(1, n - 1):\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1]) + a[i + 1]\n        dp[i][1] = dp[i - 1][0] - a[i] + a[i] * a[i + 1]\n    print(max(dp[n - 2][0], dp[n - 2][1]), end=\" \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [5, -1, -5, -3, 2, 9, -4]\n    findMax(arr, 7)\n"}
{"text": "Optimal strategy for a Game with modifications ", "java": "class GFG {\n  static int sum(int arr[], int l, int r) {\n    int s = 0;\n    for (int i = l; i <= r; i++) {\n      s += arr[i];\n    }\n    return s;\n  }\n\n  static int dp[][][] = new int[101][101][101];\n\n  static int solve(int arr[], int l, int r, int k) {\n    if (r - l + 1 <= k) return sum(arr, l, r);\n    if (dp[l][r][k] != 0) return dp[l][r][k];\n    int sum_ = sum(arr, l, r);\n    int len_r = (r - l + 1) - k;\n    int len = (r - l + 1);\n    int ans = 0;\n    for (int i = 0; i < len - len_r + 1; i++) {\n      int sum_sub = sum(arr, i + l, i + l + len_r - 1);\n      ans = Math.max(ans, (sum_ - sum_sub) + (sum_sub - solve(arr, i + l, i + l + len_r - 1, k)));\n    }\n    dp[l][r][k] = ans;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {10, 15, 20, 9, 2, 5}, k = 2;\n    int n = arr.length;\n    System.out.println(solve(arr, 0, n - 1, k));\n  }\n}\n", "python": "import numpy as np\n\n\ndef Sum(arr, l, r):\n    s = 0\n    for i in range(l, r + 1):\n        s += arr[i]\n    return s\n\n\ndp = np.zeros((101, 101, 101))\n\n\ndef solve(arr, l, r, k):\n    if r - l + 1 <= k:\n        return Sum(arr, l, r)\n    if dp[l][r][k]:\n        return dp[l][r][k]\n    sum_ = Sum(arr, l, r)\n    len_r = (r - l + 1) - k\n    length = r - l + 1\n    ans = 0\n    for i in range(length - len_r + 1):\n        sum_sub = Sum(arr, i + l, i + l + len_r - 1)\n        ans = max(\n            ans, (sum_ - sum_sub) + (sum_sub - solve(arr, i + l, i + l + len_r - 1, k))\n        )\n    dp[l][r][k] = ans\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [10, 15, 20, 9, 2, 5]\n    k = 2\n    n = len(arr)\n    print(solve(arr, 0, n - 1, k))\n"}
{"text": "Maximum possible array sum after performing the given operation ", "java": "class GFG {\n  static int max_sum(int a[], int n) {\n    int[][] dp = new int[n + 1][2];\n    dp[0][0] = 0;\n    dp[0][1] = -999999;\n    for (int i = 0; i <= n - 1; i++) {\n      dp[i + 1][0] = Math.max(dp[i][0] + a[i], dp[i][1] - a[i]);\n      dp[i + 1][1] = Math.max(dp[i][0] - a[i], dp[i][1] + a[i]);\n    }\n    return dp[n][0];\n  }\n\n  public static void main(String[] args) {\n    int a[] = {-10, 5, -4};\n    int n = a.length;\n    System.out.println(max_sum(a, n));\n  }\n}\n", "python": "def max_sum(a, n):\n    dp = [[0 for i in range(2)] for j in range(n + 1)]\n    dp[0][0] = 0\n    dp[0][1] = -999999\n    for i in range(0, n):\n        dp[i + 1][0] = max(dp[i][0] + a[i], dp[i][1] - a[i])\n        dp[i + 1][1] = max(dp[i][0] - a[i], dp[i][1] + a[i])\n    return dp[n][0]\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [-10, 5, -4]\n    n = len(a)\n    print(max_sum(a, n))\n"}
{"text": "Find the number of ways to reach Kth step in stair case ", "java": "class GFG {\n  static final int MOD = 1000000007;\n\n  static int number_of_ways(int arr[], int n, int k) {\n    if (k == 1) return 1;\n    int dp[] = new int[k + 1];\n    int i;\n    for (i = 0; i < k + 1; i++) dp[i] = -1;\n    for (i = 0; i < n; i++) dp[arr[i]] = 0;\n    dp[0] = 1;\n    dp[1] = (dp[1] == -1) ? 1 : dp[1];\n    for (i = 2; i <= k; ++i) {\n      if (dp[i] == 0) continue;\n      dp[i] = dp[i - 1] + dp[i - 2];\n      dp[i] %= MOD;\n    }\n    return dp[k];\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3};\n    int n = arr.length;\n    int k = 6;\n    System.out.println(number_of_ways(arr, n, k));\n  }\n}\n", "python": "MOD = 1000000007\n\n\ndef number_of_ways(arr, n, k):\n    if k == 1:\n        return 1\n    dp = [-1] * (k + 1)\n    for i in range(n):\n        dp[arr[i]] = 0\n    dp[0] = 1\n    dp[1] = 1 if (dp[1] == -1) else dp[1]\n    for i in range(2, k + 1):\n        if dp[i] == 0:\n            continue\n        dp[i] = dp[i - 1] + dp[i - 2]\n        dp[i] %= MOD\n    return dp[k]\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3]\n    n = len(arr)\n    k = 6\n    print(number_of_ways(arr, n, k))\n"}
{"text": "Minimum number of coins that can generate all the values in the given range ", "java": "class GFG {\n  static int findCount(int n) {\n    return (int) (Math.log(n) / Math.log(2)) + 1;\n  }\n\n  public static void main(String[] args) {\n    int N = 10;\n    System.out.println(findCount(N));\n  }\n}\n", "python": "import math\n\n\ndef findCount(n):\n    return int(math.log(n, 2)) + 1\n\n\nN = 10\nprint(findCount(N))\n"}
{"text": "Maximum sum of non ", "java": "import java.io.*;\n\nclass GFG {\n  static int maxLen = 10;\n  static int dp[] = new int[maxLen];\n  static boolean[] visit = new boolean[maxLen];\n\n  static int maxSum(int arr[], int i, int n, int k) {\n    if (i >= n) return 0;\n    if (visit[i]) return dp[i];\n    visit[i] = true;\n    int tot = 0;\n    dp[i] = maxSum(arr, i + 1, n, k);\n    for (int j = i; j < (i + k) && (j < n); j++) {\n      tot += arr[j];\n      dp[i] = Math.max(dp[i], tot + maxSum(arr, j + 2, n, k));\n    }\n    return dp[i];\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {-1, 2, -3, 4, 5};\n    int k = 2;\n    int n = arr.length;\n    System.out.println(maxSum(arr, 0, n, k));\n  }\n}\n", "python": "maxLen = 10\ndp = [0] * maxLen\nvisit = [0] * maxLen\n\n\ndef maxSum(arr, i, n, k):\n    if i >= n:\n        return 0\n    if visit[i]:\n        return dp[i]\n    visit[i] = 1\n    tot = 0\n    dp[i] = maxSum(arr, i + 1, n, k)\n    j = i\n    while j < i + k and j < n:\n        tot += arr[j]\n        dp[i] = max(dp[i], tot + maxSum(arr, j + 2, n, k))\n        j += 1\n    return dp[i]\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [-1, 2, -3, 4, 5]\n    k = 2\n    n = len(arr)\n    print(maxSum(arr, 0, n, k))\n"}
{"text": "Optimal Strategy for a Game ", "java": "import java.io.*;\n\nclass GFG {\n  static int oSRec(int[] arr, int i, int j, int sum) {\n    if (j == i + 1) return Math.max(arr[i], arr[j]);\n    return Math.max(\n        (sum - oSRec(arr, i + 1, j, sum - arr[i])), (sum - oSRec(arr, i, j - 1, sum - arr[j])));\n  }\n\n  static int optimalStrategyOfGame(int[] arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += arr[i];\n    }\n    return oSRec(arr, 0, n - 1, sum);\n  }\n\n  public static void main(String[] args) {\n    int[] arr1 = {8, 15, 3, 7};\n    int n = arr1.length;\n    System.out.println(optimalStrategyOfGame(arr1, n));\n    int[] arr2 = {2, 2, 2, 2};\n    n = arr2.length;\n    System.out.println(optimalStrategyOfGame(arr2, n));\n    int[] arr3 = {20, 30, 2, 2, 2, 10};\n    n = arr3.length;\n    System.out.println(optimalStrategyOfGame(arr3, n));\n  }\n}\n", "python": "def oSRec(arr, i, j, Sum):\n    if j == i + 1:\n        return max(arr[i], arr[j])\n    return max(\n        (Sum - oSRec(arr, i + 1, j, Sum - arr[i])),\n        (Sum - oSRec(arr, i, j - 1, Sum - arr[j])),\n    )\n\n\ndef optimalStrategyOfGame(arr, n):\n    Sum = 0\n    Sum = sum(arr)\n    return oSRec(arr, 0, n - 1, Sum)\n\n\narr1 = [8, 15, 3, 7]\nn = len(arr1)\nprint(optimalStrategyOfGame(arr1, n))\narr2 = [2, 2, 2, 2]\nn = len(arr2)\nprint(optimalStrategyOfGame(arr2, n))\narr3 = [20, 30, 2, 2, 2, 10]\nn = len(arr3)\nprint(optimalStrategyOfGame(arr3, n))\n"}
{"text": "Minimum number of cubes whose sum equals to given number N ", "java": "class GFG {\n  static int MinOfCubed(int k) {\n    if (k < 8) return k;\n    int res = k;\n    for (int i = 1; i <= k; i++) {\n      if ((i * i * i) > k) return res;\n      res = Math.min(res, MinOfCubed(k - (i * i * i)) + 1);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int num = 15;\n    System.out.println(MinOfCubed(num));\n  }\n}\n", "python": "def MinOfCubed(k):\n    if k < 8:\n        return k\n    res = k\n    for i in range(1, k + 1):\n        if (i * i * i) > k:\n            return res\n        res = min(res, MinOfCubed(k - (i * i * i)) + 1)\n    return res\n\n\nnum = 15\nprint(MinOfCubed(num))\n"}
{"text": "Minimum number of cubes whose sum equals to given number N ", "java": "class GFG {\n  static int MinOfCubedDP(int k) {\n    int[] DP = new int[k + 1];\n    int j = 1, t = 1;\n    DP[0] = 0;\n    for (int i = 1; i <= k; i++) {\n      DP[i] = Integer.MAX_VALUE;\n      while (j <= i) {\n        if (j == i) DP[i] = 1;\n        else if (DP[i] > DP[i - j]) DP[i] = DP[i - j] + 1;\n        t++;\n        j = t * t * t;\n      }\n      t = j = 1;\n    }\n    return DP[k];\n  }\n\n  public static void main(String[] args) {\n    int num = 15;\n    System.out.println(MinOfCubedDP(num));\n  }\n}\n", "python": "def MinOfCubed(k):\n    if k < 8:\n        return k\n    res = k\n    for i in range(1, k + 1):\n        if (i * i * i) > k:\n            return res\n        res = min(res, MinOfCubed(k - (i * i * i)) + 1)\n    return res\n\n\nnum = 15\nprint(MinOfCubed(num))\n"}
{"text": "Maximum Subarray Sum after inverting at most two elements ", "java": "class GFG {\n  static int maxSum(int[] a, int n) {\n    int ans = 0;\n    int[] arr = new int[n + 1];\n    for (int i = 1; i <= n; i++) arr[i] = a[i - 1];\n    int[][] dp = new int[n + 1][3];\n    for (int i = 1; i <= n; ++i) {\n      dp[i][0] = Math.max(arr[i], dp[i - 1][0] + arr[i]);\n      dp[i][1] = Math.max(0, dp[i - 1][0]) - arr[i];\n      if (i >= 2) dp[i][1] = Math.max(dp[i][1], dp[i - 1][1] + arr[i]);\n      if (i >= 2) dp[i][2] = dp[i - 1][1] - arr[i];\n      if (i >= 3) dp[i][2] = Math.max(dp[i][2], dp[i - 1][2] + arr[i]);\n      ans = Math.max(ans, dp[i][0]);\n      ans = Math.max(ans, dp[i][1]);\n      ans = Math.max(ans, dp[i][2]);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {-5, 3, 2, 7, -8, 3, 7, -9, 10, 12, -6};\n    int n = arr.length;\n    System.out.println(maxSum(arr, n));\n  }\n}\n", "python": "def maxSum(a, n):\n    ans = 0\n    arr = [0] * (n + 1)\n    for i in range(1, n + 1):\n        arr[i] = a[i - 1]\n    dp = [[0 for i in range(3)] for j in range(n + 1)]\n    for i in range(0, n + 1):\n        dp[i][0] = max(arr[i], dp[i - 1][0] + arr[i])\n        dp[i][1] = max(0, dp[i - 1][0]) - arr[i]\n        if i >= 2:\n            dp[i][1] = max(dp[i][1], dp[i - 1][1] + arr[i])\n        if i >= 2:\n            dp[i][2] = dp[i - 1][1] - arr[i]\n        if i >= 3:\n            dp[i][2] = max(dp[i][2], dp[i - 1][2] + arr[i])\n        ans = max(ans, dp[i][0])\n        ans = max(ans, dp[i][1])\n        ans = max(ans, dp[i][2])\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [-5, 3, 2, 7, -8, 3, 7, -9, 10, 12, -6]\n    n = len(arr)\n    print(maxSum(arr, n))\n"}
{"text": "Maximum sum possible for a sub ", "java": "class GFG {\n  static int maxSum(int[] arr, int k, int n) {\n    if (n == 0) return 0;\n    if (n == 1) return arr[0];\n    if (n == 2) return Math.max(arr[0], arr[1]);\n    int[] dp = new int[n];\n    dp[0] = arr[0];\n    for (int i = 1; i <= k; i++) dp[i] = Math.max(arr[i], dp[i - 1]);\n    for (int i = k + 1; i < n; i++) dp[i] = Math.max(arr[i], dp[i - (k + 1)] + arr[i]);\n    return maximum(dp);\n  }\n\n  static int maximum(int[] arr) {\n    int max = Integer.MIN_VALUE;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] > max) {\n        max = arr[i];\n      }\n    }\n    return max;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {6, 7, 1, 3, 8, 2, 4};\n    int n = arr.length;\n    int k = 2;\n    System.out.println(maxSum(arr, k, n));\n  }\n}\n", "python": "def maxSum(arr, k, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, k + 1):\n        dp[i] = max(arr[i], dp[i - 1])\n    for i in range(k + 1, n):\n        dp[i] = max(arr[i], dp[i - (k + 1)] + arr[i])\n    max_element = max(dp)\n    return max_element\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [6, 7, 1, 3, 8, 2, 4]\n    n = len(arr)\n    k = 2\n    print(maxSum(arr, k, n))\n"}
{"text": "Minimum cost to form a number X by adding up powers of 2 ", "java": "import java.io.*;\n\nclass GFG {\n  static int MinimumCost(int a[], int n, int x) {\n    for (int i = 1; i < n; i++) {\n      a[i] = Math.min(a[i], 2 * a[i - 1]);\n    }\n    int ind = 0;\n    int sum = 0;\n    while (x > 0) {\n      if (x != 0) sum += a[ind];\n      ind++;\n      x = x >> 1;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {20, 50, 60, 90};\n    int x = 7;\n    int n = a.length;\n    System.out.println(MinimumCost(a, n, x));\n  }\n}\n", "python": "def MinimumCost(a, n, x):\n    for i in range(1, n, 1):\n        a[i] = min(a[i], 2 * a[i - 1])\n    ind = 0\n    sum = 0\n    while x:\n        if x & 1:\n            sum += a[ind]\n        ind += 1\n        x = x >> 1\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [20, 50, 60, 90]\n    x = 7\n    n = len(a)\n    print(MinimumCost(a, n, x))\n"}
{"text": "Ways to form an array having integers in given range such that total sum is divisible by 2 ", "java": "class GFG {\n  static int countWays(int n, int l, int r) {\n    int tL = l, tR = r;\n    int[] L = new int[3];\n    int[] R = new int[3];\n    L[l % 2] = l;\n    R[r % 2] = r;\n    l++;\n    r--;\n    if (l <= tR && r >= tL) {\n      L[l % 2] = l;\n      R[r % 2] = r;\n    }\n    int cnt0 = 0, cnt1 = 0;\n    if (R[0] > 0 && L[0] > 0) cnt0 = (R[0] - L[0]) / 2 + 1;\n    if (R[1] > 0 && L[1] > 0) cnt1 = (R[1] - L[1]) / 2 + 1;\n    int[][] dp = new int[n + 1][3];\n    dp[1][0] = cnt0;\n    dp[1][1] = cnt1;\n    for (int i = 2; i <= n; i++) {\n      dp[i][0] = (cnt0 * dp[i - 1][0] + cnt1 * dp[i - 1][1]);\n      dp[i][1] = (cnt0 * dp[i - 1][1] + cnt1 * dp[i - 1][0]);\n    }\n    return dp[n][0];\n  }\n\n  public static void main(String[] args) {\n    int n = 2, l = 1, r = 3;\n    System.out.println(countWays(n, l, r));\n  }\n}\n", "python": "def countWays(n, l, r):\n    tL, tR = l, r\n    L = [0 for i in range(2)]\n    R = [0 for i in range(2)]\n    L[l % 2] = l\n    R[r % 2] = r\n    l += 1\n    r -= 1\n    if l <= tR and r >= tL:\n        L[l % 2], R[r % 2] = l, r\n    cnt0, cnt1 = 0, 0\n    if R[0] and L[0]:\n        cnt0 = (R[0] - L[0]) // 2 + 1\n    if R[1] and L[1]:\n        cnt1 = (R[1] - L[1]) // 2 + 1\n    dp = [[0 for i in range(2)] for i in range(n + 1)]\n    dp[1][0] = cnt0\n    dp[1][1] = cnt1\n    for i in range(2, n + 1):\n        dp[i][0] = cnt0 * dp[i - 1][0] + cnt1 * dp[i - 1][1]\n        dp[i][1] = cnt0 * dp[i - 1][1] + cnt1 * dp[i - 1][0]\n    return dp[n][0]\n\n\nn, l, r = 2, 1, 3\nprint(countWays(n, l, r))\n"}
{"text": "Color N boxes using M colors such that K boxes have different color from the box on its left ", "java": "class GFG {\n  static int M = 1001;\n  static int MOD = 998244353;\n  static int[][] dp = new int[M][M];\n\n  static int solve(int idx, int diff, int N, int M, int K) {\n    if (idx > N) {\n      if (diff == K) return 1;\n      return 0;\n    }\n    if (dp[idx][diff] != -1) return dp[idx][diff];\n    int ans = solve(idx + 1, diff, N, M, K);\n    ans += (M - 1) * solve(idx + 1, diff + 1, N, M, K);\n    return dp[idx][diff] = ans % MOD;\n  }\n\n  public static void main(String[] args) {\n    int N = 3, M = 3, K = 0;\n    for (int i = 0; i <= M; i++) for (int j = 0; j <= M; j++) dp[i][j] = -1;\n    System.out.println((M * solve(2, 0, N, M, K)));\n  }\n}\n", "python": "M = 1001\nMOD = 998244353\ndp = [[-1] * M] * M\n\n\ndef solve(idx, diff, N, M, K):\n    if idx > N:\n        if diff == K:\n            return 1\n        return 0\n    if dp[idx][diff] != -1:\n        return dp[idx]\n    ans = solve(idx + 1, diff, N, M, K)\n    ans += (M - 1) * solve(idx + 1, diff + 1, N, M, K)\n    dp[idx][diff] = ans % MOD\n    return dp[idx][diff]\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    M = 3\n    K = 0\n    print(M * solve(2, 0, N, M, K))\n"}
{"text": "Count of Numbers in Range where first digit is equal to last digit of the number ", "java": "class GFG {\n  public static int solve(int x) {\n    int ans = 0, first = 0, last, temp = x;\n    if (x < 10) return x;\n    last = x % 10;\n    while (x != 0) {\n      first = x % 10;\n      x /= 10;\n    }\n    if (first <= last) ans = 9 + temp / 10;\n    else ans = 8 + temp / 10;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int L = 2, R = 60;\n    System.out.println(solve(R) - solve(L - 1));\n    L = 1;\n    R = 1000;\n    System.out.println(solve(R) - solve(L - 1));\n  }\n}\n", "python": "def solve(x):\n    ans, temp = 0, x\n    if x < 10:\n        return x\n    last = x % 10\n    while x:\n        first = x % 10\n        x = x // 10\n    if first <= last:\n        ans = 9 + temp // 10\n    else:\n        ans = 8 + temp // 10\n    return ans\n\n\nL, R = 2, 60\nprint(solve(R) - solve(L - 1))\nL, R = 1, 1000\nprint(solve(R) - solve(L - 1))\n"}
{"text": "Count the number of special permutations ", "java": "public class GFG {\n  static int nCr(int n, int r) {\n    int ans = 1;\n    if (r > n - r) r = n - r;\n    for (int i = 0; i < r; i++) {\n      ans *= (n - i);\n      ans /= (i + 1);\n    }\n    return ans;\n  }\n\n  static int countDerangements(int n) {\n    int der[] = new int[n + 3];\n    der[0] = 1;\n    der[1] = 0;\n    der[2] = 1;\n    for (int i = 3; i <= n; i++) der[i] = (i - 1) * (der[i - 1] + der[i - 2]);\n    return der[n];\n  }\n\n  static int countPermutations(int n, int k) {\n    int ans = 0;\n    for (int i = n - k; i <= n; i++) {\n      int ways = nCr(n, i);\n      ans += (ways * countDerangements(n - i));\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 5, k = 3;\n    System.out.println(countPermutations(n, k));\n  }\n}\n", "python": "def nCr(n, r):\n    ans = 1\n    if r > n - r:\n        r = n - r\n    for i in range(r):\n        ans *= n - i\n        ans /= i + 1\n    return ans\n\n\ndef countDerangements(n):\n    der = [0 for i in range(n + 3)]\n    der[0] = 1\n    der[1] = 0\n    der[2] = 1\n    for i in range(3, n + 1):\n        der[i] = (i - 1) * (der[i - 1] + der[i - 2])\n    return der[n]\n\n\ndef countPermutations(n, k):\n    ans = 0\n    for i in range(n - k, n + 1):\n        ways = nCr(n, i)\n        ans += ways * countDerangements(n - i)\n    return ans\n\n\nn, k = 5, 3\nprint(countPermutations(n, k))\n"}
{"text": "Find maximum points which can be obtained by deleting elements from array ", "java": "public class GFG {\n  static int maxCost(int a[], int n, int l, int r) {\n    int mx = 0, k;\n    for (int i = 0; i < n; ++i) mx = Math.max(mx, a[i]);\n    int[] count = new int[mx + 1];\n    for (int i = 0; i < count.length; i++) count[i] = 0;\n    for (int i = 0; i < n; i++) count[a[i]]++;\n    int[] res = new int[mx + 1];\n    res[0] = 0;\n    l = Math.min(l, r);\n    for (int num = 1; num <= mx; num++) {\n      k = Math.max(num - l - 1, 0);\n      res[num] = Math.max(res[num - 1], num * count[num] + res[k]);\n    }\n    return res[mx];\n  }\n\n  public static void main(String[] args) {\n    int a[] = {2, 1, 2, 3, 2, 2, 1}, l = 1, r = 1;\n    int n = a.length;\n    System.out.println(maxCost(a, n, l, r));\n  }\n}\n", "python": "def maxCost(a, n, l, r):\n    mx = 0\n    for i in range(n):\n        mx = max(mx, a[i])\n    count = [0] * (mx + 1)\n    for i in range(n):\n        count[a[i]] += 1\n    res = [0] * (mx + 1)\n    res[0] = 0\n    l = min(l, r)\n    for num in range(1, mx + 1):\n        k = max(num - l - 1, 0)\n        res[num] = max(res[num - 1], num * count[num] + res[k])\n    return res[mx]\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [2, 1, 2, 3, 2, 2, 1]\n    l, r = 1, 1\n    n = len(a)\n    print(maxCost(a, n, l, r))\n"}
{"text": "Number of ways a convex polygon of n + 2 sides can split into triangles by connecting vertices ", "java": "class GFG {\n  static long binomialCoeff(int n, int k) {\n    long res = 1;\n    if (k > n - k) k = n - k;\n    for (int i = 0; i < k; ++i) {\n      res *= (n - i);\n      res /= (i + 1);\n    }\n    return res;\n  }\n\n  static long catalan(int n) {\n    long c = binomialCoeff(2 * n, n);\n    return c / (n + 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(catalan(n));\n  }\n}\n", "python": "def binomialCoeff(n, k):\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= n - i\n        res /= i + 1\n    return res\n\n\ndef catalan(n):\n    c = binomialCoeff(2 * n, n)\n    return int(c / (n + 1))\n\n\nn = 3\nprint(catalan(n))\n"}
{"text": "Number of ways to form an array with distinct adjacent elements ", "java": "import java.io.*;\n\nclass GFG {\n  static int totalWays(int N, int M, int X) {\n    int dp[][] = new int[N + 1][2];\n    if (X == 1) {\n      dp[0][0] = 1;\n    } else {\n      dp[0][1] = 0;\n    }\n    if (X == 1) {\n      dp[1][0] = 0;\n      dp[1][1] = M - 1;\n    } else {\n      dp[1][0] = 1;\n      dp[1][1] = (M - 2);\n    }\n    for (int i = 2; i < N; i++) {\n      dp[i][0] = dp[i - 1][1];\n      dp[i][1] = dp[i - 1][0] * (M - 1) + dp[i - 1][1] * (M - 2);\n    }\n    return dp[N - 1][0];\n  }\n\n  public static void main(String[] args) {\n    int N = 4, M = 3, X = 2;\n    System.out.println(totalWays(N, M, X));\n  }\n}\n", "python": "def totalWays(N, M, X):\n    dp = [[0 for i in range(2)] for j in range(N + 1)]\n    if X == 1:\n        dp[0][0] = 1\n    else:\n        dp[0][1] = 0\n    if X == 1:\n        dp[1][0] = 0\n        dp[1][1] = M - 1\n    else:\n        dp[1][0] = 1\n        dp[1][1] = M - 2\n    for i in range(2, N):\n        dp[i][0] = dp[i - 1][1]\n        dp[i][1] = dp[i - 1][0] * (M - 1) + dp[i - 1][1] * (M - 2)\n    return dp[N - 1][0]\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    M = 3\n    X = 2\n    print(totalWays(N, M, X))\n"}
{"text": "Memoization ( 1D , 2D and 3D ) ", "java": "import java.io.*;\n\nclass GFG {\n  static int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    System.out.println(fib(n));\n  }\n}\n", "python": "def fib(n):\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 6\n    print(fib(n))\n"}
{"text": "Memoization ( 1D , 2D and 3D ) ", "java": "import java.io.*;\n\nclass GFG {\n  static int[] term = new int[1000];\n\n  static int fib(int n) {\n    if (n <= 1) return n;\n    if (term[n] != 0) return term[n];\n    else {\n      term[n] = fib(n - 1) + fib(n - 2);\n      return term[n];\n    }\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    System.out.println(fib(n));\n  }\n}\n", "python": "def fib(n):\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 6\n    print(fib(n))\n"}
{"text": "Check if array sum can be made K by three operations on it ", "java": "class GFG {\n  static int MAX = 100;\n\n  static int check(int i, int sum, int n, int k, int a[], int dp[][]) {\n    if (sum <= 0) {\n      return 0;\n    }\n    if (i >= n) {\n      if (sum == k) {\n        return 1;\n      }\n      return 0;\n    }\n    if (dp[i][sum] != -1) {\n      return dp[i][sum];\n    }\n    dp[i][sum] = check(i + 1, sum - 2 * a[i], n, k, a, dp) | check(i + 1, sum, n, k, a, dp);\n    dp[i][sum] = check(i + 1, sum - (i + 1), n, k, a, dp) | dp[i][sum];\n    dp[i][sum] = check(i + 1, sum + i + 1, n, k, a, dp) | dp[i][sum];\n    return dp[i][sum];\n  }\n\n  static int wrapper(int n, int k, int a[]) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += a[i];\n    }\n    int[][] dp = new int[MAX][MAX];\n    for (int i = 0; i < MAX; i++) {\n      for (int j = 0; j < MAX; j++) {\n        dp[i][j] = -1;\n      }\n    }\n    return check(0, sum, n, k, a, dp);\n  }\n\n  public static void main(String[] args) {\n    int a[] = {1, 2, 3, 4};\n    int n = 4, k = 5;\n    if (wrapper(n, k, a) == 1) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "MAX = 100\n\n\ndef check(i, add, n, k, a, dp):\n    if add <= 0:\n        return False\n    if i >= n:\n        if add == k:\n            return True\n        return False\n    if dp[i][add] != -1:\n        return dp[i][add]\n    dp[i][add] = check(i + 1, add - 2 * a[i], n, k, a, dp) or check(\n        i + 1, add, n, k, a, dp\n    )\n    dp[i][add] = check(i + 1, add - (i + 1), n, k, a, dp) or dp[i][add]\n    dp[i][add] = check(i + 1, add + i + 1, n, k, a, dp) or dp[i][add]\n    return dp[i][add]\n\n\ndef wrapper(n, k, a):\n    add = 0\n    for i in range(n):\n        add += a[i]\n    dp = [-1] * MAX\n    for i in range(MAX):\n        dp[i] = [-1] * MAX\n    return check(0, add, n, k, a, dp)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [1, 2, 3, 4]\n    n = 4\n    k = 5\n    print(\" Yes \") if wrapper(n, k, a) else print(\" No \")\n"}
{"text": "Maximum difference of zeros and ones in binary string ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int findLength(String str, int n) {\n    int current_sum = 0;\n    int max_sum = 0;\n    for (int i = 0; i < n; i++) {\n      current_sum += (str.charAt(i) == '0' ? 1 : -1);\n      if (current_sum < 0) current_sum = 0;\n      max_sum = Math.max(current_sum, max_sum);\n    }\n    return max_sum == 0 ? -1 : max_sum;\n  }\n\n  public static void main(String[] args) {\n    String str = \"11000010001\";\n    int n = str.length();\n    System.out.println(findLength(str, n));\n  }\n}\n", "python": "def findLength(string, n):\n    current_sum = 0\n    max_sum = 0\n    for i in range(n):\n        current_sum += 1 if string[i] == \"0\" else -1\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0\n\n\ns = \"11000010001\"\nn = 11\nprint(findLength(s, n))\n"}
{"text": "Newman Shanks Williams prime ", "java": "import java.util.*;\n\nclass GFG {\n  public static int nswpn(int n) {\n    int dp[] = new int[n + 1];\n    dp[0] = dp[1] = 1;\n    for (int i = 2; i <= n; i++) dp[i] = 2 * dp[i - 1] + dp[i - 2];\n    return dp[n];\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(nswpn(n));\n  }\n}\n", "python": "def nswp(n):\n    dp = [1 for x in range(n + 1)]\n    for i in range(2, n + 1):\n        dp[i] = 2 * dp[i - 1] + dp[i - 2]\n    return dp[n]\n\n\nn = 3\nprint(nswp(n))\n"}
{"text": "Maximum sum bitonic subarray ", "java": "import java.util.*;\n\nclass GFG {\n  static int find_partial_sum(int arr[], int start, int end) {\n    int sum = 0;\n    for (int i = start; i < end; i++) sum += arr[i];\n    return sum;\n  }\n\n  static int maxSumBitonicSubArr(int arr[], int n) {\n    int max_sum = -1000000;\n    int i = 0;\n    while (i < n) {\n      int j = i;\n      while (j + 1 < n && arr[j] < arr[j + 1]) j++;\n      while (i < j && arr[i] <= 0) i++;\n      int k = j;\n      while (k + 1 < n && arr[k] > arr[k + 1]) k++;\n      int last = k;\n      while (k > j && arr[k] <= 0) k--;\n      int sum_inc = find_partial_sum(arr, i, j + 1);\n      int sum_dec = find_partial_sum(arr, j, k + 1);\n      int sum_all = sum_inc + sum_dec - arr[j];\n      max_sum = Math.max(Math.max(max_sum, sum_inc), Math.max(sum_dec, sum_all));\n      i = Math.max(last, i + 1);\n    }\n    return max_sum;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {5, 3, 9, 2, 7, 6, 4};\n    int n = arr.length;\n    System.out.println(\" Maximum \u2581 sum \u2581 = \u2581 \" + maxSumBitonicSubArr(arr, n));\n    int arr2[] = {1, 2, 3, 4, 5};\n    int n2 = arr2.length;\n    System.out.println(\" Maximum \u2581 sum \u2581 = \u2581 \" + maxSumBitonicSubArr(arr2, n2));\n    int arr3[] = {5, 4, 3, 2, 1};\n    int n3 = arr3.length;\n    System.out.println(\" Maximum \u2581 sum \u2581 = \u2581 \" + maxSumBitonicSubArr(arr3, n3));\n    int arr4[] = {5, 5, 5, 5};\n    int n4 = arr4.length;\n    System.out.println(\" Maximum \u2581 sum \u2581 = \u2581 \" + maxSumBitonicSubArr(arr4, n4));\n    int arr5[] = {-1, 0, 1, 2, 3, 1, 0, -1, -10};\n    int n5 = arr5.length;\n    System.out.println(\" Maximum \u2581 sum \u2581 = \u2581 \" + maxSumBitonicSubArr(arr5, n5));\n    int arr6[] = {-1, 0, 1, 2, 0, -1, -2, 0, 1, 3};\n    int n6 = arr6.length;\n    System.out.println(\" Maximum \u2581 sum \u2581 = \u2581 \" + maxSumBitonicSubArr(arr6, n6));\n  }\n}\n", "python": "def maxSumBitonicSubArr(arr, n):\n    max_sum = -(10 ** 9)\n    i = 0\n    while i < n:\n        j = i\n        while j + 1 < n and arr[j] < arr[j + 1]:\n            j += 1\n        while i < j and arr[i] <= 0:\n            i += 1\n        k = j\n        while k + 1 < n and arr[k] > arr[k + 1]:\n            k += 1\n        last = k\n        while k > j and arr[k] <= 0:\n            k -= 1\n        nn = arr[i : j + 1]\n        sum_inc = sum(nn)\n        nn = arr[j : k + 1]\n        sum_dec = sum(nn)\n        sum_all = sum_inc + sum_dec - arr[j]\n        max_sum = max([max_sum, sum_inc, sum_dec, sum_all])\n        i = max(last, i + 1)\n    return max_sum\n\n\narr = [5, 3, 9, 2, 7, 6, 4]\nn = len(arr)\nprint(\" Maximum \u2581 Sum \u2581 = \u2581 \", maxSumBitonicSubArr(arr, n))\narr2 = [1, 2, 3, 4, 5]\nn2 = len(arr2)\nprint(\" Maximum \u2581 Sum \u2581 = \u2581 \", maxSumBitonicSubArr(arr2, n2))\narr3 = [5, 4, 3, 2, 1]\nn3 = len(arr3)\nprint(\" Maximum \u2581 Sum \u2581 = \u2581 \", maxSumBitonicSubArr(arr3, n3))\narr4 = [5, 5, 5, 5]\nn4 = len(arr4)\nprint(\" Maximum \u2581 Sum \u2581 = \u2581 \", maxSumBitonicSubArr(arr4, n4))\narr5 = [-1, 0, 1, 2, 3, 1, 0, -1, -10]\nn5 = len(arr5)\nprint(\" Maximum \u2581 Sum \u2581 = \u2581 \", maxSumBitonicSubArr(arr5, n5))\narr6 = [-1, 0, 1, 2, 0, -1, -2, 0, 1, 3]\nn6 = len(arr6)\nprint(\" Maximum \u2581 Sum \u2581 = \u2581 \", maxSumBitonicSubArr(arr6, n6))\n"}
{"text": "Smallest sum contiguous subarray ", "java": "class GFG {\n  static int smallestSumSubarr(int arr[], int n) {\n    int min_ending_here = 2147483647;\n    int min_so_far = 2147483647;\n    for (int i = 0; i < n; i++) {\n      if (min_ending_here > 0) min_ending_here = arr[i];\n      else min_ending_here += arr[i];\n      min_so_far = Math.min(min_so_far, min_ending_here);\n    }\n    return min_so_far;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, -4, 2, -3, -1, 7, -5};\n    int n = arr.length;\n    System.out.print(\" Smallest \u2581 sum : \u2581 \" + smallestSumSubarr(arr, n));\n  }\n}\n", "python": "import sys\n\n\ndef smallestSumSubarr(arr, n):\n    min_ending_here = sys.maxsize\n    min_so_far = sys.maxsize\n    for i in range(n):\n        if min_ending_here > 0:\n            min_ending_here = arr[i]\n        else:\n            min_ending_here += arr[i]\n        min_so_far = min(min_so_far, min_ending_here)\n    return min_so_far\n\n\narr = [3, -4, 2, -3, -1, 7, -5]\nn = len(arr)\nprint \" Smallest \u2581 sum : \u2581 \", smallestSumSubarr(arr, n)\n"}
{"text": "n ", "java": "import java.util.*;\n\nclass GFG {\n  static int ans(int n) {\n    if (n < 6) {\n      return n;\n    }\n    return n % 6 + 10 * (ans(n / 6));\n  }\n\n  static int getSpecialNumber(int N) {\n    return ans(--N);\n  }\n\n  public static void main(String[] args) {\n    int N = 17;\n    int answer = getSpecialNumber(N);\n    System.out.println(answer);\n  }\n}\n", "python": "def ans(n):\n    if n < 6:\n        return n\n    return n % 6 + 10 * (ans(n // 6)) - 1\n\n\ndef getSpecialNumber(N):\n    return ans(N)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 17\n    answer = getSpecialNumber(N)\n    print(answer)\n"}
{"text": "Paper Cut into Minimum Number of Squares ", "java": "import java.io.*;\n\nclass GFG {\n  static int dp[][] = new int[300][300];\n\n  static int minimumSquare(int m, int n) {\n    int vertical_min = Integer.MAX_VALUE;\n    int horizontal_min = Integer.MAX_VALUE;\n    if (n == 13 && m == 11) return 6;\n    if (m == 13 && n == 11) return 6;\n    if (m == n) return 1;\n    if (dp[m][n] != 0) return dp[m][n];\n    for (int i = 1; i <= m / 2; i++) {\n      horizontal_min = Math.min(minimumSquare(i, n) + minimumSquare(m - i, n), horizontal_min);\n    }\n    for (int j = 1; j <= n / 2; j++) {\n      vertical_min = Math.min(minimumSquare(m, j) + minimumSquare(m, n - j), vertical_min);\n    }\n    dp[m][n] = Math.min(vertical_min, horizontal_min);\n    return dp[m][n];\n  }\n\n  public static void main(String[] args) {\n    int m = 30, n = 35;\n    System.out.println(minimumSquare(m, n));\n  }\n}\n", "python": "MAX = 300\ndp = [[0 for i in range(MAX)] for i in range(MAX)]\n\n\ndef minimumSquare(m, n):\n    vertical_min = 10000000000\n    horizontal_min = 10000000000\n    if n == 13 and m == 11:\n        return 6\n    if m == 13 and n == 11:\n        return 6\n    if m == n:\n        return 1\n    if dp[m][n] != 0:\n        return dp[m][n]\n    for i in range(1, m // 2 + 1):\n        horizontal_min = min(\n            minimumSquare(i, n) + minimumSquare(m - i, n), horizontal_min\n        )\n    for j in range(1, n // 2 + 1):\n        vertical_min = min(minimumSquare(m, j) + minimumSquare(m, n - j), vertical_min)\n    dp[m][n] = min(vertical_min, horizontal_min)\n    return dp[m][n]\n\n\nif __name__ == \" _ _ main _ _ \":\n    m = 30\n    n = 35\n    print(minimumSquare(m, n))\n"}
{"text": "Number of n ", "java": "class GFG {\n  static long fact(int n) {\n    long res = 1;\n    for (int i = 2; i <= n; i++) res = res * i;\n    return res;\n  }\n\n  static long nCr(int n, int r) {\n    return fact(n) / (fact(r) * fact(n - r));\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(\" Number \u2581 of \u2581 Non - Decreasing \u2581 digits : \u2581 \" + nCr(n + 9, 9));\n  }\n}\n", "python": "def fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\n\n\ndef nCr(n, r):\n    return fact(n) // ((fact(r) * fact(n - r)))\n\n\nn = 2\nprint(\" Number \u2581 of \u2581 Non - Decreasing \u2581 digits : \u2581 \", nCr(n + 9, 9))\n"}
{"text": "Painting Fence Algorithm ", "java": "class GFG {\n  static long countWays(int n, int k) {\n    long total = k;\n    int mod = 1000000007;\n    int same = 0, diff = k;\n    for (int i = 2; i <= n; i++) {\n      same = diff;\n      diff = (int) total * (k - 1);\n      diff = diff % mod;\n      total = (same + diff) % mod;\n    }\n    return total;\n  }\n\n  public static void main(String[] args) {\n    int n = 3, k = 2;\n    System.out.println(countWays(n, k));\n  }\n}\n", "python": "def countWays(n, k):\n    total = k\n    mod = 1000000007\n    same, diff = 0, k\n    for i in range(2, n + 1):\n        same = diff\n        diff = total * (k - 1)\n        diff = diff % mod\n        total = (same + diff) % mod\n    return total\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, k = 3, 2\n    print(countWays(n, k))\n"}
{"text": "Largest sum subarray with at ", "java": "class Test {\n  static int maxSumWithK(int a[], int n, int k) {\n    int maxSum[] = new int[n];\n    maxSum[0] = a[0];\n    int curr_max = a[0];\n    for (int i = 1; i < n; i++) {\n      curr_max = Math.max(a[i], curr_max + a[i]);\n      maxSum[i] = curr_max;\n    }\n    int sum = 0;\n    for (int i = 0; i < k; i++) sum += a[i];\n    int result = sum;\n    for (int i = k; i < n; i++) {\n      sum = sum + a[i] - a[i - k];\n      result = Math.max(result, sum);\n      result = Math.max(result, sum + maxSum[i - k]);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, -10, -3};\n    int k = 4;\n    System.out.println(maxSumWithK(arr, arr.length, k));\n    ;\n  }\n}\n", "python": "def maxSumWithK(a, n, k):\n    maxSum = [0 for i in range(n)]\n    maxSum[0] = a[0]\n    curr_max = a[0]\n    for i in range(1, n):\n        curr_max = max(a[i], curr_max + a[i])\n        maxSum[i] = curr_max\n    sum = 0\n    for i in range(k):\n        sum += a[i]\n    result = sum\n    for i in range(k, n):\n        sum = sum + a[i] - a[i - k]\n        result = max(result, sum)\n        result = max(result, sum + maxSum[i - k])\n    return result\n\n\na = [1, 2, 3, -10, -3]\nk = 4\nn = len(a)\nprint(maxSumWithK(a, n, k))\n"}
{"text": "Sequences of given length where every element is more than or equal to twice of previous ", "java": "class Sequences {\n  static int getTotalNumberOfSequences(int m, int n) {\n    if (m < n) return 0;\n    if (n == 0) return 1;\n    return getTotalNumberOfSequences(m - 1, n) + getTotalNumberOfSequences(m / 2, n - 1);\n  }\n\n  public static void main(String[] args) {\n    int m = 10;\n    int n = 4;\n    System.out.println(\n        \" Total \u2581 number \u2581 of \u2581 possible \u2581 sequences \u2581 \" + getTotalNumberOfSequences(m, n));\n  }\n}\n", "python": "def getTotalNumberOfSequences(m, n):\n    if m < n:\n        return 0\n    if n == 0:\n        return 1\n    res = getTotalNumberOfSequences(m - 1, n) + getTotalNumberOfSequences(m // 2, n - 1)\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    m = 10\n    n = 4\n    print(\n        \" Total \u2581 number \u2581 of \u2581 possible \u2581 sequences : \",\n        getTotalNumberOfSequences(m, n),\n    )\n"}
{"text": "Modify array to maximize sum of adjacent differences ", "java": "import java.io.*;\n\nclass GFG {\n  static int maximumDifferenceSum(int arr[], int N) {\n    int dp[][] = new int[N][2];\n    for (int i = 0; i < N; i++) dp[i][0] = dp[i][1] = 0;\n    for (int i = 0; i < (N - 1); i++) {\n      dp[i + 1][0] = Math.max(dp[i][0], dp[i][1] + Math.abs(1 - arr[i]));\n      dp[i + 1][1] =\n          Math.max(dp[i][0] + Math.abs(arr[i + 1] - 1), dp[i][1] + Math.abs(arr[i + 1] - arr[i]));\n    }\n    return Math.max(dp[N - 1][0], dp[N - 1][1]);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 2, 1, 4, 5};\n    int N = arr.length;\n    System.out.println(maximumDifferenceSum(arr, N));\n  }\n}\n", "python": "def maximumDifferenceSum(arr, N):\n    dp = [[0, 0] for i in range(N)]\n    for i in range(N):\n        dp[i][0] = dp[i][1] = 0\n    for i in range(N - 1):\n        dp[i + 1][0] = max(dp[i][0], dp[i][1] + abs(1 - arr[i]))\n        dp[i + 1][1] = max(\n            dp[i][0] + abs(arr[i + 1] - 1), dp[i][1] + abs(arr[i + 1] - arr[i])\n        )\n    return max(dp[N - 1][0], dp[N - 1][1])\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 2, 1, 4, 5]\n    N = len(arr)\n    print(maximumDifferenceSum(arr, N))\n"}
{"text": "Count of subarrays whose maximum element is greater than k ", "java": "import java.util.*;\n\nclass GFG {\n  static int countSubarray(int arr[], int n, int k) {\n    int s = 0;\n    int i = 0;\n    while (i < n) {\n      if (arr[i] > k) {\n        i++;\n        continue;\n      }\n      int count = 0;\n      while (i < n && arr[i] <= k) {\n        i++;\n        count++;\n      }\n      s += ((count * (count + 1)) / 2);\n    }\n    return (n * (n + 1) / 2 - s);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3};\n    int k = 2;\n    int n = arr.length;\n    System.out.print(countSubarray(arr, n, k));\n  }\n}\n", "python": "def countSubarray(arr, n, k):\n    s = 0\n    i = 0\n    while i < n:\n        if arr[i] > k:\n            i = i + 1\n            continue\n        count = 0\n        while i < n and arr[i] <= k:\n            i = i + 1\n            count = count + 1\n        s = s + ((count * (count + 1)) // 2)\n    return n * (n + 1) // 2 - s\n\n\narr = [1, 2, 3]\nk = 2\nn = len(arr)\nprint(countSubarray(arr, n, k))\n"}
{"text": "Maximum subsequence sum such that no three are consecutive ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int arr[] = {100, 1000, 100, 1000, 1};\n  static int sum[] = new int[10000];\n\n  static int maxSumWO3Consec(int n) {\n    if (sum[n] != -1) return sum[n];\n    if (n == 0) return sum[n] = 0;\n    if (n == 1) return sum[n] = arr[0];\n    if (n == 2) return sum[n] = arr[1] + arr[0];\n    return sum[n] =\n        Math.max(\n            Math.max(maxSumWO3Consec(n - 1), maxSumWO3Consec(n - 2) + arr[n]),\n            arr[n] + arr[n - 1] + maxSumWO3Consec(n - 3));\n  }\n\n  public static void main(String[] args) {\n    int n = arr.length;\n    Arrays.fill(sum, -1);\n    System.out.println(maxSumWO3Consec(n));\n  }\n}\n", "python": "arr = [100, 1000, 100, 1000, 1]\nsum = [-1] * 10000\n\n\ndef maxSumWO3Consec(n):\n    if sum[n] != -1:\n        return sum[n]\n    if n == 0:\n        sum[n] = 0\n        return sum[n]\n    if n == 1:\n        sum[n] = arr[0]\n        return sum[n]\n    if n == 2:\n        sum[n] = arr[1] + arr[0]\n        return sum[n]\n    sum[n] = max(\n        max(maxSumWO3Consec(n - 1), maxSumWO3Consec(n - 2) + arr[n]),\n        arr[n] + arr[n - 1] + maxSumWO3Consec(n - 3),\n    )\n    return sum[n]\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = len(arr)\n    print(maxSumWO3Consec(n))\n"}
{"text": "Maximum sum of pairs with specific difference ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int maxSumPairWithDifferenceLessThanK(int arr[], int N, int k) {\n    int maxSum = 0;\n    Arrays.sort(arr);\n    for (int i = N - 1; i > 0; --i) {\n      if (arr[i] - arr[i - 1] < k) {\n        maxSum += arr[i];\n        maxSum += arr[i - 1];\n        --i;\n      }\n    }\n    return maxSum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 5, 10, 15, 17, 12, 9};\n    int N = arr.length;\n    int K = 4;\n    System.out.println(maxSumPairWithDifferenceLessThanK(arr, N, K));\n  }\n}\n", "python": "def maxSumPairWithDifferenceLessThanK(arr, N, k):\n    maxSum = 0\n    arr.sort()\n    i = N - 1\n    while i > 0:\n        if arr[i] - arr[i - 1] < k:\n            maxSum += arr[i]\n            maxSum += arr[i - 1]\n            i -= 1\n        i -= 1\n    return maxSum\n\n\narr = [3, 5, 10, 15, 17, 12, 9]\nN = len(arr)\nK = 4\nprint(maxSumPairWithDifferenceLessThanK(arr, N, K))\n"}
{"text": "Minimum steps to reach a destination ", "java": "import java.io.*;\n\nclass GFG {\n  static int steps(int source, int step, int dest) {\n    if (Math.abs(source) > (dest)) return Integer.MAX_VALUE;\n    if (source == dest) return step;\n    int pos = steps(source + step + 1, step + 1, dest);\n    int neg = steps(source - step - 1, step + 1, dest);\n    return Math.min(pos, neg);\n  }\n\n  public static void main(String[] args) {\n    int dest = 11;\n    System.out.println(\n        \" No . \u2581 of \u2581 steps \u2581 required \"\n            + \" \u2581 to \u2581 reach \u2581 \"\n            + dest\n            + \" \u2581 is \u2581 \"\n            + steps(0, 0, dest));\n  }\n}\n", "python": "import sys\n\n\ndef steps(source, step, dest):\n    if abs(source) > (dest):\n        return sys.maxsize\n    if source == dest:\n        return step\n    pos = steps(source + step + 1, step + 1, dest)\n    neg = steps(source - step - 1, step + 1, dest)\n    return min(pos, neg)\n\n\ndest = 11\nprint(\n    \" No . \u2581 of \u2581 steps \u2581 required \",\n    \" \u2581 to \u2581 reach \u2581 \",\n    dest,\n    \" \u2581 is \u2581 \",\n    steps(0, 0, dest),\n)\n"}
{"text": "Number of cycles in a Polygon with lines from Centroid to Vertices ", "java": "class GFG {\n  static int nCycle(int N) {\n    return (N) * (N - 1) + 1;\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    System.out.println(nCycle(N));\n  }\n}\n", "python": "def nCycle(N):\n    return (N) * (N - 1) + 1\n\n\nN = 4\nprint(nCycle(N))\n"}
{"text": "Find the final number obtained after performing the given operation ", "java": "class GFG {\n  static int finalNum(int arr[], int n) {\n    int result = 0;\n    for (int i = 0; i < n; i++) {\n      result = __gcd(result, arr[i]);\n    }\n    return result;\n  }\n\n  static int __gcd(int a, int b) {\n    return b == 0 ? a : __gcd(b, a % b);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 9, 6, 36};\n    int n = arr.length;\n    System.out.print(finalNum(arr, n));\n  }\n}\n", "python": "from math import gcd as __gcd\n\n\ndef finalNum(arr, n):\n    result = arr[0]\n    for i in arr:\n        result = __gcd(result, i)\n    return result\n\n\narr = [3, 9, 6, 36]\nn = len(arr)\nprint(finalNum(arr, n))\n"}
{"text": "Replace two substrings ( of a string ) with each other ", "java": "class GFG {\n  static String updateString(String S, String A, String B) {\n    int l = A.length();\n    for (int i = 0; i + l <= S.length(); i++) {\n      String curr = S.substring(i, i + l);\n      if (curr.equals(A)) {\n        String new_string = S.substring(0, i) + B + S.substring(i + l, S.length());\n        S = new_string;\n        i += l - 1;\n      } else {\n        String new_string = S.substring(0, i) + A + S.substring(i + l, S.length());\n        S = new_string;\n        i += l - 1;\n      }\n    }\n    return S;\n  }\n\n  public static void main(String[] args) {\n    String S = \" aab \";\n    String A = \" aa \";\n    String B = \" bb \";\n    System.out.println(updateString(S, A, B));\n  }\n}\n", "python": "def updateString(S, A, B):\n    l = len(A)\n    i = 0\n    while i + l <= len(S):\n        curr = S[i : i + l]\n        if curr == A:\n            new_string = S[0:i] + B + S[i + l : len(S)]\n            S = new_string\n            i += l - 1\n        else:\n            new_string = S[0:i] + A + S[i + l : len(S)]\n            S = new_string\n            i += l - 1\n        i += 1\n    return S\n\n\nif __name__ == \" _ _ main _ _ \":\n    S = \" aab \"\n    A = \" aa \"\n    B = \" bb \"\n    print(updateString(S, A, B))\n"}
{"text": "Minimum number of alternate subsequences required to be removed to empty a Binary String ", "java": "import java.util.*;\n\nclass GFG {\n  static void minOpsToEmptyString(String s) {\n    int ans = Integer.MIN_VALUE;\n    int cn0 = 0;\n    int cn1 = 0;\n    for (int i = 0; i < s.length(); i++) {\n      if (s.charAt(i) == '0') {\n        if (cn1 > 0) cn1--;\n        cn0++;\n      } else {\n        if (cn0 > 0) cn0--;\n        cn1++;\n      }\n      ans = Math.max(ans, Math.max(cn0, cn1));\n    }\n    System.out.print(ans);\n  }\n\n  public static void main(String[] args) {\n    String S = \"010101\";\n    minOpsToEmptyString(S);\n  }\n}\n", "python": "def minOpsToEmptyString(s):\n    ans = -(10 ** 9)\n    cn0 = 0\n    cn1 = 0\n    for i in range(len(s)):\n        if s[i] == \"0\":\n            if cn1 > 0:\n                cn1 -= 1\n            cn0 += 1\n        else:\n            if cn0 > 0:\n                cn0 -= 1\n            cn1 += 1\n        ans = max([ans, cn0, cn1])\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    S = \"010101\"\n    minOpsToEmptyString(S)\n"}
{"text": "Modify characters of a string by adding integer values of same ", "java": "import java.util.*;\n\nclass GFG {\n  static void addASCII(char[] S, char[] N) {\n    for (int i = 0; i < S.length; i++) {\n      int a = (int) (N[i]) - '0';\n      int b = (int) (S[i]) + a;\n      if (b > 122) b -= 26;\n      S[i] = (char) (b);\n    }\n    System.out.print(S);\n  }\n\n  public static void main(String[] args) {\n    String S = \" sun \", N = \"966\";\n    addASCII(S.toCharArray(), N.toCharArray());\n  }\n}\n", "python": "def addASCII(S, N):\n    for i in range(len(S)):\n        a = ord(N[i]) - ord(\"0\")\n        b = ord(S[i]) + a\n        if b > 122:\n            b -= 26\n        S = S.replace(S[i], chr(b))\n    print(S)\n\n\nif __name__ == \" _ _ main _ _ \":\n    S = \" sun \"\n    N = \"966\"\n    addASCII(S, N)\n"}
{"text": "Longest Substring that can be made a palindrome by swapping of characters ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int longestSubstring(String s) {\n    int dp[] = new int[1024];\n    Arrays.fill(dp, s.length());\n    int res = 0, mask = 0;\n    dp[0] = -1;\n    for (int i = 0; i < s.length(); ++i) {\n      mask ^= 1 << (s.charAt(i) - '0');\n      res = Math.max(res, i - dp[mask]);\n      for (int j = 0; j <= 9; ++j) res = Math.max(res, i - dp[mask ^ (1 << j)]);\n      dp[mask] = Math.min(dp[mask], i);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    String s = \"3242415\";\n    System.out.println(longestSubstring(s));\n  }\n}\n", "python": "def longestSubstring(s):\n    dp = [1024 for i in range(1024)]\n    res, mask = 0, 0\n    dp[0] = -1\n    for i in range(len(s)):\n        mask ^= 1 << (ord(s[i]) - ord(\"0\"))\n        res = max(res, i - dp[mask])\n        for j in range(10):\n            res = max(res, i - dp[mask ^ (1 << j)])\n        dp[mask] = min(dp[mask], i)\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \"3242415\"\n    print(longestSubstring(s))\n"}
{"text": "Print the middle character of a string ", "java": "class GFG {\n  public static void printMiddleCharacter(String str) {\n    int len = str.length();\n    int middle = len / 2;\n    System.out.println(str.charAt(middle));\n  }\n\n  public static void main(String args[]) {\n    String str = \" GeeksForGeeks \";\n    printMiddleCharacter(str);\n  }\n}\n", "python": "def printMiddleCharacter(str):\n    length = len(str)\n    middle = length // 2\n    print(str[middle])\n\n\nstr = \" GeeksForGeeks \"\nprintMiddleCharacter(str)\n"}
{"text": "Number formed by flipping all bits to the left of rightmost set bit ", "java": "import java.util.*;\n\nclass GFG {\n  static int totCount;\n  static int firstCount;\n\n  static void getTotCount(int num) {\n    totCount = 1;\n    firstCount = 1;\n    int temp = 1;\n    while ((num & temp) == 0) {\n      temp = temp << 1;\n      totCount += 1;\n    }\n    firstCount = totCount;\n    temp = num >> totCount;\n    while (temp != 0) {\n      totCount += 1;\n      temp = temp >> 1;\n    }\n  }\n\n  static int flipBitsFromRightMostSetBit(int num) {\n    getTotCount(num);\n    int num1 = num ^ ((1 << totCount) - 1);\n    num1 = num1 ^ ((1 << firstCount) - 1);\n    return num1;\n  }\n\n  public static void main(String[] args) {\n    int n = 120;\n    System.out.println(flipBitsFromRightMostSetBit(n));\n  }\n}\n", "python": "def getTotCount(num):\n    totCount = 1\n    firstCount = 1\n    temp = 1\n    while not (num & temp):\n        temp = temp << 1\n        totCount += 1\n    firstCount = totCount\n    temp = num >> totCount\n    while temp:\n        totCount += 1\n        temp = temp >> 1\n    return totCount, firstCount\n\n\ndef flipBitsFromRightMostSetBit(num):\n    totbit, firstbit = getTotCount(num)\n    num1 = num ^ ((1 << totbit) - 1)\n    num1 = num1 ^ ((1 << firstbit) - 1)\n    return num1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 120\n    print(flipBitsFromRightMostSetBit(n))\n"}
{"text": "Count of non ", "java": "import java.util.*;\n\nclass GFG {\n  static long power(long base, long pow) {\n    long res = 1;\n    while (pow > 0) {\n      if ((pow & 1) == 1) res = (res * base);\n      base = (base * base);\n      pow >>= 1;\n    }\n    return res;\n  }\n\n  static long countNonPalindromicString(long n, long m) {\n    long total = power(n, m);\n    long palindrome = power(n, m / 2 + m % 2);\n    long count = total - palindrome;\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 3, m = 5;\n    System.out.println(countNonPalindromicString(n, m));\n  }\n}\n", "python": "def power(base, pwr):\n    res = 1\n    while pwr > 0:\n        if pwr & 1:\n            res = res * base\n        base = base * base\n        pwr >>= 1\n    return res\n\n\ndef countNonPalindromicString(n, m):\n    total = power(n, m)\n    palindrome = power(n, m // 2 + m % 2)\n    count = total - palindrome\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    m = 5\n    print(countNonPalindromicString(n, m))\n"}
{"text": "Check if a number ends with another number or not ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean checkSuffix(int A, int B) {\n    int digit_B = (int) (Math.log10(B) + 1);\n    A -= B;\n    return (A % (int) (Math.pow(10, digit_B)) > 0);\n  }\n\n  public static void main(String[] args) {\n    int A = 12345, B = 45;\n    boolean result = checkSuffix(A, B);\n    if (!result) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef checkSuffix(A, B):\n    digit_B = int(math.log10(B)) + 1\n    A -= B\n    return A % int(math.pow(10, digit_B))\n\n\nA = 12345\nB = 45\nresult = checkSuffix(A, B)\nif result == 0:\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Count of 1 ", "java": "class GFG {\n  static int countChars(String str, int n) {\n    int i = 0, cnt = 0;\n    while (i < n) {\n      if (str.charAt(i) == '0') i += 1;\n      else i += 2;\n      cnt += 1;\n    }\n    return cnt;\n  }\n\n  public static void main(String[] args) {\n    String str = \"11010\";\n    int n = str.length();\n    System.out.println(countChars(str, n));\n  }\n}\n", "python": "def countChars(string, n):\n    i = 0\n    cnt = 0\n    while i < n:\n        if string[i] == \"0\":\n            i += 1\n        else:\n            i += 2\n        cnt += 1\n    return cnt\n\n\nif __name__ == \" _ _ main _ _ \":\n    string = \"11010\"\n    n = len(string)\n    print(countChars(string, n))\n"}
{"text": "Find the number of strings formed using distinct characters of a given string ", "java": "import java.util.*;\n\nclass GFG {\n  static int fact(int n) {\n    int fact = 1;\n    for (int i = 1; i <= n; i++) fact *= i;\n    return fact;\n  }\n\n  static int countStrings(String str, int n) {\n    Set<Character> distinct_char = new HashSet<>();\n    for (int i = 0; i < n; i++) {\n      distinct_char.add(str.charAt(i));\n    }\n    return fact(distinct_char.size());\n  }\n\n  public static void main(String[] args) {\n    String str = \" geeksforgeeks \";\n    int n = str.length();\n    System.out.println(countStrings(str, n));\n  }\n}\n", "python": "def fact(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\n\ndef countStrings(string, n):\n    distinct_char = set()\n    for i in range(n):\n        distinct_char.add(string[i])\n    return fact(len(distinct_char))\n\n\nif __name__ == \" _ _ main _ _ \":\n    string = \" geeksforgeeks \"\n    n = len(string)\n    print(countStrings(string, n))\n"}
{"text": "Maximum sum and product of the M consecutive digits in a number ", "java": "import java.io.*;\n\nclass GFG {\n  static void maxProductSum(String str, int m) {\n    int n = str.length();\n    int maxProd = Integer.MIN_VALUE, maxSum = Integer.MIN_VALUE;\n    for (int i = 0; i <= n - m; i++) {\n      int product = 1, sum = 0;\n      for (int j = i; j < m + i; j++) {\n        product = product * (str.charAt(j) - '0');\n        sum = sum + (str.charAt(j) - '0');\n      }\n      maxProd = Math.max(maxProd, product);\n      maxSum = Math.max(maxSum, sum);\n    }\n    System.out.println(\" Maximum \u2581 Product \u2581 = \u2581 \" + maxProd);\n    System.out.print(\" Maximum Sum = \" + maxSum);\n  }\n\n  public static void main(String[] args) {\n    String str = \"3605356297\";\n    int m = 3;\n    maxProductSum(str, m);\n  }\n}\n", "python": "import sys\n\n\ndef maxProductSum(string, m):\n    n = len(string)\n    maxProd, maxSum = (-(sys.maxsize) - 1, -(sys.maxsize) - 1)\n    for i in range(n - m + 1):\n        product, sum = 1, 0\n        for j in range(i, m + i):\n            product = product * (ord(string[j]) - ord(\"0\"))\n            sum = sum + (ord(string[j]) - ord(\"0\"))\n        maxProd = max(maxProd, product)\n        maxSum = max(maxSum, sum)\n    print(\" Maximum \u2581 Product \u2581 = \", maxProd)\n    print(\" Maximum \u2581 sum \u2581 = \", maxSum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    string = \"3605356297\"\n    m = 3\n    maxProductSum(string, m)\n"}
{"text": "Program to find remainder when large number is divided by r ", "java": "class GFG {\n  static int Remainder(String str, int R) {\n    int len = str.length();\n    int Num, Rem = 0;\n    for (int i = 0; i < len; i++) {\n      Num = Rem * 10 + (str.charAt(i) - '0');\n      Rem = Num % R;\n    }\n    return Rem;\n  }\n\n  public static void main(String[] args) {\n    String str = \"13589234356546756\";\n    int R = 13;\n    System.out.println(Remainder(str, R));\n  }\n}\n", "python": "def Remainder(str, R):\n    l = len(str)\n    Rem = 0\n    for i in range(l):\n        Num = Rem * 10 + (ord(str[i]) - ord(\"0\"))\n        Rem = Num % R\n    return Rem\n\n\nif __name__ == \" _ _ main _ _ \":\n    str = \"13589234356546756\"\n    R = 13\n    print(Remainder(str, R))\n"}
{"text": "Alternatively Merge two Strings in Java ", "java": "public class mergeString {\n  public static String merge(String s1, String s2) {\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < s1.length() || i < s2.length(); i++) {\n      if (i < s1.length()) result.append(s1.charAt(i));\n      if (i < s2.length()) result.append(s2.charAt(i));\n    }\n    return result.toString();\n  }\n\n  public static void main(String[] args) {\n    String s1 = \" geeks \";\n    String s2 = \" forgeeks \";\n    System.out.println(merge(s1, s2));\n  }\n}\n", "python": "def merge(s1, s2):\n    result = \" \"\n    i = 0\n    while (i < len(s1)) or (i < len(s2)):\n        if i < len(s1):\n            result += s1[i]\n        if i < len(s2):\n            result += s2[i]\n        i += 1\n    return result\n\n\ns1 = \" geeks \"\ns2 = \" forgeeks \"\nprint(merge(s1, s2))\n"}
{"text": "Number of palindromic permutations ", "java": "class GFG {\n  static final int MAX = 256;\n\n  static long fact(int n) {\n    long res = 1;\n    for (int i = 2; i <= n; i++) res = res * i;\n    return res;\n  }\n\n  static int countPalinPermutations(String str) {\n    int n = str.length();\n    int freq[] = new int[MAX];\n    for (int i = 0; i < n; i++) freq[str.charAt(i)]++;\n    long res = fact(n / 2);\n    boolean oddFreq = false;\n    for (int i = 0; i < MAX; i++) {\n      int half = freq[i] / 2;\n      if (freq[i] % 2 != 0) {\n        if (oddFreq == true) return 0;\n        oddFreq = true;\n      }\n      res = res / fact(half);\n    }\n    return (int) res;\n  }\n\n  public static void main(String[] args) {\n    String str = \" gffg \";\n    System.out.print(countPalinPermutations(str));\n  }\n}\n", "python": "MAX = 256\n\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\n\n\ndef countPalinPermutations(str):\n    global MAX\n    n = len(str)\n    freq = [0] * MAX\n    for i in range(0, n):\n        freq[ord(str[i])] = freq[ord(str[i])] + 1\n    res = fact(int(n / 2))\n    oddFreq = False\n    for i in range(0, MAX):\n        half = int(freq[i] / 2)\n        if freq[i] % 2 != 0:\n            if oddFreq == True:\n                return 0\n            oddFreq = True\n        res = int(res / fact(half))\n    return res\n\n\nstr = \" gffg \"\nprint(countPalinPermutations(str))\n"}
{"text": "Check whether second string can be formed from characters of first string ", "java": "class GFG {\n  static int MAX = 256;\n\n  static boolean canMakeStr2(String str1, String str2) {\n    int[] count = new int[MAX];\n    char[] str3 = str1.toCharArray();\n    for (int i = 0; i < str3.length; i++) count[str3[i]]++;\n    char[] str4 = str2.toCharArray();\n    for (int i = 0; i < str4.length; i++) {\n      if (count[str4[i]] == 0) return false;\n      count[str4[i]]--;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    String str1 = \" geekforgeeks \";\n    String str2 = \" for \";\n    if (canMakeStr2(str1, str2)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def canMakeStr2(s1, s2):\n    count = {s1[i]: 0 for i in range(len(s1))}\n    for i in range(len(s1)):\n        count[s1[i]] += 1\n    for i in range(len(s2)):\n        if count.get(s2[i]) == None or count[s2[i]] == 0:\n            return False\n        count[s2[i]] -= 1\n    return True\n\n\ns1 = \" geekforgeeks \"\ns2 = \" for \"\nif canMakeStr2(s1, s2):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Minimum reduce operations to convert a given string into a palindrome ", "java": "import java.io.*;\n\nclass GFG {\n  static int countReduce(String str) {\n    int n = str.length();\n    int res = 0;\n    for (int i = 0; i < n / 2; i++) res += Math.abs(str.charAt(i) - str.charAt(n - i - 1));\n    return res;\n  }\n\n  public static void main(String[] args) {\n    String str = \" abcd \";\n    System.out.println(countReduce(str));\n  }\n}\n", "python": "def countReduce(str):\n    n = len(str)\n    res = 0\n    for i in range(0, int(n / 2)):\n        res += abs(int(ord(str[i])) - int(ord(str[n - i - 1])))\n    return res\n\n\nstr = \" abcd \"\nprint(countReduce(str))\n"}
{"text": "C ++ program to concatenate a string given number of times ", "java": "class GFG {\n  static String repeat(String s, int n) {\n    String s1 = s;\n    for (int i = 1; i < n; i++) s += s1;\n    return s;\n  }\n\n  public static void main(String[] args) {\n    String s = \" geeks \";\n    int n = 3;\n    System.out.println(repeat(s, n));\n  }\n}\n", "python": "def repeat(s, n):\n    s1 = s\n    for i in range(1, n):\n        s += s1\n    return s\n\n\ns = \" geeks \"\nn = 3\nprint(repeat(s, n))\n"}
{"text": "Reverse string without using any temporary variable ", "java": "class GFG {\n  public static void main(String[] args) {\n    StringBuilder str = new StringBuilder(\" geeksforgeeks \");\n    str.reverse();\n    System.out.println(str);\n  }\n}\n", "python": "str = \" geeksforgeeks \"\nstr = \" \".join(reversed(str))\nprint(str)\n"}
{"text": "Recursive function to check if a string is palindrome ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isPalRec(String str, int s, int e) {\n    if (s == e) return true;\n    if ((str.charAt(s)) != (str.charAt(e))) return false;\n    if (s < e + 1) return isPalRec(str, s + 1, e - 1);\n    return true;\n  }\n\n  static boolean isPalindrome(String str) {\n    int n = str.length();\n    if (n == 0) return true;\n    return isPalRec(str, 0, n - 1);\n  }\n\n  public static void main(String args[]) {\n    String str = \" geeg \";\n    if (isPalindrome(str)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isPalRec(st, s, e):\n    if s == e:\n        return True\n    if st[s] != st[e]:\n        return False\n    if s < e + 1:\n        return isPalRec(st, s + 1, e - 1)\n    return True\n\n\ndef isPalindrome(st):\n    n = len(st)\n    if n == 0:\n        return True\n    return isPalRec(st, 0, n - 1)\n\n\nst = \" geeg \"\nif isPalindrome(st):\n    print \" Yes \"\nelse:\n    print \" No \"\n"}
{"text": "Queries for characters in a repeated string ", "java": "import java.io.*;\n\npublic class GFG {\n  static void query(String s, int i, int j) {\n    int n = s.length();\n    i %= n;\n    j %= n;\n    if (s.charAt(i) == s.charAt(j)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n\n  public static void main(String[] args) {\n    String X = \" geeksforgeeks \";\n    query(X, 0, 8);\n    query(X, 8, 13);\n    query(X, 6, 15);\n  }\n}\n", "python": "def query(s, i, j):\n    n = len(s)\n    i %= n\n    j %= n\n    print(\" Yes \") if s[i] == s[j] else print(\" No \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    X = \" geeksforgeeks \"\n    query(X, 0, 8)\n    query(X, 8, 13)\n    query(X, 6, 15)\n"}
{"text": "Remove repeated digits in a given number ", "java": "import java.io.*;\n\nclass GFG {\n  static long removeRecur(long n) {\n    long prev_digit = n % 10;\n    long pow = 10;\n    long res = prev_digit;\n    while (n > 0) {\n      long curr_digit = n % 10;\n      if (curr_digit != prev_digit) {\n        res += curr_digit * pow;\n        prev_digit = curr_digit;\n        pow *= 10;\n      }\n      n = n / 10;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    long n = 12224;\n    System.out.println(removeRecur(n));\n  }\n}\n", "python": "def removeRecur(n):\n    prev_digit = n % 10\n    pow = 10\n    res = prev_digit\n    while n:\n        curr_digit = n % 10\n        if curr_digit != prev_digit:\n            res += curr_digit * pow\n            prev_digit = curr_digit\n            pow *= 10\n        n = int(n / 10)\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 12224\n    print(removeRecur(n))\n"}
{"text": "Given a string , find its first non ", "java": "public class GFG {\n  public static int firstNonRepeating(String str) {\n    int[] fi = new int[256];\n    for (int i = 0; i < 256; i++) fi[i] = -1;\n    for (int i = 0; i < str.length(); i++) {\n      if (fi[str.charAt(i)] == -1) {\n        fi[str.charAt(i)] = i;\n      } else {\n        fi[str.charAt(i)] = -2;\n      }\n    }\n    int res = Integer.MAX_VALUE;\n    for (int i = 0; i < 256; i++) {\n      if (fi[i] >= 0) res = Math.min(res, fi[i]);\n    }\n    if (res == Integer.MAX_VALUE) return -1;\n    else return res;\n  }\n\n  public static void main(String args[]) {\n    String str;\n    str = \" geeksforgeeks \";\n    int firstIndex = firstNonRepeating(str);\n    if (firstIndex == -1)\n      System.out.println(\n          \" Either \u2581 all \u2581 characters \u2581 are \u2581 repeating \u2581 or \u2581 string \u2581 is \u2581 empty \");\n    else\n      System.out.println(\" First \u2581 non - repeating \u2581 character \u2581 is \u2581 \" + str.charAt(firstIndex));\n  }\n}\n", "python": "NO_OF_CHARS = 256\n\n\ndef getCharCountArray(string):\n    count = [0] * NO_OF_CHARS\n    for i in string:\n        count[ord(i)] += 1\n    return count\n\n\ndef firstNonRepeating(string):\n    count = getCharCountArray(string)\n    index = -1\n    k = 0\n    for i in string:\n        if count[ord(i)] == 1:\n            index = k\n            break\n        k += 1\n    return index\n\n\nstring = \" geeksforgeeks \"\nindex = firstNonRepeating(string)\nif index == 1:\n    print \" Either \u2581 all \u2581 characters \u2581 are \u2581 repeating \u2581 or \u2581 string \u2581 is \u2581 empty \"\nelse:\n    print \" First \u2581 non - repeating \u2581 character \u2581 is \u2581 \" + string[index]\n"}
{"text": "Generate all the binary strings of N bits ", "java": "import java.util.*;\n\nclass GFG {\n  static void printTheArray(int arr[], int n) {\n    for (int i = 0; i < n; i++) {\n      System.out.print(arr[i] + \" \u2581 \");\n    }\n    System.out.println();\n  }\n\n  static void generateAllBinaryStrings(int n, int arr[], int i) {\n    if (i == n) {\n      printTheArray(arr, n);\n      return;\n    }\n    arr[i] = 0;\n    generateAllBinaryStrings(n, arr, i + 1);\n    arr[i] = 1;\n    generateAllBinaryStrings(n, arr, i + 1);\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    int[] arr = new int[n];\n    generateAllBinaryStrings(n, arr, 0);\n  }\n}\n", "python": "def printTheArray(arr, n):\n    for i in range(0, n):\n        print(arr[i], end=\" \u2581 \")\n    print()\n\n\ndef generateAllBinaryStrings(n, arr, i):\n    if i == n:\n        printTheArray(arr, n)\n        return\n    arr[i] = 0\n    generateAllBinaryStrings(n, arr, i + 1)\n    arr[i] = 1\n    generateAllBinaryStrings(n, arr, i + 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    arr = [None] * n\n    generateAllBinaryStrings(n, arr, 0)\n"}
{"text": "Frequency of an integer in the given array using Divide and Conquer ", "java": "class GFG {\n  static int count(int arr[], int low, int high, int x) {\n    if ((low > high) || (low == high && arr[low] != x)) return 0;\n    if (low == high && arr[low] == x) return 1;\n    return count(arr, low, (low + high) / 2, x) + count(arr, 1 + (low + high) / 2, high, x);\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {30, 1, 42, 5, 56, 3, 56, 9};\n    int n = arr.length;\n    int x = 56;\n    System.out.print(count(arr, 0, n - 1, x));\n  }\n}\n", "python": "def count(arr, low, high, x):\n    if (low > high) or (low == high and arr[low] != x):\n        return 0\n    if low == high and arr[low] == x:\n        return 1\n    return count(arr, low, (low + high) // 2, x) + count(\n        arr, 1 + (low + high) // 2, high, x\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [30, 1, 42, 5, 56, 3, 56, 9]\n    n = len(arr)\n    x = 56\n    print(count(arr, 0, n - 1, x))\n"}
{"text": "Area of a triangle with two vertices at midpoints of opposite sides of a square and the other vertex lying on vertex of a square ", "java": "import java.util.*;\n\nclass GFG {\n  static double areaOftriangle(int side) {\n    double a = Math.sqrt(Math.pow(side / 2, 2) + Math.pow(side / 2, 2));\n    double b = Math.sqrt(Math.pow(side, 2) + Math.pow(side / 2, 2));\n    double c = Math.sqrt(Math.pow(side, 2) + Math.pow(side / 2, 2));\n    double s = (a + b + c) / 2;\n    double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n  }\n\n  public static void main(String[] args) {\n    int N = 10;\n    System.out.print(areaOftriangle(N));\n  }\n}\n", "python": "from math import sqrt\n\n\ndef areaOftriangle(side):\n    a = sqrt(pow(side / 2, 2) + pow(side / 2, 2))\n    b = sqrt(pow(side, 2) + pow(side / 2, 2))\n    c = sqrt(pow(side, 2) + pow(side / 2, 2))\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 10\n    print(areaOftriangle(N))\n"}
{"text": "Equation of a straight line with perpendicular distance D from origin and an angle A between the perpendicular from origin and x ", "java": "class GFG {\n  static void findLine(int distance, float degree) {\n    float x = (float) (degree * 3.14159 / 180);\n    if (degree > 90) {\n      System.out.print(\" Not \u2581 Possible \");\n      return;\n    }\n    float result_1 = (float) Math.sin(x);\n    float result_2 = (float) Math.cos(x);\n    System.out.print(\n        String.format(\" % .2f \", result_2)\n            + \" x \u2581 + \"\n            + String.format(\" % .2f \", result_1)\n            + \" y \u2581 = \u2581 \"\n            + distance);\n  }\n\n  public static void main(String[] args) {\n    int D = 10;\n    float A = 30;\n    findLine(D, A);\n  }\n}\n", "python": "import math\n\n\ndef findLine(distance, degree):\n    x = degree * 3.14159 / 180\n    if degree > 90:\n        print(\" Not \u2581 Possible \")\n        return\n    result_1 = math.sin(x)\n    result_2 = math.cos(x)\n    print(\n        \" % .2f \" % result_2,\n        \" x \u2581 + \",\n        \" % .2f \" % result_1,\n        \" y \u2581 = \u2581 \",\n        distance,\n        sep=\" \",\n    )\n\n\nD = 10\nA = 30\nfindLine(D, A)\n"}
{"text": "Program to find Length of Latus Rectum of an Ellipse ", "java": "import java.util.*;\n\nclass GFG {\n  static double lengthOfLatusRectum(double A, double B) {\n    double major = 2.0 * A;\n    double minor = 2.0 * B;\n    double latus_rectum = (minor * minor) / major;\n    return latus_rectum;\n  }\n\n  public static void main(String[] args) {\n    double A = 3.0, B = 2.0;\n    System.out.print(lengthOfLatusRectum(A, B));\n  }\n}\n", "python": "def lengthOfLatusRectum(A, B):\n    major = 2.0 * A\n    minor = 2.0 * B\n    latus_rectum = (minor * minor) / major\n    return latus_rectum\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = 3.0\n    B = 2.0\n    print(\" % .5f \" % lengthOfLatusRectum(A, B))\n"}
{"text": "Program to find slant height of cone and pyramid ", "java": "import java.io.*;\n\nclass GFG {\n  static void coneSlantHeight(double cone_h, double cone_r) {\n    double slant_height_cone = Math.sqrt(Math.pow(cone_h, 2) + Math.pow(cone_r, 2));\n    System.out.println(\" Slant \u2581 height \u2581 of \u2581 cone \u2581 is : \u2581 \" + slant_height_cone);\n  }\n\n  static void pyramidSlantHeight(double pyramid_h, double pyramid_s) {\n    double slant_height_pyramid = Math.sqrt(Math.pow(pyramid_s / 2, 2) + Math.pow(pyramid_h, 2));\n    System.out.println(\" Slant \u2581 height \u2581 of \u2581 pyramid \u2581 is : \u2581 \" + slant_height_pyramid);\n  }\n\n  public static void main(String[] args) {\n    double H1 = 4.5, R = 6;\n    coneSlantHeight(H1, R);\n    double H2 = 4, S = 4.8;\n    pyramidSlantHeight(H2, S);\n  }\n}\n", "python": "from math import sqrt, pow\n\n\ndef coneSlantHeight(cone_h, cone_r):\n    slant_height_cone = sqrt(pow(cone_h, 2) + pow(cone_r, 2))\n    print(\" Slant \u2581 height \u2581 of \u2581 cone \u2581 is : \", slant_height_cone)\n\n\ndef pyramidSlantHeight(pyramid_h, pyramid_s):\n    slant_height_pyramid = sqrt(pow(pyramid_s / 2, 2) + pow(pyramid_h, 2))\n    print(\n        \" Slant \u2581 height \u2581 of \u2581 pyramid \u2581 is : \",\n        \" { : . 5f } \".format(slant_height_pyramid),\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    H1 = 4.5\n    R = 6\n    coneSlantHeight(H1, R)\n    H2 = 4\n    S = 4.8\n    pyramidSlantHeight(H2, S)\n"}
{"text": "Program to find the length of Latus Rectum of a Parabola ", "java": "class GFG {\n  static class pair {\n    float first;\n    float second;\n\n    public pair(float first, float second) {\n      this.first = first;\n      this.second = second;\n    }\n  }\n\n  static float distance(float x1, float y1, float x2, float y2) {\n    return (float) Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  }\n\n  static void lengthOfLatusRectum(float a, float b, float c) {\n    pair vertex = new pair((-b / (2 * a)), (((4 * a * c) - (b * b)) / (4 * a)));\n    pair focus = new pair((-b / (2 * a)), (((4 * a * c) - (b * b) + 1) / (4 * a)));\n    System.out.print(\n        4\n            * distance(\n                (float) focus.first,\n                (float) focus.second,\n                (float) vertex.first,\n                (float) vertex.second));\n  }\n\n  public static void main(String[] args) {\n    float a = 3, b = 5, c = 1;\n    lengthOfLatusRectum(a, b, c);\n  }\n}\n", "python": "from math import sqrt\n\n\ndef distance(x1, y1, x2, y2):\n    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))\n\n\ndef lengthOfLatusRectum(a, b, c):\n    vertex = [(-b / (2 * a)), (((4 * a * c) - (b * b)) / (4 * a))]\n    focus = [(-b / (2 * a)), (((4 * a * c) - (b * b) + 1) / (4 * a))]\n    print(\" { : . 6f } \".format(4 * distance(focus[0], focus[1], vertex[0], vertex[1])))\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 3\n    b = 5\n    c = 1\n    lengthOfLatusRectum(a, b, c)\n"}
{"text": "Program to convert polar co ", "java": "import java.util.*;\n\nclass GFG {\n  static double ConvertDegToRad(double degree) {\n    double pi = 3.14159;\n    return (degree * (pi / 180.0));\n  }\n\n  static void ConvertToCartesian(double[] polar) {\n    polar[1] = ConvertDegToRad(polar[1]);\n    double[] cartesian = {polar[0] * Math.cos(polar[1]), polar[0] * Math.sin(polar[1])};\n    System.out.print(\n        String.format(\" % .3f \", cartesian[0]) + \" \u2581 \" + String.format(\" % .3f \", cartesian[1]));\n  }\n\n  public static void main(String[] args) {\n    double[] polar = {1.4142, 45};\n    ConvertToCartesian(polar);\n  }\n}\n", "python": "import math\n\n\ndef ConvertDegToRad(degree):\n    pi = 3.14159\n    return degree * (pi / 180.0)\n\n\ndef ConvertToCartesian(polar):\n    polar[1] = ConvertDegToRad(polar[1])\n    cartesian = [polar[0] * math.cos(polar[1]), polar[0] * math.sin(polar[1])]\n    print(\" % .3f \" % cartesian[0], \" % .3f \" % cartesian[1])\n\n\nif __name__ == \" _ _ main _ _ \":\n    polar = [1.4142, 45]\n    ConvertToCartesian(polar)\n"}
{"text": "Count triangles required to form a House of Cards of height N ", "java": "\nclass GFG {\n  public static int noOfTriangles(int n) {\n    return (n * (n + 2) * (2 * n + 1) / 8);\n  }\n\n  public static void main(String args[]) {\n    int n = 3;\n    System.out.print(noOfTriangles(n));\n  }\n}\n", "python": "def noOfTriangles(n):\n    return n * (n + 2) * (2 * n + 1) // 8\n\n\nn = 3\nprint(noOfTriangles(n))\n"}
{"text": "Check if N contains all digits as K in base B ", "java": "import java.util.*;\n\nclass GFG {\n  static int findNumberOfDigits(int n, int base) {\n    int dig = ((int) Math.floor(Math.log(n) / Math.log(base)) + 1);\n    return dig;\n  }\n\n  static boolean isAllKs(int n, int b, int k) {\n    int len = findNumberOfDigits(n, b);\n    int sum = k * (1 - (int) Math.pow(b, len)) / (1 - b);\n    return sum == n;\n  }\n\n  public static void main(String[] args) {\n    int N = 13;\n    int B = 3;\n    int K = 1;\n    if (isAllKs(N, B, K)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "import math\n\n\ndef findNumberOfDigits(n, base):\n    dig = math.floor(math.log(n) / math.log(base)) + 1\n    return dig\n\n\ndef isAllKs(n, b, k):\n    len = findNumberOfDigits(n, b)\n    sum = k * (1 - pow(b, len)) / (1 - b)\n    return sum == N\n\n\nN = 13\nB = 3\nK = 1\nif isAllKs(N, B, K):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Count of rectangles possible from N and M straight lines parallel to X and Y axis respectively ", "java": "class GFG {\n  static int count_rectangles(int N, int M) {\n    int p_x = (N * (N - 1)) / 2;\n    int p_y = (M * (M - 1)) / 2;\n    return p_x * p_y;\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    int M = 6;\n    System.out.print(count_rectangles(N, M));\n  }\n}\n", "python": "def count_rectangles(N, M):\n    p_x = (N * (N - 1)) // 2\n    p_y = (M * (M - 1)) // 2\n    return p_x * p_y\n\n\nN = 3\nM = 6\nprint(count_rectangles(N, M))\n"}
{"text": "Angle between a Pair of Lines in 3D ", "java": "import java.util.*;\n\nclass GFG {\n  static void calculateAngle(\n      int x1, int y1, int z1, int x2, int y2, int z2, int x3, int y3, int z3) {\n    int ABx = x1 - x2;\n    int ABy = y1 - y2;\n    int ABz = z1 - z2;\n    int BCx = x3 - x2;\n    int BCy = y3 - y2;\n    int BCz = z3 - z2;\n    double dotProduct = ABx * BCx + ABy * BCy + ABz * BCz;\n    double magnitudeAB = ABx * ABx + ABy * ABy + ABz * ABz;\n    double magnitudeBC = BCx * BCx + BCy * BCy + BCz * BCz;\n    double angle = dotProduct;\n    angle /= Math.sqrt(magnitudeAB * magnitudeBC);\n    angle = (angle * 180) / 3.14;\n    System.out.printf(\" % .4f \", Math.abs(angle));\n  }\n\n  public static void main(String[] args) {\n    int x1 = 1, y1 = 3, z1 = 3;\n    int x2 = 3, y2 = 4, z2 = 5;\n    int x3 = 5, y3 = 6, z3 = 9;\n    calculateAngle(x1, y1, z1, x2, y2, z2, x3, y3, z3);\n  }\n}\n", "python": "import math\n\n\ndef calculateAngle(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    ABx = x1 - x2\n    ABy = y1 - y2\n    ABz = z1 - z2\n    BCx = x3 - x2\n    BCy = y3 - y2\n    BCz = z3 - z2\n    dotProduct = ABx * BCx + ABy * BCy + ABz * BCz\n    magnitudeAB = ABx * ABx + ABy * ABy + ABz * ABz\n    magnitudeBC = BCx * BCx + BCy * BCy + BCz * BCz\n    angle = dotProduct\n    angle /= math.sqrt(magnitudeAB * magnitudeBC)\n    angle = (angle * 180) / 3.14\n    print(round(abs(angle), 4))\n\n\nif __name__ == \" _ _ main _ _ \":\n    x1, y1, z1 = 1, 3, 3\n    x2, y2, z2 = 3, 4, 5\n    x3, y3, z3 = 5, 6, 9\n    calculateAngle(x1, y1, z1, x2, y2, z2, x3, y3, z3)\n"}
{"text": "Pentadecagonal Number ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int Pentadecagonal_num(int n) {\n    return (13 * n * n - 11 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(Pentadecagonal_num(n));\n    n = 10;\n    System.out.println(Pentadecagonal_num(n));\n  }\n}\n", "python": "def Pentadecagonal_num(n):\n    return (13 * n * n - 11 * n) / 2\n\n\nn = 3\nprint(int(Pentadecagonal_num(n)))\nn = 10\nprint(int(Pentadecagonal_num(n)))\n"}
{"text": "Octadecagonal Number ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int Octadecagonal_num(int n) {\n    return (16 * n * n - 14 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(Octadecagonal_num(n));\n    n = 10;\n    System.out.println(Octadecagonal_num(n));\n  }\n}\n", "python": "def Octadecagonal_num(n):\n    return (16 * n * n - 14 * n) / 2\n\n\nn = 3\nprint(int(Octadecagonal_num(n)))\nn = 10\nprint(int(Octadecagonal_num(n)))\n"}
{"text": "Find the percentage change in the area of a Rectangle ", "java": "import java.util.*;\n\nclass GFG {\n  static int calculate_change(int length, int breadth) {\n    int change = 0;\n    change = length + breadth + ((length * breadth) / 100);\n    return change;\n  }\n\n  public static void main(String args[]) {\n    int cL = 20;\n    int cB = -10;\n    int cA = calculate_change(cL, cB);\n    System.out.println(+cA);\n  }\n}\n", "python": "def calculate_change(length, breadth):\n    change = 0\n    change = length + breadth + ((length * breadth) // 100)\n    return change\n\n\nif __name__ == \" _ _ main _ _ \":\n    cL = 20\n    cB = -10\n    cA = calculate_change(cL, cB)\n    print(cA)\n"}
{"text": "Program to calculate area of a rhombus whose one side and diagonal are given ", "java": "class GFG {\n  static double area(double d1, double a) {\n    double d2 = Math.sqrt(4 * (a * a) - d1 * d1);\n    double area = 0.5 * d1 * d2;\n    return area;\n  }\n\n  public static void main(String[] args) {\n    double d = 7.07;\n    double a = 5;\n    System.out.println(area(d, a));\n  }\n}\n", "python": "def area(d1, a):\n    d2 = (4 * (a ** 2) - d1 ** 2) ** 0.5\n    area = 0.5 * d1 * d2\n    return area\n\n\nd = 7.07\na = 5\nprint(area(d, a))\n"}
{"text": "Check whether two points ( x1 , y1 ) and ( x2 , y2 ) lie on same side of a given line or not ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean pointsAreOnSameSideOfLine(int a, int b, int c, int x1, int y1, int x2, int y2) {\n    fx1 = a * x1 + b * y1 - c;\n    fx2 = a * x2 + b * y2 - c;\n    if ((fx1 * fx2) > 0) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int a = 1, b = 1, c = 1;\n    int x1 = 1, y1 = 1;\n    int x2 = 2, y2 = 1;\n    if (pointsAreOnSameSideOfLine(a, b, c, x1, y1, x2, y2)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def pointsAreOnSameSideOfLine(a, b, c, x1, y1, x2, y2):\n    fx1 = a * x1 + b * y1 - c\n    fx2 = a * x2 + b * y2 - c\n    if (fx1 * fx2) > 0:\n        return True\n    return False\n\n\na, b, c = 1, 1, 1\nx1, y1 = 1, 1\nx2, y2 = 2, 1\nif pointsAreOnSameSideOfLine(a, b, c, x1, y1, x2, y2):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Percentage increase in volume of the cube if a side of cube is increased by a given percentage ", "java": "import java.io.*;\n\nclass GFG {\n  static void newvol(double x) {\n    System.out.print(\n        \" percentage \u2581 increase \u2581 \"\n            + \" in \u2581 the \u2581 volume \u2581 of \u2581 the \u2581 cube \u2581 is \u2581 \"\n            + (Math.pow(x, 3) / 10000 + 3 * x + (3 * Math.pow(x, 2)) / 100));\n    System.out.print(\" % \");\n  }\n\n  public static void main(String[] args) {\n    double x = 10;\n    newvol(x);\n  }\n}\n", "python": "def newvol(x):\n    print(\n        \" percentage \u2581 increase \" \" in \u2581 the \u2581 volume \u2581 of \u2581 the \u2581 cube \u2581 is \u2581 \",\n        ((x ** (3)) / 10000 + 3 * x + (3 * (x ** (2))) / 100),\n        \" % \",\n    )\n\n\nx = 10\nnewvol(x)\n"}
{"text": "Number of triangles formed by joining vertices of n ", "java": "import java.io.*;\n\nclass GFG {\n  static void findTriangles(int n) {\n    int num = n;\n    System.out.print(num + \" \u2581 \");\n    System.out.print(num * (num - 4) * (num - 5) / 6);\n  }\n\n  public static void main(String[] args) {\n    int n;\n    n = 6;\n    findTriangles(n);\n  }\n}\n", "python": "def findTriangles(n):\n    num = n\n    print(num, end=\" \u2581 \")\n    print(num * (num - 4) * (num - 5) // 6)\n\n\nn = 6\nfindTriangles(n)\n"}
{"text": "Find the radii of the circles which are lined in a row , and distance between the centers of first and last circle is given ", "java": "import java.io.*;\n\nclass GFG {\n  static void radius(int n, int d) {\n    System.out.print(\" The \u2581 radius \u2581 of \u2581 each \u2581 circle \u2581 is \u2581 \" + d / (2 * n - 2));\n  }\n\n  public static void main(String[] args) {\n    int d = 42, n = 4;\n    radius(n, d);\n  }\n}\n", "python": "def radius(n, d):\n    print(\" The \u2581 radius \u2581 of \u2581 each \u2581 circle \u2581 is \u2581 \", d / (2 * n - 2))\n\n\nd = 42\nn = 4\nradius(n, d)\n"}
{"text": "Find the side of the squares which are lined in a row , and distance between the centers of first and last square is given ", "java": "import java.io.*;\n\nclass GFG {\n  static void radius(int n, int d) {\n    System.out.print(\" The \u2581 side \u2581 of \u2581 each \u2581 square \u2581 is \u2581 \" + d / (n - 1));\n  }\n\n  public static void main(String[] args) {\n    int d = 42, n = 4;\n    radius(n, d);\n  }\n}\n", "python": "def radius(n, d):\n    print(\" The \u2581 side \u2581 of \u2581 each \u2581 square \u2581 is \u2581 \", d / (n - 1))\n\n\nd = 42\nn = 4\nradius(n, d)\n"}
{"text": "Number of triangles formed by joining vertices of n ", "java": "class GFG {\n  static void findTriangles(int n) {\n    int num;\n    num = n * (n - 4);\n    System.out.println(num);\n  }\n\n  public static void main(String[] args) {\n    int n;\n    n = 6;\n    findTriangles(n);\n  }\n}\n", "python": "def findTriangles(n):\n    num = n\n    print(num, end=\" \u2581 \")\n    print(num * (num - 4) * (num - 5) // 6)\n\n\nn = 6\nfindTriangles(n)\n"}
{"text": "Find the Diameter or Longest chord of a Circle ", "java": "class GFG {\n  static void diameter(double r) {\n    System.out.println(\n        \" The \u2581 length \u2581 of \u2581 the \u2581 longest \u2581 chord \"\n            + \" \u2581 or \u2581 diameter \u2581 of \u2581 the \u2581 circle \u2581 is \u2581 \"\n            + 2 * r);\n  }\n\n  public static void main(String[] args) {\n    double r = 4;\n    diameter(r);\n  }\n}\n", "python": "def diameter(r):\n    print(\n        \" The \u2581 length \u2581 of \u2581 the \u2581 longest \u2581 chord \",\n        \" \u2581 or \u2581 diameter \u2581 of \u2581 the \u2581 circle \u2581 is \u2581 \",\n        2 * r,\n    )\n\n\nr = 4\ndiameter(r)\n"}
{"text": "Slope of the line parallel to the line with the given slope ", "java": "class GfG {\n  static double getSlope(double m) {\n    return m;\n  }\n\n  public static void main(String[] args) {\n    double m = 2;\n    System.out.println(getSlope(m));\n  }\n}\n", "python": "def getSlope(m):\n    return m\n\n\nm = 2\nprint(getSlope(m))\n"}
{"text": "Total number of triangles formed when there are H horizontal and V vertical lines ", "java": "class GFG {\n  public static int totalTriangles(int h, int v) {\n    if (h == 0 && v == 0) return 1;\n    if (h == 0) return ((v + 1) * (v + 2) / 2);\n    if (v == 0) return (h + 1);\n    int total = (h + 1) * ((v + 1) * (v + 2) / 2);\n    return total;\n  }\n\n  public static void main(String[] args) {\n    int h = 2, v = 2;\n    System.out.print(totalTriangles(h, v));\n  }\n}\n", "python": "def totalTriangles(h, v):\n    if h == 0 and v == 0:\n        return 1\n    if h == 0:\n        return (v + 1) * (v + 2) / 2\n    if v == 0:\n        return h + 1\n    total = (h + 1) * ((v + 1) * (v + 2) / 2)\n    return total\n\n\nh = 2\nv = 2\nprint(int(totalTriangles(h, v)))\n"}
{"text": "Largest sphere that can be inscribed in a right circular cylinder inscribed in a frustum ", "java": "\nclass gfg {\n  static float sph(float r, float R, float h) {\n    if (r < 0 && R < 0 && h < 0) return -1;\n    float x = r;\n    float V = (float) (4 * 3.14f * Math.pow(r, 3)) / 3;\n    return V;\n  }\n\n  public static void main(String[] args) {\n    float r = 5, R = 8, h = 11;\n    System.out.println(sph(r, R, h));\n  }\n}\n", "python": "import math as mt\n\n\ndef sph(r, R, h):\n    if r < 0 and R < 0 and h < 0:\n        return -1\n    x = r\n    V = (4 * 3.14 * pow(r, 3)) / 3\n    return V\n\n\nr, R, h = 5, 8, 11\nprint(sph(r, R, h))\n"}
{"text": "Diagonal of a Regular Pentagon ", "java": "class GFG {\n  static double pentdiagonal(double a) {\n    if (a < 0) return -1;\n    double d = 1.22 * a;\n    return d;\n  }\n\n  public static void main(String args[]) {\n    double a = 6;\n    System.out.println(pentdiagonal(a));\n  }\n}\n", "python": "def pentdiagonal(a):\n    if a < 0:\n        return -1\n    d = 1.22 * a\n    return d\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 6\n    print(pentdiagonal(a))\n"}
{"text": "Area of hexagon with given diagonal length ", "java": "\npublic class GfG {\n  public static float hexagonArea(float d) {\n    return (float) ((3 * Math.sqrt(3) * d * d) / 8);\n  }\n\n  public static void main(String[] args) {\n    float d = 10;\n    System.out.println(\" Area \u2581 of \u2581 hexagon : \u2581 \" + hexagonArea(d));\n  }\n}\n", "python": "from math import sqrt\n\n\ndef hexagonArea(d):\n    return (3 * sqrt(3) * pow(d, 2)) / 8\n\n\nif __name__ == \" _ _ main _ _ \":\n    d = 10\n    print(\" Area \u2581 of \u2581 hexagon : \", round(hexagonArea(d), 3))\n"}
{"text": "Number of squares of side length required to cover an N * M rectangle ", "java": "import java.util.*;\n\nclass solution {\n  static int Squares(int n, int m, int a) {\n    return ((m + a - 1) / a) * ((n + a - 1) / a);\n  }\n\n  public static void main(String arr[]) {\n    int n = 6, m = 6, a = 4;\n    System.out.println(Squares(n, m, a));\n  }\n}\n", "python": "def Squares(n, m, a):\n    return ((m + a - 1) // a) * ((n + a - 1) // a)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 6\n    m = 6\n    a = 4\n    print(Squares(n, m, a))\n"}
{"text": "Length of the Diagonal of the Octagon ", "java": "import java.util.*;\n\nclass solution {\n  static double octadiagonal(double a) {\n    if (a < 0) return -1;\n    return a * Math.sqrt(4 + (2 * Math.sqrt(2)));\n  }\n\n  public static void main(String args[]) {\n    double a = 4;\n    System.out.println(octadiagonal(a));\n  }\n}\n", "python": "import math\n\n\ndef octadiagonal(a):\n    if a < 0:\n        return -1\n    return a * math.sqrt(4 + (2 * math.sqrt(2)))\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 4\n    print(octadiagonal(a))\n"}
{"text": "Program to Calculate the Perimeter of a Decagon ", "java": "import java.io.*;\n\nclass GFG {\n  static void CalPeri() {\n    int S = 5, Perimeter;\n    Perimeter = 10 * S;\n    System.out.println(\" The \u2581 Perimeter \u2581 of \u2581 Decagon \u2581 is \u2581 : \u2581 \" + Perimeter);\n  }\n\n  public static void main(String[] args) {\n    CalPeri();\n  }\n}\n", "python": "def CalPeri():\n    s = 5\n    Perimeter = 10 * s\n    print(\" The \u2581 Perimeter \u2581 of \u2581 Decagon \u2581 is \u2581 : \u2581 \", Perimeter)\n\n\nif __name__ == \" _ _ main _ _ \":\n    CalPeri()\n"}
{"text": "Sum of lengths of all 12 edges of any rectangular parallelepiped ", "java": "import java.io.*;\n\nclass GFG {\n  static double findEdges(double s1, double s2, double s3) {\n    double a = Math.sqrt(s1 * s2 / s3);\n    double b = Math.sqrt(s3 * s1 / s2);\n    double c = Math.sqrt(s3 * s2 / s1);\n    double sum = a + b + c;\n    return 4 * sum;\n  }\n\n  public static void main(String[] args) {\n    double s1, s2, s3;\n    s1 = 65;\n    s2 = 156;\n    s3 = 60;\n    System.out.print(findEdges(s1, s2, s3));\n  }\n}\n", "python": "import math\n\n\ndef findEdges(s1, s2, s3):\n    a = math.sqrt(s1 * s2 / s3)\n    b = math.sqrt(s3 * s1 / s2)\n    c = math.sqrt(s3 * s2 / s1)\n    sum = a + b + c\n    return 4 * sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    s1 = 65\n    s2 = 156\n    s3 = 60\n    print(int(findEdges(s1, s2, s3)))\n"}
{"text": "Maximum number of pieces in N cuts ", "java": "import java.util.*;\n\nclass GFG {\n  public static int findMaximumPieces(int n) {\n    int x = n / 2;\n    return ((x + 1) * (n - x + 1));\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(\n        \" Max \u2581 number \u2581 of \u2581 pieces \u2581 for \u2581 n \u2581 = \u2581 \" + n + \" \u2581 is \u2581 \" + findMaximumPieces(3));\n  }\n}\n", "python": "def findMaximumPieces(n):\n    x = n // 2\n    return (x + 1) * (n - x + 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(\n        \" Max \u2581 number \u2581 of \u2581 pieces \u2581 for \u2581 n \u2581 = \u2581 \"\n        + str(n)\n        + \" \u2581 is \u2581 \"\n        + str(findMaximumPieces(3))\n    )\n"}
{"text": "Angle between two Planes in 3D ", "java": "import java.io.*;\n\nclass GFG {\n  static void distance(float a1, float b1, float c1, float a2, float b2, float c2) {\n    float d = (a1 * a2 + b1 * b2 + c1 * c2);\n    float e1 = (float) Math.sqrt(a1 * a1 + b1 * b1 + c1 * c1);\n    float e2 = (float) Math.sqrt(a2 * a2 + b2 * b2 + c2 * c2);\n    d = d / (e1 * e2);\n    float pi = (float) 3.14159;\n    float A = (180 / pi) * (float) (Math.acos(d));\n    System.out.println(\" Angle \u2581 is \u2581 \" + A + \" \u2581 degree \");\n  }\n\n  public static void main(String[] args) {\n    float a1 = 1;\n    float b1 = 1;\n    float c1 = 2;\n    float d1 = 1;\n    float a2 = 2;\n    float b2 = -1;\n    float c2 = 1;\n    float d2 = -4;\n    distance(a1, b1, c1, a2, b2, c2);\n  }\n}\n", "python": "import math\n\n\ndef distance(a1, b1, c1, a2, b2, c2):\n    d = a1 * a2 + b1 * b2 + c1 * c2\n    e1 = math.sqrt(a1 * a1 + b1 * b1 + c1 * c1)\n    e2 = math.sqrt(a2 * a2 + b2 * b2 + c2 * c2)\n    d = d / (e1 * e2)\n    A = math.degrees(math.acos(d))\n    print(\" Angle \u2581 is \"), A, (\" degree \")\n\n\na1 = 1\nb1 = 1\nc1 = 2\nd1 = 1\na2 = 2\nb2 = -1\nc2 = 1\nd2 = -4\ndistance(a1, b1, c1, a2, b2, c2)\n"}
{"text": "Mirror of a point through a 3 D plane ", "java": "import java.io.*;\n\nclass GFG {\n  static void mirror_point(int a, int b, int c, int d, int x1, int y1, int z1) {\n    float k = (-a * x1 - b * y1 - c * z1 - d) / (float) (a * a + b * b + c * c);\n    float x2 = a * k + x1;\n    float y2 = b * k + y1;\n    float z2 = c * k + z1;\n    float x3 = 2 * x2 - x1;\n    float y3 = 2 * y2 - y1;\n    float z3 = 2 * z2 - z1;\n    System.out.print(\" x3 \u2581 = \u2581 \" + x3 + \" \u2581 \");\n    System.out.print(\" y3 \u2581 = \u2581 \" + y3 + \" \u2581 \");\n    System.out.print(\" z3 \u2581 = \u2581 \" + z3 + \" \u2581 \");\n  }\n\n  public static void main(String[] args) {\n    int a = 1;\n    int b = -2;\n    int c = 0;\n    int d = 0;\n    int x1 = -1;\n    int y1 = 3;\n    int z1 = 4;\n    mirror_point(a, b, c, d, x1, y1, z1);\n  }\n}\n", "python": "def mirror_point(a, b, c, d, x1, y1, z1):\n    k = (-a * x1 - b * y1 - c * z1 - d) / float((a * a + b * b + c * c))\n    x2 = a * k + x1\n    y2 = b * k + y1\n    z2 = c * k + z1\n    x3 = 2 * x2 - x1\n    y3 = 2 * y2 - y1\n    z3 = 2 * z2 - z1\n    print \" x3 \u2581 = \", x3,\n    print \" y3 \u2581 = \", y3,\n    print \" z3 \u2581 = \", z3,\n\n\na = 1\nb = -2\nc = 0\nd = 0\nx1 = -1\ny1 = 3\nz1 = 4\nmirror_point(a, b, c, d, x1, y1, z1)\n"}
{"text": "Centered Pentadecagonal Number ", "java": "import java.io.*;\n\nclass GFG {\n  static long center_pentadecagonal_num(long n) {\n    return (15 * n * n - 15 * n + 2) / 2;\n  }\n\n  public static void main(String[] args) {\n    long n = 3;\n    System.out.print(n + \" th \u2581 number \u2581 : \u2581 \");\n    System.out.println(center_pentadecagonal_num(n));\n    n = 10;\n    System.out.print(n + \" th \u2581 number \u2581 : \u2581 \");\n    System.out.println(center_pentadecagonal_num(n));\n  }\n}\n", "python": "def center_pentadecagonal_num(n):\n    return (15 * n * n - 15 * n + 2) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(n, \" rd \u2581 number \u2581 : \u2581 \", center_pentadecagonal_num(n))\n    n = 10\n    print(n, \" th \u2581 number \u2581 : \u2581 \", center_pentadecagonal_num(n))\n"}
{"text": "Centered nonadecagonal number ", "java": "import java.io.*;\n\nclass GFG {\n  static int center_nonadecagon_num(int n) {\n    return (19 * n * n - 19 * n + 2) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.print(n + \" th \u2581 centered \u2581 \" + \" nonadecagonal \u2581 number \u2581 : \u2581 \");\n    System.out.println(center_nonadecagon_num(n));\n    n = 7;\n    System.out.print(n + \" th \u2581 centered \u2581 \" + \" nonadecagonal \u2581 number \u2581 : \u2581 \");\n    System.out.println(center_nonadecagon_num(n));\n  }\n}\n", "python": "def center_nonadecagon_num(n):\n    return (19 * n * n - 19 * n + 2) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 2\n    print(\n        n,\n        \" nd \u2581 centered \u2581 nonadecagonal \u2581 \" + \" number \u2581 : \u2581 \",\n        center_nonadecagon_num(n),\n    )\n    n = 7\n    print(\n        n,\n        \" nd \u2581 centered \u2581 nonadecagonal \u2581 \" + \" number \u2581 : \u2581 \",\n        center_nonadecagon_num(n),\n    )\n"}
{"text": "Hendecagonal number ", "java": "import java.io.*;\n\nclass GFG {\n  static int hendecagonal_num(int n) {\n    return (9 * n * n - 7 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(n + \" rd \u2581 Hendecagonal \u2581 \" + \" number : \u2581 \");\n    System.out.println(hendecagonal_num(n));\n    n = 10;\n    System.out.print(n + \" th \u2581 Hendecagonal \u2581 \" + \" number : \u2581 \");\n    System.out.println(hendecagonal_num(n));\n  }\n}\n", "python": "def hendecagonal_num(n):\n    return (9 * n * n - 7 * n) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(n, \" rd \u2581 Hendecagonal \u2581 number \u2581 : \u2581 \", hendecagonal_num(n))\n    n = 10\n    print(n, \" th \u2581 Hendecagonal \u2581 number \u2581 : \u2581 \", hendecagonal_num(n))\n"}
{"text": "Centered Octagonal Number ", "java": "import java.io.*;\n\nclass GFG {\n  static int centeredoctagonalNumber(int n) {\n    return 4 * n * (n - 1) + 1;\n  }\n\n  public static void main(String args[]) {\n    int n = 6;\n    System.out.print(n + \" th \u2581 centered \u2581 \" + \" octagonal \u2581 number : \u2581 \");\n    System.out.println(centeredoctagonalNumber(n));\n    n = 11;\n    System.out.print(n + \" th \u2581 centered \u2581 \" + \" octagonal \u2581 number : \u2581 \");\n    System.out.println(centeredoctagonalNumber(n));\n  }\n}\n", "python": "def cen_octagonalnum(n):\n    return 4 * n * n - 4 * n + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 6\n    print(n, \" th \u2581 Centered \", \" octagonal \u2581 number : \u2581 \", cen_octagonalnum(n))\n    n = 11\n    print(n, \" th \u2581 Centered \", \" octagonal \u2581 number : \u2581 \", cen_octagonalnum(n))\n"}
{"text": "Check if a given circle lies completely inside the ring formed by two concentric circles ", "java": "import java.io.*;\n\nclass ring {\n  public static boolean checkcircle(int r, int R, int r1, int x1, int y1) {\n    int dis = (int) Math.sqrt(x1 * x1 + y1 * y1);\n    return (dis - r1 >= R && dis + r1 <= r);\n  }\n\n  public static void main(String args[]) {\n    int r = 8, R = 4, r1 = 2, x1 = 6, y1 = 0;\n    if (checkcircle(r, R, r1, x1, y1)) System.out.println(\" yes \");\n    else System.out.println(\" no \");\n  }\n}\n", "python": "import math\n\n\ndef checkcircle(r, R, r1, x1, y1):\n    dis = int(math.sqrt(x1 * x1 + y1 * y1))\n    return dis - r1 >= R and dis + r1 <= r\n\n\nr = 8\nR = 4\nr1 = 2\nx1 = 6\ny1 = 0\nif checkcircle(r, R, r1, x1, y1):\n    print(\" yes \")\nelse:\n    print(\" no \")\n"}
{"text": "Program for Surface Area of Octahedron ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static double surface_area_octahedron(double side) {\n    return (2 * (Math.sqrt(3)) * (side * side));\n  }\n\n  public static void main(String[] args) {\n    double side = 7;\n    System.out.println(\" Surface \u2581 area \u2581 of \u2581 octahedron \u2581 = \" + surface_area_octahedron(side));\n  }\n}\n", "python": "import math\n\n\ndef surface_area_octahedron(side):\n    return 2 * (math.sqrt(3)) * (side * side)\n\n\nside = 7\nprint(\" Surface \u2581 area \u2581 of \u2581 octahedron \u2581 = \", surface_area_octahedron(side))\n"}
{"text": "Calculate Volume of Dodecahedron ", "java": "import java.io.*;\n\nclass GFG {\n  static double vol_of_dodecahedron(int side) {\n    return (((15 + (7 * (Math.sqrt(5)))) / 4) * (Math.pow(side, 3)));\n  }\n\n  public static void main(String[] args) {\n    int side = 4;\n    System.out.print(\" Volume \u2581 of \u2581 dodecahedron \u2581 = \u2581 \");\n    System.out.println(vol_of_dodecahedron(side));\n  }\n}\n", "python": "import math\n\n\ndef vol_of_dodecahedron(side):\n    return ((15 + (7 * (math.sqrt(5)))) / 4) * (math.pow(side, 3))\n\n\nside = 4\nprint(\" Volume \u2581 of \u2581 dodecahedron \u2581 = \", round(vol_of_dodecahedron(side), 2))\n"}
{"text": "Program to find third side of triangle using law of cosines ", "java": "class GFG {\n  static float cal_cos(float n) {\n    float accuracy = 0.0001f, x1;\n    float denominator, cosx, cosval;\n    n = n * (3.142f / 180.0f);\n    x1 = 1;\n    cosx = x1;\n    cosval = (float) Math.cos(n);\n    int i = 1;\n    do {\n      denominator = 2 * i * (2 * i - 1);\n      x1 = -x1 * n * n / denominator;\n      cosx = cosx + x1;\n      i = i + 1;\n    } while (accuracy <= Math.abs(cosval - cosx));\n    return cosx;\n  }\n\n  static float third_side(int a, int b, float c) {\n    float angle = cal_cos(c);\n    return (float) Math.sqrt((a * a) + (b * b) - 2 * a * b * angle);\n  }\n\n  public static void main(String[] args) {\n    float c = 49;\n    int a = 5, b = 8;\n    System.out.print(Math.round(third_side(a, b, c) * 100000.0) / 100000.0);\n  }\n}\n", "python": "import math as mt\n\n\ndef cal_cos(n):\n    accuracy = 0.0001\n    x1, denominator, cosx, cosval = 0, 0, 0, 0\n    n = n * (3.142 / 180.0)\n    x1 = 1\n    cosx = x1\n    cosval = mt.cos(n)\n    i = 1\n    while accuracy <= abs(cosval - cosx):\n        denominator = 2 * i * (2 * i - 1)\n        x1 = -x1 * n * n / denominator\n        cosx = cosx + x1\n        i = i + 1\n    return cosx\n\n\ndef third_side(a, b, c):\n    angle = cal_cos(c)\n    return mt.sqrt((a * a) + (b * b) - 2 * a * b * angle)\n\n\nc = 49\na, b = 5, 8\nprint(third_side(a, b, c))\n"}
{"text": "Maximum height when coins are arranged in a triangle ", "java": "class GFG {\n  static float squareRoot(float n) {\n    float x = n;\n    float y = 1;\n    float e = 0.000001f;\n    while (x - y > e) {\n      x = (x + y) / 2;\n      y = n / x;\n    }\n    return x;\n  }\n\n  static int findMaximumHeight(int N) {\n    int n = 1 + 8 * N;\n    int maxH = (int) (-1 + squareRoot(n)) / 2;\n    return maxH;\n  }\n\n  public static void main(String[] args) {\n    int N = 12;\n    System.out.print(findMaximumHeight(N));\n  }\n}\n", "python": "def squareRoot(n):\n    x = n\n    y = 1\n    while x - y > e:\n        x = (x + y) / 2\n        y = n / x\n    return x\n\n\ndef findMaximumHeight(N):\n    n = 1 + 8 * N\n    maxH = (-1 + squareRoot(n)) / 2\n    return int(maxH)\n\n\nN = 12\nprint(findMaximumHeight(N))\n"}
{"text": "Maximize count of planes that can be stopped per second with help of given initial position and speed ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxPlanes(int[] A, int[] B) {\n    Set<Integer> St = new HashSet<>();\n    for (int i = 0; i < A.length; i++) {\n      int t = (A[i] % B[i] > 0) ? 1 : 0;\n      t += (A[i] / B[i]) + t;\n      St.add(t);\n    }\n    return St.size();\n  }\n\n  public static void main(String[] args) {\n    int[] A = {1, 3, 5, 4, 8};\n    int[] B = {1, 2, 2, 1, 2};\n    System.out.println(maxPlanes(A, B));\n  }\n}\n", "python": "def maxPlanes(A, B, N):\n    St = set()\n    for i in range(N):\n        t = 1 if (A[i] % B[i] > 0) else 0\n        t += (A[i] // B[i]) + t\n        St.add(t)\n    return len(St)\n\n\nA = [1, 3, 5, 4, 8]\nB = [1, 2, 2, 1, 2]\nN = len(A)\nprint(maxPlanes(A, B, N))\n"}
{"text": "Maximize the rightmost element of an array in k operations in Linear Time ", "java": "import java.io.*;\n\nclass GFG {\n  static int maxRightmostElement(int N, int k, int p, int arr[]) {\n    int ans = arr[N - 1];\n    for (int i = N - 2; i >= 0; i--) {\n      int d = Math.min(arr[i] / p, k / (N - 1 - i));\n      k -= d * (N - 1 - i);\n      ans += d * p;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 4, k = 5, p = 2;\n    int arr[] = {3, 8, 1, 4};\n    System.out.println(maxRightmostElement(N, k, p, arr));\n  }\n}\n", "python": "def maxRightmostElement(N, k, arr):\n    ans = arr[N - 1]\n    i = N - 2\n    while i >= 0:\n        d = min(arr[i] // 2, k // (N - 1 - i))\n        k -= d * (N - 1 - i)\n        ans += d * 2\n        i -= 1\n    print(ans, end=\" \u2581 \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    k = 5\n    arr = [3, 8, 1, 4]\n    maxRightmostElement(N, k, arr)\n"}
{"text": "Count of distinct N ", "java": "import java.util.*;\n\nclass GFG {\n  static int countOddIntegers(int arr[], int N) {\n    int Fact[] = new int[N];\n    Fact[0] = 1;\n    for (int i = 1; i < N; i++) {\n      Fact[i] = i * Fact[i - 1];\n    }\n    int freq[] = new int[10];\n    for (int i = 0; i < N; i++) {\n      freq[arr[i]]++;\n    }\n    int ans = 0;\n    for (int i = 1; i <= 9; i += 2) {\n      if (freq[i] == 0) continue;\n      freq[i]--;\n      for (int j = 1; j <= 9; j++) {\n        int cur_ans = 0;\n        if (freq[j] == 0) {\n          continue;\n        }\n        freq[j]--;\n        cur_ans = Fact[N - 2];\n        for (int k = 0; k <= 9; k++) {\n          cur_ans = cur_ans / Fact[freq[k]];\n        }\n        ans += cur_ans;\n        freq[j]++;\n      }\n      freq[i]++;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {2, 3, 4, 1, 2, 3};\n    int N = A.length;\n    System.out.print(countOddIntegers(A, N));\n  }\n}\n", "python": "from array import *\nfrom math import *\n\n\ndef countOddIntegers(arr, N):\n    Fact = [0] * N\n    Fact[0] = 1\n    for i in range(1, N):\n        Fact[i] = i * Fact[i - 1]\n    freq = [0] * 10\n    for i in range(len(freq)):\n        freq[i] = 0\n    for i in range(N):\n        freq[arr[i]] = freq[arr[i]] + 1\n    ans = 0\n    for i in range(1, 10, 2):\n        if freq[i] == 0:\n            continue\n        freq[i] = freq[i] - 1\n        for j in range(1, 10, 1):\n            cur_ans = 0\n            if freq[j] == 0:\n                continue\n            freq[j] = freq[j] - 1\n            cur_ans = Fact[N - 2]\n            for k in range(10):\n                cur_ans = cur_ans / Fact[freq[k]]\n            ans += cur_ans\n            freq[j] = freq[j] + 1\n        freq[i] = freq[i] + 1\n    return ceil(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [2, 3, 4, 1, 2, 3]\n    N = len(A)\n    print(countOddIntegers(A, N))\n"}
{"text": "Smallest pair of integers with minimum difference whose Bitwise XOR is N ", "java": "public class MyClass {\n  static void findAandB(int N) {\n    int K = (int) (Math.log(N) / Math.log(2));\n    int B = (1 << K);\n    int A = B ^ N;\n    System.out.println(A + \" \u2581 \" + B);\n  }\n\n  public static void main(String args[]) {\n    int N = 26;\n    findAandB(N);\n  }\n}\n", "python": "from math import log2\n\n\ndef findAandB(N):\n    K = int(log2(N))\n    B = 1 << K\n    A = B ^ N\n    print(A, B)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 26\n    findAandB(N)\n"}
{"text": "Factorial of a number without using multiplication ", "java": "import java.io.*;\n\nclass GFG {\n  public static int factorialWithoutMul(int N) {\n    int ans = N;\n    for (int i = N - 1; i > 0; i--) {\n      int sum = 0;\n      for (int j = 0; j < i; j++) sum += ans;\n      ans = sum;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.println(factorialWithoutMul(N));\n  }\n}\n", "python": "def factorialWithoutMul(N):\n    ans = N\n    i = N - 1\n    while i > 0:\n        sum = 0\n        for j in range(i):\n            sum += ans\n        ans = sum\n        i -= 1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    print(factorialWithoutMul(N))\n"}
{"text": "Maximum sum of a subsequence having difference between their indices equal to the difference between their values ", "java": "import java.util.HashMap;\n\npublic class GFG {\n  static void maximumSubsequenceSum(int A[], int N) {\n    int ans = 0;\n    HashMap<Integer, Integer> mp = new HashMap<>();\n    for (int i = 0; i < N; i++) {\n      mp.put(A[i] - i, mp.getOrDefault(A[i] - i, 0) + A[i]);\n      ans = Math.max(ans, mp.get(A[i] - i));\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int A[] = {10, 7, 1, 9, 10, 1};\n    int N = A.length;\n    maximumSubsequenceSum(A, N);\n  }\n}\n", "python": "def maximumSubsequenceSum(A, N):\n    ans = 0\n    mp = {}\n    for i in range(N):\n        if A[i] - i in mp:\n            mp[A[i] - i] += A[i]\n        else:\n            mp[A[i] - i] = A[i]\n        ans = max(ans, mp[A[i] - i])\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [10, 7, 1, 9, 10, 1]\n    N = len(A)\n    maximumSubsequenceSum(A, N)\n"}
{"text": "Absolute difference between floor of Array sum divided by X and floor sum of every Array element when divided by X ", "java": "import java.util.*;\n\nclass GFG {\n  static int floorDifference(int A[], int N, int X) {\n    int totalSum = 0;\n    int perElementSum = 0;\n    for (int i = 0; i < N; i++) {\n      totalSum += A[i];\n      perElementSum += A[i] / X;\n    }\n    int totalFloorSum = totalSum / X;\n    return Math.abs(totalFloorSum - perElementSum);\n  }\n\n  public static void main(String[] args) {\n    int A[] = {1, 2, 3, 4, 5, 6};\n    int X = 4;\n    int N = A.length;\n    System.out.print(floorDifference(A, N, X));\n  }\n}\n", "python": "def floorDifference(A, N, X):\n    totalSum = 0\n    perElementSum = 0\n    for i in range(N):\n        totalSum += A[i]\n        perElementSum += A[i] // X\n    totalFloorSum = totalSum // X\n    return abs(totalFloorSum - perElementSum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [1, 2, 3, 4, 5, 6]\n    X = 4\n    N = len(A)\n    print(floorDifference(A, N, X))\n"}
{"text": "Mean of fourth powers of first N natural numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static double findAverage(int N) {\n    double avg = ((6 * N * N * N * N) + (15 * N * N * N) + (10 * N * N) - 1) / 30.0;\n    return avg;\n  }\n\n  public static void main(String args[]) {\n    int N = 3;\n    System.out.print(findAverage(N));\n  }\n}\n", "python": "def findAverage(N):\n    avg = ((6 * N * N * N * N) + (15 * N * N * N) + (10 * N * N) - 1) / 30\n    return avg\n\n\nN = 3\nprint(round(findAverage(N), 4))\n"}
{"text": "Program to calculate expected increase in price P after N consecutive days ", "java": "class GFG {\n  static void expectedValue(int P, int a, int b, int N) {\n    double expValue = P + (N * 0.5 * (a + b));\n    System.out.print(expValue);\n  }\n\n  public static void main(String[] args) {\n    int P = 3000, a = 20, b = 10, N = 30;\n    expectedValue(P, a, b, N);\n  }\n}\n", "python": "def expectedValue(P, a, b, N):\n    expValue = P + (N * 0.5 * (a + b))\n    print(int(expValue))\n\n\nif __name__ == \" _ _ main _ _ \":\n    P = 3000\n    a = 20\n    b = 10\n    N = 30\n    expectedValue(P, a, b, N)\n"}
{"text": "Modify array by replacing elements with the nearest power of its previous or next element ", "java": "class GFG {\n  static int nearestPow(int x, int y) {\n    if (y == 1) return 1;\n    int k = (int) (Math.log10(x) / Math.log10(y));\n    if (Math.abs(Math.pow(y, k) - x) < Math.abs(Math.pow(y, (k + 1)) - x))\n      return (int) (Math.pow(y, k));\n    return (int) (Math.pow(y, (k + 1)));\n  }\n\n  static void replacebyNearestPower(int[] arr) {\n    int prev = arr[arr.length - 1];\n    int lastNext = arr[0];\n    int next = 0;\n    for (int i = 0; i < arr.length; i++) {\n      int temp = arr[i];\n      if (i == arr.length - 1) next = lastNext;\n      else next = arr[(i + 1) % arr.length];\n      int prevPow = nearestPow(arr[i], prev);\n      int nextPow = nearestPow(arr[i], next);\n      if (Math.abs(arr[i] - prevPow) < Math.abs(arr[i] - nextPow)) arr[i] = prevPow;\n      else arr[i] = nextPow;\n      prev = temp;\n    }\n    for (int i = 0; i < arr.length; i++) System.out.print(arr[i] + \" \u2581 \");\n  }\n\n  public static void main(String args[]) {\n    int[] arr = {2, 3, 4, 1, 2};\n    replacebyNearestPower(arr);\n  }\n}\n", "python": "import math\n\n\ndef nearestPow(x, y):\n    if y == 1:\n        return 1\n    k = int(math.log(x, y))\n    if abs(y ** k - x) < abs(y ** (k + 1) - x):\n        return y ** k\n    return y ** (k + 1)\n\n\ndef replacebyNearestPower(arr):\n    prev = arr[-1]\n    lastNext = arr[0]\n    for i in range(len(arr)):\n        temp = arr[i]\n        if i == len(arr) - 1:\n            next = lastNext\n        else:\n            next = arr[(i + 1) % len(arr)]\n        prevPow = nearestPow(arr[i], prev)\n        nextPow = nearestPow(arr[i], next)\n        if abs(arr[i] - prevPow) < abs(arr[i] - nextPow):\n            arr[i] = prevPow\n        else:\n            arr[i] = nextPow\n        prev = temp\n    print(arr)\n\n\narr = [2, 3, 4, 1, 2]\nreplacebyNearestPower(arr)\n"}
{"text": "Count pairs whose Bitwise AND exceeds Bitwise XOR from a given array ", "java": "import java.io.*;\n\nclass GFG {\n  static int cntPairs(int arr[], int N) {\n    int res = 0;\n    int bit[] = new int[32];\n    for (int i = 0; i < N; i++) {\n      int pos = (int) (Math.log(arr[i]) / Math.log(2));\n      bit[pos]++;\n    }\n    for (int i = 0; i < 32; i++) {\n      res += (bit[i] * (bit[i] - 1)) / 2;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4};\n    int N = arr.length;\n    System.out.println(cntPairs(arr, N));\n  }\n}\n", "python": "import math\n\n\ndef cntPairs(arr, N):\n    res = 0\n    bit = [0] * 32\n    for i in range(N):\n        pos = (int)(math.log2(arr[i]))\n        bit[pos] += 1\n    for i in range(32):\n        res += (bit[i] * (bit[i] - 1)) // 2\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4]\n    N = len(arr)\n    print(cntPairs(arr, N))\n"}
{"text": "Minimum MEX from all subarrays of length K ", "java": "import java.util.HashSet;\n\nclass GFG {\n  static void minimumMEX(int arr[], int N, int K) {\n    HashSet<Integer> s = new HashSet<Integer>();\n    for (int i = 1; i <= N + 1; i++) s.add(i);\n    for (int i = 0; i < K; i++) s.remove(arr[i]);\n    int mex = s.iterator().next();\n    for (int i = K; i < N; i++) {\n      s.remove(arr[i]);\n      s.add(arr[i - K]);\n      int firstElem = s.iterator().next();\n      mex = Math.min(mex, firstElem);\n    }\n    System.out.print(mex + \" \u2581 \");\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 5, 6};\n    int K = 3;\n    int N = arr.length;\n    minimumMEX(arr, N, K);\n  }\n}\n", "python": "def minimumMEX(arr, N, K):\n    s = set()\n    for i in range(1, N + 2, 1):\n        s.add(i)\n    for i in range(K):\n        s.remove(arr[i])\n    mex = list(s)[0]\n    for i in range(K, N, 1):\n        s.remove(arr[i])\n        s.add(arr[i - K])\n        firstElem = list(s)[0]\n        mex = min(mex, firstElem)\n    print(mex)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4, 5, 6]\n    K = 3\n    N = len(arr)\n    minimumMEX(arr, N, K)\n"}
{"text": "Modulo Operations in Programming With Negative Results ", "java": "class GFG {\n  static int truncMod(int a, int n) {\n    int q = a / n;\n    return a - n * q;\n  }\n\n  public static void main(String[] args) {\n    int a, b;\n    a = 9;\n    b = 4;\n    System.out.println(a + \" \u2581 % \u2581 \" + b + \" \u2581 = \u2581 \" + truncMod(a, b));\n    a = -9;\n    b = 4;\n    System.out.println(a + \" \u2581 % \u2581 \" + b + \" \u2581 = \u2581 \" + truncMod(a, b));\n    a = 9;\n    b = -4;\n    System.out.println(a + \" \u2581 % \u2581 \" + b + \" \u2581 = \u2581 \" + truncMod(a, b));\n    a = -9;\n    b = -4;\n    System.out.println(a + \" \u2581 % \u2581 \" + b + \" \u2581 = \u2581 \" + truncMod(a, b));\n  }\n}\n", "python": "def truncMod(a, n):\n    q = a // n\n    return a - n * q\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 9\n    b = 4\n    print(a, \" % \", b, \" = \", truncMod(a, b))\n    a = -9\n    b = 4\n    print(a, \" % \", b, \" = \", truncMod(a, b))\n    a = 9\n    b = -4\n    print(a, \" % \", b, \" = \", truncMod(a, b))\n    a = -9\n    b = -4\n    print(a, \" % \", b, \" = \", truncMod(a, b))\n"}
{"text": "Program for average of an array without running into overflow ", "java": "import java.util.*;\n\nclass GFG {\n  static Double average(int arr[], int N) {\n    int sum = 0;\n    for (int i = 0; i < N; i++) sum += arr[i];\n    return Double.valueOf(sum / N);\n  }\n\n  static Double mean(int arr[], int N) {\n    Double avg = 0.0;\n    for (int i = 0; i < N; i++) {\n      avg += Double.valueOf((arr[i] - avg) / (i + 1));\n    }\n    return avg;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {Integer.MAX_VALUE, 1, 2};\n    int N = arr.length;\n    System.out.println(\n        \" Average \u2581 by \u2581 Standard \u2581 method : \u2581 \" + String.format(\" % .10f \", average(arr, N)));\n    System.out.println(\n        \" Average \u2581 by \u2581 Efficient \u2581 method : \u2581 \" + String.format(\" % .10f \", mean(arr, N)));\n  }\n}\n", "python": "import sys\n\n\ndef average(arr, N):\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    return sum // N * 1.0 - 1\n\n\ndef mean(arr, N):\n    avg = 0\n    for i in range(N):\n        avg += (arr[i] - avg) / (i + 1)\n    return round(avg, 7)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2147483647, 1, 2]\n    N = len(arr)\n    print(\n        \" Average \u2581 by \u2581 Standard \u2581 method : \u2581 \",\n        \" { : . 10f } \".format(-1.0 * average(arr, N)),\n    )\n    print(\n        \" Average \u2581 by \u2581 Efficient \u2581 method : \u2581 \", \" { : . 10f } \".format(mean(arr, N))\n    )\n"}
{"text": "Count number of pairs ( i , j ) from an array such that arr [ i ] * j = arr [ j ] * i ", "java": "import java.util.*;\n\nclass GFG {\n  static void countPairs(int[] arr, int N) {\n    int count = 0;\n    Map<Double, Integer> mp = new HashMap<Double, Integer>();\n    for (int i = 0; i < N; i++) {\n      Double val = 1.0 * arr[i];\n      Double idx = 1.0 * (i + 1);\n      if (mp.containsKey(val / idx)) count += mp.get(val / idx);\n      if (mp.containsKey(val / idx)) mp.put(val / idx, mp.getOrDefault(val / idx, 0) + 1);\n      else mp.put(val / idx, 1);\n    }\n    System.out.print(count);\n  }\n\n  public static void main(String args[]) {\n    int[] arr = {1, 3, 5, 6, 5};\n    int N = arr.length;\n    countPairs(arr, N);\n  }\n}\n", "python": "from collections import defaultdict\n\n\ndef countPairs(arr, N):\n    count = 0\n    mp = defaultdict(int)\n    for i in range(N):\n        val = 1.0 * arr[i]\n        idx = 1.0 * (i + 1)\n        count += mp[val / idx]\n        mp[val / idx] += 1\n    print(count)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 3, 5, 6, 5]\n    N = len(arr)\n    countPairs(arr, N)\n"}
{"text": "Sorting array using Stacks ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static Stack<Integer> sortStack(Stack<Integer> input) {\n    Stack<Integer> tmpStack = new Stack<Integer>();\n    while (!input.empty()) {\n      int tmp = input.peek();\n      input.pop();\n      while (!tmpStack.empty() && tmpStack.peek() < tmp) {\n        input.push(tmpStack.peek());\n        tmpStack.pop();\n      }\n      tmpStack.push(tmp);\n    }\n    return tmpStack;\n  }\n\n  static void sortArrayUsingStacks(int[] arr, int n) {\n    Stack<Integer> input = new Stack<Integer>();\n    for (int i = 0; i < n; i++) input.push(arr[i]);\n    Stack<Integer> tmpStack = sortStack(input);\n    for (int i = 0; i < n; i++) {\n      arr[i] = tmpStack.peek();\n      tmpStack.pop();\n    }\n  }\n\n  public static void main(String args[]) {\n    int[] arr = {10, 5, 15, 45};\n    int n = arr.length;\n    sortArrayUsingStacks(arr, n);\n    for (int i = 0; i < n; i++) System.out.print(arr[i] + \" \u2581 \");\n  }\n}\n", "python": "def sortStack(input):\n    tmpStack = []\n    while len(input) > 0:\n        tmp = input[-1]\n        input.pop()\n        while len(tmpStack) > 0 and tmpStack[-1] < tmp:\n            input.append(tmpStack[-1])\n            tmpStack.pop()\n        tmpStack.append(tmp)\n    return tmpStack\n\n\ndef sortArrayUsingStacks(arr, n):\n    input = []\n    i = 0\n    while i < n:\n        input.append(arr[i])\n        i = i + 1\n    tmpStack = sortStack(input)\n    i = 0\n    while i < n:\n        arr[i] = tmpStack[-1]\n        tmpStack.pop()\n        i = i + 1\n    return arr\n\n\narr = [10, 5, 15, 45]\nn = len(arr)\narr = sortArrayUsingStacks(arr, n)\ni = 0\nwhile i < n:\n    print(arr[i], end=\" \u2581 \")\n    i = i + 1\n"}
{"text": "Check if stack elements are pairwise consecutive ", "java": "import java.util.*;\n\nclass GfG {\n  static boolean pairWiseConsecutive(Stack<Integer> s) {\n    Stack<Integer> aux = new Stack<Integer>();\n    while (!s.isEmpty()) {\n      aux.push(s.peek());\n      s.pop();\n    }\n    boolean result = true;\n    while (aux.size() > 1) {\n      int x = aux.peek();\n      aux.pop();\n      int y = aux.peek();\n      aux.pop();\n      if (Math.abs(x - y) != 1) result = false;\n      s.push(x);\n      s.push(y);\n    }\n    if (aux.size() == 1) s.push(aux.peek());\n    return result;\n  }\n\n  public static void main(String[] args) {\n    Stack<Integer> s = new Stack<Integer>();\n    s.push(4);\n    s.push(5);\n    s.push(-2);\n    s.push(-3);\n    s.push(11);\n    s.push(10);\n    s.push(5);\n    s.push(6);\n    s.push(20);\n    if (pairWiseConsecutive(s)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n    System.out.println(\" Stack \u2581 content \u2581 ( from \u2581 top ) \u2581 after \u2581 function \u2581 call \");\n    while (s.isEmpty() == false) {\n      System.out.print(s.peek() + \" \u2581 \");\n      s.pop();\n    }\n  }\n}\n", "python": "def pairWiseConsecutive(s):\n    aux = []\n    while len(s) != 0:\n        aux.append(s[-1])\n        s.pop()\n    result = True\n    while len(aux) > 1:\n        x = aux[-1]\n        aux.pop()\n        y = aux[-1]\n        aux.pop()\n        if abs(x - y) != 1:\n            result = False\n        s.append(x)\n        s.append(y)\n    if len(aux) == 1:\n        s.append(aux[-1])\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = []\n    s.append(4)\n    s.append(5)\n    s.append(-2)\n    s.append(-3)\n    s.append(11)\n    s.append(10)\n    s.append(5)\n    s.append(6)\n    s.append(20)\n    if pairWiseConsecutive(s):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    print(\" Stack \u2581 content \u2581 ( from \u2581 top ) \", \" after \u2581 function \u2581 call \")\n    while len(s) != 0:\n        print(s[-1], end=\" \u2581 \")\n        s.pop()\n    DEDENT\n"}
{"text": "How to check if a given array represents a Binary Heap ? ", "java": "class GFG {\n  static boolean isHeap(int arr[], int i, int n) {\n    if (i >= (n - 2) / 2) {\n      return true;\n    }\n    if (arr[i] >= arr[2 * i + 1]\n        && arr[i] >= arr[2 * i + 2]\n        && isHeap(arr, 2 * i + 1, n)\n        && isHeap(arr, 2 * i + 2, n)) {\n      return true;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {90, 15, 10, 7, 12, 2, 7, 3};\n    int n = arr.length - 1;\n    if (isHeap(arr, 0, n)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "def isHeap(arr, i, n):\n    if i >= int((n - 2) / 2):\n        return True\n    if (\n        arr[i] >= arr[2 * i + 1]\n        and arr[i] >= arr[2 * i + 2]\n        and isHeap(arr, 2 * i + 1, n)\n        and isHeap(arr, 2 * i + 2, n)\n    ):\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [90, 15, 10, 7, 12, 2, 7, 3]\n    n = len(arr) - 1\n    if isHeap(arr, 0, n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "How to check if a given array represents a Binary Heap ? ", "java": "class GFG {\n  static boolean isHeap(int arr[], int n) {\n    for (int i = 0; i <= (n - 2) / 2; i++) {\n      if (arr[2 * i + 1] > arr[i]) {\n        return false;\n      }\n      if (2 * i + 2 < n && arr[2 * i + 2] > arr[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {90, 15, 10, 7, 12, 2, 7, 3};\n    int n = arr.length;\n    if (isHeap(arr, n)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "def isHeap(arr, i, n):\n    if i >= int((n - 2) / 2):\n        return True\n    if (\n        arr[i] >= arr[2 * i + 1]\n        and arr[i] >= arr[2 * i + 2]\n        and isHeap(arr, 2 * i + 1, n)\n        and isHeap(arr, 2 * i + 2, n)\n    ):\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [90, 15, 10, 7, 12, 2, 7, 3]\n    n = len(arr) - 1\n    if isHeap(arr, 0, n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Connect n ropes with minimum cost ", "java": "class MinHeap {\n  int[] harr;\n  int heap_size;\n  int capacity;\n\n  public MinHeap(int a[], int size) {\n    heap_size = size;\n    capacity = size;\n    harr = a;\n    int i = (heap_size - 1) / 2;\n    while (i >= 0) {\n      MinHeapify(i);\n      i--;\n    }\n  }\n\n  void MinHeapify(int i) {\n    int l = left(i);\n    int r = right(i);\n    int smallest = i;\n    if (l < heap_size && harr[l] < harr[i]) smallest = l;\n    if (r < heap_size && harr[r] < harr[smallest]) smallest = r;\n    if (smallest != i) {\n      swap(i, smallest);\n      MinHeapify(smallest);\n    }\n  }\n\n  int parent(int i) {\n    return (i - 1) / 2;\n  }\n\n  int left(int i) {\n    return (2 * i + 1);\n  }\n\n  int right(int i) {\n    return (2 * i + 2);\n  }\n\n  int extractMin() {\n    if (heap_size <= 0) return Integer.MAX_VALUE;\n    if (heap_size == 1) {\n      heap_size--;\n      return harr[0];\n    }\n    int root = harr[0];\n    harr[0] = harr[heap_size - 1];\n    heap_size--;\n    MinHeapify(0);\n    return root;\n  }\n\n  void insertKey(int k) {\n    if (heap_size == capacity) {\n      System.out.println(\" Overflow : \u2581 Could \u2581 not \u2581 insertKey \");\n      return;\n    }\n    heap_size++;\n    int i = heap_size - 1;\n    harr[i] = k;\n    while (i != 0 && harr[parent(i)] > harr[i]) {\n      swap(i, parent(i));\n      i = parent(i);\n    }\n  }\n\n  boolean isSizeOne() {\n    return (heap_size == 1);\n  }\n\n  void swap(int x, int y) {\n    int temp = harr[x];\n    harr[x] = harr[y];\n    harr[y] = temp;\n  }\n\n  static int minCost(int len[], int n) {\n    int cost = 0;\n    MinHeap minHeap = new MinHeap(len, n);\n    while (!minHeap.isSizeOne()) {\n      int min = minHeap.extractMin();\n      int sec_min = minHeap.extractMin();\n      cost += (min + sec_min);\n      minHeap.insertKey(min + sec_min);\n    }\n    return cost;\n  }\n\n  public static void main(String args[]) {\n    int len[] = {4, 3, 2, 6};\n    int size = len.length;\n    System.out.println(\" Total \u2581 cost \u2581 for \u2581 connecting \u2581 ropes \u2581 is \u2581 \" + minCost(len, size));\n  }\n}\n;\n", "python": "import heapq\n\n\ndef minCost(arr, n):\n    heapq.heapify(arr)\n    res = 0\n    while len(arr) > 1:\n        first = heapq.heappop(arr)\n        second = heapq.heappop(arr)\n        res += first + second\n        heapq.heappush(arr, first + second)\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    lengths = [4, 3, 2, 6]\n    size = len(lengths)\n    print(\n        \" Total \u2581 cost \u2581 for \u2581 connecting \u2581 ropes \u2581 is \u2581 \" + str(minCost(lengths, size))\n    )\n"}
{"text": "Connect n ropes with minimum cost ", "java": "import java.util.*;\n\nclass ConnectRopes {\n  static int minCost(int arr[], int n) {\n    PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n    for (int i = 0; i < n; i++) {\n      pq.add(arr[i]);\n    }\n    int res = 0;\n    while (pq.size() > 1) {\n      int first = pq.poll();\n      int second = pq.poll();\n      res += first + second;\n      pq.add(first + second);\n    }\n    return res;\n  }\n\n  public static void main(String args[]) {\n    int len[] = {4, 3, 2, 6};\n    int size = len.length;\n    System.out.println(\n        \" Total \u2581 cost \u2581 for \u2581 connecting \" + \" \u2581 ropes \u2581 is \u2581 \" + minCost(len, size));\n  }\n}\n", "python": "import heapq\n\n\ndef minCost(arr, n):\n    heapq.heapify(arr)\n    res = 0\n    while len(arr) > 1:\n        first = heapq.heappop(arr)\n        second = heapq.heappop(arr)\n        res += first + second\n        heapq.heappush(arr, first + second)\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    lengths = [4, 3, 2, 6]\n    size = len(lengths)\n    print(\n        \" Total \u2581 cost \u2581 for \u2581 connecting \u2581 ropes \u2581 is \u2581 \" + str(minCost(lengths, size))\n    )\n"}
{"text": "Program to calculate Profit Or Loss ", "java": "class GFG {\n  static int Profit(int costPrice, int sellingPrice) {\n    int profit = (sellingPrice - costPrice);\n    return profit;\n  }\n\n  static int Loss(int costPrice, int sellingPrice) {\n    int Loss = (costPrice - sellingPrice);\n    return Loss;\n  }\n\n  public static void main(String[] args) {\n    int costPrice = 1500, sellingPrice = 2000;\n    if (sellingPrice == costPrice) System.out.println(\" No \u2581 profit \u2581 nor \u2581 Loss \");\n    else if (sellingPrice > costPrice)\n      System.out.println(Profit(costPrice, sellingPrice) + \" \u2581 Profit \u2581 \");\n    else System.out.println(Loss(costPrice, sellingPrice) + \" \u2581 Loss \u2581 \");\n  }\n}\n", "python": "def Profit(costPrice, sellingPrice):\n    profit = sellingPrice - costPrice\n    return profit\n\n\ndef Loss(costPrice, sellingPrice):\n    Loss = costPrice - sellingPrice\n    return Loss\n\n\nif __name__ == \" _ _ main _ _ \":\n    costPrice, sellingPrice = 1500, 2000\n    if sellingPrice == costPrice:\n        print(\" No \u2581 profit \u2581 nor \u2581 Loss \")\n    elif sellingPrice > costPrice:\n        print(Profit(costPrice, sellingPrice), \" Profit \")\n    else:\n        print(Loss(costPrice, sellingPrice), \" Loss \")\n    DEDENT\n"}
{"text": "Find the Next perfect square greater than a given number ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int nextPerfectSquare(int N) {\n    int nextN = (int) Math.floor(Math.sqrt(N)) + 1;\n    return nextN * nextN;\n  }\n\n  public static void main(String args[]) {\n    int n = 35;\n    System.out.println(nextPerfectSquare(n));\n  }\n}\n", "python": "import math\n\n\ndef nextPerfectSquare(N):\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 35\n    print(nextPerfectSquare(N))\n"}
{"text": "Modulo power for large numbers represented as strings ", "java": "import java.util.*;\n\nclass GFG {\n  static long MOD = (long) (1e9 + 7);\n\n  static long powerLL(long x, long n) {\n    long result = 1;\n    while (n > 0) {\n      if (n % 2 == 1) {\n        result = result * x % MOD;\n      }\n      n = n / 2;\n      x = x * x % MOD;\n    }\n    return result;\n  }\n\n  static long powerStrings(String sa, String sb) {\n    long a = 0, b = 0;\n    for (int i = 0; i < sa.length(); i++) {\n      a = (a * 10 + (sa.charAt(i) - '0')) % MOD;\n    }\n    for (int i = 0; i < sb.length(); i++) {\n      b = (b * 10 + (sb.charAt(i) - '0')) % (MOD - 1);\n    }\n    return powerLL(a, b);\n  }\n\n  public static void main(String[] args) {\n    String sa = \"2\", sb = \"3\";\n    System.out.println(powerStrings(sa, sb));\n  }\n}\n", "python": "MOD = 1000000007\n\n\ndef powerLL(x, n):\n    result = 1\n    while n:\n        if n & 1:\n            result = result * x % MOD\n        n = int(n / 2)\n        x = x * x % MOD\n    return result\n\n\ndef powerStrings(sa, sb):\n    a = 0\n    b = 0\n    for i in range(len(sa)):\n        a = (a * 10 + (ord(sa[i]) - ord(\"0\"))) % MOD\n    for i in range(len(sb)):\n        b = (b * 10 + (ord(sb[i]) - ord(\"0\"))) % (MOD - 1)\n    return powerLL(a, b)\n\n\nsa = \"2\"\nsb = \"3\"\nprint(powerStrings(sa, sb))\n"}
{"text": "Program to find HCF ( Highest Common Factor ) of 2 Numbers ", "java": "class Test {\n  static int gcd(int a, int b) {\n    if (a == 0 && b == 0) return 0;\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if (a == b) return a;\n    if (a > b) return gcd(a - b, b);\n    return gcd(a, b - a);\n  }\n\n  public static void main(String[] args) {\n    int a = 98, b = 56;\n    System.out.println(\" GCD \u2581 of \u2581 \" + a + \" \u2581 and \u2581 \" + b + \" \u2581 is \u2581 \" + gcd(a, b));\n  }\n}\n", "python": "def gcd(a, b):\n    if a == 0 and b == 0:\n        return 0\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\n\n\na = 98\nb = 56\nif gcd(a, b):\n    print(\" GCD \u2581 of \", a, \" and \", b, \" is \", gcd(a, b))\nelse:\n    print(\" not \u2581 found \")\n"}
{"text": "Calculating n ", "java": "class GFG {\n  static void findNthRoot(double x, int n) {\n    double low, high;\n    if (x >= 0 && x <= 1) {\n      low = x;\n      high = 1;\n    } else {\n      low = 1;\n      high = x;\n    }\n    double epsilon = 0.00000001;\n    double guess = (low + high) / 2;\n    while (Math.abs((Math.pow(guess, n)) - x) >= epsilon) {\n      if (Math.pow(guess, n) > x) {\n        high = guess;\n      } else {\n        low = guess;\n      }\n      guess = (low + high) / 2;\n    }\n    System.out.println(guess);\n  }\n\n  public static void main(String[] args) {\n    double x = 5;\n    int n = 2;\n    findNthRoot(x, n);\n  }\n}\n", "python": "def findNthRoot(x, n):\n    x = float(x)\n    n = int(n)\n    if x >= 0 and x <= 1:\n        low = x\n        high = 1\n    else:\n        low = 1\n        high = x\n    epsilon = 0.00000001\n    guess = (low + high) / 2\n    while abs(guess ** n - x) >= epsilon:\n        if guess ** n > x:\n            high = guess\n        else:\n            low = guess\n        guess = (low + high) / 2\n    print(guess)\n\n\nx = 5\nn = 2\nfindNthRoot(x, n)\n"}
{"text": "Sum of all elements up to Nth row in a Pascal triangle ", "java": "import java.io.*;\n\nclass GFG {\n  static long calculateSum(int n) {\n    long sum = 0;\n    for (int row = 0; row < n; row++) {\n      sum = sum + (1 << row);\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(\" Sum \u2581 of \u2581 all \u2581 elements : \" + calculateSum(n));\n  }\n}\n", "python": "def calculateSum(n):\n    sum = 0\n    for row in range(n):\n        sum = sum + (1 << row)\n    return sum\n\n\nn = 10\nprint(\" Sum \u2581 of \u2581 all \u2581 elements : \", calculateSum(n))\n"}
{"text": "Number of ones in the smallest repunit ", "java": "import java.io.*;\n\nclass GFG {\n  static int countOnes(int n) {\n    int count = 1;\n    int rem = 1;\n    while (rem != 0) {\n      rem = (rem * 10 + 1) % n;\n      count++;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 13;\n    System.out.println(countOnes(n));\n  }\n}\n", "python": "def countOnes(n):\n    count = 1\n    rem = 1\n    while rem != 0:\n        rem = (rem * 10 + 1) % n\n        count = count + 1\n    return count\n\n\nn = 13\nprint(countOnes(n))\n"}
{"text": "Largest of two distinct numbers without using any conditional statements or operators ", "java": "class GFG {\n  static int largestNum(int a, int b) {\n    return a * ((a / b) > 0 ? 1 : 0) + b * ((b / a) > 0 ? 1 : 0);\n  }\n\n  public static void main(String[] args) {\n    int a = 22, b = 1231;\n    System.out.print(largestNum(a, b));\n  }\n}\n", "python": "def largestNum(a, b):\n    return a * (bool)(a // b) + b * (bool)(b // a)\n\n\na = 22\nb = 1231\nprint(largestNum(a, b))\n"}
{"text": "Number of Distinct Meeting Points on a Circular Road ", "java": "import java.io.*;\n\nclass GFG {\n  static int gcd(int a, int b) {\n    int c = a % b;\n    while (c != 0) {\n      a = b;\n      b = c;\n      c = a % b;\n    }\n    return b;\n  }\n\n  static int numberOfmeet(int a, int b) {\n    int ans;\n    if (a > b) ans = a - b;\n    else ans = b - a;\n    if (a < 0) a = a * (-1);\n    if (b < 0) b = b * (-1);\n    return ans / gcd(a, b);\n  }\n\n  public static void main(String[] args) {\n    int a = 1, b = -1;\n    System.out.println(numberOfmeet(a, b));\n  }\n}\n", "python": "import math\n\n\ndef numberOfmeet(a, b):\n    ans = 0\n    if a > b:\n        ans = a - b\n    else:\n        ans = b - a\n    if a < 0:\n        a = a * (-1)\n    if b < 0:\n        b = b * (-1)\n    return int(ans / math.gcd(a, b))\n\n\na = 1\nb = -1\nprint(numberOfmeet(a, b))\n"}
{"text": "n ", "java": "import java.io.*;\n\nclass Series {\n  static int sumOfSeries(int n) {\n    return n * (n + 1) * (6 * n * n * n + 9 * n * n + n - 1) / 30;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "def ans(n):\n    if n < 6:\n        return n\n    return n % 6 + 10 * (ans(n // 6)) - 1\n\n\ndef getSpecialNumber(N):\n    return ans(N)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 17\n    answer = getSpecialNumber(N)\n    print(answer)\n"}
{"text": "Check if sum of divisors of two numbers are same ", "java": "import java.math.*;\n\nclass GFG {\n  static int divSum(int n) {\n    int sum = 1;\n    for (int i = 2; i * i <= n; i++) if (n % i == 0) sum = sum + i + n / i;\n    return sum;\n  }\n\n  static boolean areEquivalent(int num1, int num2) {\n    return divSum(num1) == divSum(num2);\n  }\n\n  public static void main(String[] args) {\n    int num1 = 559;\n    int num2 = 703;\n    if (areEquivalent(num1, num2)) System.out.println(\" Equivalent \");\n    else System.out.println(\" Not \u2581 Equivalent \");\n  }\n}\n", "python": "import math\n\n\ndef divSum(n):\n    sum = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            sum = sum + i + math.floor(n / i)\n        i += 1\n    return sum\n\n\ndef areEquivalent(num1, num2):\n    return divSum(num1) == divSum(num2)\n\n\nnum1 = 559\nnum2 = 703\nif areEquivalent(num1, num2) == True:\n    print(\" Equivalent \")\nelse:\n    print(\" Not \u2581 Equivalent \")\n"}
{"text": "Dodecahedral number ", "java": "import java.io.*;\n\nclass GFG {\n  static int dodecahedral_num(int n) {\n    return n * (3 * n - 1) * (3 * n - 2) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.print(n + \" the \u2581 Dodecahedral \" + \" \u2581 number : \");\n    System.out.println(dodecahedral_num(n));\n  }\n}\n", "python": "def dodecahedral_num(n):\n    return n * (3 * n - 1) * (3 * n - 2) // 2\n\n\nn = 5\nprint(\" % sth \u2581 Dodecahedral \u2581 number \u2581 : \" % n, dodecahedral_num(n))\n"}
{"text": "Check if two people starting from different points ever meet ", "java": "import java.io.*;\n\nclass GFG {\n  static void swap(int a, int b) {\n    int t = a;\n    a = b;\n    b = t;\n  }\n\n  static boolean everMeet(int x1, int x2, int v1, int v2) {\n    if (x1 < x2 && v1 <= v2) return false;\n    if (x1 > x2 && v1 >= v2) return false;\n    if (x1 < x2) {\n      swap(x1, x2);\n      swap(v1, v2);\n    }\n    while (x1 >= x2) {\n      if (x1 == x2) return true;\n      x1 = x1 + v1;\n      x2 = x2 + v2;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int x1 = 5, v1 = 8, x2 = 4, v2 = 7;\n    if (everMeet(x1, x2, v1, v2)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def everMeet(x1, x2, v1, v2):\n    if x1 < x2 and v1 <= v2:\n        return False\n    if x1 > x2 and v1 >= v2:\n        return False\n    if x1 < x2:\n        x1, x2 = x2, x1\n        v1, v2 = v2, v1\n    while x1 >= x2:\n        if x1 == x2:\n            return True\n        x1 = x1 + v1\n        x2 = x2 + v2\n    return False\n\n\nx1 = 5\nv1 = 8\nx2 = 4\nv2 = 7\nif everMeet(x1, x2, v1, v2):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Find ceil of a / b without using ceil ( ) function ", "java": "import java.io.*;\n\nclass GFG {\n  public static void main(String args[]) {\n    int a = 4;\n    int b = 3, val = 0;\n    if ((a % b) != 0) val = (a / b) + (a % b);\n    else val = (a / b);\n    System.out.println(\" The \u2581 ceiling \u2581 \" + \" value \u2581 of \u2581 4/3 \u2581 is \u2581 \" + val);\n    a = 6;\n    b = 3;\n    if ((a % b) != 0) val = (a / b) + (a % b);\n    else val = (a / b);\n    System.out.println(\" The \u2581 ceiling \u2581 \" + \" value \u2581 of \u2581 6/3 \u2581 is \u2581 \" + val);\n  }\n}\n", "python": "import math\n\na = 4\nb = 3\nval = (a / b) + ((a % b) != 0)\nprint(\" The \u2581 ceiling \u2581 value \u2581 of \u2581 4/3 \u2581 is \", math.floor(val))\na = 6\nb = 3\nval = int((a / b) + ((a % b) != 0))\nprint(\" The \u2581 ceiling \u2581 value \u2581 of \u2581 6/3 \u2581 is \", val)\n"}
{"text": "Nesbitt 's Inequality ", "java": "class GFG {\n  static boolean isValidNesbitt(double a, double b, double c) {\n    double A = a / (b + c);\n    double B = b / (a + c);\n    double C = c / (a + b);\n    double inequality = A + B + C;\n    return (inequality >= 1.5);\n  }\n\n  public static void main(String args[]) {\n    double a = 1.0, b = 2.0, c = 3.0;\n    if (isValidNesbitt(a, b, c) == true) {\n      System.out.print(\" Nesbitt ' s \u2581 inequality \" + \" \u2581 satisfied . \");\n      System.out.println(\" for \u2581 real \u2581 numbers \u2581 \" + a + \" , \u2581 \" + b + \" , \u2581 \" + c);\n    } else System.out.println(\" Nesbitts \u2581 inequality \" + \" \u2581 not \u2581 satisfied \");\n  }\n}\n", "python": "def isValidNesbitt(a, b, c):\n    A = a / (b + c)\n    B = b / (a + c)\n    C = c / (a + b)\n    inequality = A + B + C\n    return inequality >= 1.5\n\n\na = 1.0\nb = 2.0\nc = 3.0\nif isValidNesbitt(a, b, c):\n    print(\n        \" Nesbitt ' s \u2581 inequality \u2581 satisfied . \",\n        \" \u2581 for \u2581 real \u2581 numbers \u2581 \",\n        a,\n        \" , \u2581 \",\n        b,\n        \" , \u2581 \",\n        c,\n    )\nelse:\n    print(\" Not \u2581 satisfied \")\n"}
{"text": "n ", "java": "import java.util.*;\n\npublic class GFG {\n  public static int findNth(int n) {\n    int count = 0;\n    for (int curr = 19; ; curr += 9) {\n      int sum = 0;\n      for (int x = curr; x > 0; x = x / 10) sum = sum + x % 10;\n      if (sum == 10) count++;\n      if (count == n) return curr;\n    }\n  }\n\n  public static void main(String[] args) {\n    System.out.print(findNth(5));\n  }\n}\n", "python": "def ans(n):\n    if n < 6:\n        return n\n    return n % 6 + 10 * (ans(n // 6)) - 1\n\n\ndef getSpecialNumber(N):\n    return ans(N)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 17\n    answer = getSpecialNumber(N)\n    print(answer)\n"}
{"text": "Sum of n digit numbers divisible by a given number ", "java": "import java.io.*;\n\nclass GFG {\n  static int totalSumDivisibleByNum(int digit, int number) {\n    int firstnum = (int) Math.pow(10, digit - 1);\n    int lastnum = (int) Math.pow(10, digit);\n    firstnum = (firstnum - firstnum % number) + number;\n    lastnum = (lastnum - lastnum % number);\n    int count = ((lastnum - firstnum) / number + 1);\n    return ((lastnum + firstnum) * count) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3, number = 7;\n    System.out.println(totalSumDivisibleByNum(n, number));\n  }\n}\n", "python": "def totalSumDivisibleByNum(digit, number):\n    firstnum = pow(10, digit - 1)\n    lastnum = pow(10, digit)\n    firstnum = (firstnum - firstnum % number) + number\n    lastnum = lastnum - lastnum % number\n    count = (lastnum - firstnum) / number + 1\n    return int(((lastnum + firstnum) * count) / 2)\n\n\ndigit = 3\nnum = 7\nprint(totalSumDivisibleByNum(digit, num))\n"}
{"text": "Program for N ", "java": "import java.io.*;\n\nclass GFG {\n  public static int Nth_of_AP(int a, int d, int N) {\n    return (a + (N - 1) * d);\n  }\n\n  public static void main(String[] args) {\n    int a = 2;\n    int d = 1;\n    int N = 5;\n    System.out.print(\n        \" The \u2581 \" + N + \" th \u2581 term \u2581 of \u2581 the \u2581 series \u2581 is \u2581 : \u2581 \" + Nth_of_AP(a, d, N));\n  }\n}\n", "python": "def Nth_of_AP(a, d, N):\n    return a + (N - 1) * d\n\n\na = 2\nd = 1\nN = 5\nprint(\" The \u2581 \", N, \" th \u2581 term \u2581 of \u2581 the \u2581 series \u2581 is \u2581 : \u2581 \", Nth_of_AP(a, d, N))\n"}
{"text": "Fibbinary Numbers ( No consecutive 1 s in binary ) ", "java": "class GFG {\n  static boolean checkFibinnary(int n) {\n    int prev_last = 0;\n    while (n != 0) {\n      if ((n & 1) != 0 && prev_last != 0) return false;\n      prev_last = n & 1;\n      n >>= 1;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    if (checkFibinnary(n) == true) System.out.println(\" YES \");\n    else System.out.println(\" NO \");\n  }\n}\n", "python": "def checkFibinnary(n):\n    prev_last = 0\n    while n:\n        if (n & 1) and prev_last:\n            return False\n        prev_last = n & 1\n        n >>= 1\n    return True\n\n\nn = 10\nif checkFibinnary(n):\n    print(\" YES \")\nelse:\n    print(\" NO \")\n"}
{"text": "Sum of the series 5 + 55 + 555 + . . up to n terms ", "java": "class GFG {\n  static int sumOfSeries(int n) {\n    return (int) (0.6172 * (Math.pow(10, n) - 1) - 0.55 * n);\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "def sumOfSeries(n):\n    return (int)(0.6172 * (pow(10, n) - 1) - 0.55 * n)\n\n\nn = 2\nprint(sumOfSeries(n))\n"}
{"text": "Nonagonal number ", "java": "import java.io.*;\n\nclass GFG {\n  static int Nonagonal(int n) {\n    return n * (7 * n - 5) / 2;\n  }\n\n  public static void main(String args[]) {\n    int n = 10;\n    System.out.println(Nonagonal(n));\n  }\n}\n", "python": "def Nonagonal(n):\n    return int(n * (7 * n - 5) / 2)\n\n\nn = 10\nprint(Nonagonal(n))\n"}
{"text": "Check if a large number is divisible by 20 ", "java": "import java.io.*;\n\nclass GFG {\n  static Boolean divisibleBy20(String num) {\n    int lastTwoDigits = Integer.parseInt(num.substring(num.length() - 2, num.length()));\n    return ((lastTwoDigits % 5 == 0) && (lastTwoDigits % 4 == 0));\n  }\n\n  public static void main(String[] args) {\n    String num = \"63284689320\";\n    if (divisibleBy20(num) == true) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "import math\n\n\ndef divisibleBy20(num):\n    lastTwoDigits = int(num[-2:])\n    return lastTwoDigits % 5 == 0 and lastTwoDigits % 4 == 0\n\n\nnum = \"63284689320\"\nif divisibleBy20(num) == True:\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Sum of square of first n even numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int squareSum(int n) {\n    return 2 * n * (n + 1) * (2 * n + 1) / 3;\n  }\n\n  public static void main(String args[]) throws IOException {\n    System.out.println(squareSum(8));\n  }\n}\n", "python": "def squareSum(n):\n    return int(2 * n * (n + 1) * (2 * n + 1) / 3)\n\n\nans = squareSum(8)\nprint(ans)\n"}
{"text": "Sum of squares of binomial coefficients ", "java": "class GFG {\n  static int factorial(int start, int end) {\n    int res = 1;\n    for (int i = start; i <= end; i++) res *= i;\n    return res;\n  }\n\n  static int sumofsquare(int n) {\n    return factorial(n + 1, 2 * n) / factorial(1, n);\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(sumofsquare(n));\n  }\n}\n", "python": "def factorial(start, end):\n    res = 1\n    for i in range(start, end + 1):\n        res *= i\n    return res\n\n\ndef sumofsquare(n):\n    return int(factorial(n + 1, 2 * n) / factorial(1, n))\n\n\nn = 4\nprint(sumofsquare(n))\n"}
{"text": "Find nth Fibonacci number using Golden ratio ", "java": "class GFG {\n  static double PHI = 1.6180339;\n  static int f[] = {0, 1, 1, 2, 3, 5};\n\n  static int fib(int n) {\n    if (n < 6) return f[n];\n    int t = 5;\n    int fn = 5;\n    while (t < n) {\n      fn = (int) Math.round(fn * PHI);\n      t++;\n    }\n    return fn;\n  }\n\n  public static void main(String[] args) {\n    int n = 9;\n    System.out.println(n + \" th \u2581 Fibonacci \u2581 Number \u2581 = \u2581 \" + fib(n));\n  }\n}\n", "python": "PHI = 1.6180339\nf = [0, 1, 1, 2, 3, 5]\n\n\ndef fib(n):\n    if n < 6:\n        return f[n]\n    t = 5\n    fn = 5\n    while t < n:\n        fn = round(fn * PHI)\n        t += 1\n    return fn\n\n\nn = 9\nprint(n, \" th \u2581 Fibonacci \u2581 Number \u2581 = \", fib(n))\n"}
{"text": "Euler Method for solving differential equation ", "java": "import java.io.*;\n\nclass Euler {\n  float func(float x, float y) {\n    return (x + y + x * y);\n  }\n\n  void euler(float x0, float y, float h, float x) {\n    float temp = -0;\n    while (x0 < x) {\n      temp = y;\n      y = y + h * func(x0, y);\n      x0 = x0 + h;\n    }\n    System.out.println(\" Approximate \u2581 solution \u2581 at \u2581 x \u2581 = \u2581 \" + x + \" \u2581 is \u2581 \" + y);\n  }\n\n  public static void main(String args[]) throws IOException {\n    Euler obj = new Euler();\n    float x0 = 0;\n    float y0 = 1;\n    float h = 0.025f;\n    float x = 0.1f;\n    obj.euler(x0, y0, h, x);\n  }\n}\n", "python": "def func(x, y):\n    return x + y + x * y\n\n\ndef euler(x0, y, h, x):\n    temp = -0\n    while x0 < x:\n        temp = y\n        y = y + h * func(x0, y)\n        x0 = x0 + h\n    print(\" Approximate \u2581 solution \u2581 at \u2581 x \u2581 = \u2581 \", x, \" \u2581 is \u2581 \", \" % .6f \" % y)\n\n\nx0 = 0\ny0 = 1\nh = 0.025\nx = 0.1\neuler(x0, y0, h, x)\n"}
{"text": "Find x and y satisfying ax + by = n ", "java": "import java.io.*;\n\nclass GfG {\n  static void solution(int a, int b, int n) {\n    for (int i = 0; i * a <= n; i++) {\n      if ((n - (i * a)) % b == 0) {\n        System.out.println(\" x \u2581 = \u2581 \" + i + \" , \u2581 y \u2581 = \u2581 \" + (n - (i * a)) / b);\n        return;\n      }\n    }\n    System.out.println(\" No \u2581 solution \");\n  }\n\n  public static void main(String[] args) {\n    int a = 2, b = 3, n = 7;\n    solution(a, b, n);\n  }\n}\n", "python": "def solution(a, b, n):\n    i = 0\n    while i * a <= n:\n        if (n - (i * a)) % b == 0:\n            print(\" x \u2581 = \u2581 \", i, \" , \u2581 y \u2581 = \u2581 \", int((n - (i * a)) / b))\n            return 0\n        i = i + 1\n    print(\" No \u2581 solution \")\n\n\na = 2\nb = 3\nn = 7\nsolution(a, b, n)\n"}
{"text": "Sum of Binomial coefficients ", "java": "import java.io.*;\n\nclass GFG {\n  static int binomialCoeffSum(int n) {\n    return (1 << n);\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(binomialCoeffSum(n));\n  }\n}\n", "python": "import math\n\n\ndef binomialCoeffSum(n):\n    return 1 << n\n\n\nn = 4\nprint(binomialCoeffSum(n))\n"}
{"text": "Check if a number is Full Prime ", "java": "import java.util.*;\n\nclass Prime {\n  public static boolean checkDigits(int n) {\n    while (n > 0) {\n      int dig = n % 10;\n      if (dig != 2 && dig != 3 && dig != 5 && dig != 7) return false;\n      n /= 10;\n    }\n    return true;\n  }\n\n  public static boolean prime(int n) {\n    if (n == 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n      if (n % i == 0) return false;\n    }\n    return true;\n  }\n\n  public static boolean isFullPrime(int n) {\n    return (checkDigits(n) && prime(n));\n  }\n\n  public static void main(String[] args) {\n    int n = 53;\n    if (isFullPrime(n)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def checkDigits(n):\n    while n:\n        dig = n % 10\n        if dig != 2 and dig != 3 and dig != 5 and dig != 7:\n            return 0\n        n = n / 10\n    return 1\n\n\ndef prime(n):\n    if n == 1:\n        return 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return 0\n        i = i + 1\n    return 1\n\n\ndef isFullPrime(n):\n    return checkDigits(n) and prime(n)\n\n\nn = 53\nif isFullPrime(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Sum of first n even numbers ", "java": "import java.util.*;\n\npublic class GfG {\n  static int evenSum(int n) {\n    int curr = 2, sum = 0;\n    for (int i = 1; i <= n; i++) {\n      sum += curr;\n      curr += 2;\n    }\n    return sum;\n  }\n\n  public static void main(String argc[]) {\n    int n = 20;\n    System.out.println(\" Sum \u2581 of \u2581 first \u2581 \" + n + \" \u2581 Even \u2581 numbers \u2581 is : \u2581 \" + evenSum(n));\n  }\n}\n", "python": "def evensum(n):\n    curr = 2\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += curr\n        curr += 2\n        i = i + 1\n    return sum\n\n\nn = 20\nprint(\" sum \u2581 of \u2581 first \u2581 \", n, \" even \u2581 number \u2581 is : \u2581 \", evensum(n))\n"}
{"text": "Sum of first n even numbers ", "java": "import java.util.*;\n\npublic class GfG {\n  static int evenSum(int n) {\n    return (n * (n + 1));\n  }\n\n  public static void main(String argc[]) {\n    int n = 20;\n    System.out.println(\" Sum \u2581 of \u2581 first \u2581 \" + n + \" \u2581 Even \u2581 numbers \u2581 is : \u2581 \" + evenSum(n));\n  }\n}\n", "python": "def evensum(n):\n    curr = 2\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += curr\n        curr += 2\n        i = i + 1\n    return sum\n\n\nn = 20\nprint(\" sum \u2581 of \u2581 first \u2581 \", n, \" even \u2581 number \u2581 is : \u2581 \", evensum(n))\n"}
{"text": "Total no of 1 's in numbers ", "java": "class GFG {\n  static int countDigitOne(int n) {\n    int countr = 0;\n    for (int i = 1; i <= n; i++) {\n      String str = String.valueOf(i);\n      countr += str.split(\"1\", -1).length - 1;\n    }\n    return countr;\n  }\n\n  public static void main(String[] args) {\n    int n = 13;\n    System.out.println(countDigitOne(n));\n    n = 131;\n    System.out.println(countDigitOne(n));\n    n = 159;\n    System.out.println(countDigitOne(n));\n  }\n}\n", "python": "def countDigitOne(n):\n    countr = 0\n    for i in range(1, n + 1):\n        str1 = str(i)\n        countr += str1.count(\"1\")\n    return countr\n\n\nn = 13\nprint(countDigitOne(n))\nn = 131\nprint(countDigitOne(n))\nn = 159\nprint(countDigitOne(n))\n"}
{"text": "GCD of factorials of two numbers ", "java": "public class FactorialGCD {\n  static int factorial(int x) {\n    if (x <= 1) return 1;\n    int res = 2;\n    for (int i = 3; i <= x; i++) res = res * i;\n    return res;\n  }\n\n  static int gcdOfFactorial(int m, int n) {\n    int min = m < n ? m : n;\n    return factorial(min);\n  }\n\n  public static void main(String[] args) {\n    int m = 5, n = 9;\n    System.out.println(gcdOfFactorial(m, n));\n  }\n}\n", "python": "import math\n\n\ndef gcdOfFactorial(m, n):\n    return math.factorial(min(m, n))\n\n\nm = 5\nn = 9\nprint(gcdOfFactorial(m, n))\n"}
{"text": "Find n ", "java": "import java.io.*;\n\nclass GFG {\n  static int findNumber(int n) {\n    int x = (int) Math.floor((-1 + Math.sqrt(1 + 8 * n - 8)) / 2);\n    int base = (x * (x + 1)) / 2 + 1;\n    return n - base + 1;\n  }\n\n  public static void main(String[] args) {\n    int n = 55;\n    System.out.println(findNumber(n));\n  }\n}\n", "python": "import math\n\n\ndef findNumber(n):\n    x = int(math.floor((-1 + math.sqrt(1 + 8 * n - 8)) / 2))\n    base = (x * (x + 1)) / 2 + 1\n    return n - base + 1\n\n\nn = 55\nprint(findNumber(n))\n"}
{"text": "Program for weighted mean of natural numbers . ", "java": "import java.io.*;\n\npublic class GFG {\n  static int weightedMean(int n) {\n    return (2 * n + 1) / 3;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(weightedMean(n));\n  }\n}\n", "python": "def weightedMean(n):\n    return (2 * n + 1) / 3\n\n\nn = 10\nprint(int(weightedMean(n)))\n"}
{"text": "LCM of digits of a given number ", "java": "class GFG {\n  static int lcm_fun(int a, int b) {\n    if (b == 0) return a;\n    return lcm_fun(b, a % b);\n  }\n\n  static int digitLCM(int n) {\n    int lcm = 1;\n    while (n > 0) {\n      lcm = (n % 10 * lcm) / lcm_fun(n % 10, lcm);\n      if (lcm == 0) return 0;\n      n = n / 10;\n    }\n    return lcm;\n  }\n\n  public static void main(String[] args) {\n    int n = 397;\n    System.out.println(digitLCM(n));\n  }\n}\n", "python": "def lcm_fun(a, b):\n    if b == 0:\n        return a\n    return lcm_fun(b, a % b)\n\n\ndef digitLCM(n):\n    lcm = 1\n    while n > 0:\n        lcm = int((n % 10 * lcm) / lcm_fun(n % 10, lcm))\n        if lcm == 0:\n            return 0\n        n = int(n / 10)\n    return lcm\n\n\nn = 397\nprint(digitLCM(n))\n"}
{"text": "Sum of all subsets of a set formed by first n natural numbers ", "java": "class GFG {\n  static long findSumSubsets(int n) {\n    return (n * (n + 1) / 2) * (1 << (n - 1));\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(findSumSubsets(n));\n  }\n}\n", "python": "def findSumSubsets(n):\n    return (n * (n + 1) / 2) * (1 << (n - 1))\n\n\nn = 3\nprint(findSumSubsets(n))\n"}
{"text": "Find if two people ever meet after same number of jumps ", "java": "\npublic class GFG {\n  static boolean sackRace(int p1, int s1, int p2, int s2) {\n    return ((s1 > s2 && (p2 - p1) % (s1 - s2) == 0) || (s2 > s1 && (p1 - p2) % (s2 - s1) == 0));\n  }\n\n  public static void main(String args[]) {\n    int p1 = 4, s1 = 4, p2 = 8, s2 = 2;\n    if (sackRace(p1, s1, p2, s2)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def sackRace(p1, s1, p2, s2):\n    return (s1 > s2 and (p2 - p1) % (s1 - s2) == 0) or (\n        s2 > s1 and (p1 - p2) % (s2 - s1) == 0\n    )\n\n\np1 = 4\ns1 = 4\np2 = 8\ns2 = 2\nif sackRace(p1, s1, p2, s2):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to find simple interest ", "java": "import java.io.*;\n\nclass GFG {\n  public static void main(String args[]) {\n    float P = 1, R = 1, T = 1;\n    float SI = (P * T * R) / 100;\n    System.out.println(\" Simple \u2581 interest \u2581 = \u2581 \" + SI);\n  }\n}\n", "python": "P = 1\nR = 1\nT = 1\nSI = (P * R * T) / 100\nprint(\" simple \u2581 interest \u2581 is \", SI)\n"}
{"text": "Compute average of two numbers without overflow ", "java": "import java.io.*;\n\nclass GFG {\n  static int compute_average(int a, int b) {\n    return (a + b) / 2;\n  }\n\n  public static void main(String[] args) {\n    int a = Integer.MAX_VALUE;\n    int b = Integer.MAX_VALUE;\n    System.out.println(\" Actual \u2581 average \u2581 : \u2581 \" + Integer.MAX_VALUE);\n    System.out.println(\" Computed \u2581 average \u2581 : \u2581 \" + compute_average(a, b));\n  }\n}\n", "python": "import sys\nfrom math import floor\n\nINT_MAX = 2147483647\n\n\ndef compute_average(a, b):\n    return floor((a + b) / 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = INT_MAX\n    b = -INT_MAX - 1\n    print(\" Actual \u2581 average \u2581 : \u2581 \", INT_MAX)\n    print(\" Computed \u2581 average \u2581 : \u2581 \", compute_average(a, b))\n"}
{"text": "Check if a number is jumbled or not ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean checkJumbled(int num) {\n    if (num / 10 == 0) return true;\n    while (num != 0) {\n      if (num / 10 == 0) return true;\n      int digit1 = num % 10;\n      int digit2 = (num / 10) % 10;\n      if (Math.abs(digit2 - digit1) > 1) return false;\n      num = num / 10;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int num = -1234;\n    if (checkJumbled(num)) System.out.println(\" True \u2581 \");\n    else System.out.println(\" False \u2581 \");\n    num = -1247;\n    if (checkJumbled(num)) System.out.println(\" True \u2581 \");\n    else System.out.println(\" False \u2581 \");\n  }\n}\n", "python": "def checkJumbled(num):\n    if num / 10 == 0:\n        return True\n    while num != 0:\n        if num / 10 == 0:\n            return True\n        digit1 = num % 10\n        digit2 = (num / 10) % 10\n        if abs(digit2 - digit1) > 1:\n            return False\n        num = num / 10\n    return True\n\n\nnum = -1234\nif checkJumbled(abs(num)):\n    print \" True \u2581 \"\nelse:\n    print \" False \"\nnum = -1247\nif checkJumbled(abs(num)):\n    print \" True \u2581 \"\nelse:\n    print \" False \"\n"}
{"text": "Finding n ", "java": "import java.util.*;\n\nclass GFG {\n  static String nthprimedigitsnumber(int number) {\n    int rem;\n    String num = \" \";\n    while (number > 0) {\n      rem = number % 4;\n      switch (rem) {\n        case 1:\n          num += '2';\n          break;\n        case 2:\n          num += '3';\n          break;\n        case 3:\n          num += '5';\n          break;\n        case 0:\n          num += '7';\n          break;\n      }\n      if (number % 4 == 0) number--;\n      number = number / 4;\n    }\n    return new StringBuilder(num).reverse().toString();\n  }\n\n  public static void main(String[] args) {\n    int number = 21;\n    System.out.println(nthprimedigitsnumber(10));\n    System.out.println(nthprimedigitsnumber(21));\n  }\n}\n", "python": "def nthprimedigitsnumber(number):\n    num = \" \"\n    while number > 0:\n        rem = number % 4\n        if rem == 1:\n            num += \"2\"\n        if rem == 2:\n            num += \"3\"\n        if rem == 3:\n            num += \"5\"\n        if rem == 0:\n            num += \"7\"\n        if number % 4 == 0:\n            number = number - 1\n        number = number // 4\n    return num[::-1]\n\n\nnumber = 21\nprint(nthprimedigitsnumber(10))\nprint(nthprimedigitsnumber(number))\n"}
{"text": "First digit in product of an array of numbers ", "java": "class Test {\n  static int FirstDigit(int arr[], int n) {\n    double S = 0;\n    for (int i = 0; i < n; i++) S = S + Math.log10(arr[i] * 1.0);\n    double fract_S = S - Math.floor(S);\n    int ans = (int) Math.pow(10, fract_S);\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {5, 8, 3, 7};\n    System.out.println(FirstDigit(arr, arr.length));\n  }\n}\n", "python": "import math\n\n\ndef FirstDigit(arr, n):\n    S = 0\n    for i in range(n):\n        S = S + math.log10(arr[i] * 1.0)\n    fract_S = S - math.floor(S)\n    ans = math.pow(10, fract_S)\n    return ans\n\n\narr = [5, 8, 3, 7]\nn = len(arr)\nprint((int)(FirstDigit(arr, n)))\n"}
{"text": "Minimum positive integer to divide a number such that the result is an odd ", "java": "import java.io.*;\n\nclass GFG {\n  static int makeOdd(int n) {\n    if (n % 2 != 0) return 1;\n    int ans = 1;\n    while (n % 2 == 0) {\n      n /= 2;\n      ans *= 2;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 36;\n    int res = makeOdd(n);\n    System.out.println(res);\n  }\n}\n", "python": "def makeOdd(n):\n    if n % 2 != 0:\n        return 1\n    resul = 1\n    while n % 2 == 0:\n        n = n / 2\n        resul = resul * 2\n    return resul\n\n\nn = 36\nprint(makeOdd(n))\n"}
{"text": "Multiple of x closest to n ", "java": "import java.io.*;\n\nclass Solution {\n  static int closestMultiple(int n, int x) {\n    if (x > n) return x;\n    n = n + x / 2;\n    n = n - (n % x);\n    return n;\n  }\n\n  public static void main(String[] args) {\n    int n = 56287, x = 27;\n    System.out.println(closestMultiple(n, x));\n  }\n}\n", "python": "def closestMultiple(n, x):\n    if x > n:\n        return x\n    z = (int)(x / 2)\n    n = n + z\n    n = n - (n % x)\n    return n\n\n\nn = 56287\nx = 27\nprint(closestMultiple(n, x))\n"}
{"text": "Number of occurrences of 2 as a digit in numbers from 0 to n ", "java": "class GFG {\n  static int number0f2s(int n) {\n    int count = 0;\n    while (n > 0) {\n      if (n % 10 == 2) count++;\n      n = n / 10;\n    }\n    return count;\n  }\n\n  static int numberOf2sinRange(int n) {\n    int count = 0;\n    for (int i = 2; i <= n; i++) count += number0f2s(i);\n    return count;\n  }\n\n  public static void main(String[] args) {\n    System.out.print(numberOf2sinRange(22));\n    System.out.println();\n    System.out.print(numberOf2sinRange(100));\n  }\n}\n", "python": "def number0f2s(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 2:\n            count = count + 1\n        n = n // 10\n    return count\n\n\ndef numberOf2sinRange(n):\n    count = 0\n    for i in range(2, n + 1):\n        count = count + number0f2s(i)\n    return count\n\n\nprint(numberOf2sinRange(22))\nprint(numberOf2sinRange(100))\n"}
{"text": "Check if a large number is divisible by 6 or not ", "java": "class IsDivisible {\n  static boolean check(String str) {\n    int n = str.length();\n    if ((str.charAt(n - 1) - '0') % 2 != 0) return false;\n    int digitSum = 0;\n    for (int i = 0; i < n; i++) digitSum += (str.charAt(i) - '0');\n    return (digitSum % 3 == 0);\n  }\n\n  public static void main(String[] args) {\n    String str = \"1332\";\n    if (check(str)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def check(st):\n    n = len(st)\n    if ((int)(st[n - 1]) % 2) != 0:\n        return False\n    digitSum = 0\n    for i in range(0, n):\n        digitSum = digitSum + (int)(st[i])\n    return digitSum % 3 == 0\n\n\nst = \"1332\"\nif check(st):\n    print(\" Yes \")\nelse:\n    print(\" No \u2581 \")\n"}
{"text": "N 'th palindrome of K digits ", "java": "import java.util.*;\n\nclass GFG {\n  static int reverseNum(int n) {\n    int rem, rev = 0;\n    while (n > 0) {\n      rem = n % 10;\n      rev = rev * 10 + rem;\n      n /= 10;\n    }\n    return rev;\n  }\n\n  static boolean isPalindrom(int num) {\n    return num == reverseNum(num);\n  }\n\n  static int nthPalindrome(int n, int k) {\n    int num = (int) Math.pow(10, k - 1);\n    while (true) {\n      if (isPalindrom(num)) --n;\n      if (n == 0) break;\n      ++num;\n    }\n    return num;\n  }\n\n  public static void main(String[] args) {\n    int n = 6, k = 5;\n    System.out.println(\n        n + \" th \u2581 palindrome \u2581 of \u2581 \" + k + \" \u2581 digit \u2581 = \u2581 \" + nthPalindrome(n, k));\n    n = 10;\n    k = 6;\n    System.out.println(\n        n + \" th \u2581 palindrome \u2581 of \u2581 \" + k + \" \u2581 digit \u2581 = \u2581 \" + nthPalindrome(n, k));\n  }\n}\n", "python": "import math\n\n\ndef reverseNum(n):\n    rev = 0\n    while n:\n        rem = n % 10\n        rev = (rev * 10) + rem\n        n = int(n / 10)\n    return rev\n\n\ndef isPalindrom(num):\n    return num == reverseNum(num)\n\n\ndef nthPalindrome(n, k):\n    num = math.pow(10, k - 1)\n    while True:\n        if isPalindrom(num):\n            n -= 1\n        if not n:\n            break\n        num += 1\n    return int(num)\n\n\nn = 6\nk = 5\nprint(n, \" th \u2581 palindrome \u2581 of \", k, \" digit \u2581 = \", nthPalindrome(n, k))\nn = 10\nk = 6\nprint(n, \" th \u2581 palindrome \u2581 of \", k, \" digit \u2581 = \", nthPalindrome(n, k))\n"}
{"text": "N 'th palindrome of K digits ", "java": "class GFG {\n  static void nthPalindrome(int n, int k) {\n    int temp = (k & 1) != 0 ? (k / 2) : (k / 2 - 1);\n    int palindrome = (int) Math.pow(10, temp);\n    palindrome += n - 1;\n    System.out.print(palindrome);\n    if ((k & 1) > 0) palindrome /= 10;\n    while (palindrome > 0) {\n      System.out.print(palindrome % 10);\n      palindrome /= 10;\n    }\n    System.out.println(\" \");\n  }\n\n  public static void main(String[] args) {\n    int n = 6, k = 5;\n    System.out.print(n + \" th \u2581 palindrome \u2581 of \u2581 \" + k + \" \u2581 digit \u2581 = \u2581 \");\n    nthPalindrome(n, k);\n    n = 10;\n    k = 6;\n    System.out.print(n + \" th \u2581 palindrome \u2581 of \u2581 \" + k + \" \u2581 digit \u2581 = \u2581 \");\n    nthPalindrome(n, k);\n  }\n}\n", "python": "import math\n\n\ndef reverseNum(n):\n    rev = 0\n    while n:\n        rem = n % 10\n        rev = (rev * 10) + rem\n        n = int(n / 10)\n    return rev\n\n\ndef isPalindrom(num):\n    return num == reverseNum(num)\n\n\ndef nthPalindrome(n, k):\n    num = math.pow(10, k - 1)\n    while True:\n        if isPalindrom(num):\n            n -= 1\n        if not n:\n            break\n        num += 1\n    return int(num)\n\n\nn = 6\nk = 5\nprint(n, \" th \u2581 palindrome \u2581 of \", k, \" digit \u2581 = \", nthPalindrome(n, k))\nn = 10\nk = 6\nprint(n, \" th \u2581 palindrome \u2581 of \", k, \" digit \u2581 = \", nthPalindrome(n, k))\n"}
{"text": "N ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int nthElement(int a, int b, int n) {\n    ArrayList<Integer> seq = new ArrayList<Integer>(n * n + 1);\n    for (int i = 1; i <= n; i++) seq.add(a * i);\n    Collections.sort(seq);\n    for (int i = 1, k = n; i <= n && k > 0; i++) {\n      if (seq.indexOf(b * i) == -1) {\n        seq.add(b * i);\n        Collections.sort(seq);\n        k--;\n      }\n    }\n    return seq.get(n - 1);\n  }\n\n  public static void main(String[] args) {\n    int a = 3, b = 5, n = 5;\n    System.out.println(nthElement(a, b, n));\n  }\n}\n", "python": "def nthElement(a, b, n):\n    seq = []\n    for i in range(1, n + 1):\n        seq.append(a * i)\n    seq.sort()\n    i = 1\n    k = n\n    while i <= n and k > 0:\n        try:\n            z = seq.index(b * i)\n        except ValueError:\n            seq.append(b * i)\n            seq.sort()\n            k -= 1\n        i += 1\n    return seq[n - 1]\n\n\na = 3\nb = 5\nn = 5\nprint(nthElement(a, b, n))\n"}
{"text": "Last non ", "java": "class GFG {\n  static int dig[] = {1, 1, 2, 6, 4, 2, 2, 4, 2, 8};\n\n  static int lastNon0Digit(int n) {\n    if (n < 10) return dig[n];\n    if (((n / 10) % 10) % 2 == 0) return (6 * lastNon0Digit(n / 5) * dig[n % 10]) % 10;\n    else return (4 * lastNon0Digit(n / 5) * dig[n % 10]) % 10;\n  }\n\n  public static void main(String[] args) {\n    int n = 14;\n    System.out.print(lastNon0Digit(n));\n  }\n}\n", "python": "dig = [1, 1, 2, 6, 4, 2, 2, 4, 2, 8]\n\n\ndef lastNon0Digit(n):\n    if n < 10:\n        return dig[n]\n    if ((n // 10) % 10) % 2 == 0:\n        return (6 * lastNon0Digit(n // 5) * dig[n % 10]) % 10\n    else:\n        return (4 * lastNon0Digit(n // 5) * dig[n % 10]) % 10\n    return 0\n\n\nn = 14\nprint(lastNon0Digit(n))\n"}
{"text": "Count ways to spell a number with repeated digits ", "java": "class GFG {\n  static long spellsCount(String num) {\n    int n = num.length();\n    long result = 1;\n    for (int i = 0; i < n; i++) {\n      int count = 1;\n      while (i < n - 1 && num.charAt(i + 1) == num.charAt(i)) {\n        count++;\n        i++;\n      }\n      result = result * (long) Math.pow(2, count - 1);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    String num = \"11112\";\n    System.out.print(spellsCount(num));\n  }\n}\n", "python": "def spellsCount(num):\n    n = len(num)\n    result = 1\n    i = 0\n    while i < n:\n        count = 1\n        while i < n - 1 and num[i + 1] == num[i]:\n            count += 1\n            i += 1\n        result = result * int(pow(2, count - 1))\n        i += 1\n    return result\n\n\nnum = \"11112\"\nprint(spellsCount(num))\n"}
{"text": "Non Fibonacci Numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int nonFibonacci(int n) {\n    int prevPrev = 1, prev = 2, curr = 3;\n    while (n > 0) {\n      prevPrev = prev;\n      prev = curr;\n      curr = prevPrev + prev;\n      n = n - (curr - prev - 1);\n    }\n    n = n + (curr - prev - 1);\n    return prev + n;\n  }\n\n  public static void main(String args[]) {\n    System.out.println(nonFibonacci(5));\n  }\n}\n", "python": "def nonFibonacci(n):\n    prevPrev = 1\n    prev = 2\n    curr = 3\n    while n > 0:\n        prevPrev = prev\n        prev = curr\n        curr = prevPrev + prev\n        n = n - (curr - prev - 1)\n    n = n + (curr - prev - 1)\n    return prev + n\n\n\nprint(nonFibonacci(5))\n"}
{"text": "Program to convert a given number to words ", "java": "class GFG {\n  static String one[] = {\n    \" \",\n    \" one \u2581 \",\n    \" two \u2581 \",\n    \" three \u2581 \",\n    \" four \u2581 \",\n    \" five \u2581 \",\n    \" six \u2581 \",\n    \" seven \u2581 \",\n    \" eight \u2581 \",\n    \" nine \u2581 \",\n    \" ten \u2581 \",\n    \" eleven \u2581 \",\n    \" twelve \u2581 \",\n    \" thirteen \u2581 \",\n    \" fourteen \u2581 \",\n    \" fifteen \u2581 \",\n    \" sixteen \u2581 \",\n    \" seventeen \u2581 \",\n    \" eighteen \u2581 \",\n    \" nineteen \u2581 \"\n  };\n  static String ten[] = {\n    \" \",\n    \" \",\n    \" twenty \u2581 \",\n    \" thirty \u2581 \",\n    \" forty \u2581 \",\n    \" fifty \u2581 \",\n    \" sixty \u2581 \",\n    \" seventy \u2581 \",\n    \" eighty \u2581 \",\n    \" ninety \u2581 \"\n  };\n\n  static String numToWords(int n, String s) {\n    String str = \" \";\n    if (n > 19) {\n      str += ten[n / 10] + one[n % 10];\n    } else {\n      str += one[n];\n    }\n    if (n != 0) {\n      str += s;\n    }\n    return str;\n  }\n\n  static String convertToWords(long n) {\n    String out = \" \";\n    out += numToWords((int) (n / 10000000), \" crore \u2581 \");\n    out += numToWords((int) ((n / 100000) % 100), \" lakh \u2581 \");\n    out += numToWords((int) ((n / 1000) % 100), \" thousand \u2581 \");\n    out += numToWords((int) ((n / 100) % 10), \" hundred \u2581 \");\n    if (n > 100 && n % 100 > 0) {\n      out += \" and \u2581 \";\n    }\n    out += numToWords((int) (n % 100), \" \");\n    return out;\n  }\n\n  public static void main(String[] args) {\n    long n = 438237764;\n    System.out.printf(convertToWords(n));\n  }\n}\n", "python": "one = [\n    \" \",\n    \" one \u2581 \",\n    \" two \u2581 \",\n    \" three \u2581 \",\n    \" four \u2581 \",\n    \" five \u2581 \",\n    \" six \u2581 \",\n    \" seven \u2581 \",\n    \" eight \u2581 \",\n    \" nine \u2581 \",\n    \" ten \u2581 \",\n    \" eleven \u2581 \",\n    \" twelve \u2581 \",\n    \" thirteen \u2581 \",\n    \" fourteen \u2581 \",\n    \" fifteen \u2581 \",\n    \" sixteen \u2581 \",\n    \" seventeen \u2581 \",\n    \" eighteen \u2581 \",\n    \" nineteen \u2581 \",\n]\nten = [\n    \" \",\n    \" \",\n    \" twenty \u2581 \",\n    \" thirty \u2581 \",\n    \" forty \u2581 \",\n    \" fifty \u2581 \",\n    \" sixty \u2581 \",\n    \" seventy \u2581 \",\n    \" eighty \u2581 \",\n    \" ninety \u2581 \",\n]\n\n\ndef numToWords(n, s):\n    str = \" \"\n    if n > 19:\n        str += ten[n // 10] + one[n % 10]\n    else:\n        str += one[n]\n    if n:\n        str += s\n    return str\n\n\ndef convertToWords(n):\n    out = \" \"\n    out += numToWords((n // 10000000), \" crore \u2581 \")\n    out += numToWords(((n // 100000) % 100), \" lakh \u2581 \")\n    out += numToWords(((n // 1000) % 100), \" thousand \u2581 \")\n    out += numToWords(((n // 100) % 10), \" hundred \u2581 \")\n    if n > 100 and n % 100:\n        out += \" and \u2581 \"\n    out += numToWords((n % 100), \" \")\n    return out\n\n\nn = 438237764\nprint(convertToWords(n))\n"}
{"text": "Find number of subarrays with even sum ", "java": "import java.io.*;\n\nclass GFG {\n  public static long countEvenSum(int a[], int n) {\n    long res = 0;\n    int s = 0;\n    for (int i = n - 1; i >= 0; i--) {\n      if (a[i] % 2 == 1) {\n        s = n - i - 1 - s;\n      } else {\n        s = s + 1;\n      }\n      res = res + s;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 2, 3, 4, 1};\n    int n = arr.length;\n    System.out.println(\n        \" The \u2581 Number \u2581 of \u2581 Subarrays \" + \" \u2581 with \u2581 even \u2581 sum \u2581 is \u2581 \" + countEvenSum(arr, n));\n  }\n}\n", "python": "def countEvenSum(arr, n):\n    res = 0\n    s = 0\n    for i in reversed(range(n)):\n        if arr[i] % 2 == 1:\n            s = n - i - 1 - s\n        else:\n            s = s + 1\n        res = res + s\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 2, 3, 4, 1]\n    n = len(arr)\n    print(\n        \" The \u2581 Number \u2581 of \u2581 Subarrays \u2581 with \u2581 even \" \" \u2581 sum \u2581 is \",\n        countEvenSum(arr, n),\n    )\n"}
{"text": "Linear Diophantine Equations ", "java": "import java.io.*;\n\nclass GFG {\n  static int gcd(int a, int b) {\n    return (a % b == 0) ? Math.abs(b) : gcd(b, a % b);\n  }\n\n  static boolean isPossible(int a, int b, int c) {\n    return (c % gcd(a, b) == 0);\n  }\n\n  public static void main(String[] args) {\n    int a = 3, b = 6, c = 9;\n    if (isPossible(a, b, c)) System.out.println(\" Possible \");\n    else System.out.println(\" Not \u2581 Possible \");\n    a = 3;\n    b = 6;\n    c = 8;\n    if (isPossible(a, b, c)) System.out.println(\" Possible \");\n    else System.out.println(\" Not \u2581 Possible \");\n    a = 2;\n    b = 5;\n    c = 1;\n    if (isPossible(a, b, c)) System.out.println(\" Possible \");\n    else System.out.println(\" Not \u2581 Possible \");\n  }\n}\n", "python": "from math import gcd\n\n\ndef isPossible(a, b, c):\n    return c % gcd(a, b) == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 3\n    b = 6\n    c = 9\n    if isPossible(a, b, c):\n        print(\" Possible \")\n    else:\n        print(\" Not \u2581 Possible \")\n    a = 3\n    b = 6\n    c = 8\n    if isPossible(a, b, c):\n        print(\" Possible \")\n    else:\n        print(\" Not \u2581 Possible \")\n    a = 2\n    b = 5\n    c = 1\n    if isPossible(a, b, c):\n        print(\" Possible \")\n    else:\n        print(\" Not \u2581 Possible \")\n    DEDENT\n"}
{"text": "Find smallest values of x and y such that ax ", "java": "class GFG {\n  static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return (gcd(b, a % b));\n  }\n\n  static void findSmallest(int a, int b) {\n    int lcm = (a * b) / gcd(a, b);\n    System.out.print(\" x \u2581 = \u2581 \" + lcm / a + \" y = \" + lcm / b);\n  }\n\n  public static void main(String[] args) {\n    int a = 25, b = 35;\n    findSmallest(a, b);\n  }\n}\n", "python": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef findSmallest(a, b):\n    lcm = (a * b) / gcd(a, b)\n    print(\" x \u2581 = \", lcm / a, \" y =   \", lcm / b)\n\n\na = 25\nb = 35\nfindSmallest(a, b)\n"}
{"text": "Compute n ! under modulo p ", "java": "class GFG {\n  static int power(int x, int y, int p) {\n    while (y > 0) {\n      if ((y & 1) > 0) res = (res * x) % p;\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  static int modInverse(int a, int p) {\n    return power(a, p - 2, p);\n  }\n\n  static int modFact(int n, int p) {\n    if (p <= n) return 0;\n    int res = (p - 1);\n    for (int i = n + 1; i < p; i++) res = (res * modInverse(i, p)) % p;\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int n = 25, p = 29;\n    System.out.println(modFact(n, p));\n  }\n}\n", "python": "def power(x, y, p):\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        x = (x * x) % p\n    return res\n\n\ndef modInverse(a, p):\n    return power(a, p - 2, p)\n\n\ndef modFact(n, p):\n    if p <= n:\n        return 0\n    res = p - 1\n    for i in range(n + 1, p):\n        res = (res * modInverse(i, p)) % p\n    return res\n\n\nn = 25\np = 29\nprint(modFact(n, p))\n"}
{"text": "Sum of all elements between k1 ' th \u2581 and \u2581 k2' th smallest elements ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int sumBetweenTwoKth(int arr[], int k1, int k2) {\n    Arrays.sort(arr);\n    int result = 0;\n    for (int i = k1; i < k2 - 1; i++) result += arr[i];\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {20, 8, 22, 4, 12, 10, 14};\n    int k1 = 3, k2 = 6;\n    int n = arr.length;\n    System.out.print(sumBetweenTwoKth(arr, k1, k2));\n  }\n}\n", "python": "def sumBetweenTwoKth(arr, n, k1, k2):\n    arr.sort()\n    result = 0\n    for i in range(k1, k2 - 1):\n        result += arr[i]\n    return result\n\n\narr = [20, 8, 22, 4, 12, 10, 14]\nk1 = 3\nk2 = 6\nn = len(arr)\nprint(sumBetweenTwoKth(arr, n, k1, k2))\n"}
{"text": "Puzzle ", "java": "class GFG {\n  static int countSquares(int n) {\n    return (n * (n + 1) / 2) * (2 * n + 1) / 3;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(\" Count \u2581 of \u2581 squares \u2581 is \u2581 \" + countSquares(n));\n  }\n}\n", "python": "def countSquares(n):\n    return (n * (n + 1) / 2) * (2 * n + 1) / 3\n\n\nn = 4\nprint(\" Count \u2581 of \u2581 squares \u2581 is \u2581 \", countSquares(n))\n"}
{"text": "Given a number n , count all multiples of 3 and / or 5 in set { 1 , 2 , 3 , ... n } ", "java": "import java.io.*;\n\nclass GFG {\n  static long countOfMultiples(long n) {\n    return (n / 3 + n / 5 - n / 15);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(countOfMultiples(6));\n    System.out.println(countOfMultiples(16));\n  }\n}\n", "python": "def countOfMultiples(n):\n    return int(n / 3) + int(n / 5) - int(n / 15)\n\n\nprint(countOfMultiples(6))\nprint(countOfMultiples(16))\n"}
{"text": "Program to find GCD or HCF of two numbers ", "java": "class Test {\n  static int gcd(int a, int b) {\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if (a == b) return a;\n    if (a > b) return gcd(a - b, b);\n    return gcd(a, b - a);\n  }\n\n  public static void main(String[] args) {\n    int a = 98, b = 56;\n    System.out.println(\" GCD \u2581 of \u2581 \" + a + \" \u2581 and \u2581 \" + b + \" \u2581 is \u2581 \" + gcd(a, b));\n  }\n}\n", "python": "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\n\n\na = 98\nb = 56\nif gcd(a, b):\n    print(\" GCD \u2581 of \", a, \" and \", b, \" is \", gcd(a, b))\nelse:\n    print(\" not \u2581 found \")\n"}
{"text": "Find XOR sum of Bitwise AND of all pairs from given two Arrays ", "java": "import java.io.*;\n\nclass GFG {\n  static int XorSum(int A[], int B[], int N, int M) {\n    int ans1 = 0, ans2 = 0;\n    for (int i = 0; i < N; i++) ans1 = ans1 ^ A[i];\n    for (int i = 0; i < M; i++) ans2 = ans2 ^ B[i];\n    return (ans1 & ans2);\n  }\n\n  public static void main(String[] args) {\n    int A[] = {3, 5};\n    int B[] = {2, 3};\n    int N = A.length;\n    int M = B.length;\n    System.out.print(XorSum(A, B, N, M));\n  }\n}\n", "python": "def XorSum(A, B, N, M):\n    ans1 = 0\n    ans2 = 0\n    for i in range(N):\n        ans1 = ans1 ^ A[i]\n    for i in range(M):\n        ans2 = ans2 ^ B[i]\n    return ans1 & ans2\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [3, 5]\n    B = [2, 3]\n    N = len(A)\n    M = len(B)\n    print(XorSum(A, B, N, M))\n"}
{"text": "Sum of all elements between k1 ' th \u2581 and \u2581 k2' th smallest elements ", "java": "class GFG {\n  static int n = 7;\n\n  static void minheapify(int[] a, int index) {\n    int small = index;\n    int l = 2 * index + 1;\n    int r = 2 * index + 2;\n    if (l < n && a[l] < a[small]) small = l;\n    if (r < n && a[r] < a[small]) small = r;\n    if (small != index) {\n      int t = a[small];\n      a[small] = a[index];\n      a[index] = t;\n      minheapify(a, small);\n    }\n  }\n\n  public static void main(String[] args) {\n    int i = 0;\n    int k1 = 3;\n    int k2 = 6;\n    int[] a = {20, 8, 22, 4, 12, 10, 14};\n    int ans = 0;\n    for (i = (n / 2) - 1; i >= 0; i--) {\n      minheapify(a, i);\n    }\n    k1--;\n    k2--;\n    for (i = 0; i <= k1; i++) {\n      a[0] = a[n - 1];\n      n--;\n      minheapify(a, 0);\n    }\n    for (i = k1 + 1; i < k2; i++) {\n      ans += a[0];\n      a[0] = a[n - 1];\n      n--;\n      minheapify(a, 0);\n    }\n    System.out.println(ans);\n  }\n}\n", "python": "def sumBetweenTwoKth(arr, n, k1, k2):\n    arr.sort()\n    result = 0\n    for i in range(k1, k2 - 1):\n        result += arr[i]\n    return result\n\n\narr = [20, 8, 22, 4, 12, 10, 14]\nk1 = 3\nk2 = 6\nn = len(arr)\nprint(sumBetweenTwoKth(arr, n, k1, k2))\n"}
{"text": "XOR of every element of an Array with a given number K ", "java": "import java.util.*;\n\nclass GFG {\n  static void constructXORArray(int A[], int n, int K) {\n    int[] B = new int[n];\n    for (int i = 0; i < n; i++) B[i] = A[i] ^ K;\n    for (int i = 0; i < n; i++) System.out.print(B[i] + \" \u2581 \");\n    System.out.println();\n  }\n\n  public static void main(String args[]) {\n    int A[] = {2, 4, 1, 3, 5};\n    int K = 5;\n    int n = A.length;\n    constructXORArray(A, n, K);\n    int B[] = {4, 75, 45, 42};\n    K = 2;\n    n = B.length;\n    constructXORArray(B, n, K);\n  }\n}\n", "python": "def constructXORArray(A, n, K):\n    B = [0] * n\n    for i in range(n):\n        B[i] = A[i] ^ K\n    for i in range(n):\n        print(B[i], end=\" \u2581 \")\n    print()\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [2, 4, 1, 3, 5]\n    K = 5\n    n = len(A)\n    constructXORArray(A, n, K)\n    B = [4, 75, 45, 42]\n    K = 2\n    n = len(B)\n    constructXORArray(B, n, K)\n"}
{"text": "Bitwise AND of all the elements of array ", "java": "import java.util.*;\n\nclass GFG {\n  static int find_and(int arr[]) {\n    int ans = arr[0];\n    for (int i = 0; i < arr.length; i++) {\n      ans = (ans & arr[i]);\n    }\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 3, 5, 9, 11};\n    System.out.println(find_and(arr));\n  }\n}\n", "python": "def find_and(arr):\n    ans = arr[0]\n    for i in range(1, len(arr)):\n        ans = ans & arr[i]\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 3, 5, 9, 11]\n    print(find_and(arr))\n"}
{"text": "Maximum XOR value of maximum and second maximum element among all possible subarrays ", "java": "import java.util.*;\n\nclass GFG {\n  static int maximumXor(int arr[], int n) {\n    Stack<Integer> sForward = new Stack<Integer>(), sBackward = new Stack<Integer>();\n    int ans = -1;\n    for (int i = 0; i < n; i++) {\n      while (!sForward.isEmpty() && arr[i] < arr[sForward.peek()]) {\n        ans = Math.max(ans, arr[i] ^ arr[sForward.peek()]);\n        sForward.pop();\n      }\n      sForward.add(i);\n      while (!sBackward.isEmpty() && arr[n - i - 1] < arr[sBackward.peek()]) {\n        ans = Math.max(ans, arr[n - i - 1] ^ arr[sBackward.peek()]);\n        sBackward.pop();\n      }\n      sBackward.add(n - i - 1);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {8, 1, 2};\n    int n = arr.length;\n    System.out.print(maximumXor(arr, n));\n  }\n}\n", "python": "def maximumXor(arr: list, n: int) -> int:\n    sForward, sBackward = [], []\n    ans = -1\n    for i in range(n):\n        while len(sForward) > 0 and arr[i] < arr[sForward[-1]]:\n            ans = max(ans, arr[i] ^ arr[sForward[-1]])\n            sForward.pop()\n        sForward.append(i)\n        while len(sBackward) > 0 and arr[n - i - 1] < arr[sBackward[-1]]:\n            ans = max(ans, arr[n - i - 1] ^ arr[sBackward[-1]])\n            sBackward.pop()\n        sBackward.append(n - i - 1)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [8, 1, 2]\n    n = len(arr)\n    print(maximumXor(arr, n))\n"}
{"text": "Minimum count of Full Binary Trees such that the count of leaves is N ", "java": "class GFG {\n  static int minTrees(int n) {\n    int count = 0;\n    while (n > 0) {\n      n &= (n - 1);\n      count++;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 7;\n    System.out.print(minTrees(n));\n  }\n}\n", "python": "def minTrees(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 7\n    print(minTrees(n))\n"}
{"text": "Count number of steps to cover a distance if steps can be taken in powers of 2 ", "java": "import java.io.*;\n\nclass GFG {\n  static int getMinSteps(int K) {\n    return Integer.bitCount(K);\n  }\n\n  public static void main(String[] args) {\n    int n = 343;\n    System.out.println(getMinSteps(n));\n  }\n}\n", "python": "def getMinSteps(K):\n    return bin(K).count(\"1\")\n\n\nn = 343\nprint(getMinSteps(n))\n"}
{"text": "Position of the K ", "java": "import java.util.*;\n\nclass GFG {\n  static int FindIndexKthBit(int n, int k) {\n    int cnt = 0;\n    int ind = 0;\n    while (n > 0) {\n      if ((n & 1) != 0) cnt++;\n      if (cnt == k) return ind;\n      ind++;\n      n = n >> 1;\n    }\n    return -1;\n  }\n\n  public static void main(String args[]) {\n    int n = 15, k = 3;\n    int ans = FindIndexKthBit(n, k);\n    if (ans != -1) System.out.println(ans);\n    else System.out.println(\" No \u2581 k - th \u2581 set \u2581 bit \");\n  }\n}\n", "python": "def FindIndexKthBit(n, k):\n    cnt, ind = 0, 0\n    while n > 0:\n        if n & 1:\n            cnt += 1\n        if cnt == k:\n            return ind\n        ind += 1\n        n = n >> 1\n    return -1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, k = 15, 3\n    ans = FindIndexKthBit(n, k)\n    if ans != -1:\n        print(ans)\n    else:\n        print(\" No \u2581 k - th \u2581 set \u2581 bit \")\n    DEDENT\n"}
{"text": "Distance between two nodes of binary tree with node values from 1 to N ", "java": "import java.util.*;\n\nclass GFG {\n  static int minDistance(int n1, int n2) {\n    int bitCount1 = (int) Math.floor((Math.log(n1) / Math.log(2))) + 1;\n    int bitCount2 = (int) Math.floor((Math.log(n2) / Math.log(2))) + 1;\n    int bitDiff = Math.abs(bitCount1 - bitCount2);\n    int maxBitCount = Math.max(bitCount1, bitCount2);\n    if (bitCount1 > bitCount2) {\n      n2 = n2 * (int) Math.pow(2, bitDiff);\n    } else {\n      n1 = n1 * (int) Math.pow(2, bitDiff);\n    }\n    int xorValue = n1 ^ n2;\n    int bitCountXorValue;\n    if (xorValue == 0) bitCountXorValue = 1;\n    else {\n      bitCountXorValue = (int) Math.floor((Math.log(xorValue) / Math.log(2))) + 1;\n    }\n    int disSimilarBitPosition = maxBitCount - bitCountXorValue;\n    int result = bitCount1 + bitCount2 - 2 * disSimilarBitPosition;\n    return result;\n  }\n\n  public static void main(String args[]) {\n    int n1 = 12, n2 = 5;\n    System.out.println(minDistance(n1, n2));\n  }\n}\n", "python": "from math import log2\n\n\ndef minDistance(n1, n2):\n    bitCount1 = int(log2(n1)) + 1\n    bitCount2 = int(log2(n2)) + 1\n    bitDiff = abs(bitCount1 - bitCount2)\n    maxBitCount = max(bitCount1, bitCount2)\n    if bitCount1 > bitCount2:\n        n2 = int(n2 * pow(2, bitDiff))\n    else:\n        n1 = int(n1 * pow(2, bitDiff))\n    xorValue = n1 ^ n2\n    if xorValue == 0:\n        bitCountXorValue = 1\n    else:\n        bitCountXorValue = int(log2(xorValue)) + 1\n    disSimilarBitPosition = maxBitCount - bitCountXorValue\n    result = bitCount1 + bitCount2 - 2 * disSimilarBitPosition\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    n1 = 12\n    n2 = 5\n    print(minDistance(n1, n2))\n"}
{"text": "Find position of left most dis ", "java": "import java.io.*;\n\nclass GFG {\n  static int bitPos(int n1, int n2) {\n    if (n1 == n2) return 0;\n    int bitCount1 = (int) Math.floor(Math.log(n1) / Math.log(2)) + 1;\n    int bitCount2 = (int) Math.floor(Math.log(n2) / Math.log(2)) + 1;\n    int bitDiff = Math.abs(bitCount1 - bitCount2);\n    int maxBitCount = Math.max(bitCount1, bitCount2);\n    if (bitCount1 > bitCount2) {\n      n2 = n2 * (int) Math.pow(2, bitDiff);\n    } else {\n      n1 = n1 * (int) Math.pow(2, bitDiff);\n    }\n    int xorValue = n1 ^ n2;\n    int bitCountXorValue = (int) Math.floor(Math.log(xorValue) / Math.log(2)) + 1;\n    int disSimilarBitPosition = maxBitCount - bitCountXorValue + 1;\n    return disSimilarBitPosition;\n  }\n\n  public static void main(String[] args) {\n    int n1 = 53, n2 = 55;\n    System.out.println(bitPos(n1, n2));\n  }\n}\n", "python": "from math import floor, log2\n\n\ndef bitPos(n1, n2):\n    if n1 == n2:\n        return 0\n    bitCount1 = floor(log2(n1)) + 1\n    bitCount2 = floor(log2(n2)) + 1\n    bitDiff = abs(bitCount1 - bitCount2)\n    maxBitCount = max(bitCount1, bitCount2)\n    if bitCount1 > bitCount2:\n        n2 *= pow(2, bitDiff)\n    else:\n        n1 *= pow(2, bitDiff)\n    xorValue = n1 ^ n2\n    bitCountXorValue = floor(log2(xorValue)) + 1\n    disSimilarBitPosition = maxBitCount - bitCountXorValue + 1\n    return disSimilarBitPosition\n\n\nif __name__ == \" _ _ main _ _ \":\n    n1, n2 = 53, 55\n    print(bitPos(n1, n2))\n"}
{"text": "Replace every array element by Bitwise Xor of previous and next element ", "java": "import java.io.*;\n\nclass GFG {\n  static void ReplaceElements(int[] arr, int n) {\n    if (n <= 1) return;\n    int prev = arr[0];\n    arr[0] = arr[0] ^ arr[1];\n    for (int i = 1; i < n - 1; i++) {\n      int curr = arr[i];\n      arr[i] = prev ^ arr[i + 1];\n      prev = curr;\n    }\n    arr[n - 1] = prev ^ arr[n - 1];\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {2, 3, 4, 5, 6};\n    int n = arr.length;\n    ReplaceElements(arr, n);\n    for (int i = 0; i < n; i++) System.out.print(arr[i] + \" \u2581 \");\n  }\n}\n", "python": "def ReplaceElements(arr, n):\n    if n <= 1:\n        return\n    prev = arr[0]\n    arr[0] = arr[0] ^ arr[1]\n    for i in range(1, n - 1):\n        curr = arr[i]\n        arr[i] = prev ^ arr[i + 1]\n        prev = curr\n    arr[n - 1] = prev ^ arr[n - 1]\n\n\narr = [2, 3, 4, 5, 6]\nn = len(arr)\nReplaceElements(arr, n)\nfor i in range(n):\n    print(arr[i], end=\" \u2581 \")\n"}
{"text": "Find bitwise OR of all possible sub ", "java": "class GFG {\n  static int OR(int a[], int n) {\n    int ans = a[0];\n    int i;\n    for (i = 1; i < n; i++) {\n      ans |= a[i];\n    }\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int a[] = {1, 4, 6};\n    int n = a.length;\n    System.out.println(OR(a, n));\n  }\n}\n", "python": "def OR(a, n):\n    ans = a[0]\n    for i in range(1, n):\n        ans |= a[i]\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [1, 4, 6]\n    n = len(a)\n    print(OR(a, n))\n"}
{"text": "Bitwise OR ( or ", "java": "import java.io.*;\n\nclass GFG {\n  static int MSBPosition(long N) {\n    int msb_p = -1;\n    while (N > 0) {\n      N = N >> 1;\n      msb_p++;\n    }\n    return msb_p;\n  }\n\n  static long findBitwiseOR(long L, long R) {\n    long res = 0;\n    int msb_p1 = MSBPosition(L);\n    int msb_p2 = MSBPosition(R);\n    while (msb_p1 == msb_p2) {\n      long res_val = (1 << msb_p1);\n      res += res_val;\n      L -= res_val;\n      R -= res_val;\n      msb_p1 = MSBPosition(L);\n      msb_p2 = MSBPosition(R);\n    }\n    msb_p1 = Math.max(msb_p1, msb_p2);\n    for (int i = msb_p1; i >= 0; i--) {\n      long res_val = (1 << i);\n      res += res_val;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int L = 12, R = 18;\n    System.out.println(findBitwiseOR(L, R));\n  }\n}\n", "python": "def MSBPosition(N):\n    msb_p = -1\n    while N:\n        N = N >> 1\n        msb_p += 1\n    return msb_p\n\n\ndef findBitwiseOR(L, R):\n    res = 0\n    msb_p1 = MSBPosition(L)\n    msb_p2 = MSBPosition(R)\n    while msb_p1 == msb_p2:\n        res_val = 1 << msb_p1\n        res += res_val\n        L -= res_val\n        R -= res_val\n        msb_p1 = MSBPosition(L)\n        msb_p2 = MSBPosition(R)\n    msb_p1 = max(msb_p1, msb_p2)\n    for i in range(msb_p1, -1, -1):\n        res_val = 1 << i\n        res += res_val\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    L, R = 12, 18\n    print(findBitwiseOR(L, R))\n"}
{"text": "How to turn on a particular bit in a number ? ", "java": "class GFG {\n  static int turnOnK(int n, int k) {\n    if (k <= 0) return n;\n    return (n | (1 << (k - 1)));\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    int k = 2;\n    System.out.print(turnOnK(n, k));\n  }\n}\n", "python": "def turnOnK(n, k):\n    if k <= 0:\n        return n\n    return n | (1 << (k - 1))\n\n\nn = 4\nk = 2\nprint(turnOnK(n, k))\n"}
{"text": "Find value of k ", "java": "import java.io.*;\n\nclass GFG {\n  static void printKthBit(long n, long k) {\n    System.out.println(((n & (1 << (k - 1))) >> (k - 1)));\n  }\n\n  public static void main(String[] args) {\n    long n = 13, k = 2;\n    printKthBit(n, k);\n  }\n}\n", "python": "def printKthBit(n, k):\n    print((n & (1 << (k - 1))) >> (k - 1))\n\n\nn = 13\nk = 2\nprintKthBit(n, k)\n"}
{"text": "Odd numbers in N ", "java": "import java.io.*;\n\nclass GFG {\n  static int countSetBits(int n) {\n    long count = 0;\n    while (n > 0) {\n      count += n & 1;\n      n >>= 1;\n    }\n    return (int) count;\n  }\n\n  static int countOfOddsPascal(int n) {\n    int c = countSetBits(n);\n    return (int) Math.pow(2, c);\n  }\n\n  public static void main(String[] args) {\n    int n = 20;\n    System.out.println(countOfOddsPascal(n));\n  }\n}\n", "python": "def countSetBits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\ndef countOfOddPascal(n):\n    c = countSetBits(n)\n    return pow(2, c)\n\n\nn = 20\nprint(countOfOddPascal(n))\n"}
{"text": "Minimum flips to make all 1 s in left and 0 s in right ", "java": "import java.io.*;\n\nclass GFG {\n  public static int findMiniFlip(int[] nums) {\n    int n = nums.length;\n    String s = \" \";\n    for (int i = 0; i < n; i++) s += nums[i];\n    long num = Integer.parseInt(s, 2);\n    int minXor = n;\n    long mask = (1 << (n - 1));\n    while (n - 1 > 0) {\n      long temp = (num ^ mask);\n      minXor = Math.min(minXor, countones(temp));\n      n--;\n      mask = (mask | (1 << n - 1));\n    }\n    return minXor;\n  }\n\n  public static int countones(long n) {\n    int c = 0;\n    while (n > 0) {\n      n = n & (n - 1);\n      c++;\n    }\n    return c;\n  }\n\n  public static void main(String[] args) {\n    int[] nums = {1, 0, 1, 1, 0, 0, 0};\n    int n = findMiniFlip(nums);\n    System.out.println(n);\n  }\n}\n", "python": "def findMiniFlip(nums):\n    n = len(nums)\n    s = \" \"\n    for i in range(n):\n        s += str(nums[i])\n    num = int(s, 2)\n    minXor = n\n    mask = 1 << (n - 1)\n    while n - 1 > 0:\n        temp = num ^ mask\n        minXor = min(minXor, countones(temp))\n        n -= 1\n        mask = mask | (1 << n - 1)\n    return minXor\n\n\ndef countones(n):\n    c = 0\n    while n > 0:\n        n = n & (n - 1)\n        c += 1\n    return c\n\n\nif __name__ == \" _ _ main _ _ \":\n    nums = [1, 0, 1, 1, 0, 0, 0]\n    n = findMiniFlip(nums)\n    print(n)\n"}
{"text": "Check if a number is power of 8 or not ", "java": "class GFG {\n  static boolean checkPowerof8(int n) {\n    double i = Math.log(n) / Math.log(8);\n    return (i - Math.floor(i) < 0.000001);\n  }\n\n  public static void main(String args[]) {\n    int n = 65;\n    if (checkPowerof8(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "from math import log, trunc\n\n\ndef checkPowerof8(n):\n    i = log(n, 8)\n    return i - trunc(i) < 0.000001\n\n\nn = 65\nif checkPowerof8(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Check if binary representation of a given number and its complement are anagram ", "java": "class GFG {\n  static byte longSize = 8;\n  static int ULL_SIZE = 8 * longSize;\n\n  static boolean bit_anagram_check(long a) {\n    return (Integer.bitCount((int) a) == (ULL_SIZE >> 1));\n  }\n\n  public static void main(String[] args) {\n    long a = 4294967295L;\n    System.out.println(bit_anagram_check(a));\n  }\n}\n", "python": "ULL_SIZE = 64\n\n\ndef bit_anagram_check(a):\n    return bin(a).count(\"1\") == (ULL_SIZE >> 1)\n\n\na = 4294967295\nprint(int(bit_anagram_check(a)))\n"}
{"text": "Position of rightmost different bit ", "java": "import java.util.*;\n\nclass GFG {\n  static int posOfRightMostDiffBit(int m, int n) {\n    return (int) Math.floor(Math.log10(Math.pow(m ^ n, 2))) + 2;\n  }\n\n  public static void main(String[] args) {\n    int m = 52, n = 4;\n    System.out.println(\" Position \u2581 = \u2581 \" + posOfRightMostDiffBit(m, n));\n  }\n}\n", "python": "from math import floor, log10\n\n\ndef posOfRightMostDiffBit(m, n):\n    return floor(log10(pow(m ^ n, 2))) + 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    m, n = 52, 4\n    print(\" Position \u2581 = \u2581 \", posOfRightMostDiffBit(m, n))\n"}
{"text": "Maximum XOR value of a pair from a range ", "java": "class Xor {\n  static int maxXORInRange(int L, int R) {\n    int LXR = L ^ R;\n    int msbPos = 0;\n    while (LXR > 0) {\n      msbPos++;\n      LXR >>= 1;\n    }\n    int maxXOR = 0;\n    int two = 1;\n    while (msbPos-- > 0) {\n      maxXOR += two;\n      two <<= 1;\n    }\n    return maxXOR;\n  }\n\n  public static void main(String[] args) {\n    int L = 8;\n    int R = 20;\n    System.out.println(maxXORInRange(L, R));\n  }\n}\n", "python": "def maxXORInRange(L, R):\n    LXR = L ^ R\n    msbPos = 0\n    while LXR:\n        msbPos += 1\n        LXR >>= 1\n    maxXOR, two = 0, 1\n    while msbPos:\n        maxXOR += two\n        two <<= 1\n        msbPos -= 1\n    return maxXOR\n\n\nL, R = 8, 20\nprint(maxXORInRange(L, R))\n"}
{"text": "Numbers whose bitwise OR and sum with N are equal ", "java": "class GFG {\n  static int CountZeroBit(int n) {\n    int count = 0;\n    while (n > 0) {\n      if ((n & 1) != 0) count++;\n      n >>= 1;\n    }\n    return count;\n  }\n\n  static int CountORandSumEqual(int N) {\n    int count = CountZeroBit(N);\n    return (1 << count);\n  }\n\n  public static void main(String[] args) {\n    int N = 10;\n    System.out.print(CountORandSumEqual(N));\n  }\n}\n", "python": "def CountZeroBit(n):\n    count = 0\n    while n:\n        if not (n & 1):\n            count += 1\n        n >>= 1\n    return count\n\n\ndef CountORandSumEqual(N):\n    count = CountZeroBit(N)\n    return 1 << count\n\n\nN = 10\nprint(CountORandSumEqual(N))\n"}
{"text": "Count smaller numbers whose XOR with n produces greater value ", "java": "\nclass GFG {\n  static int countNumbers(int n) {\n    int k = 0;\n    int count = 0;\n    while (n > 0) {\n      if ((n & 1) == 0) count += (int) (Math.pow(2, k));\n      k += 1;\n      n >>= 1;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 11;\n    System.out.println(countNumbers(n));\n  }\n}\n", "python": "def countNumbers(n):\n    k = 0\n    count = 0\n    while n > 0:\n        if (n & 1) == 0:\n            count += pow(2, k)\n        k += 1\n        n >>= 1\n    return count\n\n\nn = 11\nprint(countNumbers(n))\n"}
{"text": "Count all pairs with given XOR ", "java": "import java.util.*;\n\nclass GFG {\n  static int xorPairCount(int arr[], int n, int x) {\n    HashSet<Integer> s = new HashSet<Integer>();\n    for (int i = 0; i < n; i++) {\n      if (s.contains(x ^ arr[i]) && (x ^ arr[i]) == (int) s.toArray()[s.size() - 1]) {\n        result++;\n      }\n      s.add(arr[i]);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {5, 4, 10, 15, 7, 6};\n    int n = arr.length;\n    int x = 5;\n    System.out.print(\" Count \u2581 of \u2581 pairs \u2581 with \u2581 given \u2581 XOR \u2581 = \u2581 \" + xorPairCount(arr, n, x));\n  }\n}\n", "python": "def xorPairCount(arr, n, x):\n    s = set()\n    for i in range(0, n):\n        if x ^ arr[i] in s:\n            result = result + 1\n        s.add(arr[i])\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [5, 4, 10, 15, 7, 6]\n    n = len(arr)\n    x = 5\n    print(\n        \" Count \u2581 of \u2581 pair \u2581 with \u2581 given \u2581 XOR \u2581 = \u2581 \" + str(xorPairCount(arr, n, x))\n    )\n"}
{"text": "Multiples of 4 ( An Interesting Method ) ", "java": "class Test {\n  static boolean isMultipleOf4(int n) {\n    if (n == 1) return false;\n    int XOR = 0;\n    for (int i = 1; i <= n; i++) XOR = XOR ^ i;\n    return (XOR == n);\n  }\n\n  public static void main(String[] args) {\n    for (int n = 0; n <= 42; n++) System.out.print(isMultipleOf4(n) ? n : \" \u2581 \");\n  }\n}\n", "python": "def isMultipleOf4(n):\n    if n == 1:\n        return False\n    XOR = 0\n    for i in range(1, n + 1):\n        XOR = XOR ^ i\n    return XOR == n\n\n\nfor n in range(0, 43):\n    if isMultipleOf4(n):\n        print(n, end=\" \u2581 \")\n    DEDENT\n"}
{"text": "Multiples of 4 ( An Interesting Method ) ", "java": "class Test {\n  static boolean isMultipleOf4(long n) {\n    if (n == 0) return true;\n    return (((n >> 2) << 2) == n);\n  }\n\n  public static void main(String[] args) {\n    for (int n = 0; n <= 42; n++) System.out.print(isMultipleOf4(n) ? n : \" \u2581 \");\n  }\n}\n", "python": "def isMultipleOf4(n):\n    if n == 1:\n        return False\n    XOR = 0\n    for i in range(1, n + 1):\n        XOR = XOR ^ i\n    return XOR == n\n\n\nfor n in range(0, 43):\n    if isMultipleOf4(n):\n        print(n, end=\" \u2581 \")\n    DEDENT\n"}
{"text": "How to swap two bits in a given integer ? ", "java": "import java.util.*;\n\nclass Main {\n  public static int swapBits(int n, int p1, int p2) {\n    n ^= 1 << p1;\n    n ^= 1 << p2;\n    return n;\n  }\n\n  public static void main(String[] args) {\n    System.out.print(\" Result \u2581 = \u2581 \" + swapBits(28, 0, 3));\n  }\n}\n", "python": "def swapBits(n, p1, p2):\n    n ^= 1 << p1\n    n ^= 1 << p2\n    return n\n\n\nprint(\" Result \u2581 = \", swapBits(28, 0, 3))\n"}
{"text": "Maximum length sub ", "java": "class GFG {\n  static int maxLength(int a[], int n) {\n    int maxLen = 0;\n    int prev_cnt = 0, curr_cnt = 1;\n    for (int i = 1; i < n; i++) {\n      if (a[i] == a[i - 1]) curr_cnt++;\n      else {\n        prev_cnt = curr_cnt;\n        curr_cnt = 1;\n      }\n      maxLen = Math.max(maxLen, Math.min(prev_cnt, curr_cnt));\n    }\n    return (2 * maxLen);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 1, 1, 0, 0, 1, 1};\n    int n = arr.length;\n    System.out.println(maxLength(arr, n));\n  }\n}\n", "python": "def maxLength(a, n):\n    maxLen = 0\n    prev_cnt = 0\n    curr_cnt = 1\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            curr_cnt += 1\n        else:\n            prev_cnt = curr_cnt\n            curr_cnt = 1\n        maxLen = max(maxLen, min(prev_cnt, curr_cnt))\n    return 2 * maxLen\n\n\narr = [1, 1, 1, 0, 0, 1, 1]\nn = len(arr)\nprint(maxLength(arr, n))\n"}
{"text": "Sliding Window Maximum ( Maximum of all subarrays of size k ) ", "java": "import java.util.Deque;\nimport java.util.LinkedList;\n\npublic class SlidingWindow {\n  static void printMax(int arr[], int n, int k) {\n    Deque<Integer> Qi = new LinkedList<Integer>();\n    int i;\n    for (i = 0; i < k; ++i) {\n      while (!Qi.isEmpty() && arr[i] >= arr[Qi.peekLast()]) Qi.removeLast();\n      Qi.addLast(i);\n    }\n    for (; i < n; ++i) {\n      System.out.print(arr[Qi.peek()] + \" \u2581 \");\n      while ((!Qi.isEmpty()) && Qi.peek() <= i - k) Qi.removeFirst();\n      while ((!Qi.isEmpty()) && arr[i] >= arr[Qi.peekLast()]) Qi.removeLast();\n      Qi.addLast(i);\n    }\n    System.out.print(arr[Qi.peek()]);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {12, 1, 78, 90, 57, 89, 56};\n    int k = 3;\n    printMax(arr, arr.length, k);\n  }\n}\n", "python": "from collections import deque\n\n\ndef printMax(arr, n, k):\n    Qi = deque()\n    for i in range(k):\n        while Qi and arr[i] >= arr[Qi[-1]]:\n            Qi.pop()\n        Qi.append(i)\n    for i in range(k, n):\n        print(str(arr[Qi[0]]) + \" \u2581 \", end=\" \")\n        while Qi and Qi[0] <= i - k:\n            Qi.popleft()\n        while Qi and arr[i] >= arr[Qi[-1]]:\n            Qi.pop()\n        Qi.append(i)\n    print(str(arr[Qi[0]]))\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [12, 1, 78, 90, 57, 89, 56]\n    k = 3\n    printMax(arr, len(arr), k)\n"}
{"text": "Sum of minimum and maximum elements of all subarrays of size k . ", "java": "import java.util.Deque;\nimport java.util.LinkedList;\n\npublic class Geeks {\n  public static int SumOfKsubArray(int arr[], int k) {\n    int sum = 0;\n    Deque<Integer> S = new LinkedList<>(), G = new LinkedList<>();\n    int i = 0;\n    for (i = 0; i < k; i++) {\n      while (!S.isEmpty() && arr[S.peekLast()] >= arr[i]) S.removeLast();\n      while (!G.isEmpty() && arr[G.peekLast()] <= arr[i]) G.removeLast();\n      G.addLast(i);\n      S.addLast(i);\n    }\n    for (; i < arr.length; i++) {\n      sum += arr[S.peekFirst()] + arr[G.peekFirst()];\n      while (!S.isEmpty() && S.peekFirst() <= i - k) S.removeFirst();\n      while (!G.isEmpty() && G.peekFirst() <= i - k) G.removeFirst();\n      while (!S.isEmpty() && arr[S.peekLast()] >= arr[i]) S.removeLast();\n      while (!G.isEmpty() && arr[G.peekLast()] <= arr[i]) G.removeLast();\n      G.addLast(i);\n      S.addLast(i);\n    }\n    sum += arr[S.peekFirst()] + arr[G.peekFirst()];\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {2, 5, -1, 7, -3, -1, -2};\n    int k = 3;\n    System.out.println(SumOfKsubArray(arr, k));\n  }\n}\n", "python": "from collections import deque\n\n\ndef SumOfKsubArray(arr, n, k):\n    Sum = 0\n    S = deque()\n    G = deque()\n    for i in range(k):\n        while len(S) > 0 and arr[S[-1]] >= arr[i]:\n            S.pop()\n        while len(G) > 0 and arr[G[-1]] <= arr[i]:\n            G.pop()\n        G.append(i)\n        S.append(i)\n    for i in range(k, n):\n        Sum += arr[S[0]] + arr[G[0]]\n        while len(S) > 0 and S[0] <= i - k:\n            S.popleft()\n        while len(G) > 0 and G[0] <= i - k:\n            G.popleft()\n        while len(S) > 0 and arr[S[-1]] >= arr[i]:\n            S.pop()\n        while len(G) > 0 and arr[G[-1]] <= arr[i]:\n            G.pop()\n        G.append(i)\n        S.append(i)\n    Sum += arr[S[0]] + arr[G[0]]\n    return Sum\n\n\narr = [2, 5, -1, 7, -3, -1, -2]\nn = len(arr)\nk = 3\nprint(SumOfKsubArray(arr, n, k))\n"}
{"text": "How to learn Pattern printing easily ? ", "java": "import java.util.*;\n\nclass GFG {\n  public static void main(String[] args) {\n    int N = 4, i, j, min;\n    System.out.println(\" Value \u2581 of \u2581 N : \u2581 \" + N);\n    for (i = 1; i <= N; i++) {\n      for (j = 1; j <= N; j++) {\n        min = i < j ? i : j;\n        System.out.print(N - min + 1);\n      }\n      System.out.println();\n    }\n  }\n}\n", "python": "if __name__ == \" _ _ main _ _ \":\n    N = 4\n    print(\" Value \u2581 of \u2581 N : \u2581 \", N)\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            min = i if i < j else j\n            print(N - min + 1, end=\" \")\n        print()\n    DEDENT\n"}
{"text": "Master Theorem For Subtract and Conquer Recurrences ", "java": "class clg {\n  static int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 9;\n    System.out.println(fib(n));\n  }\n}\n", "python": "def fib(n):\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nn = 9\nprint(fib(n))\n"}
{"text": "Tail Recursion ", "java": "class GFG {\n  static int factTR(int n, int a) {\n    if (n == 0) return a;\n    return factTR(n - 1, n * a);\n  }\n\n  static int fact(int n) {\n    return factTR(n, 1);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(fact(5));\n  }\n}\n", "python": "def fact(n, a=1):\n    if n == 1:\n        return a\n    return fact(n - 1, n * a)\n\n\nprint(fact(5))\n"}
{"text": "Longest Increasing consecutive subsequence ", "java": "import java.util.*;\n\nclass lics {\n  static int LongIncrConseqSubseq(int arr[], int n) {\n    HashMap<Integer, Integer> map = new HashMap<>();\n    map.put(arr[0], 1);\n    for (int i = 1; i < n; i++) {\n      if (map.containsKey(arr[i] - 1)) {\n        map.put(arr[i], map.get(arr[i] - 1) + 1);\n        map.remove(arr[i] - 1);\n      } else {\n        map.put(arr[i], 1);\n      }\n    }\n    return Collections.max(map.values());\n  }\n\n  public static void main(String args[]) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int arr[] = new int[n];\n    for (int i = 0; i < n; i++) arr[i] = sc.nextInt();\n    System.out.println(LongIncrConseqSubseq(arr, n));\n  }\n}\n", "python": "from collections import defaultdict\nimport sys\n\n\ndef longestSubsequence(a, n):\n    mp = defaultdict(lambda: 0)\n    dp = [0 for i in range(n)]\n    maximum = -sys.maxsize\n    for i in range(n):\n        if a[i] - 1 in mp:\n            lastIndex = mp[a[i] - 1] - 1\n            dp[i] = 1 + dp[lastIndex]\n        else:\n            dp[i] = 1\n        mp[a[i]] = i + 1\n        maximum = max(maximum, dp[i])\n    return maximum\n\n\na = [3, 10, 3, 11, 4, 5, 6, 7, 8, 12]\nn = len(a)\nprint(longestSubsequence(a, n))\n"}
{"text": "Maximum possible sum of a window in an array such that elements of same window in other array are unique ", "java": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class MaxPossibleSuminWindow {\n  static int returnMaxSum(int A[], int B[], int n) {\n    Set<Integer> mp = new HashSet<Integer>();\n    int result = 0;\n    int curr_sum = 0, curr_begin = 0;\n    for (int i = 0; i < n; ++i) {\n      while (mp.contains(A[i])) {\n        mp.remove(A[curr_begin]);\n        curr_sum -= B[curr_begin];\n        curr_begin++;\n      }\n      mp.add(A[i]);\n      curr_sum += B[i];\n      result = Integer.max(result, curr_sum);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {0, 1, 2, 3, 0, 1, 4};\n    int B[] = {9, 8, 1, 2, 3, 4, 5};\n    int n = A.length;\n    System.out.println(returnMaxSum(A, B, n));\n  }\n}\n", "python": "def returnMaxSum(A, B, n):\n    mp = set()\n    result = 0\n    curr_sum = curr_begin = 0\n    for i in range(0, n):\n        while A[i] in mp:\n            mp.remove(A[curr_begin])\n            curr_sum -= B[curr_begin]\n            curr_begin += 1\n        mp.add(A[i])\n        curr_sum += B[i]\n        result = max(result, curr_sum)\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [0, 1, 2, 3, 0, 1, 4]\n    B = [9, 8, 1, 2, 3, 4, 5]\n    n = len(A)\n    print(returnMaxSum(A, B, n))\n"}
{"text": "Maximum absolute difference between any two level sum in a N ", "java": "import java.util.*;\n\nclass GFG {\n  static void maxAbsDiffLevelSum(int N, int M, int[] cost, int Edges[][]) {\n    @SuppressWarnings(\" unchecked \")\n    Vector<Integer>[] adj = new Vector[N];\n    for (int i = 0; i < adj.length; i++) adj[i] = new Vector<Integer>();\n    for (int i = 0; i < M; i++) {\n      int u = Edges[i][0];\n      int v = Edges[i][1];\n      adj[u].add(v);\n    }\n    int maxSum = cost[0], minSum = cost[0];\n    Queue<Integer> q = new LinkedList<Integer>();\n    q.add(0);\n    while (!q.isEmpty()) {\n      int count = q.size();\n      int sum = 0;\n      while (count-- > 0) {\n        int temp = q.peek();\n        q.remove();\n        sum = sum + cost[temp];\n        for (int i = 0; i < adj[temp].size(); i++) {\n          q.add(adj[temp].get(i));\n        }\n      }\n      maxSum = Math.max(sum, maxSum);\n      minSum = Math.min(sum, minSum);\n    }\n    System.out.print(Math.abs(maxSum - minSum));\n  }\n\n  public static void main(String[] args) {\n    int N = 10, M = 9;\n    int Edges[][] = {{0, 1}, {0, 2}, {0, 3}, {1, 4}, {1, 5}, {3, 6}, {6, 7}, {6, 8}, {6, 9}};\n    int[] cost = {1, 2, -1, 3, 4, 5, 8, 6, 12, 7};\n    maxAbsDiffLevelSum(N, M, cost, Edges);\n  }\n}\n", "python": "from collections import deque\n\n\ndef maxAbsDiffLevelSum(N, M, cost, Edges):\n    adj = [[] for i in range(N)]\n    for i in range(M):\n        u = Edges[i][0]\n        v = Edges[i][1]\n        adj[u].append(v)\n    maxSum = cost[0]\n    minSum = cost[0]\n    q = deque()\n    q.append(0)\n    while len(q) > 0:\n        count = len(q)\n        sum = 0\n        while count:\n            temp = q.popleft()\n            q.pop()\n            sum = sum + cost[temp]\n            for i in adj[temp]:\n                q.append(i)\n            count -= 1\n        maxSum = max(sum, maxSum)\n        minSum = min(sum, minSum)\n    print(abs(maxSum - minSum))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 10\n    M = 9\n    Edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [3, 6], [6, 7], [6, 8], [6, 9]]\n    cost = [1, 2, -1, 3, 4, 5, 8, 6, 12, 7]\n    maxAbsDiffLevelSum(N, M, cost, Edges)\n"}
{"text": "Minimum increments of Non ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int getMinOps(int[] arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n      ans += Math.max(arr[i] - arr[i + 1], 0);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 3, 1, 2, 4};\n    System.out.println(getMinOps(arr));\n  }\n}\n", "python": "def getMinOps(arr):\n    ans = 0\n    for i in range(len(arr) - 1):\n        ans += max(arr[i] - arr[i + 1], 0)\n    return ans\n\n\narr = [1, 3, 1, 2, 4]\nprint(getMinOps(arr))\n"}
{"text": "Sum of f ( a [ i ] , a [ j ] ) over all pairs in an array of n integers ", "java": "import java.util.*;\n\npublic class GfG {\n  public static int sum(int a[], int n) {\n    Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n    int ans = 0, pre_sum = 0;\n    for (int i = 0; i < n; i++) {\n      ans += (i * a[i]) - pre_sum;\n      pre_sum += a[i];\n      if (cnt.containsKey(a[i] - 1)) ans -= cnt.get(a[i] - 1);\n      if (cnt.containsKey(a[i] + 1)) ans += cnt.get(a[i] + 1);\n      if (cnt.containsKey(a[i])) {\n        cnt.put(a[i], cnt.get(a[i]) + 1);\n      } else {\n        cnt.put(a[i], 1);\n      }\n    }\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int a[] = {1, 2, 3, 1, 3};\n    int n = a.length;\n    System.out.println(sum(a, n));\n  }\n}\n", "python": "def sum(a, n):\n    cnt = dict()\n    ans = 0\n    pre_sum = 0\n    for i in range(n):\n        ans += (i * a[i]) - pre_sum\n        pre_sum += a[i]\n        if (a[i] - 1) in cnt:\n            ans -= cnt[a[i] - 1]\n        if (a[i] + 1) in cnt:\n            ans += cnt[a[i] + 1]\n        if a[i] not in cnt:\n            cnt[a[i]] = 0\n        cnt[a[i]] += 1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [1, 2, 3, 1, 3]\n    n = len(a)\n    print(sum(a, n))\n"}
{"text": "Leftmost and rightmost indices of the maximum and the minimum element of an array ", "java": "public class GFG {\n  public static int getRightMin(int arr[], int n) {\n    int min = arr[0];\n    int rightMin = 0;\n    int i = 1;\n    while (i < n) {\n      if (arr[i] == min) rightMin = i;\n      i *= 2;\n    }\n    i = rightMin + 1;\n    while (i < n && arr[i] == min) {\n      rightMin = i;\n      i++;\n    }\n    return rightMin;\n  }\n\n  public static int getLeftMax(int arr[], int n) {\n    int max = arr[n - 1];\n    int leftMax = n - 1;\n    int i = n - 2;\n    while (i > 0) {\n      if (arr[i] == max) leftMax = i;\n      i /= 2;\n    }\n    i = leftMax - 1;\n    while (i >= 0 && arr[i] == max) {\n      leftMax = i;\n      i--;\n    }\n    return leftMax;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {0, 0, 1, 2, 5, 5, 6, 8, 8};\n    int n = arr.length;\n    System.out.println(\" Minimum \u2581 left \u2581 : \u2581 \" + 0);\n    System.out.println(\" Minimum \u2581 right \u2581 : \u2581 \" + getRightMin(arr, n));\n    System.out.println(\" Maximum \u2581 left \u2581 : \u2581 \" + getLeftMax(arr, n));\n    System.out.println(\" Maximum \u2581 right \u2581 : \u2581 \" + (n - 1));\n  }\n}\n", "python": "def getRightMin(arr, n):\n    min = arr[0]\n    rightMin = 0\n    i = 1\n    while i < n:\n        if arr[i] == min:\n            rightMin = i\n        i *= 2\n    i = rightMin + 1\n    while i < n and arr[i] == min:\n        rightMin = i\n        i += 1\n    return rightMin\n\n\ndef getLeftMax(arr, n):\n    max = arr[n - 1]\n    leftMax = n - 1\n    i = n - 2\n    while i > 0:\n        if arr[i] == max:\n            leftMax = i\n        i = int(i / 2)\n    i = leftMax - 1\n    while i >= 0 and arr[i] == max:\n        leftMax = i\n        i -= 1\n    return leftMax\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [0, 0, 1, 2, 5, 5, 6, 8, 8]\n    n = len(arr)\n    print(\" Minimum \u2581 left \u2581 : \", 0)\n    print(\" Minimum \u2581 right \u2581 : \", getRightMin(arr, n))\n    print(\" Maximum \u2581 left \u2581 : \", getLeftMax(arr, n))\n    print(\" Maximum \u2581 right \u2581 : \", (n - 1))\n"}
{"text": "Subarrays with distinct elements ", "java": "import java.util.*;\n\nclass geeks {\n  public static int sumoflength(int[] arr, int n) {\n    Set<Integer> s = new HashSet<>();\n    int j = 0, ans = 0;\n    for (int i = 0; i < n; i++) {\n      while (j < n && !s.contains(arr[j])) {\n        s.add(arr[i]);\n        j++;\n      }\n      ans += ((j - i) * (j - i + 1)) / 2;\n      s.remove(arr[i]);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 4};\n    int n = arr.length;\n    System.out.println(sumoflength(arr, n));\n  }\n}\n", "python": "def sumoflength(arr, n):\n    s = []\n    j = 0\n    ans = 0\n    for i in range(n):\n        while j < n and (arr[j] not in s):\n            s.append(arr[j])\n            j += 1\n        ans += ((j - i) * (j - i + 1)) // 2\n        s.remove(arr[i])\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4]\n    n = len(arr)\n    print(sumoflength(arr, n))\n"}
{"text": "Minimum number of characters required to be removed such that every character occurs same number of times ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int minimumDeletion(String s, int n) {\n    HashMap<Character, Integer> countMap = new HashMap<>();\n    for (int i = 0; i < n; i++) {\n      char ch = s.charAt(i);\n      countMap.put(ch, countMap.getOrDefault(ch, 0) + 1);\n    }\n    ArrayList<Integer> countMultiset = new ArrayList<>(countMap.values());\n    Collections.sort(countMultiset);\n    int ans = Integer.MAX_VALUE;\n    int i = 0;\n    int m = countMultiset.size();\n    for (int j : countMultiset) {\n      ans = Math.min(ans, n - (m - i) * j);\n      i++;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    String S = \" geeksforgeeks \";\n    int N = S.length();\n    System.out.println(minimumDeletion(S, N));\n  }\n}\n", "python": "import sys\n\n\ndef minimumDeletion(s, n):\n    countMap = {}\n    for i in s:\n        countMap[i] = countMap.get(i, 0) + 1\n    countMultiset = []\n    for it in countMap:\n        countMultiset.append(countMap[it])\n    ans = sys.maxsize + 1\n    i = 0\n    m = len(countMultiset)\n    for j in sorted(countMultiset):\n        ans = min(ans, n - (m - i) * j)\n        i += 1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    S = \" geeksforgeeks \"\n    N = len(S)\n    print(minimumDeletion(S, N))\n"}
{"text": "Calculate cost of visiting all array elements in increasing order ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static class Pair {\n    int first;\n    int second;\n\n    Pair(int first, int second) {\n      this.first = first;\n      this.second = second;\n    }\n  }\n\n  static int calculateDistance(int arr[], int N) {\n    Pair v[] = new Pair[N];\n    for (int i = 0; i < N; i++) v[i] = new Pair(arr[i], i);\n    Arrays.sort(\n        v,\n        (p1, p2) -> {\n          if (p1.first != p2.first) return p1.first - p2.first;\n          return p1.second - p2.second;\n        });\n    int ans = 0;\n    int last = 0;\n    for (Pair j : v) {\n      ans += Math.abs(j.second - last);\n      last = j.second;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 3, 2, 5, 1};\n    int N = arr.length;\n    System.out.println(calculateDistance(arr, N));\n  }\n}\n", "python": "def calculateDistance(arr, N):\n    v = []\n    for i in range(N):\n        v.append([arr[i], i])\n    v.sort()\n    ans = 0\n    last = 0\n    for j in v:\n        ans += abs(j[1] - last)\n        last = j[1]\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [4, 3, 2, 5, 1]\n    N = len(arr)\n    print(calculateDistance(arr, N))\n"}
{"text": "Maximum area rectangle by picking four sides from array ", "java": "import java.util.Arrays;\nimport java.util.Collections;\n\npublic class GFG {\n  static int findArea(Integer arr[], int n) {\n    Arrays.sort(arr, Collections.reverseOrder());\n    int[] dimension = {0, 0};\n    for (int i = 0, j = 0; i < n - 1 && j < 2; i++)\n      if (arr[i] == arr[i + 1]) dimension[j++] = arr[i++];\n    return (dimension[0] * dimension[1]);\n  }\n\n  public static void main(String args[]) {\n    Integer arr[] = {4, 2, 1, 4, 6, 6, 2, 5};\n    int n = arr.length;\n    System.out.println(findArea(arr, n));\n  }\n}\n", "python": "def findArea(arr, n):\n    arr.sort(reverse=True)\n    dimension = [0, 0]\n    i = 0\n    j = 0\n    while i < n - 1 and j < 2:\n        if arr[i] == arr[i + 1]:\n            dimension[j] = arr[i]\n            j += 1\n            i += 1\n        i += 1\n    return dimension[0] * dimension[1]\n\n\narr = [4, 2, 1, 4, 6, 6, 2, 5]\nn = len(arr)\nprint(findArea(arr, n))\n"}
{"text": "Maximum area rectangle by picking four sides from array ", "java": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class GFG {\n  static int findArea(int arr[], int n) {\n    Set<Integer> s = new HashSet<>();\n    int first = 0, second = 0;\n    for (int i = 0; i < n; i++) {\n      if (!s.contains(arr[i])) {\n        s.add(arr[i]);\n        continue;\n      }\n      if (arr[i] > first) {\n        second = first;\n        first = arr[i];\n      } else if (arr[i] > second) second = arr[i];\n    }\n    return (first * second);\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {4, 2, 1, 4, 6, 6, 2, 5};\n    int n = arr.length;\n    System.out.println(findArea(arr, n));\n  }\n}\n", "python": "def findArea(arr, n):\n    arr.sort(reverse=True)\n    dimension = [0, 0]\n    i = 0\n    j = 0\n    while i < n - 1 and j < 2:\n        if arr[i] == arr[i + 1]:\n            dimension[j] = arr[i]\n            j += 1\n            i += 1\n        i += 1\n    return dimension[0] * dimension[1]\n\n\narr = [4, 2, 1, 4, 6, 6, 2, 5]\nn = len(arr)\nprint(findArea(arr, n))\n"}
{"text": "Game of replacing array elements ", "java": "import java.util.HashSet;\n\npublic class GameOfReplacingArrayElements {\n  public static int playGame(int arr[]) {\n    HashSet<Integer> set = new HashSet<>();\n    for (int i : arr) set.add(i);\n    return (set.size() % 2 == 0) ? 1 : 2;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 1, 2, 2, 2, 2};\n    System.out.print(\" Player \u2581 \" + playGame(arr) + \" \u2581 wins \");\n  }\n}\n", "python": "def playGame(arr, n):\n    s = set()\n    for i in range(n):\n        s.add(arr[i])\n    return 1 if len(s) % 2 == 0 else 2\n\n\narr = [1, 1, 2, 2, 2, 2]\nn = len(arr)\nprint(\" Player \", playGame(arr, n), \" Wins \")\n"}
{"text": "Maximize product of array by replacing array elements with its sum or product with element from another array ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int largeProduct(int A[], int B[], int N) {\n    if (N == 0) return 0;\n    PriorityQueue<Integer> pq = new PriorityQueue<>();\n    for (int i = 0; i < N; i++) pq.add(A[i]);\n    Arrays.sort(B);\n    for (int i = 0; i < N; i++) {\n      int minn = pq.poll();\n      int maximized_element = Math.max(minn * B[i], minn + B[i]);\n      pq.add(maximized_element);\n    }\n    int max_product = 1;\n    while (pq.size() > 0) {\n      max_product *= pq.poll();\n    }\n    return max_product;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {1, 1, 10};\n    int B[] = {1, 1, 1};\n    int N = 3;\n    System.out.println(largeProduct(A, B, N));\n  }\n}\n", "python": "def largeProduct(A, B, N):\n    if N == 0:\n        return 0\n    pq = []\n    for i in range(N):\n        pq.append(A[i])\n    B.sort()\n    pq.sort(reverse=True)\n    for i in range(N):\n        minn = pq.pop()\n        maximized_element = max(minn * B[i], minn + B[i])\n        pq.append(maximized_element)\n        pq.sort(reverse=True)\n    max_product = 1\n    while len(pq) > 0:\n        max_product *= pq.pop()\n    return max_product\n\n\nA = [1, 1, 10]\nB = [1, 1, 1]\nN = 3\nprint(largeProduct(A, B, N))\n"}
{"text": "Minimum steps required to rearrange given array to a power sequence of 2 ", "java": "import java.util.*;\n\nclass GFG {\n  static int minsteps(int arr[], int n) {\n    Arrays.sort(arr);\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n      ans += Math.abs(arr[i] - Math.pow(2, i));\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 8, 2, 10, 6};\n    int n = arr.length;\n    System.out.println(minsteps(arr, n));\n  }\n}\n", "python": "def minsteps(arr, n):\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        ans += abs(arr[i] - pow(2, i))\n    return ans\n\n\narr = [1, 8, 2, 10, 6]\nn = len(arr)\nprint(minsteps(arr, n))\n"}
{"text": "Cost required to empty a given array by repeated removal of maximum obtained by given operations ", "java": "import java.util.*;\n\nclass GFG {\n  static int findCost(Integer[] a, int n) {\n    Arrays.sort(a, Collections.reverseOrder());\n    int count = 0;\n    for (int j = 0; j < n; j++) {\n      int p = a[j] - j;\n      a[j] = 0;\n      if (p < 0) {\n        p = 0;\n        continue;\n      }\n      count += p;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    Integer arr[] = {1, 6, 7, 4, 2, 5, 3};\n    int N = arr.length;\n    System.out.print(findCost(arr, N));\n  }\n}\n", "python": "def findCost(a, n):\n    a.sort(reverse=True)\n    count = 0\n    for j in range(n):\n        p = a[j] - j\n        a[j] = 0\n        if p < 0:\n            p = 0\n            continue\n        count += p\n    return count\n\n\narr = [1, 6, 7, 4, 2, 5, 3]\nN = len(arr)\nprint(findCost(arr, N))\n"}
{"text": "Minimum cost to empty Array where cost of removing an element is 2 ^ ( removed_count ) * arr [ i ] ", "java": "import java.util.*;\n\nclass GFG {\n  static long[] reverse(long a[]) {\n    int i, n = a.length;\n    long t;\n    for (i = 0; i < n / 2; i++) {\n      t = a[i];\n      a[i] = a[n - i - 1];\n      a[n - i - 1] = t;\n    }\n    return a;\n  }\n\n  static long removeElements(long arr[], int n) {\n    Arrays.sort(arr);\n    arr = reverse(arr);\n    long ans = 0;\n    for (int i = 0; i < n; i++) {\n      ans += arr[i] * Math.pow(2, i);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    long arr[] = {3, 1, 2, 3};\n    System.out.print(removeElements(arr, n));\n  }\n}\n", "python": "def removeElements(arr, n):\n    arr.sort(reverse=True)\n    ans = 0\n    for i in range(n):\n        ans += arr[i] * pow(2, i)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    arr = [3, 1, 2, 3]\n    print(removeElements(arr, n))\n"}
{"text": "Maximum sum of i * arr [ i ] among all rotations of a given array ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int maxSum(int arr[], int n) {\n    int res = Integer.MIN_VALUE;\n    for (int i = 0; i < n; i++) {\n      int curr_sum = 0;\n      for (int j = 0; j < n; j++) {\n        int index = (i + j) % n;\n        curr_sum += j * arr[index];\n      }\n      res = Math.max(res, curr_sum);\n    }\n    return res;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {8, 3, 1, 2};\n    int n = arr.length;\n    System.out.println(maxSum(arr, n));\n  }\n}\n", "python": "import sys\n\n\ndef maxSum(arr, n):\n    res = -sys.maxsize\n    for i in range(0, n):\n        curr_sum = 0\n        for j in range(0, n):\n            index = int((i + j) % n)\n            curr_sum += j * arr[index]\n        res = max(res, curr_sum)\n    return res\n\n\narr = [8, 3, 1, 2]\nn = len(arr)\nprint(maxSum(arr, n))\n"}
{"text": "Maximum sum of i * arr [ i ] among all rotations of a given array ", "java": "import java.io.*;\n\nclass GFG {\n  static int maxSum(int arr[], int n) {\n    int cum_sum = 0;\n    for (int i = 0; i < n; i++) cum_sum += arr[i];\n    int curr_val = 0;\n    for (int i = 0; i < n; i++) curr_val += i * arr[i];\n    int res = curr_val;\n    for (int i = 1; i < n; i++) {\n      int next_val = curr_val - (cum_sum - arr[i - 1]) + arr[i - 1] * (n - 1);\n      curr_val = next_val;\n      res = Math.max(res, next_val);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {8, 3, 1, 2};\n    int n = arr.length;\n    System.out.println(maxSum(arr, n));\n  }\n}\n", "python": "import sys\n\n\ndef maxSum(arr, n):\n    res = -sys.maxsize\n    for i in range(0, n):\n        curr_sum = 0\n        for j in range(0, n):\n            index = int((i + j) % n)\n            curr_sum += j * arr[index]\n        res = max(res, curr_sum)\n    return res\n\n\narr = [8, 3, 1, 2]\nn = len(arr)\nprint(maxSum(arr, n))\n"}
{"text": "Arrange the array such that upon performing given operations an increasing order is obtained ", "java": "import java.util.Arrays;\n\nclass Main {\n  public static void Desired_Array(int v[]) {\n    int n = v.length;\n    Arrays.sort(v);\n    int i = n - 1;\n    while (i > 0) {\n      int p = v[n - 1];\n      for (int j = n - 1; j >= i; j--) {\n        v[j] = v[j - 1];\n      }\n      v[i] = p;\n      i--;\n    }\n    for (int x = 0; x < v.length; x++) {\n      System.out.print(v[x] + \" \u2581 \");\n    }\n    System.out.println();\n  }\n\n  public static void main(String[] args) {\n    int v[] = {1, 2, 3, 4, 5};\n    Desired_Array(v);\n    int v1[] = {1, 12, 2, 10, 4, 16, 6};\n    Desired_Array(v1);\n  }\n}\n", "python": "def Desired_Array(v):\n    n = len(v)\n    v.sort()\n    i = n - 1\n    while i > 0:\n        p = v[n - 1]\n        for j in range(n - 1, i - 1, -1):\n            v[j] = v[j - 1]\n        v[i] = p\n        i -= 1\n    for x in v:\n        print(x, end=\" \u2581 \")\n    print()\n\n\nv = [1, 2, 3, 4, 5]\nDesired_Array(v)\nv1 = [1, 12, 2, 10, 4, 16, 6]\nDesired_Array(v1)\n"}
{"text": "Quickly find multiple left rotations of an array ", "java": "import java.io.*;\n\nclass GFG {\n  static void leftRotate(int arr[], int n, int k) {\n    for (int i = k; i < k + n; i++) System.out.print(arr[i % n] + \" \u2581 \");\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 3, 5, 7, 9};\n    int n = arr.length;\n    int k = 2;\n    leftRotate(arr, n, k);\n    System.out.println();\n    k = 3;\n    leftRotate(arr, n, k);\n    System.out.println();\n    k = 4;\n    leftRotate(arr, n, k);\n    System.out.println();\n  }\n}\n", "python": "def preprocess(arr, n):\n    temp = [None] * (2 * n)\n    for i in range(n):\n        temp[i] = temp[i + n] = arr[i]\n    return temp\n\n\ndef leftRotate(arr, n, k, temp):\n    start = k % n\n    for i in range(start, start + n):\n        print(temp[i], end=\" \u2581 \")\n    print(\" \")\n\n\narr = [1, 3, 5, 7, 9]\nn = len(arr)\ntemp = preprocess(arr, n)\nk = 2\nleftRotate(arr, n, k, temp)\nk = 3\nleftRotate(arr, n, k, temp)\nk = 4\nleftRotate(arr, n, k, temp)\n"}
{"text": "Print left rotation of array in O ( n ) time and O ( 1 ) space ", "java": "import java.io.*;\nimport java.util.*;\n\nclass arr_rot {\n  static void leftRotate(int arr[], int n, int k) {\n    int mod = k % n;\n    for (int i = 0; i < n; ++i) System.out.print(arr[(i + mod) % n] + \" \u2581 \");\n    System.out.println();\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 3, 5, 7, 9};\n    int n = arr.length;\n    int k = 2;\n    leftRotate(arr, n, k);\n    k = 3;\n    leftRotate(arr, n, k);\n    k = 4;\n    leftRotate(arr, n, k);\n  }\n}\n", "python": "def leftRotate(arr, n, k):\n    mod = k % n\n    s = \" \"\n    for i in range(n):\n        print str(arr[(mod + i) % n]),\n    print\n    return\n\n\narr = [1, 3, 5, 7, 9]\nn = len(arr)\nk = 2\nleftRotate(arr, n, k)\nk = 3\nleftRotate(arr, n, k)\nk = 4\nleftRotate(arr, n, k)\n"}
{"text": "Print left rotation of array in O ( n ) time and O ( 1 ) space ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void leftRotate(Integer arr[], int k, int n) {\n    Collections.rotate(Arrays.asList(arr), n - k);\n    for (int i = 0; i < n; i++) System.out.print(arr[i] + \" \u2581 \");\n  }\n\n  public static void main(String[] args) {\n    Integer arr[] = {1, 3, 5, 7, 9};\n    int n = arr.length;\n    int k = 2;\n    leftRotate(arr, k, n);\n  }\n}\n", "python": "def leftRotate(arr, n, k):\n    mod = k % n\n    s = \" \"\n    for i in range(n):\n        print str(arr[(mod + i) % n]),\n    print\n    return\n\n\narr = [1, 3, 5, 7, 9]\nn = len(arr)\nk = 2\nleftRotate(arr, n, k)\nk = 3\nleftRotate(arr, n, k)\nk = 4\nleftRotate(arr, n, k)\n"}
{"text": "Perform K of Q queries to maximize the sum of the array elements ", "java": "import java.util.*;\n\nclass GFG {\n  static class pair {\n    int first, second;\n\n    pair(int f, int s) {\n      first = f;\n      second = s;\n    }\n  }\n\n  static int getFinalSum(int a[], int n, pair queries[], int q, int k) {\n    int answer = 0;\n    for (int i = 0; i < n; i++) answer += a[i];\n    Vector<Integer> contribution = new Vector<Integer>();\n    for (int i = 0; i < q; i++) {\n      contribution.add(queries[i].second - queries[i].first + 1);\n    }\n    Comparator<Integer> Comp =\n        new Comparator<Integer>() {\n          public int compare(Integer e1, Integer e2) {\n            if (e1 > e2) return -1;\n            else return 1;\n          }\n        };\n    Collections.sort(contribution, Comp);\n    int i = 0;\n    while (i < k) {\n      answer += (int) contribution.get(i);\n      i++;\n    }\n    return answer;\n  }\n\n  public static void main(String args[]) {\n    int a[] = {1, 1, 2, 2, 2, 3};\n    int n = a.length;\n    pair queries[] = new pair[5];\n    queries[0] = new pair(0, 4);\n    queries[1] = new pair(1, 2);\n    queries[2] = new pair(2, 5);\n    queries[3] = new pair(2, 3);\n    queries[4] = new pair(2, 4);\n    int q = queries.length;\n    int k = 3;\n    System.out.println(getFinalSum(a, n, queries, q, k));\n  }\n}\n", "python": "def getFinalSum(a, n, queries, q, k):\n    answer = 0\n    for i in range(n):\n        answer += a[i]\n    contribution = []\n    for i in range(q):\n        contribution.append(queries[i][1] - queries[i][0] + 1)\n    contribution.sort(reverse=True)\n    i = 0\n    while i < k:\n        answer += contribution[i]\n        i += 1\n    return answer\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [1, 1, 2, 2, 2, 3]\n    n = len(a)\n    queries = [[0, 4], [1, 2], [2, 5], [2, 3], [2, 4]]\n    q = len(queries)\n    k = 3\n    print(getFinalSum(a, n, queries, q, k))\n"}
{"text": "Sort even ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static void bitonicGenerator(int arr[], int n) {\n    int i = 1;\n    int j = n - 1;\n    if (j % 2 != 0) j--;\n    while (i < j) {\n      arr = swap(arr, i, j);\n      i += 2;\n      j -= 2;\n    }\n    Arrays.sort(arr, 0, (n + 1) / 2);\n    Arrays.sort(arr, (n + 1) / 2, n);\n    int low = (n + 1) / 2, high = n - 1;\n    while (low < high) {\n      Integer temp = arr[low];\n      arr[low] = arr[high];\n      arr[high] = temp;\n      low++;\n      high--;\n    }\n  }\n\n  static int[] swap(int[] arr, int i, int j) {\n    int temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    return arr;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};\n    int n = arr.length;\n    bitonicGenerator(arr, n);\n    for (int i = 0; i < n; i++) System.out.print(arr[i] + \" \u2581 \");\n  }\n}\n", "python": "def bitonicGenerator(arr, n):\n    i = 1\n    j = n - 1\n    if j % 2 != 0:\n        j = j - 1\n    while i < j:\n        arr[j], arr[i] = arr[i], arr[j]\n        i = i + 2\n        j = j - 2\n    arr_f = []\n    arr_s = []\n    for i in range(int((n + 1) / 2)):\n        arr_f.append(arr[i])\n    i = int((n + 1) / 2)\n    while i < n:\n        arr_s.append(arr[i])\n        i = i + 1\n    arr_f.sort()\n    arr_s.sort(reverse=True)\n    for i in arr_s:\n        arr_f.append(i)\n    return arr_f\n\n\narr = [1, 5, 8, 9, 6, 7, 3, 4, 2, 0]\nn = len(arr)\narr = bitonicGenerator(arr, n)\nprint(arr)\n"}
{"text": "Rearrange an array in maximum minimum form ", "java": "import java.util.Arrays;\n\npublic class GFG {\n  static void rearrange(int[] arr, int n) {\n    int temp[] = arr.clone();\n    int small = 0, large = n - 1;\n    boolean flag = true;\n    for (int i = 0; i < n; i++) {\n      if (flag) arr[i] = temp[large--];\n      else arr[i] = temp[small++];\n      flag = !flag;\n    }\n  }\n\n  public static void main(String[] args) {\n    int arr[] = new int[] {1, 2, 3, 4, 5, 6};\n    System.out.println(\" Original \u2581 Array \u2581 \");\n    System.out.println(Arrays.toString(arr));\n    rearrange(arr, arr.length);\n    System.out.println(\" Modified \u2581 Array \u2581 \");\n    System.out.println(Arrays.toString(arr));\n  }\n}\n", "python": "def rearrange(arr, n):\n    temp = n * [None]\n    small, large = 0, n - 1\n    flag = True\n    for i in range(n):\n        if flag is True:\n            temp[i] = arr[large]\n            large -= 1\n        else:\n            temp[i] = arr[small]\n            small += 1\n        flag = bool(1 - flag)\n    for i in range(n):\n        arr[i] = temp[i]\n    return arr\n\n\narr = [1, 2, 3, 4, 5, 6]\nn = len(arr)\nprint(\" Original \u2581 Array \")\nprint(arr)\nprint(\" Modified \u2581 Array \")\nprint(rearrange(arr, n))\n"}
{"text": "Minimum number of coins needed to remove all the elements of the array based on given rules ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int minimumcoins(int arr[], int N) {\n    int coins = 0;\n    int j = 0;\n    if (arr[0] == 1) coins++;\n    for (int i = 1; i < N; i++) {\n      if (arr[i] == 2) continue;\n      j = i;\n      while (j < N && arr[j] == 1) {\n        j++;\n      }\n      int x = (j - i);\n      coins += x / 3;\n      i = j - 1;\n    }\n    return coins;\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    int arr[] = {1, 2, 1, 1, 2, 1, 1, 1};\n    System.out.println(minimumcoins(arr, N));\n  }\n}\n", "python": "def minimumcoins(arr, N):\n    coins = 0\n    j = 0\n    if arr[0] == 1:\n        coins += 1\n    for i in range(1, N):\n        if arr[i] == 2:\n            continue\n        j = i\n        while j < N and arr[j] == 1:\n            j += 1\n        x = j - i\n        coins += x // 3\n        i = j - 1\n    return coins\n\n\nN = 8\narr = [1, 2, 1, 1, 2, 1, 1, 1]\nprint(minimumcoins(arr, N))\n"}
{"text": "Rearrange an array in maximum minimum form ", "java": "public class Main {\n  public static void rearrange(int arr[], int n) {\n    int max_idx = n - 1, min_idx = 0;\n    int max_elem = arr[n - 1] + 1;\n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        arr[i] += (arr[max_idx] % max_elem) * max_elem;\n        max_idx--;\n      } else {\n        arr[i] += (arr[min_idx] % max_elem) * max_elem;\n        min_idx++;\n      }\n    }\n    for (int i = 0; i < n; i++) arr[i] = arr[i] / max_elem;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    int n = arr.length;\n    System.out.println(\" Original \u2581 Array \");\n    for (int i = 0; i < n; i++) System.out.print(arr[i] + \" \u2581 \");\n    rearrange(arr, n);\n    System.out.print(\" Modified Array \");\n    for (int i = 0; i < n; i++) System.out.print(arr[i] + \" \u2581 \");\n  }\n}\n", "python": "def rearrange(arr, n):\n    temp = n * [None]\n    small, large = 0, n - 1\n    flag = True\n    for i in range(n):\n        if flag is True:\n            temp[i] = arr[large]\n            large -= 1\n        else:\n            temp[i] = arr[small]\n            small += 1\n        flag = bool(1 - flag)\n    for i in range(n):\n        arr[i] = temp[i]\n    return arr\n\n\narr = [1, 2, 3, 4, 5, 6]\nn = len(arr)\nprint(\" Original \u2581 Array \")\nprint(arr)\nprint(\" Modified \u2581 Array \")\nprint(rearrange(arr, n))\n"}
{"text": "Rearrange an array in maximum minimum form ", "java": "public class Main {\n  public static void rearrange(int arr[], int n) {\n    int max_ele = arr[n - 1];\n    int min_ele = arr[0];\n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        arr[i] = max_ele;\n        max_ele -= 1;\n      } else {\n        arr[i] = min_ele;\n        min_ele += 1;\n      }\n    }\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    int n = arr.length;\n    System.out.println(\" Original \u2581 Array \");\n    for (int i = 0; i < n; i++) System.out.print(arr[i] + \" \u2581 \");\n    rearrange(arr, n);\n    System.out.print(\" Modified Array \");\n    for (int i = 0; i < n; i++) System.out.print(arr[i] + \" \u2581 \");\n  }\n}\n", "python": "def rearrange(arr, n):\n    temp = n * [None]\n    small, large = 0, n - 1\n    flag = True\n    for i in range(n):\n        if flag is True:\n            temp[i] = arr[large]\n            large -= 1\n        else:\n            temp[i] = arr[small]\n            small += 1\n        flag = bool(1 - flag)\n    for i in range(n):\n        arr[i] = temp[i]\n    return arr\n\n\narr = [1, 2, 3, 4, 5, 6]\nn = len(arr)\nprint(\" Original \u2581 Array \")\nprint(arr)\nprint(\" Modified \u2581 Array \")\nprint(rearrange(arr, n))\n"}
{"text": "Program to find largest element in an array ", "java": "class Test {\n  static int arr[] = {10, 324, 45, 90, 9808};\n\n  static int largest() {\n    int i;\n    int max = arr[0];\n    for (i = 1; i < arr.length; i++) if (arr[i] > max) max = arr[i];\n    return max;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(\" Largest \u2581 in \u2581 given \u2581 array \u2581 is \u2581 \" + largest());\n  }\n}\n", "python": "def largest(arr, n):\n    return max(arr)\n\n\narr = [10, 324, 45, 90, 9808]\nn = len(arr)\nprint(largest(arr, n))\n"}
{"text": "Program to find largest element in an array ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int largest(int[] arr, int n) {\n    Arrays.sort(arr);\n    return arr[n - 1];\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {10, 324, 45, 90, 9808};\n    int n = arr.length;\n    System.out.println(largest(arr, n));\n  }\n}\n", "python": "def largest(arr, n):\n    return max(arr)\n\n\narr = [10, 324, 45, 90, 9808]\nn = len(arr)\nprint(largest(arr, n))\n"}
{"text": "Minimum characters required to be removed to make frequency of each character unique ", "java": "import java.util.*;\n\nclass GFG {\n  static int minCntCharDeletionsfrequency(char[] str, int N) {\n    HashMap<Character, Integer> mp = new HashMap<>();\n    PriorityQueue<Integer> pq = new PriorityQueue<>((x, y) -> Integer.compare(y, x));\n    int cntChar = 0;\n    for (int i = 0; i < N; i++) {\n      if (mp.containsKey(str[i])) {\n        mp.put(str[i], mp.get(str[i]) + 1);\n      } else {\n        mp.put(str[i], 1);\n      }\n    }\n    for (Map.Entry<Character, Integer> it : mp.entrySet()) {\n      pq.add(it.getValue());\n    }\n    while (!pq.isEmpty()) {\n      int frequent = pq.peek();\n      pq.remove();\n      if (pq.isEmpty()) {\n        return cntChar;\n      }\n      if (frequent == pq.peek()) {\n        if (frequent > 1) {\n          pq.add(frequent - 1);\n        }\n        cntChar++;\n      }\n    }\n    return cntChar;\n  }\n\n  public static void main(String[] args) {\n    String str = \" abbbcccd \";\n    int N = str.length();\n    System.out.print(minCntCharDeletionsfrequency(str.toCharArray(), N));\n  }\n}\n", "python": "def minCntCharDeletionsfrequency(str, N):\n    mp = {}\n    pq = []\n    cntChar = 0\n    for i in range(N):\n        mp[str[i]] = mp.get(str[i], 0) + 1\n    for it in mp:\n        pq.append(mp[it])\n    pq = sorted(pq)\n    while len(pq) > 0:\n        frequent = pq[-1]\n        del pq[-1]\n        if len(pq) == 0:\n            return cntChar\n        if frequent == pq[-1]:\n            if frequent > 1:\n                pq.append(frequent - 1)\n            cntChar += 1\n        pq = sorted(pq)\n    return cntChar\n\n\nif __name__ == \" _ _ main _ _ \":\n    str = \" abbbcccd \"\n    N = len(str)\n    print(minCntCharDeletionsfrequency(str, N))\n"}
{"text": "Program for Mean and median of an unsorted array ", "java": "import java.util.*;\n\nclass GFG {\n  public static double findMean(int a[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum += a[i];\n    return (double) sum / (double) n;\n  }\n\n  public static double findMedian(int a[], int n) {\n    Arrays.sort(a);\n    if (n % 2 != 0) return (double) a[n / 2];\n    return (double) (a[(n - 1) / 2] + a[n / 2]) / 2.0;\n  }\n\n  public static void main(String args[]) {\n    int a[] = {1, 3, 4, 2, 7, 5, 8, 6};\n    int n = a.length;\n    System.out.println(\" Mean \u2581 = \u2581 \" + findMean(a, n));\n    System.out.println(\" Median \u2581 = \u2581 \" + findMedian(a, n));\n  }\n}\n", "python": "def findMean(a, n):\n    sum = 0\n    for i in range(0, n):\n        sum += a[i]\n    return float(sum / n)\n\n\ndef findMedian(a, n):\n    sorted(a)\n    if n % 2 != 0:\n        return float(a[int(n / 2)])\n    return float((a[int((n - 1) / 2)] + a[int(n / 2)]) / 2.0)\n\n\na = [1, 3, 4, 2, 7, 5, 8, 6]\nn = len(a)\nprint(\" Mean \u2581 = \", findMean(a, n))\nprint(\" Median \u2581 = \", findMedian(a, n))\n"}
{"text": "Maximum sum possible by assigning alternate positive and negative sign to elements in a subsequence ", "java": "import java.io.*;\n\nclass GFG {\n  static int findMax(int[] a, int dp[][], int i, int flag) {\n    if (i == (int) a.length) {\n      return 0;\n    }\n    if (dp[i][flag] != -1) {\n      return dp[i][flag];\n    }\n    int ans;\n    if (flag == 0) {\n      ans = Math.max(findMax(a, dp, i + 1, 0), a[i] + findMax(a, dp, i + 1, 1));\n    } else {\n      ans = Math.max(findMax(a, dp, i + 1, 1), -1 * a[i] + findMax(a, dp, i + 1, 0));\n    }\n    return dp[i][flag] = ans;\n  }\n\n  static void findMaxSumUtil(int[] arr, int N) {\n    int dp[][] = new int[N][2];\n    for (int i = 0; i < N; i++) {\n      for (int j = 0; j < 2; j++) {\n        dp[i][j] = -1;\n      }\n    }\n    System.out.println(findMax(arr, dp, 0, 0));\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 4, 1, 2};\n    int N = arr.length;\n    findMaxSumUtil(arr, N);\n  }\n}\n", "python": "def findMax(a, dp, i, flag):\n    if i == len(a):\n        return 0\n    if dp[i][flag] != -1:\n        return dp[i][flag]\n    ans = 0\n    if flag == 0:\n        ans = max(findMax(a, dp, i + 1, 0), a[i] + findMax(a, dp, i + 1, 1))\n    else:\n        ans = max(findMax(a, dp, i + 1, 1), -1 * a[i] + findMax(a, dp, i + 1, 0))\n    dp[i][flag] = ans\n    return ans\n\n\ndef findMaxSumUtil(arr, N):\n    dp = [[-1 for i in range(2)] for i in range(N)]\n    print(findMax(arr, dp, 0, 0))\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4, 1, 2]\n    N = len(arr)\n    findMaxSumUtil(arr, N)\n"}
{"text": "Maximize count of strings of length 3 that can be formed from N 1 s and M 0 s ", "java": "class GFG {\n  static void number_of_Strings(int N, int M) {\n    System.out.print(Math.min(N, Math.min(M, (N + M) / 3)));\n  }\n\n  public static void main(String[] args) {\n    int N = 4, M = 19;\n    number_of_Strings(N, M);\n  }\n}\n", "python": "def number_of_strings(N, M):\n    print(min(N, min(M, (N + M) // 3)))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    M = 19\n    number_of_strings(N, M)\n"}
{"text": "Maximize modulus by replacing adjacent pairs with their modulus for any permutation of given Array ", "java": "import java.io.*;\n\nclass GFG {\n  static int maximumModuloValue(int A[], int n) {\n    int mn = Integer.MAX_VALUE;\n    for (int i = 0; i < n; i++) {\n      mn = Math.min(A[i], mn);\n    }\n    return mn;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {7, 10, 12};\n    int n = A.length;\n    System.out.println(maximumModuloValue(A, n));\n  }\n}\n", "python": "import sys\n\n\ndef maximumModuloValue(A, n):\n    mn = sys.maxsize\n    for i in range(n):\n        mn = min(A[i], mn)\n    return mn\n\n\nA = [7, 10, 12]\nn = len(A)\nprint(maximumModuloValue(A, n))\n"}
{"text": "Count of nested polygons that can be drawn by joining vertices internally ", "java": "class GFG {\n  static int countNestedPolygons(int sides) {\n    int count = 0;\n    while (sides > 5) {\n      sides /= 2;\n      count += 1;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int N = 12;\n    System.out.print(countNestedPolygons(N));\n  }\n}\n", "python": "def countNestedPolygons(sides):\n    count = 0\n    while sides > 5:\n        sides //= 2\n        count += 1\n    return count\n\n\nN = 12\nprint(countNestedPolygons(N))\n"}
{"text": "Count of Binary Strings possible as per given conditions ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static long countStrings(long A, long B, long K) {\n    long X = (A + B) / (K + 1);\n    return (Math.min(A, Math.min(B, X)) * (K + 1));\n  }\n\n  public static void main(String[] args) {\n    long N = 101, M = 231, K = 15;\n    System.out.print(countStrings(N, M, K));\n  }\n}\n", "python": "def countStrings(A, B, K):\n    X = (A + B) // (K + 1)\n    return min(A, min(B, X)) * (K + 1)\n\n\nN, M, K = 101, 231, 15\nprint(countStrings(N, M, K))\n"}
{"text": "Maximum profit by buying and selling a share at most K times ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxProfit(int n, int k, int prices[]) {\n    int ans = 0, buy = 0, sell = 0;\n    Stack<int[]> transaction = new Stack<>();\n    PriorityQueue<Integer> profits = new PriorityQueue<>();\n    while (sell < n) {\n      buy = sell;\n      while (buy < n - 1 && prices[buy] >= prices[buy + 1]) buy++;\n      sell = buy + 1;\n      while (sell < n && prices[sell] >= prices[sell - 1]) sell++;\n      while (!transaction.isEmpty() && prices[buy] < prices[transaction.peek()[0]]) {\n        int[] p = transaction.peek();\n        profits.add(prices[p[1] - 1] - prices[p[0]]);\n        transaction.pop();\n      }\n      while (!transaction.isEmpty() && prices[sell - 1] > prices[transaction.peek()[1] - 1]) {\n        int[] p = transaction.peek();\n        profits.add(prices[p[1] - 1] - prices[buy]);\n        buy = p[0];\n        transaction.pop();\n      }\n      transaction.push(new int[] {buy, sell});\n    }\n    while (!transaction.isEmpty()) {\n      profits.add(prices[transaction.peek()[1] - 1] - prices[transaction.peek()[0]]);\n      transaction.pop();\n    }\n    while (k > 0 && !profits.isEmpty()) {\n      ans += profits.peek();\n      profits.poll();\n      --k;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int k = 3;\n    int prices[] = {1, 12, 10, 7, 10, 13, 11, 10, 7, 6, 9};\n    int n = prices.length;\n    System.out.println(\" Maximum \u2581 profit \u2581 is \u2581 \" + maxProfit(n, k, prices));\n  }\n}\n", "python": "def maxProfit(n, k, prices):\n    ans = 0\n    buy = 0\n    sell = 0\n    transaction = []\n    profits = []\n    while sell < n:\n        buy = sell\n        while buy < n - 1 and prices[buy] >= prices[buy + 1]:\n            buy += 1\n        sell = buy + 1\n        while sell < n and prices[sell] >= prices[sell - 1]:\n            sell += 1\n        while (\n            len(transaction) != 0\n            and prices[buy] < prices[transaction[len(transaction) - 1][0]]\n        ):\n            p = transaction[len(transaction) - 1]\n            profits.append(prices[p[1] - 1] - prices[p[0]])\n            transaction.remove(transaction[len(transaction) - 1])\n        profits.sort(reverse=True)\n        while (\n            len(transaction) != 0\n            and prices[sell - 1] > prices[transaction[len(transaction) - 1][1] - 1]\n        ):\n            p = transaction[len(transaction) - 1]\n            profits.append(prices[p[1] - 1] - prices[buy])\n            buy = p[0]\n            transaction.remove(transaction[len(transaction) - 1])\n        transaction.append([buy, sell])\n    profits.sort(reverse=True)\n    while len(transaction) != 0:\n        profits.append(\n            prices[transaction[len(transaction) - 1][1] - 1]\n            - prices[transaction[len(transaction) - 1][0]]\n        )\n        transaction.remove(transaction[len(transaction) - 1])\n    profits.sort(reverse=True)\n    while k != 0 and len(profits) != 0:\n        ans += profits[0]\n        profits.remove(profits[0])\n        k -= 1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    k = 3\n    prices = [1, 12, 10, 7, 10, 13, 11, 10, 7, 6, 9]\n    n = len(prices)\n    print(\" Maximum \u2581 profit \u2581 is \", maxProfit(n, k, prices))\n"}
{"text": "Find sum in range L to R in given sequence of integers ", "java": "import java.util.*;\n\nclass GFG {\n  public static int findSum(int L, int R) {\n    ArrayList<Integer> arr = new ArrayList<>();\n    int i = 0;\n    int x = 2;\n    while (i <= R) {\n      arr.add(i + x);\n      if (i + 1 <= R) arr.add(i + 1 + x);\n      x *= -1;\n      i += 2;\n    }\n    int sum = 0;\n    for (i = L; i <= R; ++i) sum += arr.get(i);\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int L = 0, R = 5;\n    System.out.println(findSum(L, R));\n  }\n}\n", "python": "def findSum(L, R):\n    arr = []\n    i = 0\n    x = 2\n    k = 0\n    while i <= R:\n        arr.insert(k, i + x)\n        k += 1\n        if i + 1 <= R:\n            arr.insert(k, i + 1 + x)\n        k += 1\n        x *= -1\n        i += 2\n    sum = 0\n    for i in range(L, R + 1):\n        sum += arr[i]\n    return sum\n\n\nL = 0\nR = 5\nprint(findSum(L, R))\n"}
{"text": "Count of pairs from 1 to a and 1 to b whose sum is divisible by N ", "java": "class GFG {\n  static int findCountOfPairs(int a, int b, int n) {\n    int ans = 0;\n    for (int i = 1; i <= a; i++) {\n      ans += b / n;\n      ans += (i % n + b % n) >= n ? 1 : 0;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int a = 5, b = 13, n = 3;\n    System.out.println(findCountOfPairs(a, b, n));\n  }\n}\n", "python": "def findCountOfPairs(a, b, n):\n    ans = 0\n    for i in range(1, a + 1):\n        ans += b // n\n        ans += 1 if (i % n + b % n) >= n else 0\n    return ans\n\n\na = 5\nb = 13\nn = 3\nprint(findCountOfPairs(a, b, n))\n"}
{"text": "Count of pairs from 1 to a and 1 to b whose sum is divisible by N ", "java": "class GFG {\n  public static int findCountOfPairs(int a, int b, int n) {\n    if (a > b) {\n      int temp = a;\n      a = b;\n      b = temp;\n    }\n    int temp = 1, count = 0;\n    for (int i = n; temp > 0; i += n) {\n      if (a >= i) {\n        temp = i - 1;\n      } else if (b >= i) {\n        temp = a;\n      } else if (i > b) {\n        temp = a - (i - b) + 1;\n      }\n      if (temp > 0) {\n        count += temp;\n      }\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int a = 5, b = 13, n = 3;\n    System.out.print(findCountOfPairs(a, b, n));\n  }\n}\n", "python": "def findCountOfPairs(a, b, n):\n    ans = 0\n    for i in range(1, a + 1):\n        ans += b // n\n        ans += 1 if (i % n + b % n) >= n else 0\n    return ans\n\n\na = 5\nb = 13\nn = 3\nprint(findCountOfPairs(a, b, n))\n"}
{"text": "Total numbers with no repeated digits in a range ", "java": "import java.util.LinkedHashSet;\n\nclass GFG {\n  static int repeated_digit(int n) {\n    LinkedHashSet<Integer> s = new LinkedHashSet<>();\n    while (n != 0) {\n      int d = n % 10;\n      if (s.contains(d)) {\n        return 0;\n      }\n      s.add(d);\n      n = n / 10;\n    }\n    return 1;\n  }\n\n  static int calculate(int L, int R) {\n    int answer = 0;\n    for (int i = L; i < R + 1; ++i) {\n      answer = answer + repeated_digit(i);\n    }\n    return answer;\n  }\n\n  public static void main(String[] args) {\n    int L = 1, R = 100;\n    System.out.println(calculate(L, R));\n  }\n}\n", "python": "def repeated_digit(n):\n    a = []\n    while n != 0:\n        d = n % 10\n        if d in a:\n            return 0\n        a.append(d)\n        n = n // 10\n    return 1\n\n\ndef calculate(L, R):\n    answer = 0\n    for i in range(L, R + 1):\n        answer = answer + repeated_digit(i)\n    return answer\n\n\nL = 1\nR = 100\nprint(calculate(L, R))\n"}
{"text": "Total numbers with no repeated digits in a range ", "java": "import java.util.*;\n\nclass GFG {\n  static int MAX = 100;\n  static Vector<Integer> Prefix = new Vector<>();\n\n  static int repeated_digit(int n) {\n    HashSet<Integer> a = new HashSet<>();\n    int d;\n    while (n != 0) {\n      d = n % 10;\n      if (a.contains(d)) return 0;\n      a.add(d);\n      n /= 10;\n    }\n    return 1;\n  }\n\n  static void pre_calculations() {\n    Prefix.add(0);\n    Prefix.add(repeated_digit(1));\n    for (int i = 2; i < MAX + 1; i++) Prefix.add(repeated_digit(i) + Prefix.elementAt(i - 1));\n  }\n\n  static int calculate(int L, int R) {\n    return Prefix.elementAt(R) - Prefix.elementAt(L - 1);\n  }\n\n  public static void main(String[] args) {\n    int L = 1, R = 100;\n    pre_calculations();\n    System.out.println(calculate(L, R));\n  }\n}\n", "python": "def repeated_digit(n):\n    a = []\n    while n != 0:\n        d = n % 10\n        if d in a:\n            return 0\n        a.append(d)\n        n = n // 10\n    return 1\n\n\ndef calculate(L, R):\n    answer = 0\n    for i in range(L, R + 1):\n        answer = answer + repeated_digit(i)\n    return answer\n\n\nL = 1\nR = 100\nprint(calculate(L, R))\n"}
{"text": "Difference Array ", "java": "class GFG {\n  static void initializeDiffArray(int A[], int D[]) {\n    int n = A.length;\n    D[0] = A[0];\n    D[n] = 0;\n    for (int i = 1; i < n; i++) D[i] = A[i] - A[i - 1];\n  }\n\n  static void update(int D[], int l, int r, int x) {\n    D[l] += x;\n    D[r + 1] -= x;\n  }\n\n  static int printArray(int A[], int D[]) {\n    for (int i = 0; i < A.length; i++) {\n      if (i == 0) A[i] = D[i];\n      else A[i] = D[i] + A[i - 1];\n      System.out.print(A[i] + \" \u2581 \");\n    }\n    System.out.println();\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {10, 5, 20, 40};\n    int n = A.length;\n    int D[] = new int[n + 1];\n    initializeDiffArray(A, D);\n    update(D, 0, 1, 10);\n    printArray(A, D);\n    update(D, 1, 3, 20);\n    update(D, 2, 2, 30);\n    printArray(A, D);\n  }\n}\n", "python": "def initializeDiffArray(A):\n    n = len(A)\n    D = [0 for i in range(0, n + 1)]\n    D[0] = A[0]\n    D[n] = 0\n    for i in range(1, n):\n        D[i] = A[i] - A[i - 1]\n    return D\n\n\ndef update(D, l, r, x):\n    D[l] += x\n    D[r + 1] -= x\n\n\ndef printArray(A, D):\n    for i in range(0, len(A)):\n        if i == 0:\n            A[i] = D[i]\n        else:\n            A[i] = D[i] + A[i - 1]\n        print(A[i], end=\" \u2581 \")\n    print(\" \")\n\n\nA = [10, 5, 20, 40]\nD = initializeDiffArray(A)\nupdate(D, 0, 1, 10)\nprintArray(A, D)\nupdate(D, 1, 3, 20)\nupdate(D, 2, 2, 30)\nprintArray(A, D)\n"}
{"text": "Minimum sum by choosing minimum of pairs from array ", "java": "import java.util.Arrays;\n\npublic class GFG {\n  static int minSum(int[] A, int n) {\n    int min_val = Arrays.stream(A).min().getAsInt();\n    return (min_val * (n - 1));\n  }\n\n  public static void main(String[] args) {\n    int[] A = {3, 6, 2, 8, 7, 5};\n    int n = A.length;\n    System.out.println((minSum(A, n)));\n  }\n}\n", "python": "def minSum(A):\n    min_val = min(A)\n    return min_val * (len(A) - 1)\n\n\nA = [7, 2, 3, 4, 5, 6]\nprint(minSum(A))\n"}
{"text": "Maximize sum of odd ", "java": "import java.awt.Point;\nimport java.util.*;\n\npublic class GFG {\n  static int recursiveChoosing(int[] arr, int start, int M, HashMap<Point, Integer> dp) {\n    Point key = new Point(start, M);\n    if (start >= arr.length) {\n      return 0;\n    }\n    if (arr.length - start <= 2 * M) {\n      int Sum = 0;\n      for (int i = start; i < arr.length; i++) {\n        Sum = Sum + arr[i];\n      }\n      return Sum;\n    }\n    int sum = 0;\n    for (int i = start; i < arr.length; i++) {\n      sum = sum + arr[i];\n    }\n    int total = sum;\n    if (dp.containsKey(key)) {\n      return dp.get(key);\n    }\n    int psa = 0;\n    for (int x = 1; x < 2 * M + 1; x++) {\n      int psb = recursiveChoosing(arr, start + x, Math.max(x, M), dp);\n      psa = Math.max(psa, total - psb);\n    }\n    dp.put(key, psa);\n    return dp.get(key);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {2, 7, 9, 4, 4};\n    int N = arr.length;\n    HashMap<Point, Integer> dp = new HashMap<Point, Integer>();\n    System.out.print(recursiveChoosing(arr, 0, 1, dp));\n  }\n}\n", "python": "def recursiveChoosing(arr, start, M, dp):\n    key = (start, M)\n    if start >= N:\n        return 0\n    if N - start <= 2 * M:\n        return sum(arr[start:])\n    psa = 0\n    total = sum(arr[start:])\n    if key in dp:\n        return dp[key]\n    for x in range(1, 2 * M + 1):\n        psb = recursiveChoosing(arr, start + x, max(x, M), dp)\n        psa = max(psa, total - psb)\n    dp[key] = psa\n    return dp[key]\n\n\narr = [2, 7, 9, 4, 4]\nN = len(arr)\ndp = {}\nprint(recursiveChoosing(arr, 0, 1, dp))\n"}
{"text": "Maximum Sum Subsequence made up of consecutive elements of different parity ", "java": "import java.io.*;\nimport java.util.Arrays;\n\nclass GFG {\n  static int maxSum(int[] arr, int i, int n, int prev, boolean is_selected, int[][] dp) {\n    if (i == n) {\n      return 0;\n    }\n    int cur = Math.abs(arr[i]) % 2;\n    if (dp[i][prev] != -1) {\n      return dp[i][prev];\n    }\n    if (i == n - 1 && is_selected == false) return dp[i][prev] = arr[i];\n    if (cur != prev) {\n      dp[i][prev] = arr[i] + maxSum(arr, i + 1, n, cur, true, dp);\n    }\n    dp[i][prev] = Math.max(dp[i][prev], maxSum(arr, i + 1, n, prev, is_selected, dp));\n    return dp[i][prev];\n  }\n\n  static void maxSumUtil(int arr[], int n) {\n    int[][] dp = new int[100][3];\n    for (int[] arr1 : dp) Arrays.fill(arr1, -1);\n    System.out.print(maxSum(arr, 0, n, 2, false, dp));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 6, 8, -5, 10};\n    int N = arr.length;\n    maxSumUtil(arr, N);\n  }\n}\n", "python": "def maxSum(arr, i, n, prev, is_selected, dp):\n    if i == n:\n        return 0\n    cur = abs(arr[i]) % 2\n    if dp[i][prev] != -1:\n        return dp[i][prev]\n    if i == n - 1 and is_selected == 0:\n        dp[i][prev] = arr[i]\n        return dp[i][prev]\n    if cur != prev:\n        dp[i][prev] = arr[i] + maxSum(arr, i + 1, n, cur, 1, dp)\n    dp[i][prev] = max(dp[i][prev], maxSum(arr, i + 1, n, prev, is_selected, dp))\n    return dp[i][prev]\n\n\ndef maxSumUtil(arr, n):\n    dp = [[-1 for i in range(3)] for j in range(100)]\n    print(maxSum(arr, 0, n, 2, 0, dp))\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 6, 8, -5, 10]\n    N = len(arr)\n    maxSumUtil(arr, N)\n"}
{"text": "Find the last remaining element after repeated removal of odd and even indexed elements alternately ", "java": "import java.util.*;\n\nclass GFG {\n  static int lastRemaining(int n, HashMap<Integer, Integer> dp) {\n    if (dp.containsKey(n)) return dp.get(n);\n    if (n == 1) return 1;\n    else dp.put(n, 2 * (1 + n / 2 - lastRemaining(n / 2, dp)));\n    return dp.get(n);\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    HashMap<Integer, Integer> dp = new HashMap<Integer, Integer>();\n    System.out.print(lastRemaining(N, dp));\n  }\n}\n", "python": "def lastRemaining(n, dp):\n    if n in dp:\n        return dp[n]\n    if n == 1:\n        return 1\n    else:\n        dp[n] = 2 * (1 + n // 2 - lastRemaining(n // 2, dp))\n    return dp[n]\n\n\nN = 5\ndp = {}\nprint(lastRemaining(N, dp))\n"}
{"text": "Count all possible unique sum of series K , K + 1 , K + 2 , K + 3 , K + 4 , ... , K + N ", "java": "import java.util.*;\n\nclass GFG {\n  static int count_unique_sum(int n) {\n    int i;\n    int ar[] = new int[n + 1];\n    int fsum[] = new int[n + 1];\n    int rsum[] = new int[n + 1];\n    int ans = 1;\n    Arrays.fill(fsum, 0);\n    Arrays.fill(rsum, 0);\n    for (i = 0; i <= n; i++) {\n      ar[i] = i;\n    }\n    fsum[0] = ar[0];\n    rsum[n] = ar[n];\n    for (i = 1; i <= n; i++) {\n      fsum[i] = ar[i] + fsum[i - 1];\n    }\n    for (i = n - 1; i >= 0; i--) {\n      rsum[i] = ar[i] + rsum[i + 1];\n    }\n    for (int k = 2; k <= n; k++) {\n      ans += 1 + rsum[n + 1 - k] - fsum[k - 1];\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    System.out.print(count_unique_sum(N));\n  }\n}\n", "python": "def count_unique_sum(n):\n    ar = [0] * (n + 1)\n    fsum = [0] * (n + 1)\n    rsum = [0] * (n + 1)\n    ans = 1\n    for i in range(0, n + 1):\n        ar[i] = i\n    fsum[0] = ar[0]\n    rsum[n] = ar[n]\n    for i in range(1, n + 1):\n        fsum[i] = ar[i] + fsum[i - 1]\n    for i in range(n - 1, -1, -1):\n        rsum[i] = ar[i] + rsum[i + 1]\n    for k in range(2, n + 1):\n        ans += 1 + rsum[n + 1 - k] - fsum[k - 1]\n    return ans\n\n\nN = 4\nprint(count_unique_sum(N))\n"}
{"text": "Maximum sum of elements divisible by K from the given array ", "java": "class GFG {\n  static int[][] dp = new int[1001][1001];\n\n  static int find_max(int i, int sum, int[] v, int k) {\n    if (i == v.length) return 0;\n    if (dp[i][sum] != -1) return dp[i][sum];\n    int ans = 0;\n    if ((sum + find_max(i + 1, sum, v, k)) % k == 0) ans = find_max(i + 1, sum, v, k);\n    if ((sum + v[i] + find_max(i + 1, (sum + v[i]) % k, v, k)) % k == 0)\n      ans = Math.max(ans, v[i] + find_max(i + 1, (sum + v[i]) % k, v, k));\n    return dp[i][sum] = ans;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {43, 1, 17, 26, 15};\n    int k = 16;\n    for (int i = 0; i < 1001; i++) for (int j = 0; j < 1001; j++) dp[i][j] = -1;\n    System.out.print(find_max(0, 0, arr, k));\n  }\n}\n", "python": "dp = [[-1 for i in range(1001)] for j in range(1001)]\n\n\ndef find_max(i, sum, v, k):\n    if i == len(v):\n        return 0\n    if dp[i][sum] != -1:\n        return dp[i][sum]\n    ans = 0\n    if (sum + find_max(i + 1, sum, v, k)) % k == 0:\n        ans = find_max(i + 1, sum, v, k)\n    if (sum + v[i] + find_max(i + 1, (sum + v[i]) % k, v, k)) % k == 0:\n        ans = max(ans, v[i] + find_max(i + 1, (sum + v[i]) % k, v, k))\n    dp[i][sum] = ans\n    return dp[i][sum]\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [43, 1, 17, 26, 15]\n    k = 16\n    print(find_max(0, 0, arr, k))\n"}
{"text": "Minimum number of coins that can generate all the values in the given range ", "java": "import java.util.*;\n\nclass GFG {\n  static int findCount(int N) {\n    Vector list = new Vector();\n    int sum = 0;\n    int i;\n    for (i = 0; i < 20; i++) {\n      sum += Math.pow(2, i);\n      list.add(sum);\n    }\n    for (i = 0; i < 20; i++) {\n      if ((int) list.get(i) >= N) return (list.indexOf(list.get(i)) + 1);\n    }\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 10;\n    System.out.println(findCount(N));\n  }\n}\n", "python": "import math\n\n\ndef findCount(n):\n    return int(math.log(n, 2)) + 1\n\n\nN = 10\nprint(findCount(N))\n"}
{"text": "Product of maximum in first array and minimum in second ", "java": "import java.util.*;\n\nclass GfG {\n  public static int minMaxProduct(int arr1[], int arr2[], int n1, int n2) {\n    Arrays.sort(arr1);\n    Arrays.sort(arr2);\n    return arr1[n1 - 1] * arr2[0];\n  }\n\n  public static void main(String argc[]) {\n    int[] arr1 = new int[] {10, 2, 3, 6, 4, 1};\n    int[] arr2 = new int[] {5, 1, 4, 2, 6, 9};\n    int n1 = 6;\n    int n2 = 6;\n    System.out.println(minMaxProduct(arr1, arr2, n1, n2));\n  }\n}\n", "python": "def minmaxProduct(arr1, arr2, n1, n2):\n    arr1.sort()\n    arr2.sort()\n    return arr1[n1 - 1] * arr2[0]\n\n\narr1 = [10, 2, 3, 6, 4, 1]\narr2 = [5, 1, 4, 2, 6, 9]\nn1 = len(arr1)\nn2 = len(arr2)\nprint(minmaxProduct(arr1, arr2, n1, n2))\n"}
{"text": "Product of maximum in first array and minimum in second ", "java": "import java.util.*;\n\nclass GfG {\n  public static int minMaxProduct(int arr1[], int arr2[], int n1, int n2) {\n    int max = arr1[0];\n    int min = arr2[0];\n    int i;\n    for (i = 1; i < n1 && i < n2; ++i) {\n      if (arr1[i] > max) max = arr1[i];\n      if (arr2[i] < min) min = arr2[i];\n    }\n    while (i < n1) {\n      if (arr1[i] > max) max = arr1[i];\n      i++;\n    }\n    while (i < n2) {\n      if (arr2[i] < min) min = arr2[i];\n      i++;\n    }\n    return max * min;\n  }\n\n  public static void main(String argc[]) {\n    int[] arr1 = new int[] {10, 2, 3, 6, 4, 1};\n    int[] arr2 = new int[] {5, 1, 4, 2, 6, 9};\n    int n1 = 6;\n    int n2 = 6;\n    System.out.println(minMaxProduct(arr1, arr2, n1, n2));\n  }\n}\n", "python": "def minmaxProduct(arr1, arr2, n1, n2):\n    arr1.sort()\n    arr2.sort()\n    return arr1[n1 - 1] * arr2[0]\n\n\narr1 = [10, 2, 3, 6, 4, 1]\narr2 = [5, 1, 4, 2, 6, 9]\nn1 = len(arr1)\nn2 = len(arr2)\nprint(minmaxProduct(arr1, arr2, n1, n2))\n"}
{"text": "Search , insert and delete in a sorted array ", "java": "class Main {\n  static int binarySearch(int arr[], int low, int high, int key) {\n    if (high < low) return -1;\n    int mid = (low + high) / 2;\n    if (key == arr[mid]) return mid;\n    if (key > arr[mid]) return binarySearch(arr, (mid + 1), high, key);\n    return binarySearch(arr, low, (mid - 1), key);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {5, 6, 7, 8, 9, 10};\n    int n, key;\n    n = arr.length - 1;\n    key = 10;\n    System.out.println(\" Index : \u2581 \" + binarySearch(arr, 0, n, key));\n  }\n}\n", "python": "def binarySearch(arr, low, high, key):\n    mid = (low + high) / 2\n    if key == arr[int(mid)]:\n        return mid\n    if key > arr[int(mid)]:\n        return binarySearch(arr, (mid + 1), high, key)\n    if key < arr[int(mid)]:\n        return binarySearch(arr, low, (mid - 1), key)\n    return 0\n\n\narr = [5, 6, 7, 8, 9, 10]\nn = len(arr)\nkey = 10\nprint(\" Index : \", int(binarySearch(arr, 0, n - 1, key)))\n"}
{"text": "Search , insert and delete in a sorted array ", "java": "class Main {\n  static int insertSorted(int arr[], int n, int key, int capacity) {\n    if (n >= capacity) return n;\n    int i;\n    for (i = n - 1; (i >= 0 && arr[i] > key); i--) arr[i + 1] = arr[i];\n    arr[i + 1] = key;\n    return (n + 1);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = new int[20];\n    arr[0] = 12;\n    arr[1] = 16;\n    arr[2] = 20;\n    arr[3] = 40;\n    arr[4] = 50;\n    arr[5] = 70;\n    int capacity = arr.length;\n    int n = 6;\n    int key = 26;\n    System.out.print(\" Before Insertion : \");\n    for (int i = 0; i < n; i++) System.out.print(arr[i] + \" \u2581 \");\n    n = insertSorted(arr, n, key, capacity);\n    System.out.print(\" After Insertion : \");\n    for (int i = 0; i < n; i++) System.out.print(arr[i] + \" \u2581 \");\n  }\n}\n", "python": "def binarySearch(arr, low, high, key):\n    mid = (low + high) / 2\n    if key == arr[int(mid)]:\n        return mid\n    if key > arr[int(mid)]:\n        return binarySearch(arr, (mid + 1), high, key)\n    if key < arr[int(mid)]:\n        return binarySearch(arr, low, (mid - 1), key)\n    return 0\n\n\narr = [5, 6, 7, 8, 9, 10]\nn = len(arr)\nkey = 10\nprint(\" Index : \", int(binarySearch(arr, 0, n - 1, key)))\n"}
{"text": "Find n ", "java": "class GFG {\n  static int findSDSFunc(int n) {\n    int DP[] = new int[n + 1];\n    DP[0] = 0;\n    DP[1] = 1;\n    for (int i = 2; i <= n; i++) {\n      if (i % 2 == 0) DP[i] = DP[i / 2];\n      else DP[i] = DP[(i - 1) / 2] + DP[(i + 1) / 2];\n    }\n    return DP[n];\n  }\n\n  public static void main(String[] args) {\n    int n = 15;\n    System.out.println(findSDSFunc(n));\n  }\n}\n", "python": "import math\n\n\ndef findNumber(n):\n    x = int(math.floor((-1 + math.sqrt(1 + 8 * n - 8)) / 2))\n    base = (x * (x + 1)) / 2 + 1\n    return n - base + 1\n\n\nn = 55\nprint(findNumber(n))\n"}
{"text": "Dynamic Programming on Trees ", "java": "import java.util.Vector;\n\nclass GFG {\n  static int[] dp = new int[100];\n\n  static void dfs(int[] a, Vector<Integer>[] v, int u, int parent) {\n    dp[u] = a[u - 1];\n    int maximum = 0;\n    for (int child : v[u]) {\n      if (child == parent) continue;\n      dfs(a, v, child, u);\n      maximum = Math.max(maximum, dp[child]);\n    }\n    dp[u] += maximum;\n  }\n\n  static int maximumValue(int[] a, Vector<Integer>[] v) {\n    dfs(a, v, 1, 0);\n    return dp[1];\n  }\n\n  public static void main(String[] args) {\n    int n = 14;\n    @SuppressWarnings(\" unchecked \")\n    Vector<Integer>[] v = new Vector[n + 1];\n    for (int i = 0; i < v.length; i++) v[i] = new Vector<>();\n    v[1].add(2);\n    v[2].add(1);\n    v[1].add(3);\n    v[3].add(1);\n    v[1].add(4);\n    v[4].add(1);\n    v[2].add(5);\n    v[5].add(2);\n    v[2].add(6);\n    v[6].add(2);\n    v[3].add(7);\n    v[7].add(3);\n    v[4].add(8);\n    v[8].add(4);\n    v[4].add(9);\n    v[9].add(4);\n    v[4].add(10);\n    v[10].add(4);\n    v[5].add(11);\n    v[11].add(5);\n    v[5].add(12);\n    v[12].add(5);\n    v[7].add(13);\n    v[13].add(7);\n    v[7].add(14);\n    v[14].add(7);\n    int a[] = {3, 2, 1, 10, 1, 3, 9, 1, 5, 3, 4, 5, 9, 8};\n    System.out.println(maximumValue(a, v));\n  }\n}\n", "python": "dp = [0] * 100\n\n\ndef dfs(a, v, u, parent):\n    dp[u] = a[u - 1]\n    maximum = 0\n    for child in v[u]:\n        if child == parent:\n            continue\n        dfs(a, v, child, u)\n        maximum = max(maximum, dp[child])\n    dp[u] += maximum\n\n\ndef maximumValue(a, v):\n    dfs(a, v, 1, 0)\n    return dp[1]\n\n\ndef main():\n    n = 14\n    v = {}\n    for i in range(n + 1):\n        v[i] = []\n    v[1].append(2), v[2].append(1)\n    v[1].append(3), v[3].append(1)\n    v[1].append(4), v[4].append(1)\n    v[2].append(5), v[5].append(2)\n    v[2].append(6), v[6].append(2)\n    v[3].append(7), v[7].append(3)\n    v[4].append(8), v[8].append(4)\n    v[4].append(9), v[9].append(4)\n    v[4].append(10), v[10].append(4)\n    v[5].append(11), v[11].append(5)\n    v[5].append(12), v[12].append(5)\n    v[7].append(13), v[13].append(7)\n    v[7].append(14), v[14].append(7)\n    a = [3, 2, 1, 10, 1, 3, 9, 1, 5, 3, 4, 5, 9, 8]\n    print(maximumValue(a, v))\n\n\nmain()\n"}
{"text": "Jacobsthal and Jacobsthal ", "java": "import java.util.*;\n\npublic class GfG {\n  public static int Jacobsthal(int n) {\n    int[] dp = new int[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) dp[i] = dp[i - 1] + 2 * dp[i - 2];\n    return dp[n];\n  }\n\n  public static int Jacobsthal_Lucas(int n) {\n    int[] dp = new int[n + 1];\n    dp[0] = 2;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) dp[i] = dp[i - 1] + 2 * dp[i - 2];\n    return dp[n];\n  }\n\n  public static void main(String argc[]) {\n    int n = 5;\n    System.out.println(\" Jacobsthal \u2581 number : \u2581 \" + Jacobsthal(n));\n    System.out.println(\" Jacobsthal - Lucas \u2581 number : \u2581 \" + Jacobsthal_Lucas(n));\n  }\n}\n", "python": "def Jacobsthal(n):\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 2 * dp[i - 2]\n    return dp[n]\n\n\ndef Jacobsthal_Lucas(n):\n    dp = [0] * (n + 1)\n    dp[0] = 2\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 2 * dp[i - 2]\n    return dp[n]\n\n\nn = 5\nprint(\" Jacobsthal \u2581 number : \", Jacobsthal(n))\nprint(\" Jacobsthal - Lucas \u2581 number : \", Jacobsthal_Lucas(n))\n"}
{"text": "Find position of an element in a sorted array of infinite numbers ", "java": "class Test {\n  static int binarySearch(int arr[], int l, int r, int x) {\n    if (r >= l) {\n      int mid = l + (r - l) / 2;\n      if (arr[mid] == x) return mid;\n      if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x);\n      return binarySearch(arr, mid + 1, r, x);\n    }\n    return -1;\n  }\n\n  static int findPos(int arr[], int key) {\n    int l = 0, h = 1;\n    int val = arr[0];\n    while (val < key) {\n      l = h;\n      if (2 * h < arr.length - 1) h = 2 * h;\n      else h = arr.length - 1;\n      val = arr[h];\n    }\n    return binarySearch(arr, l, h, key);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = new int[] {3, 5, 7, 9, 10, 90, 100, 130, 140, 160, 170};\n    int ans = findPos(arr, 10);\n    if (ans == -1) System.out.println(\" Element \u2581 not \u2581 found \");\n    else System.out.println(\" Element \u2581 found \u2581 at \u2581 index \u2581 \" + ans);\n  }\n}\n", "python": "def binary_search(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) / 2\n        if arr[mid] == x:\n            return mid\n        if arr[mid] > x:\n            return binary_search(arr, l, mid - 1, x)\n        return binary_search(arr, mid + 1, r, x)\n    return -1\n\n\ndef findPos(a, key):\n    l, h, val = 0, 1, arr[0]\n    while val < key:\n        l = h\n        h = 2 * h\n        val = arr[h]\n    return binary_search(a, l, h, key)\n\n\narr = [3, 5, 7, 9, 10, 90, 100, 130, 140, 160, 170]\nans = findPos(arr, 10)\nif ans == -1:\n    print \" Element \u2581 not \u2581 found \"\nelse:\n    print \" Element \u2581 found \u2581 at \u2581 index \", ans\n"}
{"text": "Find the element that appears once in an array where every other element appears twice ", "java": "class MaxSum {\n  static int findSingle(int ar[], int ar_size) {\n    int res = ar[0];\n    for (int i = 1; i < ar_size; i++) res = res ^ ar[i];\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int ar[] = {2, 3, 5, 4, 5, 3, 4};\n    int n = ar.length;\n    System.out.println(\" Element \u2581 occurring \u2581 once \u2581 is \u2581 \" + findSingle(ar, n) + \" \u2581 \");\n  }\n}\n", "python": "def findSingle(ar, n):\n    res = ar[0]\n    for i in range(1, n):\n        res = res ^ ar[i]\n    return res\n\n\nar = [2, 3, 5, 4, 5, 3, 4]\nprint \" Element \u2581 occurring \u2581 once \u2581 is \", findSingle(ar, len(ar))\n"}
{"text": "Find the element that appears once in an array where every other element appears twice ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int singleNumber(int[] nums, int n) {\n    HashMap<Integer, Integer> m = new HashMap<>();\n    long sum1 = 0, sum2 = 0;\n    for (int i = 0; i < n; i++) {\n      if (!m.containsKey(nums[i])) {\n        sum1 += nums[i];\n        m.put(nums[i], 1);\n      }\n      sum2 += nums[i];\n    }\n    return (int) (2 * (sum1) - sum2);\n  }\n\n  public static void main(String args[]) {\n    int[] a = {2, 3, 5, 4, 5, 3, 4};\n    int n = 7;\n    System.out.println(singleNumber(a, n));\n    int[] b = {15, 18, 16, 18, 16, 15, 89};\n    System.out.println(singleNumber(b, n));\n  }\n}\n", "python": "def findSingle(ar, n):\n    res = ar[0]\n    for i in range(1, n):\n        res = res ^ ar[i]\n    return res\n\n\nar = [2, 3, 5, 4, 5, 3, 4]\nprint \" Element \u2581 occurring \u2581 once \u2581 is \", findSingle(ar, len(ar))\n"}
{"text": "Number of n ", "java": "import java.io.*;\n\nclass GFG {\n  static int nonDecNums(int n) {\n    int[][] a = new int[n + 1][10];\n    for (int i = 0; i <= 9; i++) a[0][i] = 1;\n    for (int i = 1; i <= n; i++) a[i][9] = 1;\n    for (int i = 1; i <= n; i++) for (int j = 8; j >= 0; j--) a[i][j] = a[i - 1][j] + a[i][j + 1];\n    return a[n][0];\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(\" Non - decreasing \u2581 digits \u2581 = \u2581 \" + nonDecNums(n));\n  }\n}\n", "python": "def fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\n\n\ndef nCr(n, r):\n    return fact(n) // ((fact(r) * fact(n - r)))\n\n\nn = 2\nprint(\" Number \u2581 of \u2581 Non - Decreasing \u2581 digits : \u2581 \", nCr(n + 9, 9))\n"}
{"text": "Count Balanced Binary Trees of Height h ", "java": "class GFG {\n  static final int MOD = 1000000007;\n\n  public static long countBT(int h) {\n    long[] dp = new long[h + 1];\n    dp[0] = 1;\n    dp[1] = 1;\n    for (int i = 2; i <= h; ++i)\n      dp[i] = (dp[i - 1] * ((2 * dp[i - 2]) % MOD + dp[i - 1]) % MOD) % MOD;\n    return dp[h];\n  }\n\n  public static void main(String[] args) {\n    int h = 3;\n    System.out.println(\n        \" No . \u2581 of \u2581 balanced \u2581 binary \u2581 trees \u2581 of \u2581 height \u2581 \" + h + \" \u2581 is : \u2581 \" + countBT(h));\n  }\n}\n", "python": "def countBT(h):\n    MOD = 1000000007\n    dp = [0 for i in range(h + 1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, h + 1):\n        dp[i] = (dp[i - 1] * ((2 * dp[i - 2]) % MOD + dp[i - 1]) % MOD) % MOD\n    return dp[h]\n\n\nh = 3\nprint(\n    \" No . \u2581 of \u2581 balanced \u2581 binary \u2581 trees \u2581 of \u2581 height \u2581 \"\n    + str(h)\n    + \" \u2581 is : \u2581 \"\n    + str(countBT(h))\n)\n"}
{"text": "Maximum sum subarray removing at most one element ", "java": "class GFG {\n  static int maxSumSubarrayRemovingOneEle(int arr[], int n) {\n    int fw[] = new int[n];\n    int bw[] = new int[n];\n    int cur_max = arr[0], max_so_far = arr[0];\n    fw[0] = arr[0];\n    for (int i = 1; i < n; i++) {\n      cur_max = Math.max(arr[i], cur_max + arr[i]);\n      max_so_far = Math.max(max_so_far, cur_max);\n      fw[i] = cur_max;\n    }\n    cur_max = max_so_far = bw[n - 1] = arr[n - 1];\n    for (int i = n - 2; i >= 0; i--) {\n      cur_max = Math.max(arr[i], cur_max + arr[i]);\n      max_so_far = Math.max(max_so_far, cur_max);\n      bw[i] = cur_max;\n    }\n    int fans = max_so_far;\n    for (int i = 1; i < n - 1; i++) fans = Math.max(fans, fw[i - 1] + bw[i + 1]);\n    return fans;\n  }\n\n  public static void main(String arg[]) {\n    int arr[] = {-2, -3, 4, -1, -2, 1, 5, -3};\n    int n = arr.length;\n    System.out.print(maxSumSubarrayRemovingOneEle(arr, n));\n  }\n}\n", "python": "def maxSumSubarrayRemovingOneEle(arr, n):\n    fw = [0 for k in range(n)]\n    bw = [0 for k in range(n)]\n    cur_max, max_so_far = arr[0], arr[0]\n    fw[0] = cur_max\n    for i in range(1, n):\n        cur_max = max(arr[i], cur_max + arr[i])\n        max_so_far = max(max_so_far, cur_max)\n        fw[i] = cur_max\n    cur_max = max_so_far = bw[n - 1] = arr[n - 1]\n    i = n - 2\n    while i >= 0:\n        cur_max = max(arr[i], cur_max + arr[i])\n        max_so_far = max(max_so_far, cur_max)\n        bw[i] = cur_max\n        i -= 1\n    fans = max_so_far\n    for i in range(1, n - 1):\n        fans = max(fans, fw[i - 1] + bw[i + 1])\n    return fans\n\n\narr = [-2, -3, 4, -1, -2, 1, 5, -3]\nn = len(arr)\nprint maxSumSubarrayRemovingOneEle(arr, n)\n"}
{"text": "Count even length binary sequences with same sum of first and second half bits ", "java": "import java.io.*;\n\nclass GFG {\n  static int countSeq(int n, int diff) {\n    if (Math.abs(diff) > n) return 0;\n    if (n == 1 && diff == 0) return 2;\n    if (n == 1 && Math.abs(diff) == 1) return 1;\n    int res = countSeq(n - 1, diff + 1) + 2 * countSeq(n - 1, diff) + countSeq(n - 1, diff - 1);\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(\" Count \u2581 of \u2581 sequences \u2581 is \u2581 \" + countSeq(2, 0));\n  }\n}\n", "python": "def countSeq(n):\n    nCr = 1\n    res = 1\n    for r in range(1, n + 1):\n        nCr = (nCr * (n + 1 - r)) / r\n        res += nCr * nCr\n    return res\n\n\nn = 2\nprint(\" Count \u2581 of \u2581 sequences \u2581 is \"),\nprint(int(countSeq(n)))\n"}
{"text": "Find Nth term of series 1 , 4 , 15 , 72 , 420. . . ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int factorial(int N) {\n    int fact = 1;\n    for (int i = 1; i <= N; i++) fact = fact * i;\n    return fact;\n  }\n\n  static int nthTerm(int N) {\n    return (factorial(N) * (N + 2) / 2);\n  }\n\n  public static void main(String args[]) {\n    int N = 6;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def factorial(N):\n    fact = 1\n    for i in range(1, N + 1):\n        fact = fact * i\n    return fact\n\n\ndef nthTerm(N):\n    return factorial(N) * (N + 2) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 6\n    print(nthTerm(N))\n"}
{"text": "Minimum increments by 1 or K required to convert a string into another given string ", "java": "import java.io.*;\n\nclass GFG {\n  public static void countOperations(String X, String Y, int K) {\n    char ch1[] = X.toCharArray();\n    char ch2[] = Y.toCharArray();\n    int count = 0;\n    for (int i = 0; i < X.length(); i++) {\n      int c = 0;\n      if (ch1[i] == ch2[i]) continue;\n      else if (ch1[i] < ch2[i]) {\n        if (((int) ch2[i] - (int) ch1[i]) >= K) {\n          c = ((int) ch2[i] - (int) ch1[i]) / K;\n        }\n        c += ((int) ch2[i] - (int) ch1[i]) % K;\n      } else {\n        int t = 90 - (int) ch1[i];\n        t += (int) ch2[i] - 65 + 1;\n        if (t >= K) c = t / K;\n        c += (t % K);\n      }\n      count += c;\n    }\n    System.out.print(count);\n  }\n\n  public static void main(String[] args) {\n    String X = \" ABCT \", Y = \" PBDI \";\n    int K = 6;\n    countOperations(X, Y, K);\n  }\n}\n", "python": "def countOperations(X, Y, K):\n    count = 0\n    for i in range(len(X)):\n        c = 0\n        if X[i] == Y[i]:\n            continue\n        elif X[i] < Y[i]:\n            if (ord(Y[i]) - ord(X[i])) >= K:\n                c = (ord(Y[i]) - ord(X[i])) // K\n            c += (ord(Y[i]) - ord(X[i])) % K\n        else:\n            t = 90 - ord(X[i])\n            t += ord(Y[i]) - 65 + 1\n            if t >= K:\n                c = t // K\n            c += t % K\n        count += c\n    print(count)\n\n\nX = \" ABCT \"\nY = \" PBDI \"\nK = 6\ncountOperations(X, Y, K)\n"}
{"text": "Binary Tree ", "java": "class Node {\n  int key;\n  Node left, right;\n\n  public Node(int item) {\n    key = item;\n    left = right = null;\n  }\n}\n", "python": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n    DEDENT\n"}
{"text": "Queries to update array elements in a range [ L , R ] to satisfy given conditions ", "java": "class GFG {\n  static void printArray(int arr[], int N) {\n    for (int i = 0; i < N; i++) {\n      System.out.print(arr[i] + \" \u2581 \");\n    }\n  }\n\n  static void modifyArray(int arr[], int N, int Q[][], int cntQuery) {\n    int arr1[] = new int[N + 2];\n    int arr2[] = new int[N + 2];\n    for (int i = 0; i < cntQuery; i++) {\n      int L = Q[i][0] + 1, R = Q[i][1] + 1;\n      arr1[L]++;\n      arr1[R + 1]--;\n      arr2[R + 1] -= R - L + 1;\n    }\n    for (int i = 1; i <= N; i++) arr1[i] += arr1[i - 1];\n    for (int i = 1; i <= N; i++) arr2[i] += arr2[i - 1] + arr1[i];\n    for (int i = 1; i <= N; i++) arr[i - 1] = arr2[i];\n    printArray(arr, N);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {0, 0, 0, 0};\n    int N = arr.length;\n    int Q[][] = {{1, 3}, {0, 1}};\n    int cntQuery = Q.length;\n    modifyArray(arr, N, Q, cntQuery);\n  }\n}\n", "python": "def printArray(arr, N):\n    print(*arr)\n\n\ndef modifyArray(arr, N, Q, cntQuery):\n    arr1 = [0 for i in range(N + 2)]\n    arr2 = [0 for i in range(N + 2)]\n    for i in range(cntQuery):\n        L = Q[i][0] + 1\n        R = Q[i][1] + 1\n        arr1[L] += 1\n        arr1[R + 1] -= 1\n        arr2[R + 1] -= R - L + 1\n    for i in range(1, N + 1):\n        arr1[i] += arr1[i - 1]\n    for i in range(1, N + 1):\n        arr2[i] += arr2[i - 1] + arr1[i]\n    for i in range(1, N + 1):\n        arr[i - 1] = arr2[i]\n    printArray(arr, N)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [0, 0, 0, 0]\n    N = len(arr)\n    Q = [[1, 3], [0, 1]]\n    cntQuery = len(Q)\n    modifyArray(arr, N, Q, cntQuery)\n"}
{"text": "Reduce a number N by at most D to maximize count of trailing nines ", "java": "class GFG {\n  static void maxNumTrailNine(int n, int d) {\n    int res = n;\n    int cntDigits = (int) Math.log10(n) + 1;\n    int p10 = 10;\n    for (int i = 1; i <= cntDigits; i++) {\n      if (n % p10 >= d) {\n        break;\n      } else {\n        res = n - n % p10 - 1;\n      }\n      p10 = p10 * 10;\n    }\n    System.out.println(res);\n  }\n\n  public static void main(String[] args) {\n    int n = 1025, d = 6;\n    maxNumTrailNine(n, d);\n  }\n}\n", "python": "from math import log10\n\n\ndef maxNumTrailNine(n, d):\n    res = n\n    cntDigits = int(log10(n) + 1)\n    p10 = 10\n    for i in range(1, cntDigits + 1):\n        if n % p10 >= d:\n            break\n        else:\n            res = n - n % p10 - 1\n        p10 = p10 * 10\n    print(res)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, d = 1025, 6\n    maxNumTrailNine(n, d)\n"}
{"text": "Split array into minimum number of subsets such that elements of all pairs are present in different subsets at least once ", "java": "import java.util.*;\n\nclass GFG {\n  static int MinimumNoOfWays(int arr[], int n) {\n    int mini_no_of_ways;\n    if (n % 2 == 0) {\n      mini_no_of_ways = n / 2;\n    } else {\n      mini_no_of_ways = n / 2 + 1;\n    }\n    return mini_no_of_ways;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 4, 2, 1, 5};\n    int N = arr.length;\n    System.out.print(MinimumNoOfWays(arr, N));\n  }\n}\n", "python": "def MinimumNoOfWays(arr, n):\n    min_no_of_ways = 0\n    if n % 2 == 0:\n        mini_no_of_ways = n // 2\n    else:\n        mini_no_of_ways = n // 2 + 1\n    return mini_no_of_ways\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 4, 1, 2, 5]\n    n = len(arr)\n    print(MinimumNoOfWays(arr, n))\n"}
{"text": "Count pairs of equal array elements remaining after every removal ", "java": "import java.util.*;\n\nclass GFG {\n  static void pairs_after_removing(int arr[], int N) {\n    int cntPairs = 0;\n    Map<Integer, Integer> mp = new HashMap<Integer, Integer>();\n    for (int i = 0; i < N; i++) {\n      mp.put(arr[i], mp.getOrDefault(arr[i], 0) + 1);\n    }\n    for (Map.Entry<Integer, Integer> element : mp.entrySet()) {\n      int i = element.getKey();\n      cntPairs += mp.get(i) * (mp.get(i) - 1) / 2;\n    }\n    for (int i = 0; i < N; i++) {\n      int pairs_after_arr_i_removed = cntPairs + 1 - mp.get(arr[i]);\n      System.out.print(pairs_after_arr_i_removed + \" \u2581 \");\n    }\n    return;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 3, 4, 3, 2};\n    int N = arr.length;\n    pairs_after_removing(arr, N);\n  }\n}\n", "python": "def pairs_after_removing(arr, N):\n    cntPairs = 0\n    mp = {}\n    for i in arr:\n        mp[i] = mp.get(i, 0) + 1\n    for element in mp:\n        i = element\n        cntPairs += mp[i] * (mp[i] - 1) // 2\n    for i in range(N):\n        pairs_after_arr_i_removed = cntPairs + 1 - mp[arr[i]]\n        print(pairs_after_arr_i_removed, end=\" \u2581 \")\n    return\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 3, 4, 3, 2]\n    N = len(arr)\n    pairs_after_removing(arr, N)\n"}
{"text": "Modify N by adding its smallest positive divisor exactly K times ", "java": "class GFG {\n  static int smallestDivisorGr1(int N) {\n    for (int i = 2; i <= Math.sqrt(N); i++) {\n      if (N % i == 0) {\n        return i;\n      }\n    }\n    return N;\n  }\n\n  static int findValOfNWithOperat(int N, int K) {\n    if (N % 2 == 0) {\n      N += K * 2;\n    } else {\n      N += smallestDivisorGr1(N) + (K - 1) * 2;\n    }\n    return N;\n  }\n\n  public static void main(String[] args) {\n    int N = 6, K = 4;\n    System.out.print(findValOfNWithOperat(N, K));\n  }\n}\n", "python": "def smallestDivisorGr1(N):\n    for i in range(sqrt(N)):\n        i += 1\n    if N % i == 0:\n        return i\n    return N\n\n\ndef findValOfNWithOperat(N, K):\n    if N % 2 == 0:\n        N += K * 2\n    else:\n        N += smallestDivisorGr1(N) + (K - 1) * 2\n    return N\n\n\nN = 6\nK = 4\nprint(findValOfNWithOperat(N, K))\n"}
{"text": "Partition array into minimum number of equal length subsets consisting of a single distinct value ", "java": "import java.util.*;\n\nclass GFG {\n  static int CntOfSubsetsByPartitioning(int arr[], int N) {\n    HashMap<Integer, Integer> freq = new HashMap<>();\n    for (int i = 0; i < N; i++) {\n      if (freq.containsKey(arr[i])) {\n        freq.put(arr[i], freq.get(arr[i]) + 1);\n      } else {\n        freq.put(arr[i], 1);\n      }\n    }\n    int freqGCD = 0;\n    for (Map.Entry<Integer, Integer> i : freq.entrySet()) {\n      freqGCD = __gcd(freqGCD, i.getValue());\n    }\n    return (N) / freqGCD;\n  }\n\n  static int __gcd(int a, int b) {\n    return b == 0 ? a : __gcd(b, a % b);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 4, 3, 2, 1};\n    int N = arr.length;\n    System.out.print(CntOfSubsetsByPartitioning(arr, N));\n  }\n}\n", "python": "from math import gcd\n\n\ndef CntOfSubsetsByPartitioning(arr, N):\n    freq = {}\n    for i in range(N):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n    freqGCD = 0\n    for i in freq:\n        freqGCD = gcd(freqGCD, freq[i])\n    return (N) // freqGCD\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4, 4, 3, 2, 1]\n    N = len(arr)\n    print(CntOfSubsetsByPartitioning(arr, N))\n"}
{"text": "Calculate Root Mean Kth power of all array elements ", "java": "class GFG {\n  static double nthRoot(int A, int N) {\n    double xPre = (Math.random() * 10) % 10;\n    double eps = 1e-3;\n    double delX = Integer.MAX_VALUE;\n    double xK = 0;\n    while (delX > eps) {\n      xK = ((N - 1.0) * xPre + (double) A / Math.pow(xPre, N - 1)) / (double) N;\n      delX = Math.abs(xK - xPre);\n      xPre = xK;\n    }\n    return xK;\n  }\n\n  static float RMNValue(int arr[], int n, int k) {\n    int Nth = 0;\n    float mean = 0, root = 0;\n    for (int i = 0; i < n; i++) {\n      Nth += Math.pow(arr[i], k);\n    }\n    mean = (Nth / (float) (n));\n    root = (float) nthRoot((int) mean, k);\n    return root;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {10, 4, 6, 8};\n    int N = arr.length;\n    int K = 3;\n    System.out.print(RMNValue(arr, N, K));\n  }\n}\n", "python": "import sys\nimport random\n\n\ndef nthRoot(A, N):\n    xPre = random.random() % 10\n    eps = 1e-3\n    delX = sys.maxsize\n    xK = 0\n    while delX > eps:\n        xK = ((N - 1.0) * xPre + A / pow(xPre, N - 1)) / N\n        delX = abs(xK - xPre)\n        xPre = xK\n    return xK\n\n\ndef RMNValue(arr, n, k):\n    Nth = 0\n    mean = 0.0\n    root = 0.0\n    for i in range(n):\n        Nth += pow(arr[i], k)\n    mean = Nth // (n)\n    root = nthRoot(mean, k)\n    return root\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [10, 4, 6, 8]\n    N = len(arr)\n    K = 3\n    print(RMNValue(arr, N, K))\n"}
{"text": "Check whether a given number is an ugly number or not ", "java": "class GFG {\n  static int isUgly(int n) {\n    if (n == 1) return 1;\n    if (n <= 0) return 0;\n    if (n % 2 == 0) {\n      return (isUgly(n / 2));\n    }\n    if (n % 3 == 0) {\n      return (isUgly(n / 3));\n    }\n    if (n % 5 == 0) {\n      return (isUgly(n / 5));\n    }\n    return 0;\n  }\n\n  public static void main(String args[]) {\n    int no = isUgly(14);\n    if (no == 1) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isUgly(n):\n    if n == 1:\n        return 1\n    if n <= 0:\n        return 0\n    if n % 2 == 0:\n        return isUgly(n // 2)\n    if n % 3 == 0:\n        return isUgly(n // 3)\n    if n % 5 == 0:\n        return isUgly(n // 5)\n    return 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    no = isUgly(14)\n    if no == 1:\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Maximum possible GCD for a pair of integers with sum N ", "java": "class GFG {\n  static int maxGCD(int N) {\n    for (int i = 2; i * i <= N; i++) {\n      if (N % i == 0) {\n        return N / i;\n      }\n    }\n    return 1;\n  }\n\n  public static void main(String[] args) {\n    int N = 33;\n    System.out.println(\" Maximum \u2581 Possible \u2581 GCD \u2581 \" + \" value \u2581 is \u2581 : \u2581 \" + maxGCD(N));\n  }\n}\n", "python": "def maxGCD(N):\n    i = 2\n    while i * i <= N:\n        if N % i == 0:\n            return N // i\n        i += 1\n    return 1\n\n\nN = 33\nprint(\" Maximum \u2581 Possible \u2581 GCD \u2581 value \u2581 is \u2581 : \u2581 \", maxGCD(N))\n"}
{"text": "Icosikaienneagonal Number ", "java": "class GFG {\n  static int icosikaienneagonalNum(int n) {\n    return (27 * n * n - 25 * n) / 2;\n  }\n\n  public static void main(String args[]) {\n    int n = 3;\n    System.out.print(icosikaienneagonalNum(n));\n  }\n}\n", "python": "def icosikaienneagonalNum(n):\n    return (27 * n * n - 25 * n) // 2\n\n\nN = 3\nprint(icosikaienneagonalNum(N))\n"}
{"text": "Sum of minimum value of x and y satisfying the equation ax + by = c ", "java": "\nclass GFG {\n  public static int x = 0, y = 0, x1 = 0, y1 = 0;\n  public static int x0 = 0, y0 = 0, g = 0;\n\n  public static int gcd(int a, int b) {\n    if (b == 0) {\n      x = 1;\n      y = 0;\n      return a;\n    }\n    int store_gcd = gcd(b, a % b);\n    x = y1;\n    y = x1 - y1 * (a / b);\n    return store_gcd;\n  }\n\n  public static int possible_solution(int a, int b, int c) {\n    g = gcd(Math.abs(a), Math.abs(b));\n    if (c % g != 0) {\n      return 0;\n    }\n    x0 *= c / g;\n    y0 *= c / g;\n    if (a < 0) x0 *= -1;\n    if (b < 0) y0 *= -1;\n    return 1;\n  }\n\n  public static void shift_solution(int a, int b, int shift_var) {\n    x += shift_var * b;\n    y -= shift_var * a;\n  }\n\n  public static int find_min_sum(int a, int b, int c) {\n    int x = 0, y = 0, g = 0;\n    if (possible_solution(a, b, c) == 0) return -1;\n    if (g != 0) {\n      a /= g;\n      b /= g;\n    }\n    int sign_a = a > 0 ? +1 : -1;\n    int sign_b = b > 0 ? +1 : -1;\n    shift_solution(a, b, -x / b);\n    if (x < 0) shift_solution(a, b, sign_b);\n    int minx1 = x;\n    shift_solution(a, b, y / a);\n    if (y < 0) shift_solution(a, b, -sign_a);\n    int minx2 = x;\n    if (minx2 > x) {\n      int temp = minx2;\n      minx2 = x;\n      x = temp;\n    }\n    int minx = Math.max(minx1, minx2);\n    if (minx > x) return -1;\n    int miny = (c - a * x) / b;\n    return (miny + minx);\n  }\n\n  public static void main(String[] args) {\n    int a = 2, b = 2, c = 0;\n    System.out.println(find_min_sum(a, b, c));\n  }\n}\n", "python": "x, y, x1, y1 = 0, 0, 0, 0\nx0, y0, g = 0, 0, 0\n\n\ndef gcd(a, b):\n    global x, y, x1, y1\n    if b == 0:\n        x = 1\n        y = 0\n        return a\n    store_gcd = gcd(b, a % b)\n    x = y1\n    y = x1 - y1 * (a // b)\n    return store_gcd\n\n\ndef possible_solution(a, b, c):\n    global x0, y0, g\n    g = gcd(abs(a), abs(b))\n    if c % g != 0:\n        return 0\n    x0 *= c // g\n    y0 *= c // g\n    if a < 0:\n        x0 *= -1\n    if b < 0:\n        y0 *= -1\n    return 1\n\n\ndef shift_solution(a, b, shift_var):\n    global x, y\n    x += shift_var * b\n    y -= shift_var * a\n\n\ndef find_min_sum(a, b, c):\n    global x, y, g\n    x, y, g = 0, 0, 0\n    if possible_solution(a, b, c) == 0:\n        return -1\n    if g != 0:\n        a //= g\n        b //= g\n    if a > 0:\n        sign_a = 1\n    else:\n        sign_a = -1\n    if b > 0:\n        sign_b = 1\n    else:\n        sign_b = -1\n    shift_solution(a, b, -x // b)\n    if x < 0:\n        shift_solution(a, b, sign_b)\n    minx1 = x\n    shift_solution(a, b, y // a)\n    if y < 0:\n        shift_solution(a, b, -sign_a)\n    minx2 = x\n    if minx2 > x:\n        temp = minx2\n        minx2 = x\n        x = temp\n    minx = max(minx1, minx2)\n    if minx > x:\n        return -1\n    miny = (c - a * x) // b\n    return miny + minx\n\n\na, b, c = 2, 2, 0\nprint(find_min_sum(a, b, c))\n"}
{"text": "Second hexagonal numbers ", "java": "class GFG {\n  static void findNthTerm(int n) {\n    System.out.print(n * (2 * n + 1));\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    findNthTerm(N);\n  }\n}\n", "python": "def findNthTerm(n):\n    print(n * (2 * n + 1))\n\n\nN = 4\nfindNthTerm(N)\n"}
{"text": "Apocalyptic Number ", "java": "class GFG {\n  static boolean isApocalyptic(int n) {\n    if (String.valueOf((Math.pow(2, n))).contains(\"666\")) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int N = 157;\n    if (isApocalyptic(N)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isApocalyptic(n):\n    if \"666\" in str(2 ** n):\n        return True\n    return False\n\n\nN = 157\nif isApocalyptic(157):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Sum of the products of same placed digits of two numbers ", "java": "class GFG {\n  static int sumOfProductOfDigits(int n1, int n2) {\n    int sum = 0;\n    while (n1 > 0 && n2 > 0) {\n      sum += ((n1 % 10) * (n2 % 10));\n      n1 /= 10;\n      n2 /= 10;\n    }\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int n1 = 25;\n    int n2 = 1548;\n    System.out.println(sumOfProductOfDigits(n1, n2));\n  }\n}\n", "python": "def sumOfProductOfDigits(n1, n2):\n    sum1 = 0\n    while n1 > 0 and n2 > 0:\n        sum1 += (n1 % 10) * (n2 % 10)\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return sum1\n\n\nn1 = 25\nn2 = 1548\nprint(sumOfProductOfDigits(n1, n2))\n"}
{"text": "Program to convert Degree to Radian ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static double Convert(double degree) {\n    double pi = 3.14159265359;\n    return (degree * (pi / 180));\n  }\n\n  public static void main(String[] args) {\n    double degree = 30;\n    double radian = Convert(degree);\n    System.out.printf(\" % .6f \", radian);\n  }\n}\n", "python": "def Convert(degree):\n    pi = 3.14159265359\n    return degree * (pi / 180)\n\n\ndegree = 30\nradian = Convert(degree)\nprint(radian)\n"}
{"text": "Program to check if N is a Myriagon Number ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isMyriagon(int N) {\n    double n = (9996 + Math.sqrt(79984 * N + 99920016)) / 19996;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 10000;\n    if (isMyriagon(N)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isMyriagon(N):\n    n = (9996 + math.sqrt(79984 * N + 99920016)) / 19996\n    return (n - int(n)) == 0\n\n\nn = 10000\nif isMyriagon(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to check if N is a Heptagonal Number ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static boolean isheptagonal(int N) {\n    double n = (3 + Math.sqrt(40 * N + 9)) / 10;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 7;\n    if (isheptagonal(N)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isheptagonal(N):\n    n = (3 + math.sqrt(40 * N + 9)) / 10\n    return (n - int(n)) == 0\n\n\nN = 7\nif isheptagonal(N):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to check if N is a Enneadecagonal Number ", "java": "class GFG {\n  static boolean isenneadecagonal(int N) {\n    float n = (float) (15 + Math.sqrt(136 * N + 225)) / 34;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 19;\n    if (isenneadecagonal(N)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isenneadecagonal(N):\n    n = (15 + math.sqrt(136 * N + 225)) / 34\n    return (n - int(n)) == 0\n\n\nN = 19\nif isenneadecagonal(N):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to check if N is a Centered Tridecagonal Number ", "java": "class GFG {\n  static boolean isCenteredtridecagonal(int N) {\n    float n = (float) ((13 + Math.sqrt(104 * N + 65)) / 26);\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 14;\n    if (isCenteredtridecagonal(N)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "import numpy as np\n\n\ndef isCenteredtridecagonal(N):\n    n = (13 + np.sqrt(104 * N + 65)) / 26\n    return (n - int(n)) == 0\n\n\nN = 14\nif isCenteredtridecagonal(N):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Find the Nth natural number which is not divisible by A ", "java": "class GFG {\n  static void findNum(int n, int k) {\n    int q = k / (n - 1);\n    int r = k % (n - 1);\n    int a = 0;\n    if (r != 0) a = (n * q) + r;\n    else a = (n * q) - 1;\n    System.out.println(a);\n  }\n\n  public static void main(String[] args) {\n    int A = 4;\n    int N = 6;\n    findNum(A, N);\n  }\n}\n", "python": "def findNum(n, k):\n    q = k // (n - 1)\n    r = k % (n - 1)\n    if r != 0:\n        a = (n * q) + r\n    else:\n        a = (n * q) - 1\n    print(a)\n\n\nA = 4\nN = 6\nfindNum(A, N)\n"}
{"text": "Minimum cost to merge numbers from 1 to N ", "java": "import java.util.*;\n\nclass GFG {\n  static int GetMinCost(int N) {\n    PriorityQueue<Integer> pq;\n    pq = new PriorityQueue<>();\n    for (int i = 1; i <= N; i++) {\n      pq.add(i);\n    }\n    int cost = 0;\n    while (pq.size() > 1) {\n      int mini = pq.remove();\n      int secondmini = pq.remove();\n      int current = mini * secondmini;\n      cost += current;\n      pq.add(current);\n    }\n    return cost;\n  }\n\n  public static void main(String args[]) {\n    int N = 5;\n    System.out.println(GetMinCost(N));\n  }\n}\n", "python": "def GetMinCost(N):\n    pq = []\n    for i in range(1, N + 1, 1):\n        pq.append(i)\n    pq.sort(reverse=False)\n    cost = 0\n    while len(pq) > 1:\n        mini = pq[0]\n        pq.remove(pq[0])\n        secondmini = pq[0]\n        pq.remove(pq[0])\n        current = mini * secondmini\n        cost += current\n        pq.append(current)\n        pq.sort(reverse=False)\n    return cost\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    print(GetMinCost(N))\n"}
{"text": "Probability of getting K heads in N coin tosses ", "java": "class GFG {\n  static int fact(int n) {\n    int res = 1;\n    for (int i = 2; i <= n; i++) res = res * i;\n    return res;\n  }\n\n  static double count_heads(int n, int r) {\n    double output;\n    output = fact(n) / (fact(r) * fact(n - r));\n    output = output / (Math.pow(2, n));\n    return output;\n  }\n\n  public static void main(String[] args) {\n    int n = 4, r = 3;\n    System.out.print(count_heads(n, r));\n  }\n}\n", "python": "def fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\n\n\ndef count_heads(n, r):\n    output = fact(n) / (fact(r) * fact(n - r))\n    output = output / (pow(2, n))\n    return output\n\n\nn = 4\nr = 3\nprint(count_heads(n, r))\n"}
{"text": "In how many ways the ball will come back to the first boy after N turns ", "java": "import java.util.*;\n\nclass GFG {\n  static int numSeq(int n) {\n    return (int) ((Math.pow(3, n) + 3 * Math.pow(-1, n)) / 4);\n  }\n\n  public static void main(String[] args) {\n    int N = 10;\n    System.out.printf(\" % d \", numSeq(N));\n  }\n}\n", "python": "def numSeq(n):\n    return (pow(3, n) + 3 * pow(-1, n)) // 4\n\n\nN = 10\nprint(numSeq(N))\n"}
{"text": "Check whether the exchange is possible or not ", "java": "class GFG {\n  static int __gcd(int a, int b) {\n    if (b == 0) return a;\n    return __gcd(b, a % b);\n  }\n\n  static boolean isPossible(int[] arr, int n, int p) {\n    int gcd = 0;\n    for (int i = 0; i < n; i++) gcd = __gcd(gcd, arr[i]);\n    if (p % gcd == 0) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {6, 9};\n    int n = arr.length;\n    int p = 3;\n    if (isPossible(arr, n, p)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "from math import gcd as __gcd\n\n\ndef isPossible(arr, n, p):\n    gcd = 0\n    for i in range(n):\n        gcd = __gcd(gcd, arr[i])\n    if p % gcd == 0:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [6, 9]\n    n = len(arr)\n    p = 3\n    if isPossible(arr, n, p):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Choose two elements from the given array such that their sum is not present in any of the arrays ", "java": "class GFG {\n  static int max_element(int a[], int n) {\n    int m = Integer.MIN_VALUE;\n    for (int i = 0; i < n; i++) m = Math.max(m, a[i]);\n    return m;\n  }\n\n  static void findNum(int a[], int n, int b[], int m) {\n    int x = max_element(a, n);\n    int y = max_element(b, m);\n    System.out.print(x + \" \u2581 \" + y);\n  }\n\n  public static void main(String args[]) {\n    int a[] = {3, 2, 2};\n    int n = a.length;\n    int b[] = {1, 5, 7, 7, 9};\n    int m = b.length;\n    findNum(a, n, b, m);\n  }\n}\n", "python": "def findNum(a, n, b, m):\n    x = max(a)\n    y = max(b)\n    print(x, y)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [3, 2, 2]\n    n = len(a)\n    b = [1, 5, 7, 7, 9]\n    m = len(b)\n    findNum(a, n, b, m)\n"}
{"text": "Find the final sequence of the array after performing given operations ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int[] solve(int[] arr, int n) {\n    int[] b = new int[n];\n    int p = 0;\n    for (int i = n - 1; i >= 0; i--) {\n      b[p] = arr[i--];\n      if (i >= 0) b[n - 1 - p] = arr[i];\n      p++;\n    }\n    return b;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 4};\n    int n = arr.length;\n    int[] b = solve(arr, n);\n    System.out.println(Arrays.toString(b));\n  }\n}\n", "python": "def solve(arr, n):\n    b = [0 for i in range(n)]\n    p = 0\n    i = n - 1\n    while i >= 0:\n        b[p] = arr[i]\n        i -= 1\n        if i >= 0:\n            b[n - 1 - p] = arr[i]\n        p += 1\n        i -= 1\n    return b\n\n\narr = [1, 2, 3, 4]\nn = len(arr)\nb = solve(arr, n)\nprint(b)\n"}
{"text": "Number of ways to arrange 2 * N persons on the two sides of a table with X and Y persons on opposite sides ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n  }\n\n  static int nCr(int n, int r) {\n    return factorial(n) / (factorial(n - r) * factorial(r));\n  }\n\n  static int NumberOfWays(int n, int x, int y) {\n    return nCr(2 * n - x - y, n - x) * factorial(n) * factorial(n);\n  }\n\n  public static void main(String[] args) throws java.lang.Exception {\n    int n = 5, x = 4, y = 2;\n    System.out.println(NumberOfWays(n, x, y));\n  }\n}\n", "python": "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\n\ndef nCr(n, r):\n    return factorial(n) / (factorial(n - r) * factorial(r))\n\n\ndef NumberOfWays(n, x, y):\n    return nCr(2 * n - x - y, n - x) * factorial(n) * factorial(n)\n\n\nn, x, y = 5, 4, 2\nprint(int(NumberOfWays(n, x, y)))\n"}
{"text": "Find the value of N when F ( N ) = f ( a ) + f ( b ) where a + b is the minimum possible and a * b = N ", "java": "import java.io.*;\n\nclass GFG {\n  static int getValueOfF(int n) {\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n    int cnt = 0;\n    while (n % 2 == 0) {\n      cnt += 1;\n      n /= 2;\n    }\n    return 2 * cnt;\n  }\n\n  public static void main(String[] args) {\n    int n = 20;\n    System.out.println(getValueOfF(n));\n  }\n}\n", "python": "def getValueOfF(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    cnt = 0\n    while n % 2 == 0:\n        cnt += 1\n        n /= 2\n    return 2 * cnt\n\n\nn = 20\nprint(getValueOfF(n))\n"}
{"text": "Find ( 1 ^ n + 2 ^ n + 3 ^ n + 4 ^ n ) mod 5 ", "java": "class GFG {\n  static int A_mod_B(String N, int a) {\n    int len = N.length();\n    int ans = 0;\n    for (int i = 0; i < len; i++) ans = (ans * 10 + (int) N.charAt(i) - '0') % a;\n    return ans % a;\n  }\n\n  static int findMod(String N) {\n    int mod = A_mod_B(N, 4);\n    int ans = (1 + (int) Math.pow(2, mod) + (int) Math.pow(3, mod) + (int) Math.pow(4, mod));\n    return (ans % 5);\n  }\n\n  public static void main(String args[]) {\n    String N = \"4\";\n    System.out.println(findMod(N));\n  }\n}\n", "python": "def A_mod_B(N, a):\n    Len = len(N)\n    ans = 0\n    for i in range(Len):\n        ans = (ans * 10 + int(N[i])) % a\n    return ans % a\n\n\ndef findMod(N):\n    mod = A_mod_B(N, 4)\n    ans = 1 + pow(2, mod) + pow(3, mod) + pow(4, mod)\n    return ans % 5\n\n\nN = \"4\"\nprint(findMod(N))\n"}
{"text": "Find amount of water wasted after filling the tank ", "java": "class GFG {\n  static double wastedWater(double V, double M, double N) {\n    double wasted_amt, amt_per_min, time_to_fill;\n    amt_per_min = M - N;\n    time_to_fill = V / amt_per_min;\n    wasted_amt = N * time_to_fill;\n    return wasted_amt;\n  }\n\n  public static void main(String[] args) {\n    double V, M, N;\n    V = 700;\n    M = 10;\n    N = 3;\n    System.out.println(wastedWater(V, M, N));\n    V = 1000;\n    M = 100;\n    N = 50;\n    System.out.println(wastedWater(V, M, N));\n  }\n}\n", "python": "def wastedWater(V, M, N):\n    amt_per_min = M - N\n    time_to_fill = V / amt_per_min\n    wasted_amt = N * time_to_fill\n    return wasted_amt\n\n\nV = 700\nM = 10\nN = 3\nprint(wastedWater(V, M, N))\nV = 1000\nM = 100\nN = 50\nprint(wastedWater(V, M, N))\n"}
{"text": "Smallest and Largest N ", "java": "class GFG {\n  static void nDigitPerfectCubes(int n) {\n    int smallest = (int) Math.pow(Math.ceil(Math.cbrt(Math.pow(10, (n - 1)))), 3);\n    System.out.print(smallest + \" \u2581 \");\n    int largest = (int) Math.pow(Math.ceil(Math.cbrt(Math.pow(10, (n)))) - 1, 3);\n    System.out.print(largest);\n  }\n\n  public static void main(String args[]) {\n    int n = 3;\n    nDigitPerfectCubes(n);\n  }\n}\n", "python": "from math import ceil\n\n\ndef nDigitPerfectCubes(n):\n    print(pow(ceil((pow(10, (n - 1))) ** (1 / 3)), 3), end=\" \u2581 \")\n    print(pow(ceil((pow(10, (n))) ** (1 / 3)) - 1, 3))\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    nDigitPerfectCubes(n)\n"}
{"text": "Count numbers which are divisible by all the numbers from 2 to 10 ", "java": "class GFG {\n  static int countNumbers(int n) {\n    return (n / 2520);\n  }\n\n  public static void main(String args[]) {\n    int n = 3000;\n    System.out.println(countNumbers(n));\n  }\n}\n", "python": "def countNumbers(n):\n    return n // 2520\n\n\nn = 3000\nprint(countNumbers(n))\n"}
{"text": "Program to calculate the area between two Concentric Circles ", "java": "import java.io.*;\n\nclass GFG {\n  static double calculateArea(int x, int y) {\n    double pi = 3.1415926536;\n    double arx = pi * x * x;\n    double ary = pi * y * y;\n    return arx - ary;\n  }\n\n  public static void main(String[] args) {\n    int x = 2;\n    int y = 1;\n    System.out.println(calculateArea(x, y));\n  }\n}\n", "python": "def calculateArea(x, y):\n    pi = 3.1415926536\n    arx = pi * x * x\n    ary = pi * y * y\n    return arx - ary\n\n\nx = 2\ny = 1\nprint(calculateArea(x, y))\n"}
{"text": "Count of pairs of ( i , j ) such that ( ( n % i ) % j ) % n is maximized ", "java": "class GFG {\n  public static int countPairs(int n) {\n    int num = ((n / 2) + 1);\n    int max = n % num;\n    int count = 0;\n    for (int i = 1; i <= n; i++) {\n      for (int j = 1; j <= n; j++) {\n        int val = ((n % i) % j) % n;\n        if (val == max) count++;\n      }\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(countPairs(n));\n  }\n}\n", "python": "def countPairs(n):\n    if n == 2:\n        return 4\n    num = (n // 2) + 1\n    max = n % num\n    count = n - max\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\nprint(countPairs(n))\n"}
{"text": "Find nth term of the series 5 2 13 41 ", "java": "\nclass GFG {\n  static long nthTermOfTheSeries(int n) {\n    long nthTerm;\n    if (n % 2 == 0) nthTerm = (long) Math.pow(n - 1, 2) + n;\n    else nthTerm = (long) Math.pow(n + 1, 2) + n;\n    return nthTerm;\n  }\n\n  public static void main(String[] args) {\n    int n;\n    n = 8;\n    System.out.println(nthTermOfTheSeries(n));\n    n = 12;\n    System.out.println(nthTermOfTheSeries(n));\n    n = 102;\n    System.out.println(nthTermOfTheSeries(n));\n    n = 999;\n    System.out.println(nthTermOfTheSeries(n));\n    n = 9999;\n    System.out.println(nthTermOfTheSeries(n));\n  }\n}\n", "python": "from math import pow\n\n\ndef nthTermOfTheSeries(n):\n    if n % 2 == 0:\n        nthTerm = pow(n - 1, 2) + n\n    else:\n        nthTerm = pow(n + 1, 2) + n\n    return nthTerm\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 8\n    print(int(nthTermOfTheSeries(n)))\n    n = 12\n    print(int(nthTermOfTheSeries(n)))\n    n = 102\n    print(int(nthTermOfTheSeries(n)))\n    n = 999\n    print(int(nthTermOfTheSeries(n)))\n    n = 9999\n    print(int(nthTermOfTheSeries(n)))\n"}
{"text": "Find cost price from given selling price and profit or loss percentage ", "java": "import java.util.*;\n\nclass solution {\n  static float CPwithProfit(int sellingPrice, int profit) {\n    float costPrice;\n    costPrice = (sellingPrice * 100) / (100 + profit);\n    return costPrice;\n  }\n\n  static float CPwithLoss(int sellingPrice, int loss) {\n    float costPrice;\n    costPrice = (sellingPrice * 100) / (100 - loss);\n    return costPrice;\n  }\n\n  public static void main(String args[]) {\n    int SP, profit, loss;\n    SP = 1020;\n    profit = 20;\n    System.out.println(\" Cost \u2581 Price \u2581 = \u2581 \" + CPwithProfit(SP, profit));\n    SP = 900;\n    loss = 10;\n    System.out.println(\" Cost \u2581 Price \u2581 = \u2581 \" + CPwithLoss(SP, loss));\n    SP = 42039;\n    profit = 8;\n    System.out.println(\" Cost \u2581 Price \u2581 = \u2581 \" + CPwithProfit(SP, profit));\n  }\n}\n", "python": "def CPwithProfit(sellingPrice, profit):\n    costPrice = (sellingPrice * 100.0) / (100 + profit)\n    return costPrice\n\n\ndef CPwithLoss(sellingPrice, loss):\n    costPrice = (sellingPrice * 100.0) / (100 - loss)\n    return costPrice\n\n\nif __name__ == \" _ _ main _ _ \":\n    SP = 1020\n    profit = 20\n    print(\" Cost \u2581 Price \u2581 = \", CPwithProfit(SP, profit))\n    SP = 900\n    loss = 10\n    print(\" Cost \u2581 Price \u2581 = \", CPwithLoss(SP, loss))\n    SP = 42039\n    profit = 8\n    print(\" Cost \u2581 Price \u2581 = \", int(CPwithProfit(SP, profit)))\n"}
{"text": "Program to find the Nth term of the series 0 , 3 / 1 , 8 / 3 , 15 / 5. . ... ... ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static void NthTerm(int n) {\n    int numerator = ((int) Math.pow(n, 2)) - 1;\n    int denomeanator = 2 * n - 3;\n    System.out.println(numerator + \" / \" + denomeanator);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    NthTerm(n);\n  }\n}\n", "python": "def Nthterm(n):\n    numerator = n ** 2 - 1\n    denomenator = 2 * n - 3\n    print(numerator, \" / \", denomenator)\n\n\nn = 3\nNthterm(n)\n"}
{"text": "Sum of each element raised to ( prime ", "java": "public class GFG {\n  public static int getSum(int arr[], int p) {\n    return arr.length;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {5, 6, 8};\n    int p = 7;\n    System.out.print(getSum(arr, p));\n  }\n}\n", "python": "def getSum(arr, p):\n    return len(arr)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [5, 6, 8]\n    p = 7\n    print(getSum(arr, p))\n"}
{"text": "Count numbers upto N which are both perfect square and perfect cube ", "java": "public class GFG {\n  static int SquareCube(long N) {\n    int cnt = 0, i = 1;\n    while ((int) (Math.pow(i, 6)) <= N) {\n      ++cnt;\n      ++i;\n    }\n    return cnt;\n  }\n\n  public static void main(String[] args) {\n    long N = 100000;\n    System.out.println(SquareCube(N));\n  }\n}\n", "python": "def SquareCube(N):\n    cnt, i = 0, 1\n    while i ** 6 <= N:\n        cnt += 1\n        i += 1\n    return cnt\n\n\nN = 100000\nprint(SquareCube(N))\n"}
{"text": "Sum of integers upto N with given unit digit ", "java": "class Solution {\n  static long getSum(int n, int d) {\n    long sum = 0;\n    while (d <= n) {\n      sum += d;\n      d += 10;\n    }\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int n = 30, d = 3;\n    System.out.print(getSum(n, d));\n  }\n}\n", "python": "def getSum(n, d):\n    sum = 0\n    while d <= n:\n        sum += d\n        d += 10\n    return sum\n\n\nn = 30\nd = 3\nprint(getSum(n, d))\n"}
{"text": "Logarithm ", "java": "class Gfg1 {\n  static int Log2n(int n) {\n    return (n > 1) ? 1 + Log2n(n / 2) : 0;\n  }\n\n  public static void main(String args[]) {\n    int n = 32;\n    System.out.println(Log2n(n));\n  }\n}\n", "python": "def Log2n(n):\n    return 1 + Log2n(n / 2) if (n > 1) else 0\n\n\nn = 32\nprint(Log2n(n))\n"}
{"text": "Time taken by two persons to meet on a circular track ", "java": "public class GFG {\n  static int startingPoint(int Length, int Speed1, int Speed2) {\n    int result1 = 0, result2 = 0;\n    int time1 = Length / Speed1;\n    int time2 = Length / Speed2;\n    result1 = __gcd(time1, time2);\n    result2 = time1 * time2 / (result1);\n    return result2;\n  }\n\n  static int __gcd(int a, int b) {\n    if (b == 0) {\n      return a;\n    }\n    return __gcd(b, a % b);\n  }\n\n  static float firstTime(int Length, int Speed1, int Speed2) {\n    float result = 0;\n    int relativeSpeed = Math.abs(Speed1 - Speed2);\n    result = ((float) Length / relativeSpeed);\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int L = 30, S1 = 5, S2 = 2;\n    float first_Time = firstTime(L, S1, S2);\n    int starting_Point = startingPoint(L, S1, S2);\n    System.out.println(\" Met \u2581 first \u2581 time \u2581 after \u2581 \" + first_Time + \" \u2581 hrs \");\n    System.out.println(\" Met \u2581 at \u2581 starting \u2581 point \u2581 after \u2581 \" + starting_Point + \" \u2581 hrs \");\n  }\n}\n", "python": "from math import gcd\n\n\ndef startingPoint(Length, Speed1, Speed2):\n    result1 = 0\n    result2 = 0\n    time1 = Length // Speed1\n    time2 = Length // Speed2\n    result1 = gcd(time1, time2)\n    result2 = time1 * time2 // (result1)\n    return result2\n\n\ndef firstTime(Length, Speed1, Speed2):\n    result = 0\n    relativeSpeed = abs(Speed1 - Speed2)\n    result = Length / relativeSpeed\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    L = 30\n    S1 = 5\n    S2 = 2\n    first_Time = firstTime(L, S1, S2)\n    starting_Point = startingPoint(L, S1, S2)\n    print(\" Met \u2581 first \u2581 time \u2581 after \", first_Time, \" hrs \")\n    print(\" Met \u2581 at \u2581 starting \u2581 point \u2581 after \", starting_Point, \" hrs \")\n"}
{"text": "Minimum number of cuts required to make circle segments equal sized ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int findgcd(int a, int b) {\n    if (b == 0) return a;\n    return findgcd(b, a % b);\n  }\n\n  static int minimumCuts(int a[], int n) {\n    Arrays.sort(a);\n    int gcd = a[1] - a[0];\n    int s = gcd;\n    for (int i = 2; i < n; i++) {\n      gcd = findgcd(gcd, a[i] - a[i - 1]);\n      s += a[i] - a[i - 1];\n    }\n    if (360 - s > 0) gcd = findgcd(gcd, 360 - s);\n    return (360 / gcd) - n;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = new int[] {30, 60, 180};\n    int n = arr.length;\n    System.out.println(minimumCuts(arr, n));\n  }\n}\n", "python": "import math\n\n\ndef minimumCuts(a, n):\n    a.sort()\n    gcd = a[1] - a[0]\n    s = gcd\n    for i in range(2, n):\n        gcd = math.gcd(gcd, a[i] - a[i - 1])\n        s += a[i] - a[i - 1]\n    if 360 - s > 0:\n        gcd = math.gcd(gcd, 360 - s)\n    return (360 // gcd) - n\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [30, 60, 180]\n    n = len(arr)\n    print(minimumCuts(arr, n))\n"}
{"text": "Find Selling Price from given Profit Percentage and Cost ", "java": "import java.util.*;\n\nclass solution {\n  static float SellingPrice(float CP, float PP) {\n    float P_decimal = 1 + (PP / 100);\n    float res = P_decimal * CP;\n    return res;\n  }\n\n  public static void main(String args[]) {\n    float C = 720, P = 13;\n    System.out.println(SellingPrice(C, P));\n  }\n}\n", "python": "def SellingPrice(CP, PP):\n    Pdecimal = 1 + (PP / 100)\n    res = Pdecimal * CP\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    C = 720\n    P = 13\n    print(SellingPrice(C, P))\n"}
{"text": "Find amount to be added to achieve target ratio in a given mixture ", "java": "public class GFG {\n  static float findAmount(float X, float W, float Y) {\n    return (X * (Y - W)) / (100 - Y);\n  }\n\n  public static void main(String args[]) {\n    float X = 100, W = 50, Y = 60;\n    System.out.println(\" Water \u2581 to \u2581 be \u2581 added \u2581 = \u2581 \" + findAmount(X, W, Y));\n  }\n}\n", "python": "def findAmount(X, W, Y):\n    return X * (Y - W) / (100 - Y)\n\n\nX = 100\nW = 50\nY = 60\nprint(\" Water \u2581 to \u2581 be \u2581 added \", findAmount(X, W, Y))\n"}
{"text": "Check if there is any pair in a given range with GCD is divisible by k ", "java": "class GFG {\n  public boolean Check_is_possible(int l, int r, int k) {\n    int count = 0;\n    for (int i = l; i <= r; i++) {\n      if (i % k == 0) {\n        count++;\n      }\n    }\n    return (count > 1);\n  }\n\n  public static void main(String[] args) {\n    GFG g = new GFG();\n    int l = 4, r = 12;\n    int k = 5;\n    if (g.Check_is_possible(l, r, k)) {\n      System.out.println(\" YES \");\n    } else {\n      System.out.println(\" NO \");\n    }\n  }\n}\n", "python": "def Check_is_possible(l, r, k):\n    div_count = (r // k) - (l // k)\n    if l % k == 0:\n        div_count += 1\n    return div_count > 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    l, r, k = 30, 70, 10\n    if Check_is_possible(l, r, k) == True:\n        print(\" YES \")\n    else:\n        print(\" NO \")\n    DEDENT\n"}
{"text": "Sum of first N natural numbers which are divisible by 2 and 7 ", "java": "import java.io.*;\n\nclass GFG {\n  public static int sum(int N) {\n    int S1, S2, S3;\n    S1 = ((N / 2)) * (2 * 2 + (N / 2 - 1) * 2) / 2;\n    S2 = ((N / 7)) * (2 * 7 + (N / 7 - 1) * 7) / 2;\n    S3 = ((N / 14)) * (2 * 14 + (N / 14 - 1) * 14) / 2;\n    return S1 + S2 - S3;\n  }\n\n  public static void main(String[] args) {\n    int N = 20;\n    System.out.println(sum(N));\n  }\n}\n", "python": "def sum(N):\n    S1 = ((N // 2)) * (2 * 2 + (N // 2 - 1) * 2) // 2\n    S2 = ((N // 7)) * (2 * 7 + (N // 7 - 1) * 7) // 2\n    S3 = ((N // 14)) * (2 * 14 + (N // 14 - 1) * 14) // 2\n    return S1 + S2 - S3\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 20\n    print(sum(N))\n"}
{"text": "Puzzle ", "java": "import java.util.*;\n\nclass solution {\n  public static void main(String arr[]) {\n    int a = 5;\n    int AC = a;\n    int CE = 2 * a;\n    double shortestDistace = Math.sqrt(AC * AC + CE * CE);\n    System.out.println(shortestDistace);\n  }\n}\n", "python": "def countSquares(n):\n    return (n * (n + 1) / 2) * (2 * n + 1) / 3\n\n\nn = 4\nprint(\" Count \u2581 of \u2581 squares \u2581 is \u2581 \", countSquares(n))\n"}
{"text": "Find Sum of Series 1 ^ 2 ", "java": "import java.util.*;\n\nclass GFG {\n  static int sum_of_series(int n) {\n    int result = 0;\n    if (n % 2 == 0) {\n      result = -(n * (n + 1)) / 2;\n    } else {\n      result = (n * (n + 1)) / 2;\n    }\n    return result;\n  }\n\n  public static void main(String args[]) {\n    int n = 3;\n    System.out.println(sum_of_series(n));\n    n = 10;\n    System.out.println(sum_of_series(n));\n  }\n}\n", "python": "def sum_of_series(n):\n    result = 0\n    if n % 2 == 0:\n        result = -(n * (n + 1)) // 2\n    else:\n        result = (n * (n + 1)) // 2\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(sum_of_series(n))\n    n = 10\n    print(sum_of_series(n))\n"}
{"text": "Implementation of Wilson Primality test ", "java": "public class Main {\n  public static long fact(int p) {\n    if (p <= 1) return 1;\n    return p * fact(p - 1);\n  }\n\n  public static long isPrime(int p) {\n    if (p == 4) return 0;\n    return (fact(p >> 1) % p);\n  }\n\n  public static void main(String[] args) {\n    if (isPrime(127) == 0) {\n      System.out.println(0);\n    } else {\n      System.out.println(1);\n    }\n  }\n}\n", "python": "def fact(p):\n    if p <= 1:\n        return 1\n    return p * fact(p - 1)\n\n\ndef isPrime(p):\n    if p == 4:\n        return 0\n    return fact(p >> 1) % p\n\n\nif isPrime(127) == 0:\n    print(0)\nelse:\n    print(1)\n"}
{"text": "Find the total Number of Digits in ( N ! ) N ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public double CountDigits(int n) {\n    if (n == 1) return 1;\n    double sum = 0;\n    for (int i = 2; i <= n; ++i) {\n      sum += ((double) Math.log(i) / (double) Math.log(10));\n    }\n    sum *= n;\n    return Math.ceil(sum);\n  }\n\n  public static void main(String args[]) {\n    GFG g = new GFG();\n    int N = 5;\n    System.out.println(g.CountDigits(N));\n  }\n}\n", "python": "import math as ma\n\n\ndef CountDigits(n):\n    if n == 1:\n        return 1\n    sum = 0\n    for i in range(2, n + 1):\n        sum += ma.log(i, 10)\n    sum *= n\n    return ma.ceil(sum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    print(CountDigits(N))\n"}
{"text": "Program to find the Nth number of the series 2 , 10 , 24 , 44 , 70. ... . ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static long NthTerm(long n) {\n    long x = (3 * n * n) % 1000000009;\n    return (x - n + 1000000009) % 1000000009;\n  }\n\n  public static void main(String args[]) {\n    long N = 4;\n    System.out.println(NthTerm(N));\n  }\n}\n", "python": "def NthTerm(N):\n    x = (3 * N * N) % 1000000009\n    return (x - N + 1000000009) % 1000000009\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    print(NthTerm(N))\n"}
{"text": "Program to find the common ratio of three numbers ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int __gcd(int a, int b) {\n    return b == 0 ? a : __gcd(b, a % b);\n  }\n\n  static void solveProportion(int a, int b1, int b2, int c) {\n    int A = a * b2;\n    int B = b1 * b2;\n    int C = b1 * c;\n    int gcd = __gcd(__gcd(A, B), C);\n    System.out.print(A / gcd + \" : \" + B / gcd + \" : \" + C / gcd);\n  }\n\n  public static void main(String args[]) {\n    int a, b1, b2, c;\n    a = 3;\n    b1 = 4;\n    b2 = 8;\n    c = 9;\n    solveProportion(a, b1, b2, c);\n  }\n}\n", "python": "import math\n\n\ndef solveProportion(a, b1, b2, c):\n    A = a * b2\n    B = b1 * b2\n    C = b1 * c\n    gcd1 = math.gcd(math.gcd(A, B), C)\n    print(str(A // gcd1) + \" : \" + str(B // gcd1) + \" : \" + str(C // gcd1))\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 3\n    b1 = 4\n    b2 = 8\n    c = 9\n    solveProportion(a, b1, b2, c)\n"}
{"text": "Calculate volume and surface area of a cone ", "java": "class GFG {\n  static float pi = 3.14159f;\n\n  public static float volume(float r, float h) {\n    return (float) 1 / 3 * pi * h * r * r;\n  }\n\n  public static float surface_area(float r, float s) {\n    return pi * r * s + pi * r * r;\n  }\n\n  public static void main(String args[]) {\n    float radius = 5;\n    float slant_height = 13;\n    float height = 12;\n    float vol, sur_area;\n    System.out.print(\" Volume \u2581 Of \u2581 Cone \u2581 : \u2581 \");\n    System.out.println(volume(radius, height));\n    System.out.print(\" Surface \u2581 Area \u2581 Of \u2581 Cone \u2581 : \u2581 \");\n    System.out.println(surface_area(radius, slant_height));\n  }\n}\n", "python": "import math\n\npi = math.pi\n\n\ndef volume(r, h):\n    return (1 / 3) * pi * r * r * h\n\n\ndef surfacearea(r, s):\n    return pi * r * s + pi * r * r\n\n\nradius = float(5)\nheight = float(12)\nslat_height = float(13)\nprint(\" Volume \u2581 Of \u2581 Cone \u2581 : \u2581 \", volume(radius, height))\nprint(\" Surface \u2581 Area \u2581 Of \u2581 Cone \u2581 : \u2581 \", surfacearea(radius, slat_height))\n"}
{"text": "Program to find the Nth term of the series 0 , 14 , 40 , 78 , 124 , ... ", "java": "import java.util.*;\n\nclass solution {\n  static int nthTerm(int n) {\n    return 6 * (int) Math.pow(n, 2) - 4 * n - 2;\n  }\n\n  public static void main(String arr[]) {\n    int N = 4;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(n):\n    return int(6 * pow(n, 2) - 4 * n - 2)\n\n\nN = 4\nprint(nthTerm(N))\n"}
{"text": "Program to find the Nth term of series 5 , 10 , 17 , 26 , 37 , 50 , 65 , 82 , ... ", "java": "import java.util.*;\n\nclass solution {\n  static int nthTerm(int n) {\n    return (int) Math.pow(n, 2) + 2 * n + 2;\n  }\n\n  public static void main(String arr[]) {\n    int N = 4;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "from math import *\n\n\ndef nthTerm(n):\n    return pow(n, 2) + 2 * n + 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    print(nthTerm(N))\n"}
{"text": "Find nth term of a given recurrence relation ", "java": "import java.util.*;\n\nclass solution {\n  static int sum(int n) {\n    int ans = (n * (n - 1)) / 2;\n    return ans;\n  }\n\n  public static void main(String arr[]) {\n    int n = 5;\n    System.out.println(sum(n));\n  }\n}\n", "python": "def sum(n):\n    ans = (n * (n - 1)) / 2\n    return ans\n\n\nn = 5\nprint(int(sum(n)))\n"}
{"text": "Program to find Nth term of the series 3 , 12 , 29 , 54 , 87 , ... ", "java": "import java.util.*;\n\nclass solution {\n  static long getNthTerm(long N) {\n    return 4 * (long) Math.pow(N, 2) - 3 * N + 2;\n  }\n\n  public static void main(String arr[]) {\n    long N = 10;\n    System.out.println(getNthTerm(N));\n  }\n}\n", "python": "def getNthTerm(N):\n    return 4 * pow(N, 2) - 3 * N + 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 10\n    print(getNthTerm(N))\n"}
{"text": "Find sum of product of number in given series ", "java": "public class GFG {\n  static long MOD = 1000000007;\n\n  static long power(long x, long y, long p) {\n    long res = 1;\n    x = x % p;\n    while (y > 0) {\n      if ((y & 1) != 0) res = (res * x) % p;\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  static long sumProd(long n, long t) {\n    long dino = power(t + 1, MOD - 2, MOD);\n    long ans = 1;\n    for (long i = n + t + 1; i > n; --i) ans = (ans % MOD * i % MOD) % MOD;\n    long tfact = 1;\n    for (int i = 1; i <= t; ++i) tfact = (tfact * i) % MOD;\n    ans = ans * dino - tfact + MOD;\n    return ans % MOD;\n  }\n\n  public static void main(String[] args) {\n    long n = 3, t = 2;\n    System.out.println(sumProd(n, t));\n  }\n}\n", "python": "MOD = 1000000007\n\n\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        x = (x * x) % p\n    return res\n\n\ndef sumProd(n, t):\n    dino = power(t + 1, MOD - 2, MOD)\n    ans = 1\n    for i in range(n + t + 1, n, -1):\n        ans = (ans % MOD * i % MOD) % MOD\n    tfact = 1\n    for i in range(1, t + 1):\n        tfact = (tfact * i) % MOD\n    ans = ans * dino - tfact + MOD\n    return ans % MOD\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, t = 3, 2\n    print(sumProd(n, t))\n"}
{"text": "Find the sum of series 3 , 7 , 13 , 21 , 31. ... ", "java": "import java.util.*;\n\nclass GFG {\n  static int calculateSum(int n) {\n    return (n * ((int) Math.pow(n, 2) + 3 * n + 5)) / 3;\n  }\n\n  public static void main(String arr[]) {\n    int n = 25;\n    System.out.println(calculateSum(n));\n  }\n}\n", "python": "def findSum(n):\n    return (n * (pow(n, 2) + 3 * n + 5)) / 3\n\n\nn = 25\nprint(int(findSum(n)))\n"}
{"text": "Minimum Players required to win the game ", "java": "public class TYU {\n  static long mod = 1000000007;\n\n  static long power(long a, long b) {\n    long res = 1;\n    while (b != 0) {\n      if ((b & 1) != 0) {\n        res *= a;\n        res %= mod;\n      }\n      b /= 2;\n      a *= a;\n      a %= mod;\n    }\n    return res;\n  }\n\n  static long minPlayer(long n, long k) {\n    long num = ((power(k, n) - 1) + mod) % mod;\n    long den = (power(k - 1, mod - 2) + mod) % mod;\n    long ans = (((num * den) % mod) * k) % mod;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    long n = 3, k = 3;\n    System.out.println(minPlayer(n, k));\n  }\n}\n", "python": "mod = 1000000007\n\n\ndef power(a, b):\n    res = 1\n    while b:\n        if b & 1:\n            res *= a\n            res %= mod\n        b //= 2\n        a *= a\n        a %= mod\n    return res\n\n\ndef minPlayer(n, k):\n    num = ((power(k, n) - 1) + mod) % mod\n    den = (power(k - 1, mod - 2) + mod) % mod\n    ans = (((num * den) % mod) * k) % mod\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, k = 3, 3\n    print(minPlayer(n, k))\n"}
{"text": "Permutations to arrange N persons around a circular table ", "java": "import java.io.*;\n\nclass GFG {\n  static int Circular(int n) {\n    int Result = 1;\n    while (n > 0) {\n      Result = Result * n;\n      n--;\n    }\n    return Result;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(Circular(n - 1));\n  }\n}\n", "python": "def Circular(n):\n    Result = 1\n    while n > 0:\n        Result = Result * n\n        n -= 1\n    return Result\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(Circular(n - 1))\n"}
{"text": "Minimum time required to complete a work by N persons together ", "java": "import java.io.*;\n\nclass GFG {\n  static double calTime(double arr[], int n) {\n    double work = 0;\n    for (int i = 0; i < n; i++) work += 1 / arr[i];\n    return 1 / work;\n  }\n\n  public static void main(String[] args) {\n    double arr[] = {6.0, 3.0, 4.0};\n    int n = arr.length;\n    System.out.println(calTime(arr, n) + \" \u2581 Hours \");\n  }\n}\n", "python": "def calTime(arr, n):\n    work = 0\n    for i in range(n):\n        work += 1 / arr[i]\n    return 1 / work\n\n\narr = [6.0, 3.0, 4.0]\nn = len(arr)\nprint(calTime(arr, n), \" Hours \")\n"}
{"text": "Sum of all elements up to Nth row in a Pascal triangle ", "java": "import java.io.*;\n\nclass GFG {\n  static long calculateSum(int n) {\n    long sum = 0;\n    sum = 1 << n;\n    return (sum - 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(\" Sum \u2581 of \u2581 all \u2581 elements : \" + calculateSum(n));\n  }\n}\n", "python": "def calculateSum(n):\n    sum = 0\n    for row in range(n):\n        sum = sum + (1 << row)\n    return sum\n\n\nn = 10\nprint(\" Sum \u2581 of \u2581 all \u2581 elements : \", calculateSum(n))\n"}
{"text": "Divide two integers without using multiplication , division and mod operator ", "java": "import java.io.*;\n\nclass GFG {\n  static void Divide(int a, int b) {\n    long dividend = (long) a;\n    long divisor = (long) b;\n    long sign = (dividend < 0) ^ (divisor < 0) ? -1 : 1;\n    dividend = Math.abs(dividend);\n    divisor = Math.abs(divisor);\n    if (divisor == 0) {\n      System.out.println(\" Cannot \u2581 Divide \u2581 by \u2581 0\");\n      return;\n    }\n    if (dividend == 0) {\n      System.out.println(a + \" \u2581 / \u2581 \" + b + \" \u2581 is \u2581 equal \u2581 to \u2581 : \u2581 \" + 0);\n      return;\n    }\n    if (divisor == 1) {\n      System.out.println(a + \" \u2581 / \u2581 \" + b + \" \u2581 is \u2581 equal \u2581 to \u2581 : \u2581 \" + sign * dividend);\n      return;\n    }\n    System.out.println(\n        a\n            + \" \u2581 / \u2581 \"\n            + b\n            + \" \u2581 is \u2581 equal \u2581 to \u2581 : \u2581 \"\n            + Math.floor(sign * (Math.exp(Math.log(dividend) - Math.log(divisor)))));\n  }\n\n  public static void main(String[] args) {\n    int a = 10, b = 5;\n    Divide(a, b);\n    a = 49;\n    b = -7;\n    Divide(a, b);\n  }\n}\n", "python": "import math\n\n\ndef Divide(a, b):\n    dividend = a\n    divisor = b\n    sign = -1 if ((dividend < 0) ^ (divisor < 0)) else 1\n    dividend = abs(dividend)\n    divisor = abs(divisor)\n    if divisor == 0:\n        print(\" Cannot \u2581 Divide \u2581 by \u2581 0\")\n    if dividend == 0:\n        print(a, \" / \", b, \" is \u2581 equal \u2581 to \u2581 : \", 0)\n    if divisor == 1:\n        print(a, \" / \", b, \" is \u2581 equal \u2581 to \u2581 : \", (sign * dividend))\n    print(\n        a,\n        \" / \",\n        b,\n        \" is \u2581 equal \u2581 to \u2581 : \",\n        math.floor(sign * math.exp(math.log(dividend) - math.log(divisor))),\n    )\n\n\na = 10\nb = 5\nDivide(a, b)\na = 49\nb = -7\nDivide(a, b)\n"}
{"text": "Check if given number is a power of d where d is a power of 2 ", "java": "class GFG {\n  static int Log2n(int n) {\n    return (n > 1) ? 1 + Log2n(n / 2) : 0;\n  }\n\n  static boolean isPowerOfd(int n, int d) {\n    int count = 0;\n    if (n > 0 && (n & (n - 1)) == 0) {\n      while (n > 1) {\n        n >>= 1;\n        count += 1;\n      }\n      return (count % (Log2n(d)) == 0);\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 64, d = 8;\n    if (isPowerOfd(n, d)) System.out.println(n + \" \u2581 is \u2581 a \u2581 power \u2581 of \u2581 \" + d);\n    else System.out.println(n + \" \u2581 is \u2581 not \u2581 a \u2581 power \u2581 of \u2581 \" + d);\n  }\n}\n", "python": "def Log2n(n):\n    return (1 + Log2n(n / 2)) if (n > 1) else 0\n\n\ndef isPowerOfd(n, d):\n    count = 0\n    if n and (n & (n - 1)) == 0:\n        while n > 1:\n            n >>= 1\n            count += 1\n        return count % (Log2n(d)) == 0\n    return False\n\n\nn = 64\nd = 8\nif isPowerOfd(n, d):\n    print(n, \" is \u2581 a \u2581 power \u2581 of \", d)\nelse:\n    print(n, \" is \u2581 not \u2581 a \u2581 power \u2581 of \", d)\n"}
{"text": "Octahedral Number ", "java": "import java.io.*;\n\nclass GFG {\n  static int octahedral_num(int n) {\n    return n * (2 * n * n + 1) / 3;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.print(n + \" th \u2581 Octahedral \" + \" \u2581 number : \u2581 \");\n    System.out.println(octahedral_num(n));\n  }\n}\n", "python": "def octahedral_num(n):\n    return n * (2 * n * n + 1) // 3\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(n, \" th \u2581 Octahedral \u2581 number : \u2581 \", octahedral_num(n))\n"}
{"text": "Centered tetrahedral number ", "java": "import java.io.*;\n\nclass GFG {\n  static int centeredTetrahedralNumber(int n) {\n    return (2 * n + 1) * (n * n + n + 3) / 3;\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    System.out.println(centeredTetrahedralNumber(n));\n  }\n}\n", "python": "def centeredTetrahedralNumber(n):\n    return (2 * n + 1) * (n * n + n + 3) // 3\n\n\nn = 6\nprint(centeredTetrahedralNumber(n))\n"}
{"text": "Swapping four variables without temporary variable ", "java": "class GFG {\n  static void swap(int a, int b, int c, int d) {\n    a = a + b;\n    b = a - b;\n    a = a - b;\n    b = b + c;\n    c = b - c;\n    b = b - c;\n    c = c + d;\n    d = c - d;\n    c = c - d;\n    System.out.println(\" values \u2581 after \u2581 \" + \" swapping \u2581 are \u2581 : \u2581 \");\n    System.out.println(\" a \u2581 = \u2581 \" + a);\n    System.out.println(\" b \u2581 = \u2581 \" + b);\n    System.out.println(\" c \u2581 = \u2581 \" + c);\n    System.out.println(\" d \u2581 = \u2581 \" + d);\n  }\n\n  public static void main(String[] args) {\n    int a = 1;\n    int b = 2;\n    int c = 3;\n    int d = 4;\n    System.out.println(\" values \u2581 before \u2581 \" + \" swapping \u2581 are \u2581 : \u2581 \");\n    System.out.println(\" a \u2581 = \u2581 \" + a);\n    System.out.println(\" b \u2581 = \u2581 \" + b);\n    System.out.println(\" c \u2581 = \u2581 \" + c);\n    System.out.println(\" d \u2581 = \u2581 \" + d);\n    System.out.println(\" \");\n    swap(a, b, c, d);\n  }\n}\n", "python": "def swap(a, b, c, d):\n    a = a + b\n    b = a - b\n    a = a - b\n    b = b + c\n    c = b - c\n    b = b - c\n    c = c + d\n    d = c - d\n    c = c - d\n    print(\" values \u2581 after \u2581 swapping \u2581 are \u2581 : \u2581 \")\n    print(\" a \u2581 = \u2581 \", a)\n    print(\" b \u2581 = \u2581 \", b)\n    print(\" c \u2581 = \u2581 \", c)\n    print(\" d \u2581 = \u2581 \", d)\n\n\na = 1\nb = 2\nc = 3\nd = 4\nprint(\" values \u2581 before \u2581 swapping \u2581 are \u2581 : \u2581 \")\nprint(\" a \u2581 = \u2581 \", a)\nprint(\" b \u2581 = \u2581 \", b)\nprint(\" c \u2581 = \u2581 \", c)\nprint(\" d \u2581 = \u2581 \", d)\nprint(\" \")\nswap(a, b, c, d)\n"}
{"text": "Sum of first n natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int seriesSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) sum += i * (i + 1) / 2;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(seriesSum(n));\n  }\n}\n", "python": "def seriessum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * (i + 1) / 2\n    return sum\n\n\nn = 4\nprint(seriessum(n))\n"}
{"text": "Centered triangular number ", "java": "import java.io.*;\n\nclass GFG {\n  static int Centered_Triangular_num(int n) {\n    return (3 * n * n + 3 * n + 2) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(Centered_Triangular_num(n));\n    n = 12;\n    System.out.println(Centered_Triangular_num(n));\n  }\n}\n", "python": "def Centered_Triangular_num(n):\n    return (3 * n * n + 3 * n + 2) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(Centered_Triangular_num(n))\n    n = 12\n    print(Centered_Triangular_num(n))\n"}
{"text": "First N natural can be divided into two sets with given difference and co ", "java": "class GFG {\n  static int GCD(int a, int b) {\n    return b == 0 ? a : GCD(b, a % b);\n  }\n\n  static boolean isSplittable(int n, int m) {\n    int total_sum = (n * (n + 1)) / 2;\n    int sum_s1 = (total_sum + m) / 2;\n    int sum_s2 = total_sum - sum_s1;\n    if (total_sum < m) return false;\n    if (sum_s1 + sum_s2 == total_sum && sum_s1 - sum_s2 == m) return (GCD(sum_s1, sum_s2) == 1);\n    return false;\n  }\n\n  public static void main(String args[]) {\n    int n = 5, m = 7;\n    if (isSplittable(n, m)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def __gcd(a, b):\n    return a if (b == 0) else __gcd(b, a % b)\n\n\ndef isSplittable(n, m):\n    total_sum = (int)((n * (n + 1)) / 2)\n    sum_s1 = int((total_sum + m) / 2)\n    sum_s2 = total_sum - sum_s1\n    if total_sum < m:\n        return False\n    if sum_s1 + sum_s2 == total_sum and sum_s1 - sum_s2 == m:\n        return __gcd(sum_s1, sum_s2) == 1\n    return False\n\n\nn = 5\nm = 7\nif isSplittable(n, m):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Making zero array by decrementing pairs of adjacent ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isPossibleToZero(int a[], int n) {\n    int num = 0;\n    for (int i = 0; i < n; i++) num = num * 10 + a[i];\n    return (num % 11 == 0);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {0, 1, 1, 0};\n    int n = arr.length;\n    if (isPossibleToZero(arr, n)) System.out.println(\" YES \");\n    else System.out.println(\" NO \");\n  }\n}\n", "python": "def isPossibleToZero(a, n):\n    num = 0\n    for i in range(n):\n        num = num * 10 + a[i]\n    return num % 11 == 0\n\n\narr = [0, 1, 1, 0]\nn = len(arr)\nif isPossibleToZero(arr, n):\n    print(\" YES \")\nelse:\n    print(\" NO \")\n"}
{"text": "Program to calculate value of nCr ", "java": "class GFG {\n  static int nCr(int n, int r) {\n    return fact(n) / (fact(r) * fact(n - r));\n  }\n\n  static int fact(int n) {\n    int res = 1;\n    for (int i = 2; i <= n; i++) res = res * i;\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int n = 5, r = 3;\n    System.out.println(nCr(n, r));\n  }\n}\n", "python": "def nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\n\n\nn = 5\nr = 3\nprint(int(nCr(n, r)))\n"}
{"text": "Program to print the sum of the given nth term ", "java": "import java.io.*;\nimport java.math.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.regex.*;\n\nclass GFG {\n  static int summingSeries(long n) {\n    return (int) Math.pow(n, 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 100;\n    System.out.println(\" The \u2581 sum \u2581 of \u2581 n \u2581 term \u2581 is : \u2581 \" + summingSeries(n));\n  }\n}\n", "python": "import math\n\n\ndef summingSeries(n):\n    return math.pow(n, 2)\n\n\nn = 100\nprint(\" The \u2581 sum \u2581 of \u2581 n \u2581 term \u2581 is : \u2581 \", summingSeries(n))\n"}
{"text": "Tetrahedral Numbers ", "java": "class GFG {\n  static int tetrahedralNumber(int n) {\n    return (n * (n + 1) * (n + 2)) / 6;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(tetrahedralNumber(n));\n  }\n}\n", "python": "def tetrahedralNumber(n):\n    return (n * (n + 1) * (n + 2)) / 6\n\n\ndef tetrahedralNumber(n):\n    return (n * (n + 1) * (n + 2)) / 6\n\n\nn = 5\nprint(tetrahedralNumber(n))\n"}
{"text": "Sum of the series 1.2 . 3 + 2.3 . 4 + ... + n ( n + 1 ) ( n + 2 ) ", "java": "import java.io.*;\nimport java.math.*;\n\nclass GFG {\n  static int sumofseries(int n) {\n    return (n * (n + 1) * (n + 2) * (n + 3) / 4);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(sumofseries(3));\n  }\n}\n", "python": "def sumofseries(n):\n    return int(n * (n + 1) * (n + 2) * (n + 3) / 4)\n\n\nprint(sumofseries(3))\n"}
{"text": "Check if given number is perfect square ", "java": "class GFG {\n  static boolean isPerfectSquare(int x) {\n    if (x >= 0) {\n      int sr = (int) Math.sqrt(x);\n      return ((sr * sr) == x);\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int x = 2502;\n    if (isPerfectSquare(x)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "import math\n\n\ndef isPerfectSquare(x):\n    if x >= 0:\n        sr = math.sqrt(x)\n        return (sr * sr) == float(x)\n    return false\n\n\nx = 2502\nif isPerfectSquare(x):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Ludic Numbers ", "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Ludic {\n  public static List<Integer> getLudic(int n) {\n    List<Integer> ludics = new ArrayList<Integer>(n);\n    for (int i = 1; i <= n; i++) ludics.add(i);\n    for (int index = 1; index < ludics.size(); index++) {\n      int first_ludic = ludics.get(index);\n      int remove_index = index + first_ludic;\n      while (remove_index < ludics.size()) {\n        ludics.remove(remove_index);\n        remove_index = remove_index + first_ludic - 1;\n      }\n    }\n    return ludics;\n  }\n\n  public static void main(String[] srgs) {\n    int n = 25;\n    System.out.println(getLudic(n));\n  }\n}\n", "python": "def getLudic(n):\n    ludics = []\n    for i in range(1, n + 1):\n        ludics.append(i)\n    index = 1\n    while index != len(ludics):\n        first_ludic = ludics[index]\n        remove_index = index + first_ludic\n        while remove_index < len(ludics):\n            ludics.remove(ludics[remove_index])\n            remove_index = remove_index + first_ludic - 1\n        index += 1\n    return ludics\n\n\nn = 25\nprint(getLudic(n))\n"}
{"text": "Program to compare two fractions ", "java": "import java.io.*;\nimport java.util.*;\n\nclass Fraction {\n  int num, den;\n\n  Fraction(int n, int d) {\n    num = n;\n    den = d;\n  }\n\n  static Fraction maxFraction(Fraction first, Fraction sec) {\n    int a = first.num;\n    int b = first.den;\n    int c = sec.num;\n    int d = sec.den;\n    int Y = a * d - b * c;\n    return (Y > 0) ? first : sec;\n  }\n\n  public static void main(String[] args) {\n    Fraction first = new Fraction(3, 2);\n    Fraction sec = new Fraction(3, 4);\n    Fraction res = maxFraction(first, sec);\n    System.out.println(res.num + \" / \" + res.den);\n  }\n}\n", "python": "def maxFraction(first, sec):\n    a = first[0]\n    b = first[1]\n    c = sec[0]\n    d = sec[1]\n    Y = a * d - b * c\n    return first if Y else sec\n\n\nfirst = (3, 2)\nsec = (3, 4)\nres = maxFraction(first, sec)\nprint(str(res[0]) + \" / \" + str(res[1]))\n"}
{"text": "Sum of fourth powers of the first n natural numbers ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static long fourthPowerSum(int n) {\n    long sum = 0;\n    for (int i = 1; i <= n; i++) sum = sum + (i * i * i * i);\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    System.out.println(fourthPowerSum(n));\n  }\n}\n", "python": "import math\n\n\ndef fourthPowerSum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i * i * i * i)\n    return sum\n\n\nn = 6\nprint(fourthPowerSum(n))\n"}
{"text": "Sum of fourth powers of the first n natural numbers ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static long fourthPowerSum(int n) {\n    return ((6 * n * n * n * n * n) + (15 * n * n * n * n) + (10 * n * n * n) - n) / 30;\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    System.out.println(fourthPowerSum(n));\n  }\n}\n", "python": "import math\n\n\ndef fourthPowerSum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i * i * i * i)\n    return sum\n\n\nn = 6\nprint(fourthPowerSum(n))\n"}
{"text": "Find unit digit of x raised to power y ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int unitnumber(int x, int y) {\n    x = x % 10;\n    if (y != 0) y = y % 4 + 4;\n    return (((int) (Math.pow(x, y))) % 10);\n  }\n\n  public static void main(String[] args) {\n    int x = 133, y = 5;\n    System.out.println(unitnumber(x, y));\n  }\n}\n", "python": "import math\n\n\ndef unitnumber(x, y):\n    x = x % 10\n    if y != 0:\n        y = y % 4 + 4\n    return ((int)(math.pow(x, y))) % 10\n\n\nx = 133\ny = 5\nprint(unitnumber(x, y))\n"}
{"text": "Average of Squares of Natural Numbers ", "java": "import java.io.*;\n\npublic class GFG {\n  static float AvgofSquareN(int n) {\n    return (float) ((n + 1) * (2 * n + 1)) / 6;\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(AvgofSquareN(n));\n  }\n}\n", "python": "def AvgofSquareN(n):\n    return ((n + 1) * (2 * n + 1)) / 6\n\n\nn = 2\nprint(AvgofSquareN(n))\n"}
{"text": "Sum of the Series 1 / ( 1 * 2 ) + 1 / ( 2 * 3 ) + 1 / ( 3 * 4 ) + 1 / ( 4 * 5 ) + . . . . . ", "java": "class demo {\n  public static double sumOfTheSeries(int n) {\n    double sum = 0.0;\n    for (int i = 1; i <= n; i++) sum += 1.0 / (i * (i + 1));\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int n = 10;\n    System.out.println(sumOfTheSeries(n));\n  }\n}\n", "python": "def sumOfTheSeries(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += 1.0 / (i * (i + 1))\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    ans = sumOfTheSeries(10)\n    print(round(ans, 6))\n"}
{"text": "Sum of series ( n / 1 ) + ( n / 2 ) + ( n / 3 ) + ( n / 4 ) + ... ... . + ( n / n ) ", "java": "import java.util.*;\n\nclass GFG {\n  static long sum(long n) {\n    long root = (long) Math.sqrt(n);\n    long ans = 0;\n    for (int i = 1; i <= root; i++) ans += n / i;\n    ans = 2 * ans - (root * root);\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    long n = 35;\n    System.out.println(sum(n));\n  }\n}\n", "python": "import math\n\n\ndef sum(n):\n    root = (int)(math.sqrt(n))\n    ans = 0\n    for i in range(1, root + 1):\n        ans = ans + n // i\n    ans = 2 * ans - (root * root)\n    return ans\n\n\nn = 35\nprint(sum(n))\n"}
{"text": "Sum of the series 2 + ( 2 + 4 ) + ( 2 + 4 + 6 ) + ( 2 + 4 + 6 + 8 ) + \u00e2 \u20ac\u00a6 \u00e2 \u20ac\u00a6 + ( 2 + 4 + 6 + 8 + \u00e2 \u20ac\u00a6 . + 2 n ) ", "java": "class GFG {\n  static int sumOfTheSeries(int n) {\n    int sum_n = (n * (n + 1) / 2);\n    int sum_sq_n = (n * (n + 1) / 2) * (2 * n + 1) / 3;\n    return (sum_n + sum_sq_n);\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.printf(\" Sum \u2581 = \u2581 % d \", sumOfTheSeries(n));\n  }\n}\n", "python": "def sumOfTheSeries(n):\n    sum_n = int((n * (n + 1) / 2))\n    sum_sq_n = int((n * (n + 1) / 2) * (2 * n + 1) / 3)\n    return sum_n + sum_sq_n\n\n\nn = 5\nans = sumOfTheSeries(n)\nprint(ans)\n"}
{"text": "Program to find sum of series 1 + 2 + 2 + 3 + 3 + 3 + . . . + n ", "java": "public class GfG {\n  static int sumOfSeries(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) for (int j = 1; j <= i; j++) sum = sum + i;\n    return sum;\n  }\n\n  public static void main(String s[]) {\n    int n = 10;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "import math\n\n\ndef sumOfSeries(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i * i\n    return sum\n\n\nn = 10\nprint(sumOfSeries(n))\n"}
{"text": "N ", "java": "import java.io.*;\n\nclass GFG {\n  static double polite(double n) {\n    n += 1;\n    double base = 2;\n    return n + (Math.log((n + (Math.log(n) / Math.log(base))))) / Math.log(base);\n  }\n\n  public static void main(String[] args) {\n    double n = 7;\n    System.out.println((int) polite(n));\n  }\n}\n", "python": "def nthElement(a, b, n):\n    seq = []\n    for i in range(1, n + 1):\n        seq.append(a * i)\n    seq.sort()\n    i = 1\n    k = n\n    while i <= n and k > 0:\n        try:\n            z = seq.index(b * i)\n        except ValueError:\n            seq.append(b * i)\n            seq.sort()\n            k -= 1\n        i += 1\n    return seq[n - 1]\n\n\na = 3\nb = 5\nn = 5\nprint(nthElement(a, b, n))\n"}
{"text": "Sum of first n odd numbers in O ( 1 ) Complexity ", "java": "import java.util.*;\n\nclass Odd {\n  public static int oddSum(int n) {\n    int sum = 0, curr = 1;\n    for (int i = 0; i < n; i++) {\n      sum += curr;\n      curr += 2;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 20;\n    System.out.println(\" \u2581 Sum \u2581 of \u2581 first \u2581 \" + n + \" \u2581 Odd \u2581 Numbers \u2581 is : \u2581 \" + oddSum(n));\n  }\n}\n", "python": "def oddSum(n):\n    sum = 0\n    curr = 1\n    i = 0\n    while i < n:\n        sum = sum + curr\n        curr = curr + 2\n        i = i + 1\n    return sum\n\n\nn = 20\nprint(\" \u2581 Sum \u2581 of \u2581 first \", n, \" Odd \u2581 Numbers \u2581 is : \u2581 \", oddSum(n))\n"}
{"text": "Sum of first n odd numbers in O ( 1 ) Complexity ", "java": "import java.util.*;\n\nclass Odd {\n  public static int oddSum(int n) {\n    return (n * n);\n  }\n\n  public static void main(String[] args) {\n    int n = 20;\n    System.out.println(\" \u2581 Sum \u2581 of \u2581 first \u2581 \" + n + \" \u2581 Odd \u2581 Numbers \u2581 is : \u2581 \" + oddSum(n));\n  }\n}\n", "python": "def oddSum(n):\n    sum = 0\n    curr = 1\n    i = 0\n    while i < n:\n        sum = sum + curr\n        curr = curr + 2\n        i = i + 1\n    return sum\n\n\nn = 20\nprint(\" \u2581 Sum \u2581 of \u2581 first \", n, \" Odd \u2581 Numbers \u2581 is : \u2581 \", oddSum(n))\n"}
{"text": "Sum of the Series 1 + x / 1 + x ^ 2 / 2 + x ^ 3 / 3 + . . + x ^ n / n ", "java": "\nclass GFG {\n  static double sum(int x, int n) {\n    double i, total = 1.0;\n    for (i = 1; i <= n; i++) total = total + (Math.pow(x, i) / i);\n    return total;\n  }\n\n  public static void main(String[] args) {\n    int x = 2;\n    int n = 5;\n    System.out.printf(\" % .2f \", sum(x, n));\n  }\n}\n", "python": "def SUM(x, n):\n    total = 1\n    for i in range(1, n + 1):\n        total = total + ((x ** i) / i)\n    return total\n\n\nx = 2\nn = 5\ns = SUM(x, n)\nprint(round(s, 2))\n"}
{"text": "Find if a number is part of AP whose first element and difference are given ", "java": "class GFG {\n  static boolean isMember(int a, int d, int x) {\n    if (d == 0) return (x == a);\n    return ((x - a) % d == 0 && (x - a) / d >= 0);\n  }\n\n  public static void main(String args[]) {\n    int a = 1, x = 7, d = 3;\n    if (isMember(a, d, x)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isMember(a, d, x):\n    if d == 0:\n        return x == a\n    return (x - a) % d == 0 and int((x - a) / d) >= 0\n\n\na = 1\nx = 7\nd = 3\nif isMember(a, d, x):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Check whether a number can be represented by sum of two squares ", "java": "class GFG {\n  static boolean sumSquare(int n) {\n    for (long i = 1; i * i <= n; i++)\n      for (long j = 1; j * j <= n; j++)\n        if (i * i + j * j == n) {\n          System.out.println(i + \" ^ 2 \u2581 + \u2581 \" + j + \" ^ 2\");\n          return true;\n        }\n    return false;\n  }\n\n  public static void main(String args[]) {\n    int n = 25;\n    if (sumSquare(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def sumSquare(n):\n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if i * i + j * j == n:\n                print(i, \" ^ 2 \u2581 + \u2581 \", j, \" ^ 2\")\n                return True\n            j = j + 1\n        i = i + 1\n    return False\n\n\nn = 25\nif sumSquare(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Sum of digits of a given number to a given power ", "java": "public class base_power {\n  static int calculate(int n, int power) {\n    int sum = 0;\n    int bp = (int) Math.pow(n, power);\n    while (bp != 0) {\n      int d = bp % 10;\n      sum += d;\n      bp /= 10;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    int power = 4;\n    System.out.println(calculate(n, power));\n  }\n}\n", "python": "def calculate(n, power):\n    return sum([int(i) for i in str(pow(n, power))])\n\n\nn = 5\npower = 4\nprint(calculate(n, power))\n"}
{"text": "Leonardo Number ", "java": "import java.io.*;\n\nclass GFG {\n  static int leonardo(int n) {\n    int dp[] = new int[n + 1];\n    dp[0] = dp[1] = 1;\n    for (int i = 2; i <= n; i++) dp[i] = dp[i - 1] + dp[i - 2] + 1;\n    return dp[n];\n  }\n\n  public static void main(String[] args) {\n    System.out.println(leonardo(3));\n  }\n}\n", "python": "def leonardo(n):\n    dp = []\n    dp.append(1)\n    dp.append(1)\n    for i in range(2, n + 1):\n        dp.append(dp[i - 1] + dp[i - 2] + 1)\n    return dp[n]\n\n\nprint(leonardo(3))\n"}
{"text": "Program for sum of arithmetic series ", "java": "class GFG {\n  static float sumOfAP(float a, float d, float n) {\n    float sum = (n / 2) * (2 * a + (n - 1) * d);\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    float n = 20;\n    float a = 2.5f, d = 1.5f;\n    System.out.print(sumOfAP(a, d, n));\n  }\n}\n", "python": "def sumOfAP(a, d, n):\n    sum = (n / 2) * (2 * a + (n - 1) * d)\n    return sum\n\n\nn = 20\na = 2.5\nd = 1.5\nprint(sumOfAP(a, d, n))\n"}
{"text": "Program for cube sum of first n natural numbers ", "java": "import java.util.*;\n\nclass GFG {\n  public static int sumOfSeries(int n) {\n    int x;\n    if (n % 2 == 0) x = (n / 2) * (n + 1);\n    else x = ((n + 1) / 2) * n;\n    return x * x;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "def sumOfSeries(n):\n    x = 0\n    if n % 2 == 0:\n        x = (n / 2) * (n + 1)\n    else:\n        x = ((n + 1) / 2) * n\n    return (int)(x * x)\n\n\nn = 5\nprint(sumOfSeries(n))\n"}
{"text": "Maximum value of ", "java": "class GFG {\n  static final int MAX = 10;\n\n  static int findValue(int arr[], int n) {\n    int ans = 0;\n    for (int i = 0; i < n; i++)\n      for (int j = 0; j < n; j++) ans = Math.max(ans, Math.abs(arr[i] - arr[j]) + Math.abs(i - j));\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 1};\n    int n = arr.length;\n    System.out.println(findValue(arr, n));\n  }\n}\n", "python": "def maxValue(n):\n    if n == 1:\n        return 0\n    return (n * n // 2) - 1\n\n\nn = 4\nprint(maxValue(n))\n"}
{"text": "Maximum value of ", "java": "import java.io.*;\n\nclass GFG {\n  static int findValue(int arr[], int n) {\n    int a[] = new int[n];\n    int b[] = new int[n];\n    int tmp;\n    for (int i = 0; i < n; i++) {\n      a[i] = (arr[i] + i);\n      b[i] = (arr[i] - i);\n    }\n    int x = a[0], y = a[0];\n    for (int i = 0; i < n; i++) {\n      if (a[i] > x) x = a[i];\n      if (a[i] < y) y = a[i];\n    }\n    int ans1 = (x - y);\n    x = b[0];\n    y = b[0];\n    for (int i = 0; i < n; i++) {\n      if (b[i] > x) x = b[i];\n      if (b[i] < y) y = b[i];\n    }\n    int ans2 = (x - y);\n    return Math.max(ans1, ans2);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 1};\n    int n = arr.length;\n    System.out.println(findValue(arr, n));\n  }\n}\n", "python": "def maxValue(n):\n    if n == 1:\n        return 0\n    return (n * n // 2) - 1\n\n\nn = 4\nprint(maxValue(n))\n"}
{"text": "Geometric mean ( Two Methods ) ", "java": "import java.math.*;\n\nclass GFG {\n  static float geometricMean(int arr[], int n) {\n    float product = 1;\n    for (int i = 0; i < n; i++) product = product * arr[i];\n    float gm = (float) Math.pow(product, (float) 1 / n);\n    return gm;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8};\n    int n = arr.length;\n    System.out.println(geometricMean(arr, n));\n  }\n}\n", "python": "import math\n\n\ndef geometricMean(arr, n):\n    product = 1\n    for i in range(0, n):\n        product = product * arr[i]\n    gm = (float)(math.pow(product, (1 / n)))\n    return (float)(gm)\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nn = len(arr)\nprint(\" { 0 : . 6f } \".format(geometricMean(arr, n)))\n"}
{"text": "Check whether a number can be expressed as a product of single digit numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static int SIZE = 4;\n\n  static boolean productOfSingelDgt(int n) {\n    if (n >= 0 && n <= 9) return true;\n    int[] prime = {2, 3, 5, 7};\n    for (int i = 0; i < SIZE && n > 1; i++) while (n % prime[i] == 0) n = n / prime[i];\n    return (n == 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 24;\n    if (productOfSingelDgt(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "SIZE = 4\n\n\ndef productOfSingelDgt(n):\n    if n >= 0 and n <= 9:\n        return True\n    prime = [2, 3, 5, 7]\n    i = 0\n    while i < SIZE and n > 1:\n        while n % prime[i] == 0:\n            n = n / prime[i]\n        i += 1\n    return n == 1\n\n\nn = 24\nif productOfSingelDgt(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to find sum of first n natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int findSum(int n) {\n    return n * (n + 1) / 2;\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.println(findSum(n));\n  }\n}\n", "python": "def findSum(n):\n    return n * (n + 1) / 2\n\n\nn = 5\nprint findSum(n)\n"}
{"text": "Program to find sum of first n natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int findSum(int n) {\n    if (n % 2 == 0) return (n / 2) * (n + 1);\n    else return ((n + 1) / 2) * n;\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.println(findSum(n));\n  }\n}\n", "python": "def findSum(n):\n    return n * (n + 1) / 2\n\n\nn = 5\nprint findSum(n)\n"}
{"text": "Maximum number of unique prime factors ", "java": "class GFG {\n  static int maxPrimefactorNum(int N) {\n    if (N < 2) return 0;\n    boolean[] arr = new boolean[N + 1];\n    int prod = 1, res = 0;\n    for (int p = 2; p * p <= N; p++) {\n      if (arr[p] == false) {\n        for (int i = p * 2; i <= N; i += p) arr[i] = true;\n        prod *= p;\n        if (prod > N) return res;\n        res++;\n      }\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int N = 500;\n    System.out.println(maxPrimefactorNum(N));\n  }\n}\n", "python": "def maxPrimefactorNum(N):\n    if N < 2:\n        return 0\n    arr = [True] * (N + 1)\n    prod = 1\n    res = 0\n    p = 2\n    while p * p <= N:\n        if arr[p] == True:\n            for i in range(p * 2, N + 1, p):\n                arr[i] = False\n            prod *= p\n            if prod > N:\n                return res\n            res += 1\n        p += 1\n    return res\n\n\nN = 500\nprint(maxPrimefactorNum(N))\n"}
{"text": "Find whether a given integer is a power of 3 or not ", "java": "public class Power_3 {\n  static boolean check(int n) {\n    if (n <= 0) return false;\n    return 1162261467 % n == 0;\n  }\n\n  public static void main(String args[]) {\n    int n = 9;\n    if (check(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def check(n):\n    return 1162261467 % n == 0\n\n\nn = 9\nif check(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Demlo number ( Square of 11. . .1 ) ", "java": "public class Main {\n  static String printDemlo(String str) {\n    int len = str.length();\n    String res = \" \";\n    for (int i = 1; i <= len; i++) res += Integer.toString(i);\n    for (int i = len - 1; i >= 1; i--) res += Integer.toString(i);\n    return res;\n  }\n\n  public static void main(String[] args) {\n    String str = \"111111\";\n    System.out.println(printDemlo(str));\n  }\n}\n", "python": "def printDemlo(s):\n    l = len(s)\n    res = \" \"\n    for i in range(1, l + 1):\n        res = res + str(i)\n    for i in range(l - 1, 0, -1):\n        res = res + str(i)\n    return res\n\n\ns = \"111111\"\nprint printDemlo(s)\n"}
{"text": "Number of times a number can be replaced by the sum of its digits until it only contains one digit ", "java": "public class GFG {\n  static int NumberofTimes(String str) {\n    int temporary_sum = 0, count = 0;\n    while (str.length() > 1) {\n      temporary_sum = 0;\n      for (int i = 0; i < str.length(); i++) temporary_sum += (str.charAt(i) - '0');\n      str = temporary_sum + \" \";\n      count++;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    String s = \"991\";\n    System.out.println(NumberofTimes(s));\n  }\n}\n", "python": "def NumberofTimes(s):\n    temporary_sum = 0\n    count = 0\n    while len(s) > 1:\n        temporary_sum = 0\n        for i in range(len(s)):\n            temporary_sum += ord(s[i]) - ord(\"0\")\n        s = str(temporary_sum)\n        count += 1\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \"991\"\n    print(NumberofTimes(s))\n"}
{"text": "Count total number of digits from 1 to n ", "java": "public class GFG {\n  static int totalDigits(int n) {\n    int number_of_digits = 0;\n    for (int i = 1; i <= n; i *= 10) number_of_digits += (n - i + 1);\n    return number_of_digits;\n  }\n\n  public static void main(String[] args) {\n    int n = 13;\n    System.out.println(totalDigits(n));\n  }\n}\n", "python": "def totalDigits(n):\n    number_of_digits = 0\n    for i in range(1, n, 10):\n        number_of_digits = number_of_digits + (n - i + 1)\n    return number_of_digits\n\n\nn = 13\ns = totalDigits(n) + 1\nprint(s)\n"}
{"text": "Break the number into three parts ", "java": "import java.io.*;\n\nclass GFG {\n  static long count_of_ways(long n) {\n    long count = 0;\n    count = (n + 1) * (n + 2) / 2;\n    return count;\n  }\n\n  public static void main(String[] args) {\n    long n = 3;\n    System.out.println(count_of_ways(n));\n  }\n}\n", "python": "def count_of_ways(n):\n    count = 0\n    count = (n + 1) * (n + 2) // 2\n    return count\n\n\nn = 3\nprint(count_of_ways(n))\n"}
{"text": "Implement * , ", "java": "class GFG {\n  static int flipSign(int a) {\n    int neg = 0;\n    int tmp = a < 0 ? 1 : -1;\n    while (a != 0) {\n      neg += tmp;\n      a += tmp;\n    }\n    return neg;\n  }\n\n  static boolean areDifferentSign(int a, int b) {\n    return ((a < 0 && b > 0) || (a > 0 && b < 0));\n  }\n\n  static int sub(int a, int b) {\n    return a + flipSign(b);\n  }\n\n  static int mul(int a, int b) {\n    if (a < b) return mul(b, a);\n    int sum = 0;\n    for (int i = Math.abs(b); i > 0; i--) sum += a;\n    if (b < 0) sum = flipSign(sum);\n    return sum;\n  }\n\n  static int division(int a, int b) {\n    if (b == 0) throw new ArithmeticException();\n    int quotient = 0, dividend;\n    int divisor = flipSign(Math.abs(b));\n    for (dividend = Math.abs(a); dividend >= Math.abs(divisor); dividend += divisor) quotient++;\n    if (areDifferentSign(a, b)) quotient = flipSign(quotient);\n    return quotient;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(\" Subtraction \u2581 is \u2581 \" + sub(4, -2));\n    System.out.println(\" Product \u2581 is \u2581 \" + mul(-9, 6));\n    try {\n      System.out.println(\" Division \u2581 is \u2581 \" + division(8, 2));\n    } catch (ArithmeticException e) {\n      System.out.println(\" Exception \u2581 : - \u2581 Divide \u2581 by \u2581 0\");\n    }\n  }\n}\n", "python": "def flipSign(a):\n    neg = 0\n    tmp = 1 if a < 0 else -1\n    while a != 0:\n        neg += tmp\n        a += tmp\n    return neg\n\n\ndef areDifferentSign(a, b):\n    return (a < 0 and b > 0) or (a > 0 and b < 0)\n\n\ndef sub(a, b):\n    return a + flipSign(b)\n\n\ndef mul(a, b):\n    if a < b:\n        return mul(b, a)\n    sum = 0\n    for i in range(abs(b), 0, -1):\n        sum += a\n    if b < 0:\n        sum = flipSign(sum)\n    return sum\n\n\ndef division(a, b):\n    quotient = 0\n    divisor = flipSign(abs(b))\n    for dividend in range(abs(a), abs(divisor) + divisor, divisor):\n        quotient += 1\n    if areDifferentSign(a, b):\n        quotient = flipSign(quotient)\n    return quotient\n\n\nprint(\" Subtraction \u2581 is \", sub(4, -2))\nprint(\" Product \u2581 is \", mul(-9, 6))\na, b = 8, 2\nif b:\n    print(\" Division \u2581 is \", division(a, b))\nelse:\n    print(\" Exception \u2581 : - \u2581 Divide \u2581 by \u2581 0\")\n"}
{"text": "Check if a number can be written as a sum of ' k ' prime numbers ", "java": "public class Prime {\n  static boolean isprime(int x) {\n    for (int i = 2; i * i <= x; i++) if (x % i == 0) return false;\n    return true;\n  }\n\n  static boolean isSumOfKprimes(int N, int K) {\n    if (N < 2 * K) return false;\n    if (K == 1) return isprime(N);\n    if (K == 2) {\n      if (N % 2 == 0) return true;\n      return isprime(N - 2);\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int n = 10, k = 2;\n    if (isSumOfKprimes(n, k)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def isprime(x):\n    i = 2\n    while i * i <= x:\n        if x % i == 0:\n            return 0\n        i += 1\n    return 1\n\n\ndef isSumOfKprimes(N, K):\n    if N < 2 * K:\n        return 0\n    if K == 1:\n        return isprime(N)\n    if K == 2:\n        if N % 2 == 0:\n            return 1\n        return isprime(N - 2)\n    return 1\n\n\nn = 15\nk = 2\nif isSumOfKprimes(n, k):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Fibonacci modulo p ", "java": "import java.io.*;\n\nclass FibZero {\n  static int findMinZero(int p) {\n    int first = 1, second = 1, number = 2, next = 1;\n    while (next > 0) {\n      next = (first + second) % p;\n      first = second;\n      second = next;\n      number++;\n    }\n    return number;\n  }\n\n  public static void main(String[] args) {\n    int p = 7;\n    System.out.println(\" Minimal \u2581 zero \u2581 is \u2581 \" + findMinZero(p));\n  }\n}\n", "python": "def findMinZero(p):\n    first = 1\n    second = 1\n    number = 2\n    next = 1\n    while next:\n        next = (first + second) % p\n        first = second\n        second = next\n        number = number + 1\n    return number\n\n\nif __name__ == \" _ _ main _ _ \":\n    p = 7\n    print(\" Minimal \u2581 zero \u2581 is : \", findMinZero(p))\n"}
{"text": "Given a number n , find the first k digits of n ^ n ", "java": "public class Digits {\n  static long firstkdigits(int n, int k) {\n    long product = 1;\n    for (int i = 0; i < n; i++) product *= n;\n    while ((int) (product / Math.pow(10, k)) != 0) product = product / 10;\n    return product;\n  }\n\n  public static void main(String[] args) {\n    int n = 15;\n    int k = 4;\n    System.out.println(firstkdigits(n, k));\n  }\n}\n", "python": "def firstkdigits(n, k):\n    product = 1\n    for i in range(n):\n        product *= n\n    while (product // pow(10, k)) != 0:\n        product = product // 10\n    return product\n\n\nn = 15\nk = 4\nprint(firstkdigits(n, k))\n"}
{"text": "Check if a large number is divisible by 9 or not ", "java": "class IsDivisible {\n  static boolean check(String str) {\n    int n = str.length();\n    int digitSum = 0;\n    for (int i = 0; i < n; i++) digitSum += (str.charAt(i) - '0');\n    return (digitSum % 9 == 0);\n  }\n\n  public static void main(String[] args) {\n    String str = \"99333\";\n    if (check(str)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def check(st):\n    n = len(st)\n    digitSum = 0\n    for i in range(0, n):\n        digitSum = digitSum + (int)(st[i])\n    return digitSum % 9 == 0\n\n\nst = \"99333\"\nif check(st):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Sum of product of x and y such that floor ( n / x ) = y ", "java": "import java.io.*;\n\nclass GFG {\n  static int sumofproduct(int n) {\n    int ans = 0;\n    for (int x = 1; x <= n; x++) {\n      int y = n / x;\n      ans += (y * x);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(sumofproduct(n));\n  }\n}\n", "python": "def sumofproduct(n):\n    ans = 0\n    for x in range(1, n + 1):\n        y = int(n / x)\n        ans += y * x\n    return ans\n\n\nn = 10\nprint(sumofproduct(n))\n"}
{"text": "Program for Chocolate and Wrapper Puzzle ", "java": "import java.io.*;\n\nclass GFG {\n  static int countMaxChoco(int money, int price, int wrap) {\n    if (money < price) return 0;\n    int choc = money / price;\n    choc = choc + (choc - 1) / (wrap - 1);\n    return choc;\n  }\n\n  public static void main(String[] args) {\n    int money = 15;\n    int price = 1;\n    int wrap = 3;\n    System.out.println(countMaxChoco(money, price, wrap));\n  }\n}\n", "python": "def countMaxChoco(money, price, wrap):\n    if money < price:\n        return 0\n    choc = int(money / price)\n    choc = choc + (choc - 1) / (wrap - 1)\n    return int(choc)\n\n\nmoney = 15\nprice = 1\nwrap = 3\nprint(countMaxChoco(money, price, wrap))\n"}
{"text": "Check if possible to move from given coordinate to desired coordinate ", "java": "class GFG {\n  static int gcd(int i, int j) {\n    if (i == j) return i;\n    if (i > j) return gcd(i - j, j);\n    return gcd(i, j - i);\n  }\n\n  static boolean ispossible(int x, int y, int a, int b) {\n    x = Math.abs(x);\n    y = Math.abs(y);\n    a = Math.abs(a);\n    b = Math.abs(b);\n    return (gcd(x, y) == gcd(a, b));\n  }\n\n  public static void main(String[] args) {\n    int x = 35, y = 15;\n    int a = 20, b = 25;\n    if (ispossible(x, y, a, b)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def gcd(i, j):\n    if i == j:\n        return i\n    if i > j:\n        return gcd(i - j, j)\n    return gcd(i, j - i)\n\n\ndef ispossible(x, y, a, b):\n    x, y, a, b = abs(x), abs(y), abs(a), abs(b)\n    return gcd(x, y) == gcd(a, b)\n\n\nx, y = 35, 15\na, b = 20, 25\nif ispossible(x, y, a, b):\n    print \" Yes \"\nelse:\n    print \" No \"\n"}
{"text": "Smallest number divisible by first n numbers ", "java": "class GFG {\n  static long gcd(long a, long b) {\n    if (a % b != 0) return gcd(b, a % b);\n    else return b;\n  }\n\n  static long lcm(long n) {\n    long ans = 1;\n    for (long i = 1; i <= n; i++) ans = (ans * i) / (gcd(ans, i));\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    long n = 20;\n    System.out.println(lcm(n));\n  }\n}\n", "python": "import math\n\n\ndef lcm(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = int((ans * i) / math.gcd(ans, i))\n    return ans\n\n\nn = 20\nprint(lcm(n))\n"}
{"text": "Trapezoidal Rule for Approximate Value of Definite Integral ", "java": "class GFG {\n  static float y(float x) {\n    return 1 / (1 + x * x);\n  }\n\n  static float trapezoidal(float a, float b, float n) {\n    float h = (b - a) / n;\n    float s = y(a) + y(b);\n    for (int i = 1; i < n; i++) s += 2 * y(a + i * h);\n    return (h / 2) * s;\n  }\n\n  public static void main(String[] args) {\n    float x0 = 0;\n    float xn = 1;\n    int n = 6;\n    System.out.println(\n        \" Value \u2581 of \u2581 integral \u2581 is \u2581 \" + Math.round(trapezoidal(x0, xn, n) * 10000.0) / 10000.0);\n  }\n}\n", "python": "def y(x):\n    return 1 / (1 + x * x)\n\n\ndef trapezoidal(a, b, n):\n    h = (b - a) / n\n    s = y(a) + y(b)\n    i = 1\n    while i < n:\n        s += 2 * y(a + i * h)\n        i += 1\n    return (h / 2) * s\n\n\nx0 = 0\nxn = 1\nn = 6\nprint(\" Value \u2581 of \u2581 integral \u2581 is \u2581 \", \" % .4f \" % trapezoidal(x0, xn, n))\n"}
{"text": "Number of elements with odd factors in given range ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int countOddSquares(int n, int m) {\n    return (int) Math.pow((double) m, 0.5) - (int) Math.pow((double) n - 1, 0.5);\n  }\n\n  public static void main(String[] args) {\n    int n = 5, m = 100;\n    System.out.print(\" Count \u2581 is \u2581 \" + countOddSquares(n, m));\n  }\n}\n", "python": "def countOddSquares(n, m):\n    return int(m ** 0.5) - int((n - 1) ** 0.5)\n\n\nn = 5\nm = 100\nprint(\" Count \u2581 is \", countOddSquares(n, m))\n"}
{"text": "To Generate a One Time Password or Unique Identification URL ", "java": "class GFG {\n  static String generateOTP(int len) {\n    String str = \" abcdefghijklmnopqrstuvwxyzABCD \" + \" EFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    int n = str.length();\n    String OTP = \" \";\n    for (int i = 1; i <= len; i++) OTP += (str.charAt((int) ((Math.random() * 10) % n)));\n    return (OTP);\n  }\n\n  public static void main(String[] args) {\n    int len = 6;\n    System.out.printf(\" Your \u2581 OTP \u2581 is \u2581 - \u2581 % s \", generateOTP(len));\n  }\n}\n", "python": "import random\n\n\ndef generateOTP(length):\n    str = \" abcdefghijklmnopqrstuvwxyzAB\\ STRNEWLINE TABSYMBOL CDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    n = len(str)\n    OTP = \" \"\n    for i in range(1, length + 1):\n        OTP += str[int(random.random() * 10) % n]\n    return OTP\n\n\nif __name__ == \" _ _ main _ _ \":\n    length = 6\n    print(\" Your \u2581 OTP \u2581 is \u2581 - \u2581 \", generateOTP(length))\n"}
{"text": "Number of perfect squares between two given numbers ", "java": "class CountSquares {\n  double countSquares(int a, int b) {\n    return (Math.floor(Math.sqrt(b)) - Math.ceil(Math.sqrt(a)) + 1);\n  }\n}\n\npublic class PerfectSquares {\n  public static void main(String[] args) {\n    int a = 9, b = 25;\n    CountSquares obj = new CountSquares();\n    System.out.print(\" Count \u2581 of \u2581 squares \u2581 is \u2581 \" + (int) obj.countSquares(a, b));\n  }\n}\n", "python": "import math\n\n\ndef CountSquares(a, b):\n    return math.floor(math.sqrt(b)) - math.ceil(math.sqrt(a)) + 1\n\n\na = 9\nb = 25\nprint \" Count \u2581 of \u2581 squares \u2581 is : \", int(CountSquares(a, b))\n"}
{"text": "Gray to Binary and Binary to Gray conversion ", "java": "public class Main {\n  public static int greyConverter(int n) {\n    return n ^ (n >> 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(greyConverter(n));\n    n = 9;\n    System.out.println(greyConverter(n));\n  }\n}\n", "python": "def greyConverter(n):\n    return n ^ (n >> 1)\n\n\nn = 3\nprint(greyConverter(n))\nn = 9\nprint(greyConverter(n))\n"}
{"text": "Count number of squares in a rectangle ", "java": "class GFG {\n  static int countSquares(int m, int n) {\n    if (n < m) {\n      int temp = m;\n      m = n;\n      n = temp;\n    }\n    return m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2;\n  }\n\n  public static void main(String[] args) {\n    int m = 4, n = 3;\n    System.out.println(\" Count \u2581 of \u2581 squares \u2581 is \u2581 \" + countSquares(m, n));\n  }\n}\n", "python": "def countSquares(m, n):\n    if n < m:\n        temp = m\n        m = n\n        n = temp\n    return m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    m = 4\n    n = 3\n    print(\" Count \u2581 of \u2581 squares \u2581 is \u2581 \", countSquares(m, n))\n"}
{"text": "Replace all \u00e2 \u20ac\u02dc 0 \u00e2 \u20ac\u2122 with \u00e2 \u20ac\u02dc 5 \u00e2 \u20ac\u2122 in an input Integer ", "java": "public class ReplaceDigits {\n  static int replace0with5(int number) {\n    return number += calculateAddedValue(number);\n  }\n\n  private static int calculateAddedValue(int number) {\n    int result = 0;\n    int decimalPlace = 1;\n    if (number == 0) {\n      result += (5 * decimalPlace);\n    }\n    while (number > 0) {\n      if (number % 10 == 0) result += (5 * decimalPlace);\n      number /= 10;\n      decimalPlace *= 10;\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    System.out.print(replace0with5(1020));\n  }\n}\n", "python": "def replace0with5(number):\n    number += calculateAddedValue(number)\n    return number\n\n\ndef calculateAddedValue(number):\n    result = 0\n    decimalPlace = 1\n    if number == 0:\n        result += 5 * decimalPlace\n    while number > 0:\n        if number % 10 == 0:\n            result += 5 * decimalPlace\n        number //= 10\n        decimalPlace *= 10\n    return result\n\n\nprint(replace0with5(1020))\n"}
{"text": "Program to find remainder without using modulo or % operator ", "java": "import java.io.*;\n\nclass GFG {\n  static int getRemainder(int num, int divisor) {\n    return (num - divisor * (num / divisor));\n  }\n\n  public static void main(String[] args) {\n    System.out.println(getRemainder(100, 7));\n  }\n}\n", "python": "def getRemainder(num, divisor):\n    return num - divisor * (num // divisor)\n\n\nnum = 100\ndivisor = 7\nprint(getRemainder(num, divisor))\n"}
{"text": "Efficient Program to Compute Sum of Series 1 / 1 ! + 1 / 2 ! + 1 / 3 ! + 1 / 4 ! + . . + 1 / n ! ", "java": "import java.io.*;\n\nclass GFG {\n  static double sum(int n) {\n    double sum = 0;\n    int fact = 1;\n    for (int i = 1; i <= n; i++) {\n      fact *= i;\n      sum += 1.0 / fact;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(sum(n));\n  }\n}\n", "python": "def sum(n):\n    sum = 0\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n        sum += 1.0 / fact\n    print(sum)\n\n\nn = 5\nsum(n)\n"}
{"text": "Program to find sum of series 1 + 1 / 2 + 1 / 3 + 1 / 4 + . . + 1 / n ", "java": "import java.io.*;\n\nclass GFG {\n  static double sum(int n) {\n    double i, s = 0.0;\n    for (i = 1; i <= n; i++) s = s + 1 / i;\n    return s;\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.printf(\" Sum \u2581 is \u2581 % f \", sum(n));\n  }\n}\n", "python": "def sum(n):\n    i = 1\n    s = 0.0\n    for i in range(1, n + 1):\n        s = s + 1 / i\n    return s\n\n\nn = 5\nprint(\" Sum \u2581 is \", round(sum(n), 6))\n"}
{"text": "Program to find GCD or HCF of two numbers ", "java": "class Test {\n  static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n  }\n\n  public static void main(String[] args) {\n    int a = 98, b = 56;\n    System.out.println(\" GCD \u2581 of \u2581 \" + a + \" \u2581 and \u2581 \" + b + \" \u2581 is \u2581 \" + gcd(a, b));\n  }\n}\n", "python": "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\n\n\na = 98\nb = 56\nif gcd(a, b):\n    print(\" GCD \u2581 of \", a, \" and \", b, \" is \", gcd(a, b))\nelse:\n    print(\" not \u2581 found \")\n"}
{"text": "Count pairs from an array having sum of twice of their AND and XOR equal to K ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void countPairs(int arr[], int N, int K) {\n    Map<Integer, Integer> mp = new HashMap<>();\n    int cnt = 0;\n    for (int i = 0; i < N; i++) {\n      if (mp.get(K - arr[i]) != null) cnt += mp.get(K - arr[i]);\n      mp.put(arr[i], mp.get(arr[i]) == null ? 1 : mp.get(arr[i]) + 1);\n    }\n    System.out.println(cnt);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 5, 4, 8, 7};\n    int N = arr.length;\n    int K = 9;\n    countPairs(arr, N, K);\n  }\n}\n", "python": "from collections import defaultdict\n\n\ndef countPairs(arr, N, K):\n    mp = defaultdict(int)\n    cnt = 0\n    for i in range(N):\n        cnt += mp[K - arr[i]]\n        mp[arr[i]] += 1\n    print(cnt)\n\n\narr = [1, 5, 4, 8, 7]\nN = len(arr)\nK = 9\ncountPairs(arr, N, K)\n"}
{"text": "Equal Sum and XOR of three Numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static long calculate(int bit_cnt) {\n    long res = 1;\n    while (bit_cnt-- > 0) {\n      res = res * 3;\n    }\n    return res;\n  }\n\n  static int unset_bit_count(long n) {\n    int count = 0;\n    while (n > 0) {\n      if ((n & 1) == 0) count++;\n      n = n >> 1;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    long n;\n    n = 2;\n    int count = unset_bit_count(n);\n    long ans = calculate(count);\n    System.out.println(ans);\n  }\n}\n", "python": "def calculate(bit_cnt):\n    res = 1\n    while bit_cnt > 0:\n        bit_cnt -= 1\n        res = res * 3\n    return res\n\n\ndef unset_bit_count(n):\n    count = 0\n    while n > 0:\n        if (n & 1) == 0:\n            count += 1\n        n = n >> 1\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 2\n    count = unset_bit_count(n)\n    ans = calculate(count)\n    print(ans)\n"}
{"text": "Assign other value to a variable from two possible values ", "java": "import java.util.*;\n\nclass solution {\n  static void alternate(int a, int b, int x) {\n    x = a + b - x;\n    System.out.println(\" After \u2581 change \" + \" \" + \" x is : \" + x);\n  }\n\n  public static void main(String args[]) {\n    int a = -10;\n    int b = 15;\n    int x = a;\n    System.out.println(\" x \u2581 is \u2581 : \u2581 \" + x);\n    alternate(a, b, x);\n  }\n}\n", "python": "def alternate(a, b, x):\n    x = a + b - x\n    print(\" After \u2581 change \u2581 x \u2581 is : \", x)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = -10\n    b = 15\n    x = a\n    print(\" x \u2581 is : \", x)\n    alternate(a, b, x)\n"}
{"text": "Highest power of two that divides a given number ", "java": "class GFG {\n  static int highestPowerOf2(int n) {\n    return (n & (~(n - 1)));\n  }\n\n  public static void main(String[] args) {\n    int n = 48;\n    System.out.println(highestPowerOf2(n));\n  }\n}\n", "python": "def highestPowerOf2(n):\n    return n & (~(n - 1))\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 48\n    print(highestPowerOf2(n))\n"}
{"text": "Finding the Parity of a number Efficiently ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean findParity(int x) {\n    int y = x ^ (x >> 1);\n    y = y ^ (y >> 2);\n    y = y ^ (y >> 4);\n    y = y ^ (y >> 8);\n    y = y ^ (y >> 16);\n    if ((y & 1) > 0) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    if ((findParity(9) == false)) System.out.println(\" Even \u2581 Parity \");\n    else System.out.println(\" Odd \u2581 Parity \");\n    if (findParity(13) == false) System.out.println(\" Even \u2581 Parity \");\n    else System.out.println(\" Odd \u2581 Parity \");\n  }\n}\n", "python": "def findParity(x):\n    y = x ^ (x >> 1)\n    y = y ^ (y >> 2)\n    y = y ^ (y >> 4)\n    y = y ^ (y >> 8)\n    y = y ^ (y >> 16)\n    if y & 1:\n        return 1\n    return 0\n\n\nif findParity(9) == 0:\n    print(\" Even \u2581 Parity \")\nelse:\n    print(\" Odd Parity \")\nif findParity(13) == 0:\n    print(\" Even \u2581 Parity \")\nelse:\n    print(\" Odd \u2581 Parity \")\n"}
{"text": "Check if bits in range L to R of two numbers are complement of each other or not ", "java": "class GFG {\n  static boolean allBitsSetInTheGivenRange(int n, int l, int r) {\n    int num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1);\n    int new_num = n & num;\n    if (num == new_num) return true;\n    return false;\n  }\n\n  static boolean bitsAreComplement(int a, int b, int l, int r) {\n    int xor_value = a ^ b;\n    return allBitsSetInTheGivenRange(xor_value, l, r);\n  }\n\n  public static void main(String[] args) {\n    int a = 10, b = 5;\n    int l = 1, r = 3;\n    if (bitsAreComplement(a, b, l, r)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def allBitsSetInTheGivenRange(n, l, r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if num == new_num:\n        return True\n    return False\n\n\ndef bitsAreComplement(a, b, l, r):\n    xor_value = a ^ b\n    return allBitsSetInTheGivenRange(xor_value, l, r)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 10\n    b = 5\n    l = 1\n    r = 3\n    if bitsAreComplement(a, b, l, r):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Multiply any Number with 4 using Bitwise Operator ", "java": "class GFG {\n  static int multiplyWith4(int n) {\n    return (n << 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.print(multiplyWith4(n));\n  }\n}\n", "python": "def multiplyWith4(n):\n    return n << 2\n\n\nn = 4\nprint(multiplyWith4(n))\n"}
{"text": "Smallest perfect power of 2 greater than n ( without using arithmetic operators ) ", "java": "import java.util.*;\n\nclass GFG {\n  static int perfectPowerOf2(int n) {\n    int per_pow = 1;\n    while (n > 0) {\n      per_pow = per_pow << 1;\n      n = n >> 1;\n    }\n    return per_pow;\n  }\n\n  public static void main(String[] args) {\n    int n = 12;\n    System.out.println(\n        \" Perfect \u2581 power \u2581 of \u2581 2 \u2581 greater \u2581 than \u2581 \" + n + \" : \u2581 \" + perfectPowerOf2(n));\n  }\n}\n", "python": "def perfectPowerOf2(n):\n    per_pow = 1\n    while n > 0:\n        per_pow = per_pow << 1\n        n = n >> 1\n    return per_pow\n\n\nn = 128\nprint(\" Perfect \u2581 power \u2581 of \u2581 2 \u2581 greater \u2581 than \", n, \" : \", perfectPowerOf2(n))\n"}
{"text": "Count unset bits of a number ", "java": "class GFG {\n  static int countUnsetBits(int n) {\n    int x = n;\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return Integer.bitCount(x ^ n);\n  }\n\n  public static void main(String[] args) {\n    int n = 17;\n    System.out.println(countUnsetBits(n));\n  }\n}\n", "python": "import math\n\n\ndef countUnsetBits(n):\n    x = n\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    t = math.log(x ^ n, 2)\n    return math.floor(t)\n\n\nn = 17\nprint(countUnsetBits(n))\n"}
{"text": "Count total bits in a number ", "java": "class GFG {\n  static int countBits(int n) {\n    int count = 0;\n    while (n != 0) {\n      count++;\n      n >>= 1;\n    }\n    return count;\n  }\n\n  public static void main(String[] arg) {\n    int i = 65;\n    System.out.print(countBits(i));\n  }\n}\n", "python": "def countBits(n):\n    count = 0\n    while n:\n        count += 1\n        n >>= 1\n    return count\n\n\ni = 65\nprint(countBits(i))\n"}
{"text": "Toggle all bits after most significant bit ", "java": "class GFG {\n  static int toggle(int n) {\n    int temp = 1;\n    while (temp <= n) {\n      n = n ^ temp;\n      temp = temp << 1;\n    }\n    return n;\n  }\n\n  public static void main(String arg[]) {\n    int n = 10;\n    n = toggle(n);\n    System.out.print(n);\n  }\n}\n", "python": "def toggle(n):\n    temp = 1\n    while temp <= n:\n        n = n ^ temp\n        temp = temp << 1\n    return n\n\n\nn = 10\nn = toggle(n)\nprint(n)\n"}
{"text": "Toggle bits in the given range ", "java": "import java.io.*;\n\nclass GFG {\n  static int toggleBitsFromLToR(int n, int l, int r) {\n    int num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1);\n    return (n ^ num);\n  }\n\n  public static void main(String[] args) {\n    int n = 50;\n    int l = 2, r = 5;\n    System.out.println(toggleBitsFromLToR(n, l, r));\n  }\n}\n", "python": "def toggleBitsFromLToR(n, l, r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    return n ^ num\n\n\nn = 50\nl = 2\nr = 5\nprint(toggleBitsFromLToR(n, l, r))\n"}
{"text": "Position of rightmost different bit ", "java": "class GFG {\n  static int getRightMostSetBit(int n) {\n    if (n == 0) return 0;\n    return (int) ((Math.log10(n & -n)) / Math.log10(2)) + 1;\n  }\n\n  static int posOfRightMostDiffBit(int m, int n) {\n    return getRightMostSetBit(m ^ n);\n  }\n\n  public static void main(String arg[]) {\n    int m = 52, n = 4;\n    System.out.print(\" Position \u2581 = \u2581 \" + posOfRightMostDiffBit(m, n));\n  }\n}\n", "python": "from math import floor, log10\n\n\ndef posOfRightMostDiffBit(m, n):\n    return floor(log10(pow(m ^ n, 2))) + 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    m, n = 52, 4\n    print(\" Position \u2581 = \u2581 \", posOfRightMostDiffBit(m, n))\n"}
{"text": "Swap three variables without using temporary variable ", "java": "class GFG {\n  static int a, b, c;\n\n  static void swapThree() {\n    a = a ^ b ^ c;\n    b = a ^ b ^ c;\n    c = a ^ b ^ c;\n    a = a ^ b ^ c;\n  }\n\n  public static void main(String[] args) {\n    a = 10;\n    b = 20;\n    c = 30;\n    System.out.println(\n        \" Before \u2581 swapping \u2581 a \u2581 = \u2581 \" + a + \" , \u2581 b \u2581 = \u2581 \" + b + \" , c \u2581 = \u2581 \" + c);\n    swapThree();\n    System.out.println(\n        \" After \u2581 swapping \u2581 a \u2581 = \u2581 \" + a + \" , \u2581 b \u2581 = \u2581 \" + b + \" , \u2581 c \u2581 = \u2581 \" + c);\n  }\n}\n", "python": "def swapThree(a, b, c):\n    a[0] = a[0] ^ b[0] ^ c[0]\n    b[0] = a[0] ^ b[0] ^ c[0]\n    c[0] = a[0] ^ b[0] ^ c[0]\n    a[0] = a[0] ^ b[0] ^ c[0]\n\n\na, b, c = [10], [20], [30]\nprint(\n    \" Before \u2581 swapping \u2581 a \u2581 = \u2581 \", a[0], \" , \u2581 b \u2581 = \u2581 \", b[0], \" , \u2581 c \u2581 = \u2581 \", c[0]\n)\nswapThree(a, b, c)\nprint(\n    \" After \u2581 swapping \u2581 a \u2581 = \u2581 \", a[0], \" , \u2581 b \u2581 = \u2581 \", b[0], \" , \u2581 c \u2581 = \u2581 \", c[0]\n)\n"}
{"text": "Find XOR of two number without using XOR operator ", "java": "import java.io.*;\n\nclass GFG {\n  static int myXOR(int x, int y) {\n    return (x & (~y)) | ((~x) & y);\n  }\n\n  public static void main(String[] args) {\n    int x = 3, y = 5;\n    System.out.println(\" XOR \u2581 is \u2581 \" + (myXOR(x, y)));\n  }\n}\n", "python": "def myXOR(x, y):\n    return (x & (~y)) | ((~x) & y)\n\n\nx = 3\ny = 5\nprint(\" XOR \u2581 is \", myXOR(x, y))\n"}
{"text": "Convert a given temperature to another system based on given boiling and freezing points ", "java": "import java.io.*;\n\nclass GFG {\n  static double temp_convert(int F1, int B1, int F2, int B2, int T) {\n    float t2;\n    t2 = F2 + (float) (B2 - F2) / (B1 - F1) * (T - F1);\n    return t2;\n  }\n\n  public static void main(String[] args) {\n    int F1 = 0, B1 = 100;\n    int F2 = 32, B2 = 212;\n    int T = 37;\n    float t2;\n    System.out.printf(\" % .2f \", temp_convert(F1, B1, F2, B2, T));\n  }\n}\n", "python": "def temp_convert(F1, B1, F2, B2, T):\n    t2 = F2 + ((float)(B2 - F2) / (B1 - F1) * (T - F1))\n    return t2\n\n\nF1 = 0\nB1 = 100\nF2 = 32\nB2 = 212\nT = 37\nprint(temp_convert(F1, B1, F2, B2, T))\n"}
{"text": "Implement rand3 ( ) using rand2 ( ) ", "java": "import java.util.Random;\n\nclass GFG {\n  static int rand2() {\n    Random rand = new Random();\n    return (rand.nextInt() & 1);\n  }\n\n  static int rand3() {\n    int r = 2 * rand2() + rand2();\n    if (r < 3) return r;\n    return rand3();\n  }\n\n  public static void main(String[] args) {\n    for (int i = 0; i < 100; i++) System.out.print(rand3());\n  }\n}\n", "python": "import random\n\n\ndef rand2():\n    tmp = random.randint(1, 100)\n    return tmp % 2\n\n\ndef rand3():\n    r = 2 * rand2() + rand2()\n    if r < 3:\n        return r\n    return rand3()\n\n\nif __name__ == \" _ _ main _ _ \":\n    for i in range(100):\n        print(rand3(), end=\" \")\n    DEDENT\n"}
{"text": "Find Height of Binary Tree represented by Parent array ", "java": "class BinaryTree {\n  void fillDepth(int parent[], int i, int depth[]) {\n    if (depth[i] != 0) {\n      return;\n    }\n    if (parent[i] == -1) {\n      depth[i] = 1;\n      return;\n    }\n    if (depth[parent[i]] == 0) {\n      fillDepth(parent, parent[i], depth);\n    }\n    depth[i] = depth[parent[i]] + 1;\n  }\n\n  int findHeight(int parent[], int n) {\n    int depth[] = new int[n];\n    for (int i = 0; i < n; i++) {\n      depth[i] = 0;\n    }\n    for (int i = 0; i < n; i++) {\n      fillDepth(parent, i, depth);\n    }\n    int ht = depth[0];\n    for (int i = 1; i < n; i++) {\n      if (ht < depth[i]) {\n        ht = depth[i];\n      }\n    }\n    return ht;\n  }\n\n  public static void main(String args[]) {\n    BinaryTree tree = new BinaryTree();\n    int parent[] = new int[] {-1, 0, 0, 1, 1, 3, 5};\n    int n = parent.length;\n    System.out.println(\" Height \u2581 is \u2581 \" + tree.findHeight(parent, n));\n  }\n}\n", "python": "def fillDepth(parent, i, depth):\n    if depth[i] != 0:\n        return\n    if parent[i] == -1:\n        depth[i] = 1\n        return\n    if depth[parent[i]] == 0:\n        fillDepth(parent, parent[i], depth)\n    depth[i] = depth[parent[i]] + 1\n\n\ndef findHeight(parent):\n    n = len(parent)\n    depth = [0 for i in range(n)]\n    for i in range(n):\n        fillDepth(parent, i, depth)\n    ht = depth[0]\n    for i in range(1, n):\n        ht = max(ht, depth[i])\n    return ht\n\n\nparent = [-1, 0, 0, 1, 1, 3, 5]\nprint \" Height \u2581 is \u2581 % d \" % (findHeight(parent))\n"}
{"text": "Count substrings made up of a single distinct character ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void countSubstrings(String s) {\n    int ans = 0;\n    int subs = 1;\n    char pre = '0';\n    for (char i : s.toCharArray()) {\n      if (pre == i) {\n        subs += 1;\n      } else {\n        subs = 1;\n      }\n      ans += subs;\n      pre = i;\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    String s = \" geeksforgeeks \";\n    countSubstrings(s);\n  }\n}\n", "python": "def countSubstrings(s):\n    ans = 0\n    subs = 1\n    pre = \" \"\n    for i in s:\n        if pre == i:\n            subs += 1\n        else:\n            subs = 1\n        ans += subs\n        pre = i\n    print(ans)\n\n\ns = \" geeksforgeeks \"\ncountSubstrings(s)\n"}
{"text": "Count array elements that can be maximized by adding any permutation of first N natural numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static void countMaximum(Integer[] a, int n) {\n    Arrays.sort(a, Collections.reverseOrder());\n    int count = 0;\n    int mark = 0;\n    for (int i = 0; i < n; ++i) {\n      if ((a[i] + n >= mark)) {\n        count += 1;\n      }\n      mark = Math.max(mark, a[i] + i + 1);\n    }\n    System.out.print(count);\n  }\n\n  public static void main(String[] args) {\n    Integer arr[] = {8, 9, 6};\n    int N = arr.length;\n    countMaximum(arr, N);\n  }\n}\n", "python": "def countMaximum(a, n):\n    a.sort(reverse=True)\n    count = 0\n    mark = 0\n    for i in range(n):\n        if a[i] + n >= mark:\n            count += 1\n        mark = max(mark, a[i] + i + 1)\n    print(count)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [8, 9, 6]\n    N = len(arr)\n    countMaximum(arr, N)\n"}
{"text": "Maximum Subarray Sum possible by replacing an Array element by its Square ", "java": "import java.io.*;\n\nclass GFG {\n  public static int getMaxSum(int a[], int n) {\n    int dp[][] = new int[n][2];\n    dp[0][0] = a[0];\n    dp[0][1] = a[0] * a[0];\n    int max_sum = Math.max(dp[0][0], dp[0][1]);\n    for (int i = 1; i < n; i++) {\n      dp[i][0] = Math.max(a[i], dp[i - 1][0] + a[i]);\n      dp[i][1] = Math.max(dp[i - 1][1] + a[i], a[i] * a[i]);\n      dp[i][1] = Math.max(dp[i][1], dp[i - 1][0] + a[i] * a[i]);\n      max_sum = Math.max(max_sum, dp[i][1]);\n      max_sum = Math.max(max_sum, dp[i][0]);\n    }\n    return max_sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    int a[] = {1, -5, 8, 12, -8};\n    System.out.println(getMaxSum(a, n));\n  }\n}\n", "python": "def getMaxSum(a, n):\n    dp = [[0 for x in range(2)] for y in range(n)]\n    dp[0][0] = a[0]\n    dp[0][1] = a[0] * a[0]\n    max_sum = max(dp[0][0], dp[0][1])\n    for i in range(1, n):\n        dp[i][0] = max(a[i], dp[i - 1][0] + a[i])\n        dp[i][1] = max(dp[i - 1][1] + a[i], a[i] * a[i])\n        dp[i][1] = max(dp[i][1], dp[i - 1][0] + a[i] * a[i])\n        max_sum = max(max_sum, dp[i][1])\n        max_sum = max(max_sum, dp[i][0])\n    return max_sum\n\n\nn = 5\na = [1, -5, 8, 12, -8]\nprint(getMaxSum(a, n))\n"}
{"text": "Find a distinct pair ( x , y ) in given range such that x divides y ", "java": "class GFG {\n  static void findpair(int l, int r) {\n    int ans1 = l;\n    int ans2 = 2 * l;\n    System.out.println(ans1 + \" , \u2581 \" + ans2);\n  }\n\n  public static void main(String args[]) {\n    int l = 1, r = 10;\n    findpair(l, r);\n  }\n}\n", "python": "def findpair(l, r):\n    ans1 = l\n    ans2 = 2 * l\n    print(ans1, \" , \u2581 \", ans2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    l, r = 1, 10\n    findpair(l, r)\n"}
{"text": "Check if a string is suffix of another ", "java": "class GFG {\n  public static void main(String[] args) {\n    String s1 = \" geeks \", s2 = \" geeksforgeeks \";\n    boolean result = s2.endsWith(s1);\n    if (result) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "if __name__ == \" _ _ main _ _ \":\n    s1 = \" geeks \"\n    s2 = \" geeksforgeeks \"\n    result = s2.endswith(s1)\n    if result:\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Recursive Programs to find Minimum and Maximum elements of array ", "java": "import java.util.*;\n\nclass GFG {\n  public static int findMinRec(int A[], int n) {\n    if (n == 1) return A[0];\n    return Math.min(A[n - 1], findMinRec(A, n - 1));\n  }\n\n  public static void main(String args[]) {\n    int A[] = {1, 4, 45, 6, -50, 10, 2};\n    int n = A.length;\n    System.out.println(findMinRec(A, n));\n  }\n}\n", "python": "def findMinRec(A, n):\n    if n == 1:\n        return A[0]\n    return min(A[n - 1], findMinRec(A, n - 1))\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [1, 4, 45, 6, -50, 10, 2]\n    n = len(A)\n    print(findMinRec(A, n))\n"}
{"text": "Maximize difference between maximum and minimum array elements after K operations ", "java": "import java.util.*;\n\nclass GFG {\n  static int[] reverse(int a[]) {\n    int i, n = a.length, t;\n    for (i = 0; i < n / 2; i++) {\n      t = a[i];\n      a[i] = a[n - i - 1];\n      a[n - i - 1] = t;\n    }\n    return a;\n  }\n\n  static int maxDiffLargSmallOper(int arr[], int N, int K) {\n    int maxDiff = 0;\n    Arrays.sort(arr);\n    arr = reverse(arr);\n    for (int i = 0; i <= Math.min(K, N - 1); i++) {\n      maxDiff += arr[i];\n    }\n    return maxDiff;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {7, 7, 7, 7};\n    int N = arr.length;\n    int K = 1;\n    System.out.print(maxDiffLargSmallOper(arr, N, K));\n  }\n}\n", "python": "def maxDiffLargSmallOper(arr, N, K):\n    maxDiff = 0\n    arr.sort(reverse=True)\n    for i in range(min(K + 1, N)):\n        maxDiff += arr[i]\n    return maxDiff\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [7, 7, 7, 7]\n    N = len(arr)\n    K = 1\n    print(maxDiffLargSmallOper(arr, N, K))\n"}
{"text": "Maximum Manhattan distance between a distinct pair from N coordinates ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static class Pair {\n    int x;\n    int y;\n\n    Pair(int x, int y) {\n      this.x = x;\n      this.y = y;\n    }\n  }\n\n  static void MaxDist(ArrayList<Pair> A, int N) {\n    ArrayList<Integer> V = new ArrayList<>();\n    ArrayList<Integer> V1 = new ArrayList<>();\n    for (int i = 0; i < N; i++) {\n      V.add(A.get(i).x + A.get(i).y);\n      V1.add(A.get(i).x - A.get(i).y);\n    }\n    Collections.sort(V);\n    Collections.sort(V1);\n    int maximum = Math.max((V.get(V.size() - 1) - V.get(0)), (V1.get(V1.size() - 1) - V1.get(0)));\n    System.out.println(maximum);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    ArrayList<Pair> al = new ArrayList<>();\n    Pair p1 = new Pair(1, 2);\n    al.add(p1);\n    Pair p2 = new Pair(2, 3);\n    al.add(p2);\n    Pair p3 = new Pair(3, 4);\n    al.add(p3);\n    MaxDist(al, n);\n  }\n}\n", "python": "def MaxDist(A, N):\n    V = [0 for i in range(N)]\n    V1 = [0 for i in range(N)]\n    for i in range(N):\n        V[i] = A[i][0] + A[i][1]\n        V1[i] = A[i][0] - A[i][1]\n    V.sort()\n    V1.sort()\n    maximum = max(V[-1] - V[0], V1[-1] - V1[0])\n    print(maximum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    A = [[1, 2], [2, 3], [3, 4]]\n    MaxDist(A, N)\n"}
{"text": "Rearrange an array to maximize i * arr [ i ] ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int findOptimalSolution(int[] a, int N) {\n    Arrays.sort(a);\n    int points = 0;\n    for (int i = 0; i < N; i++) {\n      points += a[i] * i;\n    }\n    return points;\n  }\n\n  public static void main(String args[]) {\n    int[] a = {1, 4, 2, 3, 9};\n    int N = a.length;\n    System.out.println(findOptimalSolution(a, N));\n  }\n}\n", "python": "def findOptimalSolution(a, N):\n    a.sort()\n    points = 0\n    for i in range(0, N):\n        points += a[i] * i\n    return points\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [1, 4, 2, 3, 9]\n    N = len(a)\n    print(findOptimalSolution(a, N))\n"}
{"text": "Sort first k values in ascending order and remaining n ", "java": "import java.util.*;\n\npublic class SortExample {\n  static void printOrder(Integer[] arr, int k) {\n    int n = arr.length;\n    Arrays.sort(arr, 0, k);\n    Arrays.sort(arr, k, n, Collections.reverseOrder());\n  }\n\n  public static void main(String[] args) {\n    Integer[] arr = {5, 4, 6, 2, 1, 3, 8, 9, -1};\n    int k = 4;\n    printOrder(arr, k);\n    System.out.printf(\" % s \", Arrays.toString(arr));\n  }\n}\n", "python": "def printOrder(arr, n, k):\n    a = arr[0:k]\n    a.sort()\n    b = arr[k:n]\n    b.sort()\n    b.reverse()\n    return a + b\n\n\narr = [5, 4, 6, 2, 1, 3, 8, 9, -1]\nk = 4\nn = len(arr)\narr = printOrder(arr, n, k)\nfor i in range(n):\n    print(arr[i], end=\" \u2581 \")\n"}
{"text": "Merging and Sorting Two Unsorted Stacks ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static Stack<Integer> res = new Stack<Integer>();\n  static Stack<Integer> tmpStack = new Stack<Integer>();\n\n  static void sortStack(Stack<Integer> input) {\n    while (input.size() != 0) {\n      int tmp = input.peek();\n      input.pop();\n      while (tmpStack.size() != 0 && tmpStack.peek() > tmp) {\n        input.push(tmpStack.peek());\n        tmpStack.pop();\n      }\n      tmpStack.push(tmp);\n    }\n  }\n\n  static void sortedMerge(Stack<Integer> s1, Stack<Integer> s2) {\n    while (s1.size() != 0) {\n      res.push(s1.peek());\n      s1.pop();\n    }\n    while (s2.size() != 0) {\n      res.push(s2.peek());\n      s2.pop();\n    }\n    sortStack(res);\n  }\n\n  public static void main(String args[]) {\n    Stack<Integer> s1 = new Stack<Integer>();\n    Stack<Integer> s2 = new Stack<Integer>();\n    s1.push(34);\n    s1.push(3);\n    s1.push(31);\n    s2.push(1);\n    s2.push(12);\n    s2.push(23);\n    sortedMerge(s1, s2);\n    System.out.println(\" Sorted \u2581 and \u2581 merged \u2581 stack \u2581 : \");\n    while (tmpStack.size() != 0) {\n      System.out.print(tmpStack.peek() + \" \u2581 \");\n      tmpStack.pop();\n    }\n  }\n}\n", "python": "def sortStack(Input):\n    tmpStack = []\n    while len(Input) != 0:\n        tmp = Input[-1]\n        Input.pop()\n        while len(tmpStack) != 0 and tmpStack[-1] > tmp:\n            Input.append(tmpStack[-1])\n            tmpStack.pop()\n        tmpStack.append(tmp)\n    return tmpStack\n\n\ndef sortedMerge(s1, s2):\n    res = []\n    while len(s1) != 0:\n        res.append(s1[-1])\n        s1.pop()\n    while len(s2) != 0:\n        res.append(s2[-1])\n        s2.pop()\n    return sortStack(res)\n\n\ns1 = []\ns2 = []\ns1.append(34)\ns1.append(3)\ns1.append(31)\ns2.append(1)\ns2.append(12)\ns2.append(23)\ntmpStack = []\ntmpStack = sortedMerge(s1, s2)\nprint(\" Sorted \u2581 and \u2581 merged \u2581 stack \u2581 : \")\nwhile len(tmpStack) != 0:\n    print(tmpStack[-1], end=\" \u2581 \")\n    tmpStack.pop()\n"}
{"text": "Program to sort string in descending order ", "java": "import java.util.*;\n\nclass GFG {\n  static void descOrder(char[] s) {\n    Arrays.sort(s);\n    reverse(s);\n  }\n\n  static void reverse(char[] a) {\n    int i, n = a.length;\n    char t;\n    for (i = 0; i < n / 2; i++) {\n      t = a[i];\n      a[i] = a[n - i - 1];\n      a[n - i - 1] = t;\n    }\n  }\n\n  public static void main(String[] args) {\n    char[] s = \" geeksforgeeks \".toCharArray();\n    System.out.println(String.valueOf(s));\n  }\n}\n", "python": "def descOrder(s):\n    s.sort(reverse=True)\n    str1 = \" \".join(s)\n    print(str1)\n\n\ndef main():\n    s = list(\" geeksforgeeks \")\n    descOrder(s)\n\n\nif __name__ == \" _ _ main _ _ \":\n    main()\n"}
{"text": "Minimize the sum of product of two arrays with permutations allowed ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static long minValue(int A[], int B[], int n) {\n    Arrays.sort(A);\n    Arrays.sort(B);\n    long result = 0;\n    for (int i = 0; i < n; i++) result += (A[i] * B[n - i - 1]);\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {3, 1, 1};\n    int B[] = {6, 5, 4};\n    int n = A.length;\n    ;\n    System.out.println(minValue(A, B, n));\n  }\n}\n", "python": "def minValue(A, B, n):\n    A.sort()\n    B.sort()\n    result = 0\n    for i in range(n):\n        result += A[i] * B[n - i - 1]\n    return result\n\n\nA = [3, 1, 1]\nB = [6, 5, 4]\nn = len(A)\nprint minValue(A, B, n)\n"}
{"text": "Maximize Array sum after changing sign of any elements for exactly M times ", "java": "import java.util.*;\n\nclass GFG {\n  static void findMaximumSumWithMflips(int arr[], int N, int M) {\n    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();\n    int sum = 0;\n    for (int i = 0; i < N; i++) {\n      minHeap.add(arr[i]);\n      sum += arr[i];\n    }\n    while (M-- > 0) {\n      sum -= minHeap.peek();\n      int temp = -1 * minHeap.peek();\n      minHeap.remove();\n      sum += temp;\n      minHeap.add(temp);\n    }\n    System.out.println(sum);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {-3, 7, -1, -5, -3};\n    int M = 4, N = 5;\n    findMaximumSumWithMflips(arr, N, M);\n  }\n}\n", "python": "def findMaximumSumWithMflips(arr, N, M):\n    pq = []\n    sum = 0\n    for i in range(N):\n        pq.append(arr[i])\n        sum += arr[i]\n        pq.sort()\n    while M > 0:\n        sum -= pq[0]\n        temp = -1 * pq[0]\n        pq = pq[1:]\n        sum += temp\n        pq.append(temp)\n        pq.sort()\n        M -= 1\n    print(sum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [-3, 7, -1, -5, -3]\n    N = len(arr)\n    M = 4\n    findMaximumSumWithMflips(arr, N, M)\n"}
{"text": "Minimum operations to make Array equal by repeatedly adding K from an element and subtracting K from other ", "java": "import java.io.*;\n\nclass GFG {\n  static void miniOperToMakeAllEleEqual(int arr[], int n, int k) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += arr[i];\n    }\n    if (sum % n != 0) {\n      System.out.println(-1);\n      return;\n    }\n    int valueAfterDivision = sum / n;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n      if (Math.abs(valueAfterDivision - arr[i]) % k != 0) {\n        System.out.println(-1);\n        return;\n      }\n      count += Math.abs(valueAfterDivision - arr[i]) / k;\n    }\n    System.out.println((int) count / 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 3, k = 3;\n    int arr[] = {5, 8, 11};\n    miniOperToMakeAllEleEqual(arr, n, k);\n  }\n}\n", "python": "def miniOperToMakeAllEleEqual(arr, n, k):\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    if sum % n:\n        print(-1)\n        return\n    valueAfterDivision = sum // n\n    count = 0\n    for i in range(n):\n        if abs(valueAfterDivision - arr[i]) % k != 0:\n            print(-1)\n            return\n        count += abs(valueAfterDivision - arr[i]) // k\n    print(count // 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    k = 3\n    arr = [5, 8, 11]\n    miniOperToMakeAllEleEqual(arr, n, k)\n"}
{"text": "Maximum value of ( arr [ i ] * arr [ j ] ) + ( arr [ j ] ", "java": "import java.util.*;\n\nclass GFG {\n  static int calc(int a, int b) {\n    return a * b + (b - a);\n  }\n\n  static int findMaximum(int[] arr, int N) {\n    Arrays.sort(arr);\n    int ans = (int) -1e9;\n    ans = Math.max(ans, calc(arr[0], arr[1]));\n    ans = Math.max(ans, calc(arr[N - 2], arr[N - 1]));\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {0, -47, 12};\n    int N = arr.length;\n    System.out.println(findMaximum(arr, N));\n  }\n}\n", "python": "def calc(a, b):\n    return a * b + (b - a)\n\n\ndef findMaximum(arr, N):\n    arr = sorted(arr)\n    ans = -(10 ** 9)\n    ans = max(ans, calc(arr[0], arr[1]))\n    ans = max(ans, calc(arr[N - 2], arr[N - 1]))\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [0, -47, 12]\n    N = len(arr)\n    print(findMaximum(arr, N))\n    arr = [0, -47, 12]\n    N = len(arr)\n    print(findMaximum(arr, N))\n"}
{"text": "Minimize operations of removing 2 i ", "java": "import java.util.*;\n\nclass GFG {\n  static int minimumStepReqArr(int[] arr, int N) {\n    int cntStep = 0;\n    N += 1;\n    for (int i = 31; i >= 0; i--) {\n      if ((N & (1 << i)) != 0) {\n        cntStep += 1;\n      }\n    }\n    return cntStep;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3};\n    int N = arr.length;\n    System.out.println(minimumStepReqArr(arr, N));\n  }\n}\n", "python": "def minimumStepReqArr(arr, N):\n    cntStep = 0\n    N += 1\n    i = 31\n    while i >= 0:\n        if N & (1 << i):\n            cntStep += 1\n        i -= 1\n    return cntStep\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3]\n    N = len(arr)\n    print(minimumStepReqArr(arr, N))\n"}
{"text": "Minimize removal of alternating subsequences to empty given Binary String ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static void minOpsToEmptyString(String S, int N) {\n    int one = 0, zero = 0;\n    int x0 = 0, x1 = 0;\n    for (int i = 0; i < N; i++) {\n      if (S.charAt(i) == '0') {\n        x0++;\n        x1 = 0;\n      } else {\n        x1++;\n        x0 = 0;\n      }\n      zero = Math.max(x0, zero);\n      one = Math.max(x1, one);\n    }\n    System.out.println(Math.max(one, zero));\n  }\n\n  public static void main(String[] args) {\n    String S = \"0100100111\";\n    int N = S.length();\n    minOpsToEmptyString(S, N);\n  }\n}\n", "python": "def minOpsToEmptyString(S, N):\n    one = 0\n    zero = 0\n    x0 = 0\n    x1 = 0\n    for i in range(N):\n        if S[i] == \"0\":\n            x0 += 1\n            x1 = 0\n        else:\n            x1 += 1\n            x0 = 0\n        zero = max(x0, zero)\n        one = max(x1, one)\n    print(max(one, zero))\n\n\nif __name__ == \" _ _ main _ _ \":\n    S = \"0100100111\"\n    N = len(S)\n    minOpsToEmptyString(S, N)\n"}
{"text": "Find the greater number closest to N having at most one non ", "java": "import java.io.*;\n\nclass GFG {\n  static int power(int X, int n) {\n    int res = 1;\n    while (n != 0) {\n      if ((n & 1) != 0) res = res * X;\n      X = X * X;\n      n = n >> 1;\n    }\n    return res;\n  }\n\n  static int closestgtNum(int N) {\n    int n = (int) Math.log10(N) + 1;\n    int P = power(10, n - 1);\n    int Y = N % P;\n    int res = N + (P - Y);\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int N = 120;\n    System.out.print(closestgtNum(N));\n  }\n}\n", "python": "import math\n\n\ndef power(X, n):\n    res = 1\n    while n != 0:\n        if n & 1 != 0:\n            res = res * X\n        X = X * X\n        n = n >> 1\n    return res\n\n\ndef closestgtNum(N):\n    n = int(math.log10(N) + 1)\n    P = power(10, n - 1)\n    Y = N % P\n    res = N + (P - Y)\n    return res\n\n\nN = 120\nprint(closestgtNum(N))\n"}
{"text": "Minimum increments by index value required to obtain at least two equal Array elements ", "java": "import java.util.*;\n\nclass GFG {\n  static void incrementCount(int arr[], int N) {\n    int mini = arr[0] - arr[1];\n    for (int i = 2; i < N; i++) {\n      mini = Math.min(mini, arr[i - 1] - arr[i]);\n    }\n    System.out.println(mini);\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    int arr[] = {12, 8, 4};\n    incrementCount(arr, N);\n  }\n}\n", "python": "def incrementCount(arr, N):\n    mini = arr[0] - arr[1]\n    for i in range(2, N):\n        mini = min(mini, arr[i - 1] - arr[i])\n    print(mini)\n\n\nN = 3\narr = [12, 8, 4]\nincrementCount(arr, N)\n"}
{"text": "Find the Kth smallest element in the sorted generated array ", "java": "import java.util.Vector;\n\nclass GFG {\n  static class Pair {\n    private int first;\n    private int second;\n\n    Pair(int first, int second) {\n      this.first = first;\n      this.second = second;\n    }\n\n    public int getFirst() {\n      return first;\n    }\n\n    public int getSecond() {\n      return second;\n    }\n  }\n\n  static int solve(int[] Array, int N, int K) {\n    int[] count_Arr = new int[N + 2];\n    int factor = 1;\n    int size = N;\n    while (size > 0) {\n      int start = 1;\n      int end = size;\n      count_Arr[1] += factor * N;\n      count_Arr[end + 1] -= factor * N;\n      factor++;\n      size /= 2;\n    }\n    for (int i = 2; i <= N; i++) count_Arr[i] += count_Arr[i - 1];\n    Vector<Pair> element = new Vector<>();\n    for (int i = 0; i < N; i++) {\n      Pair x = new Pair(Array[i], count_Arr[i + 1]);\n      element.add(x);\n    }\n    int start = 1;\n    for (int i = 0; i < N; i++) {\n      int end = start + element.elementAt(0).getSecond() - 1;\n      if (K >= start && K <= end) return element.elementAt(i).getFirst();\n      start += element.elementAt(i).getSecond();\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {2, 4, 5, 1};\n    int N = arr.length;\n    int K = 13;\n    System.out.println(solve(arr, N, K));\n  }\n}\n", "python": "def solve(Array, N, K):\n    count_Arr = [0] * (N + 2)\n    factor = 1\n    size = N\n    while size:\n        start = 1\n        end = size\n        count_Arr[1] += factor * N\n        count_Arr[end + 1] -= factor * N\n        factor += 1\n        size //= 2\n    for i in range(2, N + 1):\n        count_Arr[i] += count_Arr[i - 1]\n    element = []\n    for i in range(N):\n        element.append((Array[i], count_Arr[i + 1]))\n    element.sort()\n    start = 1\n    for i in range(N):\n        end = start + element[i][1] - 1\n        if K >= start and K <= end:\n            return element[i][0]\n        start += element[i][1]\n    return -1\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 4, 5, 1]\n    N = len(arr)\n    K = 13\n    print(solve(arr, N, K))\n"}
{"text": "Minimize Cost with Replacement with other allowed ", "java": "import java.util.Arrays;\nimport java.util.Collections;\n\npublic class GfG {\n  public static int getMinCost(Integer arr[], int n) {\n    int min_ele = Collections.min(Arrays.asList(arr));\n    return min_ele * (n - 1);\n  }\n\n  public static void main(String[] args) {\n    Integer[] arr = {4, 2, 5};\n    int n = arr.length;\n    System.out.println(getMinCost(arr, n));\n  }\n}\n", "python": "def getMinCost(arr, n):\n    min_ele = min(arr)\n    return min_ele * (n - 1)\n\n\narr = [4, 2, 5]\nn = len(arr)\nprint(getMinCost(arr, n))\n"}
{"text": "Minimum cost to make array size 1 by removing larger of pairs ", "java": "\npublic class GFG {\n  static int cost(int[] a, int n) {\n    int min = a[0];\n    for (int i = 1; i < a.length; i++) {\n      if (a[i] < min) min = a[i];\n    }\n    return (n - 1) * min;\n  }\n\n  public static void main(String[] args) {\n    int[] a = {4, 3, 2};\n    int n = a.length;\n    System.out.println(cost(a, n));\n  }\n}\n", "python": "def cost(a, n):\n    return (n - 1) * min(a)\n\n\na = [4, 3, 2]\nn = len(a)\nprint(cost(a, n))\n"}
{"text": "Minimum cost for acquiring all coins with k extra coins allowed with every coin ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int minCost(int coin[], int n, int k) {\n    Arrays.sort(coin);\n    int coins_needed = (int) Math.ceil(1.0 * n / (k + 1));\n    int ans = 0;\n    for (int i = 0; i <= coins_needed - 1; i++) ans += coin[i];\n    return ans;\n  }\n\n  public static void main(String arg[]) {\n    int coin[] = {8, 5, 3, 10, 2, 1, 15, 25};\n    int n = coin.length;\n    int k = 3;\n    System.out.print(minCost(coin, n, k));\n  }\n}\n", "python": "import math\n\n\ndef minCost(coin, n, k):\n    coin.sort()\n    coins_needed = math.ceil(1.0 * n // (k + 1))\n    ans = 0\n    for i in range(coins_needed - 1 + 1):\n        ans += coin[i]\n    return ans\n\n\ncoin = [8, 5, 3, 10, 2, 1, 15, 25]\nn = len(coin)\nk = 3\nprint(minCost(coin, n, k))\n"}
{"text": "Count number of unique ways to paint a N x 3 grid ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void waysToPaint(int n) {\n    long same = 6;\n    long diff = 6;\n    for (int i = 0; i < n - 1; i++) {\n      long sameTmp = 3 * same + 2 * diff;\n      long diffTmp = 2 * same + 2 * diff;\n      same = sameTmp;\n      diff = diffTmp;\n    }\n    System.out.println(same + diff);\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    waysToPaint(N);\n  }\n}\n", "python": "def waysToPaint(n):\n    same = 6\n    diff = 6\n    for _ in range(n - 1):\n        sameTmp = 3 * same + 2 * diff\n        diffTmp = 2 * same + 2 * diff\n        same = sameTmp\n        diff = diffTmp\n    print(same + diff)\n\n\nN = 2\nwaysToPaint(N)\n"}
{"text": "Minimum pair merge operations required to make Array non ", "java": "import java.util.*;\n\nclass GFG {\n  static int solve(int[] a) {\n    int n = a.length;\n    int[] dp = new int[n + 1];\n    int[] val = new int[n + 1];\n    for (int i = n - 1; i >= 0; i--) {\n      int sum = a[i];\n      int j = i;\n      while (j + 1 < n && sum < val[j + 1]) {\n        j++;\n        sum += a[j];\n      }\n      dp[i] = (j - i) + dp[j + 1];\n      val[i] = sum;\n    }\n    return dp[0];\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 5, 3, 9, 1};\n    System.out.print(solve(arr));\n  }\n}\n", "python": "def solve(a):\n    n = len(a)\n    dp = [0] * (n + 1)\n    val = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        sum = a[i]\n        j = i\n        while j + 1 < n and sum < val[j + 1]:\n            j += 1\n            sum += a[j]\n        dp[i] = (j - i) + dp[j + 1]\n        val[i] = sum\n    return dp[0]\n\n\narr = [1, 5, 3, 9, 1]\nprint(solve(arr))\n"}
{"text": "Tiling with Dominoes ", "java": "import java.io.*;\n\nclass GFG {\n  static int countWays(int n) {\n    int[] A = new int[n + 1];\n    int[] B = new int[n + 1];\n    A[0] = 1;\n    A[1] = 0;\n    B[0] = 0;\n    B[1] = 1;\n    for (int i = 2; i <= n; i++) {\n      A[i] = A[i - 2] + 2 * B[i - 1];\n      B[i] = A[i - 1] + B[i - 2];\n    }\n    return A[n];\n  }\n\n  public static void main(String[] args) {\n    int n = 8;\n    System.out.println(countWays(n));\n  }\n}\n", "python": "def countWays(n):\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1]\n        B[i] = A[i - 1] + B[i - 2]\n    return A[n]\n\n\nn = 8\nprint(countWays(n))\n"}
{"text": "Count Derangements ( Permutation such that no element appears in its original position ) ", "java": "import java.io.*;\n\nclass GFG {\n  static int countDer(int n) {\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n    return (n - 1) * (countDer(n - 1) + countDer(n - 2));\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(\" Count \u2581 of \u2581 Derangements \u2581 is \u2581 \" + countDer(n));\n  }\n}\n", "python": "def countDer(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return (n - 1) * (countDer(n - 1) + countDer(n - 2))\n\n\nn = 4\nprint(\" Count \u2581 of \u2581 Derangements \u2581 is \u2581 \", countDer(n))\n"}
{"text": "Count Derangements ( Permutation such that no element appears in its original position ) ", "java": "import java.io.*;\n\nclass GFG {\n  static int countDer(int n) {\n    int der[] = new int[n + 1];\n    der[1] = 0;\n    der[2] = 1;\n    for (int i = 3; i <= n; ++i) der[i] = (i - 1) * (der[i - 1] + der[i - 2]);\n    return der[n];\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(\" Count \u2581 of \u2581 Derangements \u2581 is \u2581 \" + countDer(n));\n  }\n}\n", "python": "def countDer(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return (n - 1) * (countDer(n - 1) + countDer(n - 2))\n\n\nn = 4\nprint(\" Count \u2581 of \u2581 Derangements \u2581 is \u2581 \", countDer(n))\n"}
{"text": "Longest Palindromic Subsequence ", "java": "class GFG {\n  static int max(int x, int y) {\n    return (x > y) ? x : y;\n  }\n\n  static int lps(char seq[], int i, int j) {\n    if (i == j) {\n      return 1;\n    }\n    if (seq[i] == seq[j] && i + 1 == j) {\n      return 2;\n    }\n    if (seq[i] == seq[j]) {\n      return lps(seq, i + 1, j - 1) + 2;\n    }\n    return max(lps(seq, i, j - 1), lps(seq, i + 1, j));\n  }\n\n  public static void main(String[] args) {\n    String seq = \" GEEKSFORGEEKS \";\n    int n = seq.length();\n    System.out.printf(\n        \" The \u2581 length \u2581 of \u2581 the \u2581 LPS \u2581 is \u2581 % d \", lps(seq.toCharArray(), 0, n - 1));\n  }\n}\n", "python": "def max(x, y):\n    if x > y:\n        return x\n    return y\n\n\ndef lps(seq, i, j):\n    if i == j:\n        return 1\n    if seq[i] == seq[j] and i + 1 == j:\n        return 2\n    if seq[i] == seq[j]:\n        return lps(seq, i + 1, j - 1) + 2\n    return max(lps(seq, i, j - 1), lps(seq, i + 1, j))\n\n\nif __name__ == \" _ _ main _ _ \":\n    seq = \" GEEKSFORGEEKS \"\n    n = len(seq)\n    print(\" The \u2581 length \u2581 of \u2581 the \u2581 LPS \u2581 is \", lps(seq, 0, n - 1))\n"}
{"text": "Bitwise XOR of a Binary array ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static String reverse(String str) {\n    String rev = \" \";\n    for (int i = str.length() - 1; i >= 0; i--) rev = rev + str.charAt(i);\n    return rev;\n  }\n\n  static String strBitwiseXOR(String[] arr, int n) {\n    String result = \" \";\n    int max_len = Integer.MIN_VALUE;\n    for (int i = 0; i < n; i++) {\n      max_len = Math.max(max_len, (int) arr[i].length());\n      arr[i] = reverse(arr[i]);\n    }\n    for (int i = 0; i < n; i++) {\n      String s = \" \";\n      for (int j = 0; j < max_len - arr[i].length(); j++) s += '0';\n      arr[i] = arr[i] + s;\n    }\n    for (int i = 0; i < max_len; i++) {\n      int pres_bit = 0;\n      for (int j = 0; j < n; j++) pres_bit = pres_bit ^ (arr[j].charAt(i) - '0');\n      result += (char) (pres_bit + '0');\n    }\n    result = reverse(result);\n    return result;\n  }\n\n  public static void main(String[] args) {\n    String[] arr = {\"1000\", \"10001\", \"0011\"};\n    int n = arr.length;\n    System.out.print(strBitwiseXOR(arr, n));\n  }\n}\n", "python": "import sys\n\n\ndef strBitwiseXOR(arr, n):\n    result = \" \"\n    max_len = -1\n    for i in range(n):\n        max_len = max(max_len, len(arr[i]))\n        arr[i] = arr[i][::-1]\n    for i in range(n):\n        s = \" \"\n        for j in range(max_len - len(arr[i])):\n            s += \"0\"\n        arr[i] = arr[i] + s\n    for i in range(max_len):\n        pres_bit = 0\n        for j in range(n):\n            pres_bit = pres_bit ^ (ord(arr[j][i]) - ord(\"0\"))\n        result += chr((pres_bit) + ord(\"0\"))\n    result = result[::-1]\n    print(result)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [\"1000\", \"10001\", \"0011\"]\n    n = len(arr)\n    strBitwiseXOR(arr, n)\n"}
{"text": "N ", "java": "class GFG {\n  static char NthCharacter(int n) {\n    String s = \" \";\n    int c = 1;\n    for (int i = 1; ; i++) {\n      if (c < 10) s += Integer.toString(c);\n      else {\n        String s1 = \" \";\n        int dup = c;\n        while (dup > 0) {\n          s1 += Integer.toString(dup % 10);\n          dup /= 10;\n        }\n        StringBuilder temp = new StringBuilder();\n        temp.append(s1);\n        temp = temp.reverse();\n        s += temp;\n      }\n      c++;\n      if (s.length() >= n) {\n        return s.charAt(n - 1);\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    int n = 11;\n    System.out.println(NthCharacter(n));\n  }\n}\n", "python": "def nthElement(a, b, n):\n    seq = []\n    for i in range(1, n + 1):\n        seq.append(a * i)\n    seq.sort()\n    i = 1\n    k = n\n    while i <= n and k > 0:\n        try:\n            z = seq.index(b * i)\n        except ValueError:\n            seq.append(b * i)\n            seq.sort()\n            k -= 1\n        i += 1\n    return seq[n - 1]\n\n\na = 3\nb = 5\nn = 5\nprint(nthElement(a, b, n))\n"}
{"text": "Check if any permutation of a large number is divisible by 8 ", "java": "import java.util.*;\n\nclass GFG {\n  public static boolean solve(String n, int l) {\n    if (l < 3) {\n      if (Integer.parseInt(n) % 8 == 0) return true;\n      n = new String((new StringBuilder()).append(n).reverse());\n      if (Integer.parseInt(n) % 8 == 0) return true;\n      return false;\n    }\n    int[] hash = new int[10];\n    for (int i = 0; i < l; i++) hash[n.charAt(i) - '0']++;\n    for (int i = 104; i < 1000; i += 8) {\n      int dup = i;\n      int[] freq = new int[10];\n      freq[dup % 10]++;\n      dup = dup / 10;\n      freq[dup % 10]++;\n      dup = dup / 10;\n      freq[dup % 10]++;\n      dup = i;\n      if (freq[dup % 10] > hash[dup % 10]) continue;\n      dup = dup / 10;\n      if (freq[dup % 10] > hash[dup % 10]) continue;\n      dup = dup / 10;\n      if (freq[dup % 10] > hash[dup % 10]) continue;\n      return true;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    String number = \"31462708\";\n    int l = number.length();\n    if (solve(number, l)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def solve(n, l):\n    if l < 3:\n        if int(n) % 8 == 0:\n            return True\n        n = n[::-1]\n        if int(n) % 8 == 0:\n            return True\n        return False\n    hash = 10 * [0]\n    for i in range(0, l):\n        hash[int(n[i]) - 0] += 1\n    for i in range(104, 1000, 8):\n        dup = i\n        freq = 10 * [0]\n        freq[int(dup % 10)] += 1\n        dup = dup / 10\n        freq[int(dup % 10)] += 1\n        dup = dup / 10\n        freq[int(dup % 10)] += 1\n        dup = i\n        if freq[int(dup % 10)] > hash[int(dup % 10)]:\n            continue\n        dup = dup / 10\n        if freq[int(dup % 10)] > hash[int(dup % 10)]:\n            continue\n        dup = dup / 10\n        if freq[int(dup % 10)] > hash[int(dup % 10)]:\n            continue\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    number = \"31462708\"\n    l = len(number)\n    if solve(number, l):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Convert String into Binary Sequence ", "java": "import java.util.*;\n\nclass Node {\n  static void strToBinary(String s) {\n    int n = s.length();\n    for (int i = 0; i < n; i++) {\n      int val = Integer.valueOf(s.charAt(i));\n      String bin = \" \";\n      while (val > 0) {\n        if (val % 2 == 1) {\n          bin += '1';\n        } else bin += '0';\n        val /= 2;\n      }\n      bin = reverse(bin);\n      System.out.print(bin + \" \u2581 \");\n    }\n  }\n\n  static String reverse(String input) {\n    char[] a = input.toCharArray();\n    int l, r = 0;\n    r = a.length - 1;\n    for (l = 0; l < r; l++, r--) {\n      char temp = a[l];\n      a[l] = a[r];\n      a[r] = temp;\n    }\n    return String.valueOf(a);\n  }\n\n  public static void main(String[] args) {\n    String s = \" geeks \";\n    strToBinary(s);\n  }\n}\n", "python": "def strToBinary(s):\n    bin_conv = []\n    for c in s:\n        ascii_val = ord(c)\n        binary_val = bin(ascii_val)\n        bin_conv.append(binary_val[2:])\n    return \" \u2581 \".join(bin_conv)\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \" geeks \"\nprint(strToBinary(s))\n"}
{"text": "Lexicographically n ", "java": "import java.util.*;\n\nclass GFG {\n  static void nPermute(char[] str, int n) {\n    Arrays.sort(str);\n    int i = 1;\n    do {\n      if (i == n) break;\n      i++;\n    } while (next_permutation(str));\n    System.out.println(String.valueOf(str));\n  }\n\n  static boolean next_permutation(char[] p) {\n    for (int a = p.length - 2; a >= 0; --a)\n      if (p[a] < p[a + 1])\n        for (int b = p.length - 1; ; --b)\n          if (p[b] > p[a]) {\n            char t = p[a];\n            p[a] = p[b];\n            p[b] = t;\n            for (++a, b = p.length - 1; a < b; ++a, --b) {\n              t = p[a];\n              p[a] = p[b];\n              p[b] = t;\n            }\n            return true;\n          }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    String str = \" GEEKSFORGEEKS \";\n    int n = 100;\n    nPermute(str.toCharArray(), n);\n  }\n}\n", "python": "def nPermute(string, n):\n    string = list(string)\n    new_string = []\n    string.sort()\n    j = 2\n    while next_permutation(string):\n        new_string = string\n        if j == n:\n            break\n        j += 1\n    print(\" \".join(new_string))\n\n\ndef next_permutation(L):\n    n = len(L)\n    i = n - 2\n    while i >= 0 and L[i] >= L[i + 1]:\n        i -= 1\n    if i == -1:\n        return False\n    j = i + 1\n    while j < n and L[j] > L[i]:\n        j += 1\n    j -= 1\n    L[i], L[j] = L[j], L[i]\n    left = i + 1\n    right = n - 1\n    while left < right:\n        L[left], L[right] = L[right], L[left]\n        left += 1\n        right -= 1\n    return True\n\n\nif __name__ == \" _ _ main _ _ \":\n    string = \" GEEKSFORGEEKS \"\n    n = 100\n    nPermute(string, n)\n"}
{"text": "How to find Lexicographically previous permutation ? ", "java": "class GFG {\n  static boolean prevPermutation(char[] str) {\n    int n = str.length - 1;\n    int i = n;\n    while (i > 0 && str[i - 1] <= str[i]) {\n      i--;\n    }\n    if (i <= 0) {\n      return false;\n    }\n    int j = i - 1;\n    while (j + 1 <= n && str[j + 1] <= str[i - 1]) {\n      j++;\n    }\n    swap(str, i - 1, j);\n    StringBuilder sb = new StringBuilder(String.valueOf(str));\n    sb.reverse();\n    str = sb.toString().toCharArray();\n    return true;\n  }\n\n  static String swap(char[] ch, int i, int j) {\n    char temp = ch[i];\n    ch[i] = ch[j];\n    ch[j] = temp;\n    return String.valueOf(ch);\n  }\n\n  public static void main(String[] args) {\n    char[] str = \"4321\".toCharArray();\n    if (prevPermutation(str)) {\n      System.out.println(\" Previous \u2581 permutation \u2581 is \u2581 \" + String.valueOf(str));\n    } else {\n      System.out.println(\" Previous \u2581 permutation \" + \" doesn ' t \u2581 exist \");\n    }\n  }\n}\n", "python": "def prevPermutation(str):\n    n = len(str) - 1\n    i = n\n    while i > 0 and str[i - 1] <= str[i]:\n        i -= 1\n    if i <= 0:\n        return False\n    j = i - 1\n    while j + 1 <= n and str[j + 1] <= str[i - 1]:\n        j += 1\n    str = list(str)\n    temp = str[i - 1]\n    str[i - 1] = str[j]\n    str[j] = temp\n    str = \" \".join(str)\n    str[::-1]\n    return True, str\n\n\nif __name__ == \" _ _ main _ _ \":\n    str = \"4321\"\n    b, str = prevPermutation(str)\n    if b == True:\n        print(\" Previous \u2581 permutation \u2581 is \", str)\n    else:\n        print(\" Previous \u2581 permutation \u2581 doesn ' t \u2581 exist \")\n    DEDENT\n"}
{"text": "Remove spaces from a given string ", "java": "class GFG {\n  static String removeSpace(String str) {\n    str = str.replaceAll(\" \\\\ s \", \" \");\n    return str;\n  }\n\n  public static void main(String args[]) {\n    String str = \" g \u2581 eeks \u2581 for \u2581 ge \u2581 eeks \u2581 \";\n    System.out.println(removeSpace(str));\n  }\n}\n", "python": "def removeSpaces(string):\n    string = string.replace(\" \u2581 \", \" \")\n    return string\n\n\nstring = \" g \u2581 eeks \u2581 for \u2581 ge \u2581 eeks \u2581 \"\nprint(removeSpaces(string))\n"}
{"text": "Find remainder when a number A raised to N factorial is divided by P ", "java": "import java.io.*;\n\nclass GFG {\n  static long power(long x, long y, long p) {\n    long res = 1;\n    x = x % p;\n    if (x == 0) return 0;\n    while (y > 0) {\n      if ((y & 1) == 1) res = (res * x) % p;\n      y = y >> 1;\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  static long remainder(long n, long a, long p) {\n    long ans = a % p;\n    for (long i = 1; i <= n; i++) ans = power(ans, i, p);\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    long A = 2, N = 1, P = 2;\n    System.out.println(remainder(N, A, P));\n  }\n}\n", "python": "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\n\ndef remainder(n, a, p):\n    ans = a % p\n    for i in range(1, n + 1):\n        ans = power(ans, i, p)\n    return ans\n\n\nA = 2\nN = 1\nP = 2\nprint(remainder(N, A, P))\n"}
{"text": "Modular exponentiation ( Recursive ) ", "java": "import java.io.*;\n\nclass GFG {\n  static int exponentMod(int A, int B, int C) {\n    if (A == 0) return 0;\n    if (B == 0) return 1;\n    long y;\n    if (B % 2 == 0) {\n      y = exponentMod(A, B / 2, C);\n      y = (y * y) % C;\n    } else {\n      y = A % C;\n      y = (y * exponentMod(A, B - 1, C) % C) % C;\n    }\n    return (int) ((y + C) % C);\n  }\n\n  public static void main(String args[]) {\n    int A = 2, B = 5, C = 13;\n    System.out.println(\" Power \u2581 is \u2581 \" + exponentMod(A, B, C));\n  }\n}\n", "python": "def exponentMod(A, B, C):\n    if A == 0:\n        return 0\n    if B == 0:\n        return 1\n    y = 0\n    if B % 2 == 0:\n        y = exponentMod(A, B / 2, C)\n        y = (y * y) % C\n    else:\n        y = A % C\n        y = (y * exponentMod(A, B - 1, C) % C) % C\n    return (y + C) % C\n\n\nA = 2\nB = 5\nC = 13\nprint(\" Power \u2581 is \", exponentMod(A, B, C))\n"}
{"text": "Program to calculate angle between two N ", "java": "class GFG {\n  static double magnitude(double arr[], int N) {\n    double magnitude = 0;\n    for (int i = 0; i < N; i++) magnitude += arr[i] * arr[i];\n    return Math.sqrt(magnitude);\n  }\n\n  static double dotProduct(double[] arr, double[] brr, int N) {\n    double product = 0;\n    for (int i = 0; i < N; i++) product = product + arr[i] * brr[i];\n    return product;\n  }\n\n  static void angleBetweenVectors(double[] arr, double[] brr, int N) {\n    double dotProductOfVectors = dotProduct(arr, brr, N);\n    double magnitudeOfA = magnitude(arr, N);\n    double magnitudeOfB = magnitude(brr, N);\n    double angle = dotProductOfVectors / (magnitudeOfA * magnitudeOfB);\n    System.out.println(angle);\n  }\n\n  public static void main(String[] args) {\n    double[] arr = {-0.5, -2, 1};\n    double[] brr = {-1, -1, 0.3};\n    int N = arr.length;\n    angleBetweenVectors(arr, brr, N);\n  }\n}\n", "python": "import math\n\n\ndef magnitude(arr, N):\n    magnitude = 0\n    for i in range(N):\n        magnitude += arr[i] * arr[i]\n    return math.sqrt(magnitude)\n\n\ndef dotProduct(arr, brr, N):\n    product = 0\n    for i in range(N):\n        product = product + arr[i] * brr[i]\n    return product\n\n\ndef angleBetweenVectors(arr, brr, N):\n    dotProductOfVectors = dotProduct(arr, brr, N)\n    magnitudeOfA = magnitude(arr, N)\n    magnitudeOfB = magnitude(brr, N)\n    angle = dotProductOfVectors / (magnitudeOfA * magnitudeOfB)\n    print(\" % .5f \" % angle)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [-0.5, -2, 1]\n    brr = [-1, -1, 0.3]\n    N = len(arr)\n    angleBetweenVectors(arr, brr, N)\n"}
{"text": "Area of Circumcircle of an Equilateral Triangle using Median ", "java": "import java.util.*;\n\nclass GFG {\n  static double circleArea(double r) {\n    double pi = 3.14159265358979323846;\n    return (pi * r * r);\n  }\n\n  static double findCircleAreaByMedian(int m) {\n    double r = 2 * m / 3;\n    return circleArea(r);\n  }\n\n  public static void main(String args[]) {\n    int m = 3;\n    System.out.printf(\" % .4f \", findCircleAreaByMedian(m));\n  }\n}\n", "python": "pi = 3.14159265358979323846\n\n\ndef circleArea(r):\n    print(round(pi * r * r, 4))\n\n\ndef findCircleAreaByMedian(m):\n    r = 2 * m / 3\n    circleArea(r)\n\n\nif __name__ == \" _ _ main _ _ \":\n    m = 3\n    findCircleAreaByMedian(m)\n"}
{"text": "Area of the Largest Triangle inscribed in a Hexagon ", "java": "import java.io.*;\n\nclass GFG {\n  static double trianglearea(double a) {\n    if (a < 0) return -1;\n    double area = (3 * Math.sqrt(3) * Math.pow(a, 2)) / 4;\n    return area;\n  }\n\n  public static void main(String[] args) {\n    double a = 6;\n    System.out.println(trianglearea(a));\n  }\n}\n", "python": "import math\n\n\ndef trianglearea(a):\n    if a < 0:\n        return -1\n    area = (3 * math.sqrt(3) * math.pow(a, 2)) / 4\n    return area\n\n\na = 6\nprint(trianglearea(a))\n"}
{"text": "Equation of ellipse from its focus , directrix , and eccentricity ", "java": "import java.util.*;\n\nclass solution {\n  static void equation_ellipse(float x1, float y1, float a, float b, float c, float e) {\n    float t = a * a + b * b;\n    float a1 = t - e * (a * a);\n    float b1 = t - e * (b * b);\n    float c1 = (-2 * t * x1) - (2 * e * c * a);\n    float d1 = (-2 * t * y1) - (2 * e * c * b);\n    float e1 = -2 * e * a * b;\n    float f1 = (-e * c * c) + (t * x1 * x1) + (t * y1 * y1);\n    System.out.println(\" Equation \u2581 of \u2581 ellipse \u2581 is \u2581 \");\n    System.out.print(\n        a1\n            + \" \u2581 x ^ 2 \u2581 + \u2581 \"\n            + b1\n            + \" \u2581 y ^ 2 \u2581 + \u2581 \"\n            + c1\n            + \" \u2581 x \u2581 + \u2581 \"\n            + d1\n            + \" \u2581 y \u2581 + \u2581 \"\n            + e1\n            + \" \u2581 xy \u2581 + \u2581 \"\n            + f1\n            + \" \u2581 = \u2581 0\");\n  }\n\n  public static void main(String arr[]) {\n    float x1 = 1, y1 = 1, a = 1, b = -1, c = 3, e = (float) 0.5 * (float) 0.5;\n    equation_ellipse(x1, y1, a, b, c, e);\n  }\n}\n", "python": "def equation_ellipse(x1, y1, a, b, c, e):\n    t = a * a + b * b\n    a1 = t - e * (a * a)\n    b1 = t - e * (b * b)\n    c1 = (-2 * t * x1) - (2 * e * c * a)\n    d1 = (-2 * t * y1) - (2 * e * c * b)\n    e1 = -2 * e * a * b\n    f1 = (-e * c * c) + (t * x1 * x1) + (t * y1 * y1)\n    print(\n        \" Equation \u2581 of \u2581 ellipse \u2581 is \",\n        a1,\n        \" x ^ 2 \u2581 + \",\n        b1,\n        \" y ^ 2 \u2581 + \",\n        c1,\n        \" x \u2581 + \",\n        d1,\n        \" y \u2581 + \",\n        e1,\n        \" xy \u2581 + \",\n        f1,\n        \" = \u2581 0\",\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    x1, y1, a, b, c, e = 1, 1, 1, -1, 3, 0.5 * 0.5\n    equation_ellipse(x1, y1, a, b, c, e)\n"}
{"text": "Area of circle which is inscribed in equilateral triangle ", "java": "import java.io.*;\n\nclass GFG {\n  static double PI = 3.14;\n\n  static double circle_inscribed(int a) {\n    return PI * (a * a) / 12;\n  }\n\n  public static void main(String[] args) {\n    int a = 4;\n    System.out.println(circle_inscribed(a));\n  }\n}\n", "python": "from math import pi\n\n\ndef circle_inscribed(a):\n    return pi * (a * a) / 12\n\n\na = 4\nprint(circle_inscribed(a))\n"}
{"text": "Program to find the Volume of an irregular tetrahedron ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void findVolume(double u, double v, double w, double U, double V, double W, double b) {\n    double uPow = Math.pow(u, 2);\n    double vPow = Math.pow(v, 2);\n    double wPow = Math.pow(w, 2);\n    double UPow = Math.pow(U, 2);\n    double VPow = Math.pow(V, 2);\n    double WPow = Math.pow(W, 2);\n    double a =\n        4 * (uPow * vPow * wPow)\n            - uPow * Math.pow((vPow + wPow - UPow), 2)\n            - vPow * Math.pow((wPow + uPow - VPow), 2)\n            - wPow * Math.pow((uPow + vPow - WPow), 2)\n            + (vPow + wPow - UPow) * (wPow + uPow - VPow) * (uPow + vPow - WPow);\n    double vol = Math.sqrt(a);\n    vol /= b;\n    System.out.printf(\" % .4f \", vol);\n  }\n\n  public static void main(String args[]) {\n    double u = 1000, v = 1000, w = 1000;\n    double U = 3, V = 4, W = 5;\n    double b = 12;\n    findVolume(u, v, w, U, V, W, b);\n  }\n}\n", "python": "from math import *\n\n\ndef findVolume(u, v, w, U, V, W, b):\n    uPow = pow(u, 2)\n    vPow = pow(v, 2)\n    wPow = pow(w, 2)\n    UPow = pow(U, 2)\n    VPow = pow(V, 2)\n    WPow = pow(W, 2)\n    a = (\n        4 * (uPow * vPow * wPow)\n        - uPow * pow((vPow + wPow - UPow), 2)\n        - vPow * pow((wPow + uPow - VPow), 2)\n        - wPow * pow((uPow + vPow - WPow), 2)\n        + (vPow + wPow - UPow) * (wPow + uPow - VPow) * (uPow + vPow - WPow)\n    )\n    vol = sqrt(a)\n    vol /= b\n    print(round(vol, 4))\n\n\nif __name__ == \" _ _ main _ _ \":\n    u, v, w = 1000, 1000, 1000\n    U, V, W = 3, 4, 5\n    b = 12\n    findVolume(u, v, w, U, V, W, b)\n"}
{"text": "Hexadecagonal number ", "java": "import java.io.*;\n\nclass GFG {\n  static long hexadecagonalNum(long n) {\n    return ((14 * n * n) - 12 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    long n = 5;\n    System.out.println(n + \" th \u2581 \" + \" Hexadecagonal \u2581 number \u2581 : \u2581 \" + hexadecagonalNum(n));\n    n = 9;\n    System.out.println(n + \" th \u2581 \" + \" Hexadecagonal \u2581 number \u2581 : \u2581 \" + hexadecagonalNum(n));\n  }\n}\n", "python": "def hexadecagonalNum(n):\n    return ((14 * n * n) - 12 * n) // 2\n\n\nn = 5\nprint(\" % sth \u2581 Hexadecagonal \u2581 number \u2581 : \u2581 \" % n, hexadecagonalNum(n))\nn = 9\nprint(\" % sth \u2581 Hexadecagonal \u2581 number \u2581 : \u2581 \" % n, hexadecagonalNum(n))\n"}
{"text": "Maximum points of intersection n circles ", "java": "import java.io.*;\n\npublic class GFG {\n  static int intersection(int n) {\n    return n * (n - 1);\n  }\n\n  public static void main(String[] args) throws IOException {\n    System.out.println(intersection(3));\n  }\n}\n", "python": "def intersection(n):\n    return n * (n - 1)\n\n\nprint(intersection(3))\n"}
{"text": "Find all possible coordinates of parallelogram ", "java": "public class ParallelogramPoints {\n  public static void main(String[] s) {\n    int ax = 5, ay = 0;\n    int bx = 1, by = 1;\n    int cx = 2, cy = 5;\n    System.out.println(ax + bx - cx + \" , \u2581 \" + (ay + by - cy));\n    System.out.println(ax + cx - bx + \" , \u2581 \" + (ay + cy - by));\n    System.out.println(cx + bx - ax + \" , \u2581 \" + (cy + by - ax));\n  }\n}\n", "python": "ay = 0\nax = 5\nby = 1\nbx = 1\ncy = 5\ncx = 2\nprint(ax + bx - cx, \" , \u2581 \", ay + by - cy)\nprint(ax + cx - bx, \" , \u2581 \", ay + cy - by)\nprint(cx + bx - ax, \" , \u2581 \", cy + by - ax)\n"}
{"text": "Check whether a given point lies inside a rectangle or not ", "java": "class GFG {\n  static float area(int x1, int y1, int x2, int y2, int x3, int y3) {\n    return (float) Math.abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0);\n  }\n\n  static boolean check(\n      int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4, int x, int y) {\n    float A = area(x1, y1, x2, y2, x3, y3) + area(x1, y1, x4, y4, x3, y3);\n    float A1 = area(x, y, x1, y1, x2, y2);\n    float A2 = area(x, y, x2, y2, x3, y3);\n    float A3 = area(x, y, x3, y3, x4, y4);\n    float A4 = area(x, y, x1, y1, x4, y4);\n    return (A == A1 + A2 + A3 + A4);\n  }\n\n  public static void main(String[] args) {\n    if (check(0, 10, 10, 0, 0, -10, -10, 0, 10, 15)) System.out.print(\" yes \");\n    else System.out.print(\" no \");\n  }\n}\n", "python": "def area(x1, y1, x2, y2, x3, y3):\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n\n\ndef check(x1, y1, x2, y2, x3, y3, x4, y4, x, y):\n    A = area(x1, y1, x2, y2, x3, y3) + area(x1, y1, x4, y4, x3, y3)\n    A1 = area(x, y, x1, y1, x2, y2)\n    A2 = area(x, y, x2, y2, x3, y3)\n    A3 = area(x, y, x3, y3, x4, y4)\n    A4 = area(x, y, x1, y1, x4, y4)\n    return A == A1 + A2 + A3 + A4\n\n\nif __name__ == \" _ _ main _ _ \":\n    if check(0, 10, 10, 0, 0, -10, -10, 0, 10, 15):\n        print(\" yes \")\n    else:\n        print(\" no \")\n    DEDENT\n"}
{"text": "Pizza cut problem ( Or Circle Division by Lines ) ", "java": "class GFG {\n  static int findMaximumPieces(int n) {\n    return 1 + n * (n + 1) / 2;\n  }\n\n  public static void main(String arg[]) {\n    System.out.print(findMaximumPieces(3));\n  }\n}\n", "python": "def findMaximumPieces(n):\n    return int(1 + n * (n + 1) / 2)\n\n\nprint(findMaximumPieces(3))\n"}
{"text": "Maximize the largest number K such that bitwise and of K till N is 0 ", "java": "import java.io.*;\n\nclass GFG {\n  static int findMaxK(int N) {\n    int p = (int) (Math.log(N) / Math.log(2));\n    return (int) Math.pow(2, p);\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.println(findMaxK(N) - 1);\n  }\n}\n", "python": "import math\n\n\ndef findMaxK(N):\n    p = math.log(N) // math.log(2)\n    return int(pow(2, p))\n\n\nN = 5\nprint(findMaxK(N) - 1)\n"}
{"text": "Maximum number formed from the digits of given three numbers ", "java": "public class GFG {\n  static int findkey(int A, int B, int C) {\n    int ans = 0;\n    int cur = 1;\n    while (A > 0) {\n      int a = A % 10;\n      int b = B % 10;\n      int c = C % 10;\n      A = A / 10;\n      B = B / 10;\n      C = C / 10;\n      int m = Math.max(a, Math.max(c, b));\n      ans += cur * m;\n      cur = cur * 10;\n    }\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int A = 3521, B = 2452, C = 1352;\n    System.out.println(findkey(A, B, C));\n  }\n}\n", "python": "def findkey(A, B, C):\n    ans = 0\n    cur = 1\n    while A > 0:\n        a = A % 10\n        b = B % 10\n        c = C % 10\n        A = A // 10\n        B = B // 10\n        C = C // 10\n        m = max(a, max(c, b))\n        ans += cur * m\n        cur = cur * 10\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = 3521\n    B = 2452\n    C = 1352\n    print(findkey(A, B, C))\n"}
{"text": "Sum of subsets nearest to K possible from two given arrays ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static int ans = Integer.MAX_VALUE;\n  static int mini = Integer.MAX_VALUE;\n\n  static void findClosestTarget(int i, int curr, int B[], int M, int K) {\n    if (Math.abs(curr - K) < mini) {\n      mini = Math.abs(curr - K);\n      ans = curr;\n    }\n    if (Math.abs(curr - K) == mini) {\n      ans = Math.min(ans, curr);\n    }\n    if (i >= M) return;\n    findClosestTarget(i + 1, curr + B[i], B, M, K);\n    findClosestTarget(i + 1, curr + 2 * B[i], B, M, K);\n    findClosestTarget(i + 1, curr, B, M, K);\n  }\n\n  static int findClosest(int A[], int B[], int N, int M, int K) {\n    for (int i = 0; i < N; i++) {\n      findClosestTarget(0, A[i], B, M, K);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {2, 3};\n    int B[] = {4, 5, 30};\n    int N = A.length;\n    int M = B.length;\n    int K = 18;\n    System.out.print(findClosest(A, B, N, M, K));\n  }\n}\n", "python": "ans = 10 ** 8\nmini = 10 ** 8\n\n\ndef findClosestTarget(i, curr, B, M, K):\n    global ans, mini\n    if abs(curr - K) < mini:\n        mini = abs(curr - K)\n        ans = curr\n    if abs(curr - K) == mini:\n        ans = min(ans, curr)\n    if i >= M:\n        return\n    findClosestTarget(i + 1, curr + B[i], B, M, K)\n    findClosestTarget(i + 1, curr + 2 * B[i], B, M, K)\n    findClosestTarget(i + 1, curr, B, M, K)\n\n\ndef findClosest(A, B, N, M, K):\n    for i in range(N):\n        findClosestTarget(0, A[i], B, M, K)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [2, 3]\n    B = [4, 5, 30]\n    N = len(A)\n    M = len(B)\n    K = 18\n    print(findClosest(A, B, N, M, K))\n"}
{"text": "Maximize sum of Bitwise AND of same ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int calcScore(ArrayList<Integer> p, int arr[]) {\n    int ans = 0;\n    for (int i = 0; i < arr.length; i++) {\n      ans += (p.get(i) & arr[i]);\n    }\n    return ans;\n  }\n\n  static int getMaxUtil(ArrayList<Integer> p, int arr[], int ans, boolean chosen[], int N) {\n    if (p.size() == N) {\n      ans = Math.max(ans, calcScore(p, arr));\n      return ans;\n    }\n    for (int i = 0; i < N; i++) {\n      if (chosen[i]) {\n        continue;\n      }\n      chosen[i] = true;\n      p.add(i);\n      ans = getMaxUtil(p, arr, ans, chosen, N);\n      chosen[i] = false;\n      p.remove(p.size() - 1);\n    }\n    return ans;\n  }\n\n  static void getMax(int arr[], int N) {\n    int ans = 0;\n    boolean chosen[] = new boolean[N];\n    ArrayList<Integer> p = new ArrayList<>();\n    int res = getMaxUtil(p, arr, ans, chosen, N);\n    System.out.println(res);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 2, 3, 6};\n    int N = arr.length;\n    getMax(arr, N);\n  }\n}\n", "python": "def calcScore(p, arr):\n    ans = 0\n    for i in range(len(arr)):\n        ans += p[i] & arr[i]\n    return ans\n\n\ndef getMaxUtil(p, arr, ans, chosen, N):\n    if len(p) == N:\n        ans = max(ans, calcScore(p, arr))\n        return ans\n    for i in range(N):\n        if chosen[i]:\n            continue\n        chosen[i] = True\n        p.append(i)\n        ans = getMaxUtil(p, arr, ans, chosen, N)\n        chosen[i] = False\n        p.pop()\n    return ans\n\n\ndef getMax(arr, N):\n    ans = 0\n    chosen = [False for i in range(N)]\n    p = []\n    res = getMaxUtil(p, arr, ans, chosen, N)\n    print(res)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [4, 2, 3, 6]\n    N = len(arr)\n    getMax(arr, N)\n"}
{"text": "Binary Tree ", "java": "class Node {\n  int key;\n  Node left, right;\n\n  public Node(int item) {\n    key = item;\n    left = right = null;\n  }\n}\n\nclass BinaryTree {\n  Node root;\n\n  BinaryTree(int key) {\n    root = new Node(key);\n  }\n\n  BinaryTree() {\n    root = null;\n  }\n\n  public static void main(String[] args) {\n    BinaryTree tree = new BinaryTree();\n    tree.root = new Node(1);\n    tree.root.left = new Node(2);\n    tree.root.right = new Node(3);\n    tree.root.left.left = new Node(4);\n  }\n}\n", "python": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n    DEDENT\n"}
{"text": "Find n ", "java": "import java.util.*;\n\nclass Solution {\n  static int count = 0;\n\n  static class Node {\n    int data;\n    Node left;\n    Node right;\n  }\n\n  static Node newNode(int data) {\n    Node node = new Node();\n    node.data = data;\n    node.left = null;\n    node.right = null;\n    return (node);\n  }\n\n  static void NthInorder(Node node, int n) {\n    if (node == null) return;\n    if (count <= n) {\n      NthInorder(node.left, n);\n      count++;\n      if (count == n) System.out.printf(\" % d \u2581 \", node.data);\n      NthInorder(node.right, n);\n    }\n  }\n\n  public static void main(String args[]) {\n    Node root = newNode(10);\n    root.left = newNode(20);\n    root.right = newNode(30);\n    root.left.left = newNode(40);\n    root.left.right = newNode(50);\n    int n = 4;\n    NthInorder(root, n);\n  }\n}\n", "python": "import math\n\n\ndef findNumber(n):\n    x = int(math.floor((-1 + math.sqrt(1 + 8 * n - 8)) / 2))\n    base = (x * (x + 1)) / 2 + 1\n    return n - base + 1\n\n\nn = 55\nprint(findNumber(n))\n"}
{"text": "Find n ", "java": "public class NthNodePostOrder {\n  static int flag = 0;\n\n  class Node {\n    int data;\n    Node left, right;\n\n    Node(int data) {\n      this.data = data;\n    }\n  }\n  ;\n\n  public static void NthPostordernode(Node root, int N) {\n    if (root == null) return;\n    if (flag <= N) {\n      NthPostordernode(root.left, N);\n      NthPostordernode(root.right, N);\n      flag++;\n      if (flag == N) System.out.print(root.data);\n    }\n  }\n\n  public static void main(String args[]) {\n    Node root = new Node(25);\n    root.left = new Node(20);\n    root.right = new Node(30);\n    root.left.left = new Node(18);\n    root.left.right = new Node(22);\n    root.right.left = new Node(24);\n    root.right.right = new Node(32);\n    int N = 6;\n    NthPostordernode(root, N);\n  }\n}\n", "python": "import math\n\n\ndef findNumber(n):\n    x = int(math.floor((-1 + math.sqrt(1 + 8 * n - 8)) / 2))\n    base = (x * (x + 1)) / 2 + 1\n    return n - base + 1\n\n\nn = 55\nprint(findNumber(n))\n"}
{"text": "Min steps to empty an Array by removing a pair each time with sum at most K ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int countMinSteps(int arr[], int target, int n) {\n    Arrays.sort(arr);\n    int minimumSteps = 0;\n    int i = 0;\n    int j = n - 1;\n    while (i <= j) {\n      if (arr[i] + arr[j] <= target) {\n        i += 1;\n        j -= 1;\n      } else {\n        j -= 1;\n      }\n      minimumSteps += 1;\n    }\n    return minimumSteps;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 6, 2, 9, 6, 5, 8, 10};\n    int target = 11;\n    int size = arr.length;\n    System.out.print(countMinSteps(arr, target, size));\n  }\n}\n", "python": "def countMinSteps(arr, target, n):\n    arr.sort()\n    minimumSteps = 0\n    i, j = 0, n - 1\n    while i <= j:\n        if arr[i] + arr[j] <= target:\n            i += 1\n            j -= 1\n        else:\n            j -= 1\n        minimumSteps += 1\n    return minimumSteps\n\n\narr = [4, 6, 2, 9, 6, 5, 8, 10]\ntarget = 11\nsize = len(arr)\nprint(countMinSteps(arr, target, size))\n"}
{"text": "Remove minimum elements from the array such that 2 * min becomes more than max ", "java": "import java.util.Arrays;\n\nclass GFG {\n  public static int upperBound(int[] array, int value) {\n    int low = 0;\n    int high = array.length;\n    while (low < high) {\n      final int mid = (low + high) / 2;\n      if (value >= array[mid]) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return low;\n  }\n\n  public static int Removal(int[] v, int n) {\n    Arrays.sort(v);\n    int ans = Integer.MAX_VALUE;\n    int k = 0;\n    for (int i : v) {\n      int j = upperBound(v, (2 * i));\n      ans = Math.min(ans, n - (j - k));\n      k++;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] a = {4, 5, 100, 9, 10, 11, 12, 15, 200};\n    int n = a.length;\n    System.out.println(Removal(a, n));\n  }\n}\n", "python": "from bisect import bisect_left as upper_bound\n\n\ndef Removal(v, n):\n    v = sorted(v)\n    ans = 10 ** 9\n    for i in range(len(v)):\n        j = upper_bound(v, (2 * (a[i])))\n        ans = min(ans, n - (j - i - 1))\n    return ans\n\n\na = [4, 5, 100, 9, 10, 11, 12, 15, 200]\nn = len(a)\nprint(Removal(a, n))\n"}
{"text": "Minimum boxes required to carry all gifts ", "java": "import java.util.*;\n\nclass solution {\n  static int numBoxes(int A[], int n, int K) {\n    Arrays.sort(A);\n    int i = 0, j = n - 1;\n    int ans = 0;\n    while (i <= j) {\n      ans++;\n      if (A[i] + A[j] <= K) i++;\n      j--;\n    }\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int A[] = {3, 2, 2, 1}, K = 3;\n    int n = A.length;\n    System.out.println(numBoxes(A, n, K));\n  }\n}\n", "python": "def numBoxex(A, n, K):\n    A.sort()\n    i = 0\n    j = n - 1\n    ans = 0\n    while i <= j:\n        ans += 1\n        if A[i] + A[j] <= K:\n            i += 1\n        j -= 1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [3, 2, 2, 1]\n    K = 3\n    n = len(A)\n    print(numBoxex(A, n, K))\n"}
{"text": "Number of visible boxes after putting one inside another ", "java": "import java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class GFG {\n  static int minimumBox(int[] arr, int n) {\n    Queue<Integer> q = new LinkedList<>();\n    Arrays.sort(arr);\n    q.add(arr[0]);\n    for (int i = 1; i < n; i++) {\n      int now = q.element();\n      if (arr[i] >= 2 * now) q.remove();\n      q.add(arr[i]);\n    }\n    return q.size();\n  }\n\n  public static void main(String args[]) {\n    int[] arr = {4, 1, 2, 8};\n    int n = arr.length;\n    System.out.println(minimumBox(arr, n));\n  }\n}\n", "python": "import collections\n\n\ndef minimumBox(arr, n):\n    q = collections.deque([])\n    arr.sort()\n    q.append(arr[0])\n    for i in range(1, n):\n        now = q[0]\n        if arr[i] >= 2 * now:\n            q.popleft()\n        q.append(arr[i])\n    return len(q)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [4, 1, 2, 8]\n    n = len(arr)\n    print(minimumBox(arr, n))\n"}
{"text": "Longest Common Prefix using Sorting ", "java": "import java.util.*;\n\npublic class GFG {\n  public String longestCommonPrefix(String[] a) {\n    int size = a.length;\n    if (size == 0) return \" \";\n    if (size == 1) return a[0];\n    Arrays.sort(a);\n    int end = Math.min(a[0].length(), a[size - 1].length());\n    int i = 0;\n    while (i < end && a[0].charAt(i) == a[size - 1].charAt(i)) i++;\n    String pre = a[0].substring(0, i);\n    return pre;\n  }\n\n  public static void main(String[] args) {\n    GFG gfg = new GFG();\n    String[] input = {\" geeksforgeeks \", \" geeks \", \" geek \", \" geezer \"};\n    System.out.println(\n        \" The \u2581 longest \u2581 Common \u2581 Prefix \u2581 is \u2581 : \u2581 \" + gfg.longestCommonPrefix(input));\n  }\n}\n", "python": "def longestCommonPrefix(a):\n    size = len(a)\n    if size == 0:\n        return \" \"\n    if size == 1:\n        return a[0]\n    a.sort()\n    end = min(len(a[0]), len(a[size - 1]))\n    i = 0\n    while i < end and a[0][i] == a[size - 1][i]:\n        i += 1\n    pre = a[0][0:i]\n    return pre\n\n\nif __name__ == \" _ _ main _ _ \":\n    input = [\" geeksforgeeks \", \" geeks \", \" geek \", \" geezer \"]\n    print(\" The \u2581 longest \u2581 Common \u2581 Prefix \u2581 is \u2581 : \", longestCommonPrefix(input))\n"}
{"text": "Find the minimum and maximum amount to buy all N candies ", "java": "import java.io.*;\nimport java.util.Arrays;\n\nclass GFG {\n  static void find(int[] arr, int n, int k) {\n    Arrays.sort(arr);\n    int b = (int) Math.ceil(n / k * 1.0);\n    int min_sum = 0, max_sum = 0;\n    for (int i = 0; i < b; i++) min_sum += arr[i];\n    for (int i = 2; i < arr.length; i++) max_sum += arr[i];\n    System.out.println(\" minimum \u2581 \" + min_sum);\n    System.out.println(\" maximum \u2581 \" + max_sum);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {3, 2, 1, 4};\n    int n = arr.length;\n    int k = 2;\n    find(arr, n, k);\n  }\n}\n", "python": "from math import ceil\n\n\ndef find(arr, n, k):\n    arr.sort()\n    b = int(ceil(n / k))\n    print(\" minimum \u2581 \", sum(arr[:b]))\n    print(\" maximum \u2581 \", sum(arr[-b:]))\n\n\narr = [3, 2, 1, 4]\nn = len(arr)\nk = 2\nfind(arr, n, k)\n"}
{"text": "Last element remaining after repeated removal of Array elements at perfect square indices ", "java": "import java.util.*;\n\nclass GFG {\n  static int findRemainingIndex(int N) {\n    int ans = N;\n    while (N > 1) {\n      int discard = (int) (Math.sqrt(N));\n      if (discard * discard == N) {\n        ans--;\n      }\n      N -= discard;\n    }\n    return ans;\n  }\n\n  static void findRemainingElement(int arr[], int N) {\n    int remainingIndex = findRemainingIndex(N);\n    System.out.print(arr[remainingIndex - 1]);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 3, 4, 4, 2, 4, -3, 1, 1};\n    int N = 9;\n    findRemainingElement(arr, N);\n  }\n}\n", "python": "from math import sqrt\n\n\ndef findRemainingIndex(N):\n    ans = N\n    while N > 1:\n        discard = int(sqrt(N))\n        if discard * discard == N:\n            ans -= 1\n        N -= discard\n    return ans\n\n\ndef findRemainingElement(arr, N):\n    remainingIndex = findRemainingIndex(N)\n    print(arr[remainingIndex - 1])\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 3, 4, 4, 2, 4, -3, 1, 1]\n    N = len(arr)\n    findRemainingElement(arr, N)\n"}
{"text": "Lexicographically largest possible by merging two strings by adding one character at a time ", "java": "public class Main {\n  static String largestMerge(String s1, String s2) {\n    if (s1.length() == 0 || s2.length() == 0) return s1 + s2;\n    if (s1.compareTo(s2) > 0) {\n      return s1.charAt(0) + largestMerge(s1.substring(1), s2);\n    }\n    return s2.charAt(0) + largestMerge(s1, s2.substring(1));\n  }\n\n  public static void main(String[] args) {\n    String s1 = \" geeks \";\n    String s2 = \" forgeeks \";\n    System.out.print(largestMerge(s1, s2));\n  }\n}\n", "python": "def largestMerge(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return s1 + s2\n    if s1 > s2:\n        return s1[0] + largestMerge(s1[1:], s2)\n    return s2[0] + largestMerge(s1, s2[1:])\n\n\nif __name__ == \" _ _ main _ _ \":\n    s1 = \" geeks \"\n    s2 = \" forgeeks \"\n    print(largestMerge(s1, s2))\n"}
{"text": "Number of open doors ", "java": "import java.io.*;\n\nclass GFG {\n  static int countOpenDoors(int N) {\n    int doorsOpen = (int) Math.sqrt(N);\n    return doorsOpen;\n  }\n\n  public static void main(String[] args) {\n    int N = 100;\n    System.out.println(countOpenDoors(N));\n  }\n}\n", "python": "import math\n\n\ndef countOpenDoors(N):\n    doorsOpen = int(math.sqrt(N))\n    return doorsOpen\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 100\n    print(countOpenDoors(N))\n"}
{"text": "Maximize profit possible by selling M products such that profit of a product is the number of products left of that supplier ", "java": "import java.util.*;\n\nclass GFG {\n  static void findMaximumProfit(int[] arr, int M, int N) {\n    PriorityQueue<Integer> max_heap = new PriorityQueue<>((a, b) -> b - a);\n    int maxProfit = 0;\n    for (int i = 0; i < N; i++) max_heap.add(arr[i]);\n    while (M > 0) {\n      M--;\n      int X = max_heap.poll();\n      maxProfit += X;\n      max_heap.add(X - 1);\n    }\n    System.out.println(maxProfit);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {4, 6};\n    int M = 4;\n    int N = arr.length;\n    findMaximumProfit(arr, M, N);\n  }\n}\n", "python": "def findMaximumProfit(arr, M, N):\n    max_heap = []\n    maxProfit = 0\n    for i in range(0, N):\n        max_heap.append(arr[i])\n    max_heap.sort()\n    max_heap.reverse()\n    while M > 0:\n        M -= 1\n        X = max_heap[0]\n        max_heap.pop(0)\n        maxProfit += X\n        max_heap.append(X - 1)\n        max_heap.sort()\n        max_heap.reverse()\n    print(maxProfit)\n\n\narr = [4, 6]\nM = 4\nN = len(arr)\nfindMaximumProfit(arr, M, N)\n"}
{"text": "Calculate total wall area of houses painted ", "java": "import java.util.*;\n\nclass GFG {\n  static void areaToPaint(int N, int W, int L, int Heights[]) {\n    int total = 0;\n    for (int i = 0; i < N; i++) {\n      total += 2 * Heights[i] * W;\n    }\n    total += L * (Heights[0] + Heights[N - 1]);\n    for (int i = 1; i < N; i++) {\n      total += L * Math.abs(Heights[i] - Heights[i - 1]);\n    }\n    System.out.print(total);\n  }\n\n  public static void main(String[] args) {\n    int N = 7, W = 1, L = 1;\n    int Heights[] = {4, 3, 1, 2, 3, 4, 2};\n    areaToPaint(N, W, L, Heights);\n  }\n}\n", "python": "def areaToPaint(N, W, L, Heights):\n    total = 0\n    for i in range(N):\n        total += 2 * Heights[i] * W\n    total += L * (Heights[0] + Heights[N - 1])\n    for i in range(1, N):\n        total += L * abs(Heights[i] - Heights[i - 1])\n    print(total)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 7\n    W = 1\n    L = 1\n    Heights = [4, 3, 1, 2, 3, 4, 2]\n    areaToPaint(N, W, L, Heights)\n"}
{"text": "Count all possible strings that can be generated by placing spaces ", "java": "import java.io.*;\n\nclass GFG {\n  static long countNumberOfStrings(String s) {\n    int n = s.length() - 1;\n    long count = (long) (Math.pow(2, n));\n    return count;\n  }\n\n  public static void main(String[] args) {\n    String S = \" ABCD \";\n    System.out.println(countNumberOfStrings(S));\n  }\n}\n", "python": "def countNumberOfStrings(s):\n    length = len(s)\n    n = length - 1\n    count = 2 ** n\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    S = \" ABCD \"\n    print(countNumberOfStrings(S))\n"}
{"text": "Maximize subsequences having array elements not exceeding length of the subsequence ", "java": "import java.util.*;\n\nclass GFG {\n  public static int No_Of_subsequences(HashMap<Integer, Integer> mp) {\n    int count = 0;\n    int left = 0;\n    for (Map.Entry<Integer, Integer> x : mp.entrySet()) {\n      mp.replace(x.getKey(), x.getValue() + left);\n      count += (x.getValue() / x.getKey());\n      left = x.getValue() % x.getKey();\n    }\n    return count;\n  }\n\n  public static void maximumsubsequences(int[] arr, int n) {\n    HashMap<Integer, Integer> mp = new HashMap<>();\n    for (int i = 0; i < n; i++) {\n      if (mp.containsKey(arr[i])) {\n        mp.replace(arr[i], mp.get(arr[i]) + 1);\n      } else {\n        mp.put(arr[i], 1);\n      }\n    }\n    System.out.println(No_Of_subsequences(mp));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 1, 1, 1};\n    int N = arr.length;\n    maximumsubsequences(arr, N);\n  }\n}\n", "python": "from collections import defaultdict\n\n\ndef No_Of_subsequences(mp):\n    count = 0\n    left = 0\n    for x in mp:\n        mp[x] += left\n        count += mp[x] // x\n        left = mp[x] % x\n    return count\n\n\ndef maximumsubsequences(arr, n):\n    mp = defaultdict(int)\n    for i in range(n):\n        mp[arr[i]] += 1\n    print(No_Of_subsequences(mp))\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 1, 1, 1]\n    N = len(arr)\n    maximumsubsequences(arr, N)\n"}
{"text": "Nth Subset of the Sequence consisting of powers of K in increasing order of their Sum ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void printSubset(long n, int k) {\n    ArrayList<Long> answer = new ArrayList<>();\n    while (n > 0) {\n      long p = (long) (Math.log(n) / Math.log(2));\n      ;\n      answer.add((long) (Math.pow(k, p)));\n      n %= (int) Math.pow(2, p);\n    }\n    Collections.sort(answer);\n    for (Long x : answer) {\n      System.out.print(x + \" \u2581 \");\n    }\n  }\n\n  public static void main(String[] args) {\n    long n = 5;\n    int k = 4;\n    printSubset(n, k);\n  }\n}\n", "python": "import math\n\n\ndef printSubset(N, K):\n    answer = \" \"\n    while N > 0:\n        p = int(math.log(N, 2))\n        answer = str(K ** p) + \" \u2581 \" + answer\n        N = N % (2 ** p)\n    print(answer)\n\n\nN = 5\nK = 4\nprintSubset(N, K)\n"}
{"text": "Count total set bits in all numbers from range L to R ", "java": "import java.util.*;\n\nclass GFG {\n  static int getLeftmostBit(int n) {\n    int m = 0;\n    while (n > 1) {\n      n = n >> 1;\n      m++;\n    }\n    return m;\n  }\n\n  static int getNextLeftmostBit(int n, int m) {\n    int temp = 1 << m;\n    while (n < temp) {\n      temp = temp >> 1;\n      m--;\n    }\n    return m;\n  }\n\n  static int countSetBit(int n) {\n    int m = getLeftmostBit(n);\n    return _countSetBit(n, m);\n  }\n\n  static int _countSetBit(int n, int m) {\n    if (n == 0) return 0;\n    m = getNextLeftmostBit(n, m);\n    if (n == ((int) 1 << (m + 1)) - 1) return (int) (m + 1) * (1 << m);\n    n = n - (1 << m);\n    return ((n + 1) + countSetBit(n) + m * (1 << (m - 1)));\n  }\n\n  static int countSetBits(int L, int R) {\n    return Math.abs(countSetBit(R) - countSetBit(L - 1));\n  }\n\n  public static void main(String[] args) {\n    int L = 3, R = 5;\n    System.out.print(\" Total \u2581 set \u2581 bit \u2581 count \u2581 is \u2581 \" + countSetBits(L, R));\n  }\n}\n", "python": "def getLeftmostBit(n):\n    m = 0\n    while n > 1:\n        n = n >> 1\n        m += 1\n    return m\n\n\ndef getNextLeftmostBit(n, m):\n    temp = 1 << m\n    while n < temp:\n        temp = temp >> 1\n        m -= 1\n    return m\n\n\ndef countSetBit(n):\n    m = getLeftmostBit(n)\n    return _countSetBit(n, m)\n\n\ndef _countSetBit(n, m):\n    if n == 0:\n        return 0\n    m = getNextLeftmostBit(n, m)\n    if n == int(1 << (m + 1)) - 1:\n        return int(m + 1) * (1 << m)\n    n = n - (1 << m)\n    return (n + 1) + countSetBit(n) + m * (1 << (m - 1))\n\n\ndef countSetBits(L, R):\n    return abs(countSetBit(R) - countSetBit(L - 1))\n\n\nif __name__ == \" _ _ main _ _ \":\n    L = 3\n    R = 5\n    print(\" Total \u2581 set \u2581 bit \u2581 count \u2581 is \u2581 \", countSetBits(L, R))\n"}
{"text": "Maximize GCD of all possible pairs from 1 to N ", "java": "class GFG {\n  static void find(int n) {\n    System.out.println(n / 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    find(n);\n  }\n}\n", "python": "def find(n):\n    print(n // 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    find(n)\n"}
{"text": "Array formed using sum of absolute differences of that element with all other elements ", "java": "import java.util.*;\n\nclass GFG {\n  private static List<Integer> calculate(int[] arr) {\n    int n = arr.length;\n    List<Integer> ans = new ArrayList<Integer>();\n    for (int i = 0; i < arr.length; i++) {\n      int sum = 0;\n      for (int j = 0; j < arr.length; j++) {\n        sum += Math.abs(arr[i] - arr[j]);\n      }\n      ans.add(sum);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {2, 3, 5, 6};\n    System.out.println(calculate(arr));\n  }\n}\n", "python": "def calculate(arr):\n    n = len(arr)\n    ans = []\n    for i in range(n):\n        sum = 0\n        for j in range(len(arr)):\n            sum += abs(arr[i] - arr[j])\n        ans.append(sum)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 3, 5, 6]\n    print(calculate(arr))\n"}
{"text": "Last two digits of powers of 7 ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static String get_last_two_digit(int N) {\n    if (N % 4 == 0) return \"01\";\n    else if (N % 4 == 1) return \"07\";\n    else if (N % 4 == 2) return \"49\";\n    return \"43\";\n  }\n\n  public static void main(String[] args) {\n    int N = 12;\n    System.out.println(get_last_two_digit(N));\n  }\n}\n", "python": "def get_last_two_digit(N):\n    if N % 4 == 0:\n        return \"01\"\n    elif N % 4 == 1:\n        return \"07\"\n    elif N % 4 == 2:\n        return \"49\"\n    return \"43\"\n\n\nN = 12\nprint(get_last_two_digit(N))\n"}
{"text": "Minimum steps to reach N from 1 by multiplying each step by 2 , 3 , 4 or 5 ", "java": "import java.util.*;\n\nclass GFG {\n  static int Minsteps(int n) {\n    int ans = 0;\n    while (n > 1) {\n      if (n % 5 == 0) {\n        ans++;\n        n = n / 5;\n        continue;\n      } else if (n % 4 == 0) {\n        ans++;\n        n = n / 4;\n        continue;\n      } else if (n % 3 == 0) {\n        ans++;\n        n = n / 3;\n        continue;\n      } else if (n % 2 == 0) {\n        ans++;\n        n = n / 2;\n        continue;\n      }\n      return -1;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.print(Minsteps(n));\n  }\n}\n", "python": "def Minsteps(n):\n    ans = 0\n    while n > 1:\n        if n % 5 == 0:\n            ans = ans + 1\n            n = n / 5\n            continue\n        elif n % 4 == 0:\n            ans = ans + 1\n            n = n / 4\n            continue\n        elif n % 3 == 0:\n            ans = ans + 1\n            n = n / 3\n            continue\n        elif n % 2 == 0:\n            ans = ans + 1\n            n = n / 2\n            continue\n        return -1\n    return ans\n\n\nn = 10\nprint(Minsteps(n))\n"}
{"text": "Find the minimum value of the given expression over all pairs of the array ", "java": "import java.io.*;\nimport java.util.Arrays;\n\nclass GFG {\n  static int MinimumValue(int arr[], int n) {\n    Arrays.sort(arr);\n    int minXor = Integer.MAX_VALUE;\n    int val = 0;\n    for (int i = 0; i < n - 1; i++) {\n      val = arr[i] ^ arr[i + 1];\n      minXor = Math.min(minXor, val);\n    }\n    return minXor;\n  }\n\n  public static void main(String[] args) {\n    int N = 6;\n    int[] A = new int[] {12, 3, 14, 5, 9, 8};\n    System.out.print(MinimumValue(A, N));\n  }\n}\n", "python": "import sys\n\n\ndef MinimumValue(arr, n):\n    arr.sort()\n    minXor = sys.maxsize\n    val = 0\n    for i in range(0, n - 1):\n        val = arr[i] ^ arr[i + 1]\n        minXor = min(minXor, val)\n    return minXor\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 6\n    A = [12, 3, 14, 5, 9, 8]\n    print(MinimumValue(A, N))\n"}
{"text": "Maximum profit by selling N items at two markets ", "java": "class GFG {\n  static int maxProfit(int profitA[], int profitB[], int n) {\n    int preSum[] = new int[n];\n    preSum[0] = profitA[0];\n    for (int i = 1; i < n; i++) {\n      preSum[i] = preSum[i - 1] + profitA[i];\n    }\n    int suffSum[] = new int[n];\n    suffSum[n - 1] = profitB[n - 1];\n    for (int i = n - 2; i >= 0; i--) {\n      suffSum[i] = suffSum[i + 1] + profitB[i];\n    }\n    int res = preSum[n - 1];\n    for (int i = 1; i < n - 1; i++) {\n      res = Math.max(res, preSum[i] + suffSum[i + 1]);\n    }\n    res = Math.max(res, suffSum[0]);\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int profitA[] = {2, 3, 2};\n    int profitB[] = {10, 30, 40};\n    int n = profitA.length;\n    System.out.println(maxProfit(profitA, profitB, n));\n  }\n}\n", "python": "def maxProfit(profitA, profitB, n):\n    preSum = [0] * n\n    preSum[0] = profitA[0]\n    for i in range(1, n):\n        preSum[i] = preSum[i - 1] + profitA[i]\n    suffSum = [0] * n\n    suffSum[n - 1] = profitB[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffSum[i] = suffSum[i + 1] + profitB[i]\n    res = preSum[n - 1]\n    for i in range(1, n - 1):\n        res = max(res, preSum[i] + suffSum[i + 1])\n    res = max(res, suffSum[0])\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    profitA = [2, 3, 2]\n    profitB = [10, 30, 40]\n    n = len(profitA)\n    print(maxProfit(profitA, profitB, n))\n"}
{"text": "Largest number less than X having at most K set bits ", "java": "import java.io.*;\n\nclass GFG {\n  int greatestKBits(int X, int K) {\n    int set_bit_count = Integer.bitCount(X);\n    if (set_bit_count <= K) return X;\n    int diff = set_bit_count - K;\n    for (int i = 0; i < diff; i++) X &= (X - 1);\n    return X;\n  }\n\n  public static void main(String[] args) {\n    int X = 21, K = 2;\n    GFG g = new GFG();\n    System.out.print(g.greatestKBits(X, K));\n  }\n}\n", "python": "def greatestKBits(X, K):\n    set_bit_count = bin(X).count(\"1\")\n    if set_bit_count <= K:\n        return X\n    diff = set_bit_count - K\n    for i in range(0, diff, 1):\n        X &= X - 1\n    return X\n\n\nif __name__ == \" _ _ main _ _ \":\n    X = 21\n    K = 2\n    print(greatestKBits(X, K))\n"}
{"text": "Count substrings made up of a single distinct character ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void countSubstrings(String s) {\n    int ans = 0;\n    int subs = 1;\n    char pre = '0';\n    for (char i : s.toCharArray()) {\n      if (pre == i) {\n        subs += 1;\n      } else {\n        subs = 1;\n      }\n      ans += subs;\n      pre = i;\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    String s = \" geeksforgeeks \";\n    countSubstrings(s);\n  }\n}\n", "python": "def countSubstrings(s):\n    ans = 0\n    subs = 1\n    pre = \" \"\n    for i in s:\n        if pre == i:\n            subs += 1\n        else:\n            subs = 1\n        ans += subs\n        pre = i\n    print(ans)\n\n\ns = \" geeksforgeeks \"\ncountSubstrings(s)\n"}
{"text": "Paper Cut into Minimum Number of Squares ", "java": "class GFG {\n  static void swap(int a, int b) {\n    int temp = a;\n    a = b;\n    b = temp;\n  }\n\n  static int minimumSquare(int a, int b) {\n    int result = 0, rem = 0;\n    if (a < b) swap(a, b);\n    while (b > 0) {\n      result += a / b;\n      rem = a % b;\n      a = b;\n      b = rem;\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int n = 13, m = 29;\n    System.out.println(minimumSquare(n, m));\n  }\n}\n", "python": "MAX = 300\ndp = [[0 for i in range(MAX)] for i in range(MAX)]\n\n\ndef minimumSquare(m, n):\n    vertical_min = 10000000000\n    horizontal_min = 10000000000\n    if n == 13 and m == 11:\n        return 6\n    if m == 13 and n == 11:\n        return 6\n    if m == n:\n        return 1\n    if dp[m][n] != 0:\n        return dp[m][n]\n    for i in range(1, m // 2 + 1):\n        horizontal_min = min(\n            minimumSquare(i, n) + minimumSquare(m - i, n), horizontal_min\n        )\n    for j in range(1, n // 2 + 1):\n        vertical_min = min(minimumSquare(m, j) + minimumSquare(m, n - j), vertical_min)\n    dp[m][n] = min(vertical_min, horizontal_min)\n    return dp[m][n]\n\n\nif __name__ == \" _ _ main _ _ \":\n    m = 30\n    n = 35\n    print(minimumSquare(m, n))\n"}
{"text": "Maximize the length of upper boundary formed by placing given N rectangles horizontally or vertically ", "java": "import java.util.Vector;\n\npublic class GFG {\n  public static class pair {\n    private int first;\n    private int second;\n\n    public pair(int first, int second) {\n      this.first = first;\n      this.second = second;\n    }\n  }\n\n  static void maxBoundary(int N, Vector<pair> V) {\n    int dp[][] = new int[N][2];\n    dp[0][0] = V.get(0).first;\n    dp[0][1] = V.get(0).second;\n    for (int i = 1; i < N; i++) {\n      dp[i][0] = V.get(i).first;\n      int height1 = Math.abs(V.get(i - 1).second - V.get(i).second);\n      int height2 = Math.abs(V.get(i - 1).first - V.get(i).second);\n      dp[i][0] += Math.max(height1 + dp[i - 1][0], height2 + dp[i - 1][1]);\n      dp[i][1] = V.get(i).second;\n      int vertical1 = Math.abs(V.get(i).first - V.get(i - 1).second);\n      int vertical2 = Math.abs(V.get(i).first - V.get(i - 1).first);\n      dp[i][1] += Math.max(vertical1 + dp[i - 1][0], vertical2 + dp[i - 1][1]);\n    }\n    System.out.println(Math.max(dp[N - 1][0], dp[N - 1][1]));\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    Vector<pair> V = new Vector<>();\n    V.add(new pair(2, 5));\n    V.add(new pair(3, 8));\n    V.add(new pair(1, 10));\n    V.add(new pair(7, 14));\n    V.add(new pair(2, 5));\n    maxBoundary(N, V);\n  }\n}\n", "python": "def maxBoundary(N, V):\n    dp = [[0 for i in range(2)] for j in range(N)]\n    dp[0][0] = V[0][0]\n    dp[0][1] = V[0][1]\n    for i in range(1, N, 1):\n        dp[i][0] = V[i][0]\n        height1 = abs(V[i - 1][1] - V[i][1])\n        height2 = abs(V[i - 1][0] - V[i][1])\n        dp[i][0] += max(height1 + dp[i - 1][0], height2 + dp[i - 1][1])\n        dp[i][1] = V[i][1]\n        vertical1 = abs(V[i][0] - V[i - 1][1])\n        vertical2 = abs(V[i][0] - V[i - 1][1])\n        dp[i][1] += max(vertical1 + dp[i - 1][0], vertical2 + dp[i - 1][1])\n    print(max(dp[N - 1][0], dp[N - 1][1]) - 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    V = [[2, 5], [3, 8], [1, 10], [7, 14], [2, 5]]\n    maxBoundary(N, V)\n"}
{"text": "Geek ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int find(int A, int B, int C, int N) {\n    int[] arr = new int[N];\n    arr[0] = A;\n    arr[1] = B;\n    arr[2] = C;\n    for (int i = 3; i < N; i++) {\n      arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n    }\n    return arr[N - 1];\n  }\n\n  public static void main(String[] args) {\n    int A = 1, B = 3, C = 2, N = 4;\n    System.out.print(find(A, B, C, N));\n  }\n}\n", "python": "def find(A, B, C, N):\n    arr = [0] * N\n    arr[0] = A\n    arr[1] = B\n    arr[2] = C\n    for i in range(3, N):\n        arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3]\n    return arr[N - 1]\n\n\nA = 1\nB = 3\nC = 2\nN = 4\nprint(find(A, B, C, N))\n"}
{"text": "Maximize the Sum of a Subsequence from an Array based on given conditions ", "java": "import java.util.*;\n\npublic class GFG {\n  public static int maximumSum(int[] a, int count, int index, int n, int[][] dp) {\n    if (index == n) return 0;\n    if (dp[index][count] != -1) return dp[index][count];\n    int take_element = a[index] * count + maximumSum(a, count + 1, index + 1, n, dp);\n    int dont_take = maximumSum(a, count, index + 1, n, dp);\n    return dp[index][count] = Math.max(take_element, dont_take);\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    int a[] = {-1, -9, 0, 5, -7};\n    int dp[][] = new int[n + 1][n + 1];\n    for (int i[] : dp) Arrays.fill(i, -1);\n    System.out.println(maximumSum(a, 1, 0, n, dp));\n  }\n}\n", "python": "def maximumSum(a, count, index, n, dp):\n    if index == n:\n        return 0\n    if dp[index][count] != -1:\n        return dp[index][count]\n    take_element = a[index] * count + maximumSum(a, count + 1, index + 1, n, dp)\n    dont_take = maximumSum(a, count, index + 1, n, dp)\n    dp[index][count] = max(take_element, dont_take)\n    return dp[index][count]\n\n\nn = 5\na = [-1, -9, 0, 5, -7]\ndp = [[-1 for x in range(n + 1)] for y in range(n + 1)]\nprint(maximumSum(a, 1, 0, n, dp))\n"}
{"text": "Count array elements that can be maximized by adding any permutation of first N natural numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static void countMaximum(Integer[] a, int n) {\n    Arrays.sort(a, Collections.reverseOrder());\n    int count = 0;\n    int mark = 0;\n    for (int i = 0; i < n; ++i) {\n      if ((a[i] + n >= mark)) {\n        count += 1;\n      }\n      mark = Math.max(mark, a[i] + i + 1);\n    }\n    System.out.print(count);\n  }\n\n  public static void main(String[] args) {\n    Integer arr[] = {8, 9, 6};\n    int N = arr.length;\n    countMaximum(arr, N);\n  }\n}\n", "python": "def countMaximum(a, n):\n    a.sort(reverse=True)\n    count = 0\n    mark = 0\n    for i in range(n):\n        if a[i] + n >= mark:\n            count += 1\n        mark = max(mark, a[i] + i + 1)\n    print(count)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [8, 9, 6]\n    N = len(arr)\n    countMaximum(arr, N)\n"}
{"text": "Maximum score possible after performing given operations on an Array ", "java": "class GFG {\n  static int[][][] dp = new int[100][100][100];\n\n  static int MaximumScoreDP(int l, int r, int prefix_sum[], int num) {\n    if (l > r) return 0;\n    if (dp[l][r][num] != -1) return dp[l][r][num];\n    int current_sum = prefix_sum[r] - (l - 1 >= 0 ? prefix_sum[l - 1] : 0);\n    if (num % 2 == 0) current_sum *= -1;\n    dp[l][r][num] =\n        current_sum\n            + Math.max(\n                MaximumScoreDP(l + 1, r, prefix_sum, num + 1),\n                MaximumScoreDP(l, r - 1, prefix_sum, num + 1));\n    return dp[l][r][num];\n  }\n\n  static int findMaxScore(int a[], int n) {\n    int[] prefix_sum = new int[n];\n    prefix_sum[0] = a[0];\n    for (int i = 1; i < n; i++) {\n      prefix_sum[i] = prefix_sum[i - 1] + a[i];\n    }\n    for (int i = 0; i < 100; i++) {\n      for (int j = 0; j < 100; j++) {\n        for (int l = 0; l < 100; l++) dp[i][j][l] = -1;\n      }\n    }\n    return MaximumScoreDP(0, n - 1, prefix_sum, 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    int A[] = {1, 2, 3, 4, 2, 6};\n    System.out.print(findMaxScore(A, n));\n  }\n}\n", "python": "dp = [[[-1 for x in range(100)] for y in range(100)] for z in range(100)]\n\n\ndef MaximumScoreDP(l, r, prefix_sum, num):\n    if l > r:\n        return 0\n    if dp[l][r][num] != -1:\n        return dp[l][r][num]\n    current_sum = prefix_sum[r]\n    if l - 1 >= 0:\n        current_sum -= prefix_sum[l - 1]\n    if num % 2 == 0:\n        current_sum *= -1\n    dp[l][r][num] = current_sum + max(\n        MaximumScoreDP(l + 1, r, prefix_sum, num + 1),\n        MaximumScoreDP(l, r - 1, prefix_sum, num + 1),\n    )\n    return dp[l][r][num]\n\n\ndef findMaxScore(a, n):\n    prefix_sum = [0] * n\n    prefix_sum[0] = a[0]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i]\n    global dp\n    return MaximumScoreDP(0, n - 1, prefix_sum, 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 6\n    A = [1, 2, 3, 4, 2, 6]\n    print(findMaxScore(A, n))\n"}
{"text": "Maximum subsequence sum with adjacent elements having atleast K difference in index ", "java": "class GFG {\n  static int max_sum(int arr[], int n, int k) {\n    int dp[] = new int[n];\n    dp[0] = Math.max(0, arr[0]);\n    int i = 1;\n    while (i < k) {\n      dp[i] = Math.max(dp[i - 1], arr[i]);\n      i++;\n    }\n    i = k;\n    while (i < n) {\n      dp[i] = Math.max(dp[i - 1], arr[i] + dp[i - k]);\n      i++;\n    }\n    return dp[n - 1];\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, -2, 4, 3, 1};\n    int n = arr.length;\n    int k = 4;\n    System.out.println(max_sum(arr, n, k));\n  }\n}\n", "python": "def max_sum(arr, n, k):\n    dp = [0] * n\n    dp[0] = max(0, arr[0])\n    i = 1\n    while i < k:\n        dp[i] = max(dp[i - 1], arr[i])\n        i += 1\n    i = k\n    while i < n:\n        dp[i] = max(dp[i - 1], arr[i] + dp[i - k])\n        i += 1\n    return dp[n - 1]\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, -2, 4, 3, 1]\n    n = len(arr)\n    k = 4\n    print(max_sum(arr, n, k))\n"}
{"text": "Number of binary strings such that there is no substring of length \u00e2 \u2030\u00a5 3 ", "java": "class GFG {\n  static final long MOD = 1000000007;\n\n  static long countStr(int N) {\n    long dp[][] = new long[N + 1][3];\n    dp[1][0] = 1;\n    dp[1][1] = 1;\n    dp[1][2] = 0;\n    for (int i = 2; i <= N; i++) {\n      dp[i][0] = (dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2]) % MOD;\n      dp[i][1] = dp[i - 1][0] % MOD;\n      dp[i][2] = dp[i - 1][1] % MOD;\n    }\n    long ans = (dp[N][0] + dp[N][1] + dp[N][2]) % MOD;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    System.out.println(countStr(N));\n  }\n}\n", "python": "MOD = 1000000007\n\n\ndef countStr(N):\n    dp = [[0 for i in range(3)] for i in range(N + 1)]\n    dp[1][0] = 1\n    dp[1][1] = 1\n    dp[1][2] = 0\n    for i in range(2, N + 1):\n        dp[i][0] = (dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2]) % MOD\n        dp[i][1] = dp[i - 1][0] % MOD\n        dp[i][2] = dp[i - 1][1] % MOD\n    ans = (dp[N][0] + dp[N][1] + dp[N][2]) % MOD\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    print(countStr(N))\n"}
{"text": "Longest Consecuetive Subsequence when only one insert operation is allowed ", "java": "class GFG {\n  static int LongestConsSeq(int[] arr, int N) {\n    int maxval = 1;\n    for (int i = 0; i < N; i += 1) {\n      maxval = Math.max(maxval, arr[i]);\n    }\n    int[][] dp = new int[maxval + 1][2];\n    int ans = 1;\n    for (int i = 0; i < N; i += 1) {\n      dp[arr[i]][0] = (1 + dp[arr[i] - 1][0]);\n      if (arr[i] >= 2) dp[arr[i]][1] = Math.max(1 + dp[arr[i] - 1][1], 2 + dp[arr[i] - 2][0]);\n      else dp[arr[i]][1] = 1;\n      ans = Math.max(ans, dp[arr[i]][1]);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {2, 1, 4, 5};\n    int N = arr.length;\n    System.out.println(LongestConsSeq(arr, N));\n  }\n}\n", "python": "def LongestConsSeq(arr, N):\n    maxval = 1\n    for i in range(N):\n        maxval = max(maxval, arr[i])\n    dp = [[0 for i in range(2)] for i in range(maxval + 1)]\n    ans = 1\n    for i in range(N):\n        dp[arr[i]][0] = 1 + dp[arr[i] - 1][0]\n        if arr[i] >= 2:\n            dp[arr[i]][1] = max(1 + dp[arr[i] - 1][1], 2 + dp[arr[i] - 2][0])\n        else:\n            dp[arr[i]][1] = 1\n        ans = max(ans, dp[arr[i]][1])\n    return ans\n\n\narr = [2, 1, 4, 5]\nN = len(arr)\nprint(LongestConsSeq(arr, N))\n"}
{"text": "Minimum count of elements that sums to a given number ", "java": "class GFG {\n  static int minCount(int K) {\n    int memo[] = new int[100];\n    for (int i = 0; i < 100; i++) {\n      memo[i] = Integer.MAX_VALUE;\n    }\n    memo[0] = 0;\n    for (int i = 1; i < 100; i++) {\n      memo[i] = Math.min(memo[i - 1] + 1, memo[i]);\n    }\n    for (int i = 10; i < 100; i++) {\n      memo[i] = Math.min(memo[i - 10] + 1, memo[i]);\n    }\n    for (int i = 25; i < 100; i++) {\n      memo[i] = Math.min(memo[i - 25] + 1, memo[i]);\n    }\n    int min_count = 0;\n    while (K > 0) {\n      min_count += memo[K % 100];\n      K /= 100;\n    }\n    return min_count;\n  }\n\n  public static void main(String[] args) {\n    int K = 69;\n    System.out.println(minCount(K));\n  }\n}\n", "python": "def minCount(K):\n    memo = [10 ** 9 for i in range(100)]\n    memo[0] = 0\n    for i in range(1, 100):\n        memo[i] = min(memo[i - 1] + 1, memo[i])\n    for i in range(10, 100):\n        memo[i] = min(memo[i - 10] + 1, memo[i])\n    for i in range(25, 100):\n        memo[i] = min(memo[i - 25] + 1, memo[i])\n    min_count = 0\n    while K > 0:\n        min_count += memo[K % 100]\n        K //= 100\n    return min_count\n\n\nK = 69\nprint(minCount(K))\n"}
{"text": "Number of sub ", "java": "public class GFG {\n  static int N = 10000;\n\n  static int count_required_sequence(int n, int arr[]) {\n    int total_required_subsequence = 0;\n    int total_n_required_subsequence = 0;\n    int[][] dp = new int[N][2];\n    for (int i = 0; i < n; i++) {\n      int turn_required = 0;\n      for (int j = -1; j <= 1; j++) turn_required += dp[arr[i] + j][0];\n      int required_end_i = (total_required_subsequence + turn_required);\n      int n_required_end_i = (1 + total_n_required_subsequence - turn_required);\n      total_required_subsequence += required_end_i;\n      total_n_required_subsequence += n_required_end_i;\n      dp[arr[i]][1] += required_end_i;\n      dp[arr[i]][0] += n_required_end_i;\n    }\n    return total_required_subsequence;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 6, 2, 1, 9};\n    int n = arr.length;\n    System.out.println(count_required_sequence(n, arr));\n  }\n}\n", "python": "import numpy as np\n\nN = 10000\n\n\ndef count_required_sequence(n, arr):\n    total_required_subsequence = 0\n    total_n_required_subsequence = 0\n    dp = np.zeros((N, 2))\n    for i in range(n):\n        turn_required = 0\n        for j in range(-1, 2, 1):\n            turn_required += dp[arr[i] + j][0]\n        required_end_i = total_required_subsequence + turn_required\n        n_required_end_i = 1 + total_n_required_subsequence - turn_required\n        total_required_subsequence += required_end_i\n        total_n_required_subsequence += n_required_end_i\n        dp[arr[i]][1] += required_end_i\n        dp[arr[i]][0] += n_required_end_i\n    return total_required_subsequence\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 6, 2, 1, 9]\n    n = len(arr)\n    print(count_required_sequence(n, arr))\n"}
{"text": "Sum of product of r and rth Binomial Coefficient ( r * nCr ) ", "java": "import java.io.*;\n\nclass GFG {\n  static int MAX = 100;\n\n  static int summation(int n) {\n    return n << (n - 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(summation(n));\n  }\n}\n", "python": "def summation(n):\n    return n << (n - 1)\n\n\nn = 2\nprint(summation(n))\n"}
{"text": "Maximum average sum partition of an array ", "java": "import java.util.Arrays;\nimport java.util.Vector;\n\nclass GFG {\n  static int MAX = 1000;\n  static double[][] memo = new double[MAX][MAX];\n\n  public static double score(int n, Vector<Integer> A, int k) {\n    if (memo[n][k] > 0) return memo[n][k];\n    double sum = 0;\n    for (int i = n - 1; i > 0; i--) {\n      sum += A.elementAt(i);\n      memo[n][k] = Math.max(memo[n][k], score(i, A, k - 1) + sum / (n - i));\n    }\n    return memo[n][k];\n  }\n\n  public static double largestSumOfAverages(Vector<Integer> A, int K) {\n    int n = A.size();\n    double sum = 0;\n    for (int i = 0; i < memo.length; i++) {\n      for (int j = 0; j < memo[i].length; j++) memo[i][j] = 0.0;\n    }\n    for (int i = 0; i < n; i++) {\n      sum += A.elementAt(i);\n      memo[i + 1][1] = sum / (i + 1);\n    }\n    return score(n, A, K);\n  }\n\n  public static void main(String[] args) {\n    Vector<Integer> A = new Vector<>(Arrays.asList(9, 1, 2, 3, 9));\n    int K = 3;\n    System.out.println(largestSumOfAverages(A, K));\n  }\n}\n", "python": "MAX = 1000\nmemo = [[0.0 for i in range(MAX)] for i in range(MAX)]\n\n\ndef score(n, A, k):\n    if memo[n][k] > 0:\n        return memo[n][k]\n    sum = 0\n    i = n - 1\n    while i > 0:\n        sum += A[i]\n        memo[n][k] = max(memo[n][k], score(i, A, k - 1) + int(sum / (n - i)))\n        i -= 1\n    return memo[n][k]\n\n\ndef largestSumOfAverages(A, K):\n    n = len(A)\n    sum = 0\n    for i in range(n):\n        sum += A[i]\n        memo[i + 1][1] = int(sum / (i + 1))\n    return score(n, A, K)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [9, 1, 2, 3, 9]\n    K = 3\n    print(largestSumOfAverages(A, K))\n"}
{"text": "Maximum Product Subarray ", "java": "class GFG {\n  static int findMaxProduct(int arr[], int n) {\n    int i;\n    int ans = Integer.MIN_VALUE;\n    int maxval = 1;\n    int minval = 1;\n    int prevMax;\n    for (i = 0; i < n; i++) {\n      if (arr[i] > 0) {\n        maxval = maxval * arr[i];\n        minval = Math.min(1, minval * arr[i]);\n      } else if (arr[i] == 0) {\n        minval = 1;\n        maxval = 0;\n      } else if (arr[i] < 0) {\n        prevMax = maxval;\n        maxval = minval * arr[i];\n        minval = prevMax * arr[i];\n      }\n      ans = Math.max(ans, maxval);\n      if (maxval <= 0) {\n        maxval = 1;\n      }\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {0, -4, 0, -2};\n    int n = arr.length;\n    System.out.println(findMaxProduct(arr, n));\n  }\n}\n", "python": "def maxSubarrayProduct(arr, n):\n    result = arr[0]\n    for i in range(n):\n        mul = arr[i]\n        for j in range(i + 1, n):\n            result = max(result, mul)\n            mul *= arr[j]\n        result = max(result, mul)\n    return result\n\n\narr = [1, -2, -3, 0, 7, -8, -2]\nn = len(arr)\nprint(\" Maximum \u2581 Sub \u2581 array \u2581 product \u2581 is \", maxSubarrayProduct(arr, n))\n"}
{"text": "Dynamic Programming on Trees ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static final int MAX_NODES = 100;\n  static int in[] = new int[MAX_NODES];\n  static int out[] = new int[MAX_NODES];\n\n  static void dfs1(ArrayList<ArrayList<Integer>> v, int u, int parent) {\n    in[u] = 0;\n    for (int j = 0; j < v.get(u).size(); j++) {\n      int child = v.get(u).get(j);\n      if (child == parent) continue;\n      dfs1(v, child, u);\n      in[u] = Math.max(in[u], 1 + in[child]);\n    }\n  }\n\n  static void dfs2(ArrayList<ArrayList<Integer>> v, int u, int parent) {\n    int mx1 = -1, mx2 = -1;\n    for (int j = 0; j < v.get(u).size(); j++) {\n      int child = v.get(u).get(j);\n      if (child == parent) continue;\n      if (in[child] >= mx1) {\n        mx2 = mx1;\n        mx1 = in[child];\n      } else if (in[child] > mx2) mx2 = in[child];\n    }\n    for (int j = 0; j < v.get(u).size(); j++) {\n      int child = v.get(u).get(j);\n      if (child == parent) continue;\n      int longest = mx1;\n      if (mx1 == in[child]) longest = mx2;\n      out[child] = 1 + Math.max(out[u], 1 + longest);\n      dfs2(v, child, u);\n    }\n  }\n\n  static void addEdge(ArrayList<ArrayList<Integer>> adj, int u, int v) {\n    adj.get(u).add(v);\n    adj.get(v).add(u);\n  }\n\n  static void printHeights(ArrayList<ArrayList<Integer>> v, int n) {\n    dfs1(v, 1, 0);\n    dfs2(v, 1, 0);\n    for (int i = 1; i < n; i++)\n      System.out.println(\n          \" The \u2581 maximum \u2581 height \u2581 when \u2581 node \u2581 \"\n              + i\n              + \" \u2581 is \u2581 considered \u2581 as \u2581 root \u2581 is \u2581 \"\n              + Math.max(in[i], out[i]));\n  }\n\n  public static void main(String[] args) {\n    int V = 12;\n    ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>(V + 1);\n    for (int i = 0; i < V; i++) adj.add(new ArrayList<Integer>());\n    addEdge(adj, 1, 2);\n    addEdge(adj, 1, 3);\n    addEdge(adj, 1, 4);\n    addEdge(adj, 2, 5);\n    addEdge(adj, 2, 6);\n    addEdge(adj, 3, 7);\n    addEdge(adj, 7, 10);\n    addEdge(adj, 7, 11);\n    addEdge(adj, 4, 8);\n    addEdge(adj, 4, 9);\n    printHeights(adj, V);\n  }\n}\n", "python": "dp = [0] * 100\n\n\ndef dfs(a, v, u, parent):\n    dp[u] = a[u - 1]\n    maximum = 0\n    for child in v[u]:\n        if child == parent:\n            continue\n        dfs(a, v, child, u)\n        maximum = max(maximum, dp[child])\n    dp[u] += maximum\n\n\ndef maximumValue(a, v):\n    dfs(a, v, 1, 0)\n    return dp[1]\n\n\ndef main():\n    n = 14\n    v = {}\n    for i in range(n + 1):\n        v[i] = []\n    v[1].append(2), v[2].append(1)\n    v[1].append(3), v[3].append(1)\n    v[1].append(4), v[4].append(1)\n    v[2].append(5), v[5].append(2)\n    v[2].append(6), v[6].append(2)\n    v[3].append(7), v[7].append(3)\n    v[4].append(8), v[8].append(4)\n    v[4].append(9), v[9].append(4)\n    v[4].append(10), v[10].append(4)\n    v[5].append(11), v[11].append(5)\n    v[5].append(12), v[12].append(5)\n    v[7].append(13), v[13].append(7)\n    v[7].append(14), v[14].append(7)\n    a = [3, 2, 1, 10, 1, 3, 9, 1, 5, 3, 4, 5, 9, 8]\n    print(maximumValue(a, v))\n\n\nmain()\n"}
{"text": "Count of arrays having consecutive element with different values ", "java": "import java.util.*;\n\nclass Counting {\n  static int MAXN = 109;\n\n  public static int countarray(int n, int k, int x) {\n    int[] dp = new int[109];\n    dp[0] = 0;\n    dp[1] = 1;\n    for (int i = 2; i < n; i++) dp[i] = (k - 2) * dp[i - 1] + (k - 1) * dp[i - 2];\n    return (x == 1 ? (k - 1) * dp[n - 2] : dp[n - 1]);\n  }\n\n  public static void main(String[] args) {\n    int n = 4, k = 3, x = 2;\n    System.out.println(countarray(n, k, x));\n  }\n}\n", "python": "def countarray(n, k, x):\n    dp = list()\n    dp.append(0)\n    dp.append(1)\n    i = 2\n    while i < n:\n        dp.append((k - 2) * dp[i - 1] + (k - 1) * dp[i - 2])\n        i = i + 1\n    return (k - 1) * dp[n - 2] if x == 1 else dp[n - 1]\n\n\nn = 4\nk = 3\nx = 2\nprint(countarray(n, k, x))\n"}
{"text": "Remove array end element to maximize the sum of product ", "java": "public class GFG {\n  static final int MAX = 50;\n\n  static int solve(int dp[][], int a[], int low, int high, int turn) {\n    if (low == high) {\n      return a[low] * turn;\n    }\n    if (dp[low][high] != 0) {\n      return dp[low][high];\n    }\n    dp[low][high] =\n        Math.max(\n            a[low] * turn + solve(dp, a, low + 1, high, turn + 1),\n            a[high] * turn + solve(dp, a, low, high - 1, turn + 1));\n    return dp[low][high];\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 3, 1, 5, 2};\n    int n = arr.length;\n    int dp[][] = new int[MAX][MAX];\n    System.out.println(solve(dp, arr, 0, n - 1, 1));\n  }\n}\n", "python": "MAX = 50\n\n\ndef solve(dp, a, low, high, turn):\n    if low == high:\n        return a[low] * turn\n    if dp[low][high] != 0:\n        return dp[low][high]\n    dp[low][high] = max(\n        a[low] * turn + solve(dp, a, low + 1, high, turn + 1),\n        a[high] * turn + solve(dp, a, low, high - 1, turn + 1),\n    )\n    return dp[low][high]\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 3, 1, 5, 2]\n    n = len(arr)\n    dp = [[0 for x in range(MAX)] for y in range(MAX)]\n    print(solve(dp, arr, 0, n - 1, 1))\n"}
{"text": "Maximum sum bitonic subarray ", "java": "class GFG {\n  static int maxSumBitonicSubArr(int arr[], int n) {\n    int[] msis = new int[n];\n    int[] msds = new int[n];\n    int max_sum = Integer.MIN_VALUE;\n    msis[0] = arr[0];\n    for (int i = 1; i < n; i++)\n      if (arr[i] > arr[i - 1]) msis[i] = msis[i - 1] + arr[i];\n      else msis[i] = arr[i];\n    msds[n - 1] = arr[n - 1];\n    for (int i = n - 2; i >= 0; i--)\n      if (arr[i] > arr[i + 1]) msds[i] = msds[i + 1] + arr[i];\n      else msds[i] = arr[i];\n    for (int i = 0; i < n; i++)\n      if (max_sum < (msis[i] + msds[i] - arr[i])) max_sum = msis[i] + msds[i] - arr[i];\n    return max_sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {5, 3, 9, 2, 7, 6, 4};\n    int n = arr.length;\n    System.out.println(\" Maximum \u2581 Sum \u2581 = \u2581 \" + maxSumBitonicSubArr(arr, n));\n  }\n}\n", "python": "def maxSumBitonicSubArr(arr, n):\n    max_sum = -(10 ** 9)\n    i = 0\n    while i < n:\n        j = i\n        while j + 1 < n and arr[j] < arr[j + 1]:\n            j += 1\n        while i < j and arr[i] <= 0:\n            i += 1\n        k = j\n        while k + 1 < n and arr[k] > arr[k + 1]:\n            k += 1\n        last = k\n        while k > j and arr[k] <= 0:\n            k -= 1\n        nn = arr[i : j + 1]\n        sum_inc = sum(nn)\n        nn = arr[j : k + 1]\n        sum_dec = sum(nn)\n        sum_all = sum_inc + sum_dec - arr[j]\n        max_sum = max([max_sum, sum_inc, sum_dec, sum_all])\n        i = max(last, i + 1)\n    return max_sum\n\n\narr = [5, 3, 9, 2, 7, 6, 4]\nn = len(arr)\nprint(\" Maximum \u2581 Sum \u2581 = \u2581 \", maxSumBitonicSubArr(arr, n))\narr2 = [1, 2, 3, 4, 5]\nn2 = len(arr2)\nprint(\" Maximum \u2581 Sum \u2581 = \u2581 \", maxSumBitonicSubArr(arr2, n2))\narr3 = [5, 4, 3, 2, 1]\nn3 = len(arr3)\nprint(\" Maximum \u2581 Sum \u2581 = \u2581 \", maxSumBitonicSubArr(arr3, n3))\narr4 = [5, 5, 5, 5]\nn4 = len(arr4)\nprint(\" Maximum \u2581 Sum \u2581 = \u2581 \", maxSumBitonicSubArr(arr4, n4))\narr5 = [-1, 0, 1, 2, 3, 1, 0, -1, -10]\nn5 = len(arr5)\nprint(\" Maximum \u2581 Sum \u2581 = \u2581 \", maxSumBitonicSubArr(arr5, n5))\narr6 = [-1, 0, 1, 2, 0, -1, -2, 0, 1, 3]\nn6 = len(arr6)\nprint(\" Maximum \u2581 Sum \u2581 = \u2581 \", maxSumBitonicSubArr(arr6, n6))\n"}
{"text": "Minimum sum subsequence such that at least one of every four consecutive elements is picked ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int minSum(int ar[], int n) {\n    if (n <= 4) return Arrays.stream(ar).min().getAsInt();\n    int[] sum = new int[n];\n    sum[0] = ar[0];\n    sum[1] = ar[1];\n    sum[2] = ar[2];\n    sum[3] = ar[3];\n    for (int i = 4; i < n; i++)\n      sum[i] = ar[i] + Arrays.stream(Arrays.copyOfRange(sum, i - 4, i)).min().getAsInt();\n    return Arrays.stream(Arrays.copyOfRange(sum, n - 4, n)).min().getAsInt();\n  }\n\n  public static void main(String[] args) {\n    int ar[] = {2, 4, 1, 5, 2, 3, 6, 1, 2, 4};\n    int n = ar.length;\n    System.out.println(\" Minimum \u2581 sum \u2581 = \u2581 \" + minSum(ar, n));\n  }\n}\n", "python": "def minSum(ar, n):\n    if n <= 4:\n        return min(ar)\n    sum = [0 for i in range(n)]\n    sum[0] = ar[0]\n    sum[1] = ar[1]\n    sum[2] = ar[2]\n    sum[3] = ar[3]\n    for i in range(4, n):\n        sum[i] = ar[i] + min(sum[i - 4 : i])\n    return min(sum[n - 4 : n])\n\n\nar = [2, 4, 1, 5, 2, 3, 6, 1, 2, 4]\nn = len(ar)\nprint(\" Minimum \u2581 sum \u2581 = \u2581 \", minSum(ar, n))\n"}
{"text": "Padovan Sequence ", "java": "import java.io.*;\n\nclass GFG {\n  static int pad(int n) {\n    padv[0] = padv[1] = padv[2] = 1;\n    for (int i = 3; i <= n; i++) {\n      padv[i] = padv[i - 2] + padv[i - 3];\n    }\n    return padv[n - 1];\n  }\n\n  public static void main(String args[]) {\n    int n = 12;\n    System.out.println(pad(n));\n  }\n}\n", "python": "def pad(n):\n    pPrevPrev, pPrev, pCurr, pNext = 1, 1, 1, 1\n    for i in range(3, n + 1):\n        pNext = pPrevPrev + pPrev\n        pPrevPrev = pPrev\n        pPrev = pCurr\n        pCurr = pNext\n    return pNext\n\n\nprint pad(12)\n"}
{"text": "Lucas Numbers ", "java": "class GFG {\n  static int lucas(int n) {\n    int a = 2, b = 1, c, i;\n    if (n == 0) return a;\n    for (i = 2; i <= n; i++) {\n      c = a + b;\n      a = b;\n      b = c;\n    }\n    return b;\n  }\n\n  public static void main(String args[]) {\n    int n = 9;\n    System.out.println(lucas(n));\n  }\n}\n", "python": "def lucas(n):\n    a = 2\n    b = 1\n    if n == 0:\n        return a\n    for i in range(2, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return b\n\n\nn = 9\nprint(lucas(n))\n"}
{"text": "Recursively break a number in 3 parts to get maximum sum ", "java": "import java.io.*;\n\nclass GFG {\n  final int MAX = 1000000;\n\n  static int breakSum(int n) {\n    int dp[] = new int[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4], i);\n    return dp[n];\n  }\n\n  public static void main(String[] args) {\n    int n = 24;\n    System.out.println(breakSum(n));\n  }\n}\n", "python": "MAX = 1000000\n\n\ndef breakSum(n):\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = max(dp[int(i / 2)] + dp[int(i / 3)] + dp[int(i / 4)], i)\n    return dp[n]\n\n\nn = 24\nprint(breakSum(n))\n"}
{"text": "Count number of ways to cover a distance ", "java": "import java.io.*;\n\nclass GFG {\n  static int printCountDP(int dist) {\n    int[] count = new int[dist + 1];\n    count[0] = 1;\n    if (dist >= 1) count[1] = 1;\n    if (dist >= 2) count[2] = 2;\n    for (int i = 3; i <= dist; i++) count[i] = count[i - 1] + count[i - 2] + count[i - 3];\n    return count[dist];\n  }\n\n  public static void main(String[] args) {\n    int dist = 4;\n    System.out.println(printCountDP(dist));\n  }\n}\n", "python": "def printCountDP(dist):\n    count = [0] * (dist + 1)\n    count[0] = 1\n    if dist >= 1:\n        count[1] = 1\n    if dist >= 2:\n        count[2] = 2\n    for i in range(3, dist + 1):\n        count[i] = count[i - 1] + count[i - 2] + count[i - 3]\n    return count[dist]\n\n\ndist = 4\nprint(printCountDP(dist))\n"}
{"text": "Count even length binary sequences with same sum of first and second half bits ", "java": "class GFG {\n  static int countSeq(int n) {\n    int nCr = 1, res = 1;\n    for (int r = 1; r <= n; r++) {\n      nCr = (nCr * (n + 1 - r)) / r;\n      res += nCr * nCr;\n    }\n    return res;\n  }\n\n  public static void main(String args[]) {\n    int n = 2;\n    System.out.print(\" Count \u2581 of \u2581 sequences \u2581 is \u2581 \");\n    System.out.println(countSeq(n));\n  }\n}\n", "python": "def countSeq(n):\n    nCr = 1\n    res = 1\n    for r in range(1, n + 1):\n        nCr = (nCr * (n + 1 - r)) / r\n        res += nCr * nCr\n    return res\n\n\nn = 2\nprint(\" Count \u2581 of \u2581 sequences \u2581 is \"),\nprint(int(countSeq(n)))\n"}
{"text": "Maximum Manhattan distance between a distinct pair from N coordinates ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static class Pair {\n    int x;\n    int y;\n\n    Pair(int x, int y) {\n      this.x = x;\n      this.y = y;\n    }\n  }\n\n  static void MaxDist(ArrayList<Pair> A, int N) {\n    ArrayList<Integer> V = new ArrayList<>();\n    ArrayList<Integer> V1 = new ArrayList<>();\n    for (int i = 0; i < N; i++) {\n      V.add(A.get(i).x + A.get(i).y);\n      V1.add(A.get(i).x - A.get(i).y);\n    }\n    Collections.sort(V);\n    Collections.sort(V1);\n    int maximum = Math.max((V.get(V.size() - 1) - V.get(0)), (V1.get(V1.size() - 1) - V1.get(0)));\n    System.out.println(maximum);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    ArrayList<Pair> al = new ArrayList<>();\n    Pair p1 = new Pair(1, 2);\n    al.add(p1);\n    Pair p2 = new Pair(2, 3);\n    al.add(p2);\n    Pair p3 = new Pair(3, 4);\n    al.add(p3);\n    MaxDist(al, n);\n  }\n}\n", "python": "def MaxDist(A, N):\n    V = [0 for i in range(N)]\n    V1 = [0 for i in range(N)]\n    for i in range(N):\n        V[i] = A[i][0] + A[i][1]\n        V1[i] = A[i][0] - A[i][1]\n    V.sort()\n    V1.sort()\n    maximum = max(V[-1] - V[0], V1[-1] - V1[0])\n    print(maximum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    A = [[1, 2], [2, 3], [3, 4]]\n    MaxDist(A, N)\n"}
{"text": "Total number of possible Binary Search Trees and Binary Trees with n keys ", "java": "import java.io.*;\n\nclass GFG {\n  static int factorial(int n) {\n    int res = 1;\n    for (int i = 1; i <= n; ++i) {\n      res *= i;\n    }\n    return res;\n  }\n\n  static int binomialCoeff(int n, int k) {\n    int res = 1;\n    if (k > n - k) k = n - k;\n    for (int i = 0; i < k; ++i) {\n      res *= (n - i);\n      res /= (i + 1);\n    }\n    return res;\n  }\n\n  static int catalan(int n) {\n    int c = binomialCoeff(2 * n, n);\n    return c / (n + 1);\n  }\n\n  static int countBST(int n) {\n    int count = catalan(n);\n    return count;\n  }\n\n  static int countBT(int n) {\n    int count = catalan(n);\n    return count * factorial(n);\n  }\n\n  public static void main(String[] args) {\n    int count1, count2, n = 5;\n    count1 = countBST(n);\n    count2 = countBT(n);\n    System.out.println(\" Count \u2581 of \u2581 BST \u2581 with \u2581 \" + n + \" \u2581 nodes \u2581 is \u2581 \" + count1);\n    System.out.println(\n        \" Count \u2581 of \u2581 binary \u2581 \" + \" trees \u2581 with \u2581 \" + n + \" \u2581 nodes \u2581 is \u2581 \" + count2);\n  }\n}\n", "python": "def factorial(n):\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n    return res\n\n\ndef binomialCoeff(n, k):\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= n - i\n        res //= i + 1\n    return res\n\n\ndef catalan(n):\n    c = binomialCoeff(2 * n, n)\n    return c // (n + 1)\n\n\ndef countBST(n):\n    count = catalan(n)\n    return count\n\n\ndef countBT(n):\n    count = catalan(n)\n    return count * factorial(n)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    count1 = countBST(n)\n    count2 = countBT(n)\n    print(\" Count \u2581 of \u2581 BST \u2581 with \", n, \" nodes \u2581 is \", count1)\n    print(\" Count \u2581 of \u2581 binary \u2581 trees \u2581 with \", n, \" nodes \u2581 is \", count2)\n"}
{"text": "Find the Kth smallest odd length palindrome number ", "java": "import java.util.*;\n\nclass GFG {\n  static int oddLengthPalindrome(int k) {\n    int palin = k;\n    k = k / 10;\n    while (k > 0) {\n      int rev = k % 10;\n      palin = (palin * 10) + rev;\n      k = k / 10;\n    }\n    return palin;\n  }\n\n  public static void main(String[] args) {\n    int k = 504;\n    System.out.println(oddLengthPalindrome(k));\n  }\n}\n", "python": "def oddLengthPalindrome(K):\n    palin = K\n    K = K // 10\n    while K > 0:\n        rev = K % 10\n        palin = palin * 10 + rev\n        K = K // 10\n    return palin\n\n\nif __name__ == \" _ _ main _ _ \":\n    K = 504\n    print(oddLengthPalindrome(K))\n"}
{"text": "Smallest number whose square has N digits ", "java": "class GFG {\n  static int smallestNum(int N) {\n    float x = (float) (Math.pow(10, (N - 1) / 2.0));\n    return (int) (Math.ceil(x));\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    System.out.print(smallestNum(N));\n  }\n}\n", "python": "import math\n\n\ndef smallestNum(N):\n    x = pow(10.0, (N - 1) / 2.0)\n    return math.ceil(x)\n\n\nN = 4\nprint(smallestNum(N))\n"}
{"text": "Find Nth term of the series 1 , 8 , 54 , 384. . . ", "java": "import java.io.*;\n\nclass GFG {\n  public static int fact(int N) {\n    int i, product = 1;\n    for (i = 1; i <= N; i++) product = product * i;\n    return product;\n  }\n\n  public static int nthTerm(int N) {\n    return (N * N) * fact(N);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def fact(N):\n    product = 1\n    for i in range(1, N + 1):\n        product = product * i\n    return product\n\n\ndef nthTerm(N):\n    return (N * N) * fact(N)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    print(nthTerm(N))\n"}
{"text": "Minimize sum of given array by removing all occurrences of a single digit ", "java": "import java.util.*;\n\nclass GFG {\n  static int remove(int N, int digit) {\n    String strN = String.valueOf(N);\n    String ans = \" \";\n    for (char i : strN.toCharArray()) {\n      if ((i - '0') == digit) {\n        continue;\n      }\n      ans += i;\n    }\n    return Integer.parseInt(ans);\n  }\n\n  static void getMin(int[] arr) {\n    int minSum = Integer.MAX_VALUE;\n    for (int i = 0; i < 10; i++) {\n      int curSum = 0;\n      for (int num : arr) curSum += remove(num, i);\n      minSum = Math.min(minSum, curSum);\n    }\n    System.out.print(minSum);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {34, 23, 85, 93};\n    getMin(arr);\n  }\n}\n", "python": "def remove(N, digit):\n    strN = str(N)\n    ans = \" \"\n    for i in strN:\n        if int(i) == digit:\n            continue\n        ans += i\n    return int(ans)\n\n\ndef getMin(arr):\n    minSum = float(\" inf \")\n    for i in range(10):\n        curSum = 0\n        for num in arr:\n            curSum += remove(num, i)\n        minSum = min(minSum, curSum)\n    print(minSum)\n\n\narr = [34, 23, 85, 93]\ngetMin(arr)\n"}
{"text": "Count of distinct permutations of every possible length of given string ", "java": "class GFG {\n  static int fact(int a) {\n    int i, f = 1;\n    for (i = 2; i <= a; i++) f = f * i;\n    return f;\n  }\n\n  static int permute(int n, int r) {\n    int ans = 0;\n    ans = (fact(n) / fact(n - r));\n    return ans;\n  }\n\n  static int findPermutations(int n) {\n    int sum = 0, P;\n    for (int r = 1; r <= n; r++) {\n      P = permute(n, r);\n      sum = sum + P;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    String str = \" xz \";\n    int result, n;\n    n = str.length();\n    System.out.print(findPermutations(n));\n  }\n}\n", "python": "def fact(a):\n    f = 1\n    for i in range(2, a + 1):\n        f = f * i\n    return f\n\n\ndef permute(n, r):\n    ans = 0\n    ans = fact(n) // fact(n - r)\n    return ans\n\n\ndef findPermutations(n):\n    sum = 0\n    for r in range(1, n + 1):\n        P = permute(n, r)\n        sum = sum + P\n    return sum\n\n\nstr = \" xz \"\nn = len(str)\nprint(findPermutations(n))\n"}
{"text": "Minimum operations to make Array equal by repeatedly adding K from an element and subtracting K from other ", "java": "import java.io.*;\n\nclass GFG {\n  static void miniOperToMakeAllEleEqual(int arr[], int n, int k) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += arr[i];\n    }\n    if (sum % n != 0) {\n      System.out.println(-1);\n      return;\n    }\n    int valueAfterDivision = sum / n;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n      if (Math.abs(valueAfterDivision - arr[i]) % k != 0) {\n        System.out.println(-1);\n        return;\n      }\n      count += Math.abs(valueAfterDivision - arr[i]) / k;\n    }\n    System.out.println((int) count / 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 3, k = 3;\n    int arr[] = {5, 8, 11};\n    miniOperToMakeAllEleEqual(arr, n, k);\n  }\n}\n", "python": "def miniOperToMakeAllEleEqual(arr, n, k):\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    if sum % n:\n        print(-1)\n        return\n    valueAfterDivision = sum // n\n    count = 0\n    for i in range(n):\n        if abs(valueAfterDivision - arr[i]) % k != 0:\n            print(-1)\n            return\n        count += abs(valueAfterDivision - arr[i]) // k\n    print(count // 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    k = 3\n    arr = [5, 8, 11]\n    miniOperToMakeAllEleEqual(arr, n, k)\n"}
{"text": "Digital Root of a given large integer using Recursion ", "java": "class GFG {\n  static String convertToString(int sum) {\n    String str = \" \";\n    while (sum > 0) {\n      str = str + (char) ((sum % 10) + '0');\n      sum = sum / 10;\n    }\n    return str;\n  }\n\n  static String GetIndividulaDigitSum(String str, int len) {\n    int sum = 0;\n    for (int i = 0; i < len; i++) {\n      sum = sum + str.charAt(i) - '0';\n    }\n    return convertToString(sum);\n  }\n\n  static int GetDigitalRoot(String str) {\n    if (str.length() == 1) {\n      return str.charAt(0) - '0';\n    }\n    str = GetIndividulaDigitSum(str, str.length());\n    return GetDigitalRoot(str);\n  }\n\n  public static void main(String[] args) {\n    String str = \"675987890789756545689070986776987\";\n    System.out.print(GetDigitalRoot(str));\n  }\n}\n", "python": "def convertToString(sum):\n    str1 = \" \"\n    while sum:\n        str1 = str1 + chr((sum % 10) + ord(\"0\"))\n        sum = sum // 10\n    return str1\n\n\ndef GetIndividulaDigitSum(str1, len1):\n    sum = 0\n    for i in range(len1):\n        sum = sum + ord(str1[i]) - ord(\"0\")\n    return convertToString(sum)\n\n\ndef GetDigitalRoot(str1):\n    if len(str1) == 1:\n        return ord(str1[0]) - ord(\"0\")\n    str1 = GetIndividulaDigitSum(str1, len(str1))\n    return GetDigitalRoot(str1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    str1 = \"675987890789756545689070986776987\"\n    print(GetDigitalRoot(str1))\n"}
{"text": "Count the Number of matching characters in a pair of strings ", "java": "class GFG {\n  static void count(String str1, String str2) {\n    int c = 0, j = 0;\n    for (int i = 0; i < str1.length(); i++) {\n      if (str2.indexOf(str1.charAt(i)) >= 0) {\n        c += 1;\n      }\n    }\n    System.out.println(\" No . \u2581 of \u2581 matching \u2581 characters \u2581 are : \u2581 \" + c);\n  }\n\n  public static void main(String[] args) {\n    String str1 = \" aabcddekll12 @ \";\n    String str2 = \" bb2211@55k \";\n    count(str1, str2);\n  }\n}\n", "python": "def count(str1, str2):\n    c = 0\n    j = 0\n    for i in range(len(str1)):\n        if str1[i] in str2:\n            c += 1\n        j += 1\n    print(\" No . \u2581 of \u2581 matching \u2581 characters \u2581 are : \u2581 \", c)\n\n\nif __name__ == \" _ _ main _ _ \":\n    str1 = \" aabcddekll12 @ \"\n    str2 = \" bb2211@55k \"\n    count(str1, str2)\n"}
{"text": "Replace all occurrences of a string with space ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static String extractSecretMessage(String Str, String Sub) {\n    Str = Str.replaceAll(Sub, \" \u2581 \");\n    Str = Str.trim();\n    return Str;\n  }\n\n  public static void main(String args[]) {\n    String Str = \" LIELIEILIEAMLIECOOL \";\n    String Sub = \" LIE \";\n    System.out.println(extractSecretMessage(Str, Sub));\n  }\n}\n", "python": "def extractSecretMessage(Str, Sub):\n    Str = Str.replace(Sub, \" \u2581 \")\n    return Str.strip()\n\n\nStr = \" LIELIEILIEAMLIECOOL \"\nSub = \" LIE \"\nprint(extractSecretMessage(Str, Sub))\n"}
{"text": "Number of sub ", "java": "class GFG {\n  static int MAX_LEN = 1005;\n  static int MAX_CHAR = 26;\n  static int ALL_CHARS = 256;\n\n  static boolean compare(char[] arr1, char[] arr2) {\n    for (int i = 0; i < ALL_CHARS; i++) if (arr1[i] != arr2[i]) return false;\n    return true;\n  }\n\n  static boolean search(String pat, String txt) {\n    int M = pat.length();\n    int N = txt.length();\n    int i;\n    char countP[] = new char[ALL_CHARS];\n    char countTW[] = new char[ALL_CHARS];\n    for (i = 0; i < M; i++) {\n      (countP[pat.charAt(i)])++;\n      (countTW[txt.charAt(i)])++;\n    }\n    for (i = M; i < N; i++) {\n      if (compare(countP, countTW)) {\n        return true;\n      }\n      (countTW[txt.charAt(i)])++;\n      countTW[txt.charAt(i - M)]--;\n    }\n    if (compare(countP, countTW)) return true;\n    return false;\n  }\n\n  static int calculatesubString(String s1, String s2, int n) {\n    int count = 0, j = 0, x = 0;\n    for (int i = 0; i < n; i++) {\n      for (int len = 1; len <= n - i; len++) {\n        if (search(s1.substring(i, i + len), s2)) {\n          count = count + 1;\n        }\n      }\n    }\n    return count;\n  }\n\n  public static void main(String args[]) {\n    String str1 = \" PLEASEHELPIMTRAPPED \";\n    String str2 = \" INAKICKSTARTFACTORY \";\n    int len = str1.length();\n    System.out.println(calculatesubString(str1, str2, len));\n  }\n}\n", "python": "import numpy as np\n\nN = 10000\n\n\ndef count_required_sequence(n, arr):\n    total_required_subsequence = 0\n    total_n_required_subsequence = 0\n    dp = np.zeros((N, 2))\n    for i in range(n):\n        turn_required = 0\n        for j in range(-1, 2, 1):\n            turn_required += dp[arr[i] + j][0]\n        required_end_i = total_required_subsequence + turn_required\n        n_required_end_i = 1 + total_n_required_subsequence - turn_required\n        total_required_subsequence += required_end_i\n        total_n_required_subsequence += n_required_end_i\n        dp[arr[i]][1] += required_end_i\n        dp[arr[i]][0] += n_required_end_i\n    return total_required_subsequence\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 6, 2, 1, 9]\n    n = len(arr)\n    print(count_required_sequence(n, arr))\n"}
{"text": "Number of substrings of a string ", "java": "import java.io.*;\n\npublic class GFG {\n  static int countNonEmptySubstr(String str) {\n    int n = str.length();\n    return n * (n + 1) / 2;\n  }\n\n  public static void main(String args[]) {\n    String s = \" abcde \";\n    System.out.println(countNonEmptySubstr(s));\n  }\n}\n", "python": "def countNonEmptySubstr(str):\n    n = len(str)\n    return int(n * (n + 1) / 2)\n\n\ns = \" abcde \"\nprint(countNonEmptySubstr(s))\n"}
{"text": "Maximize pair decrements required to reduce all array elements except one to 0 ", "java": "import java.util.*;\n\nclass GFG {\n  static int cntMaxOperationToMakeN_1_0(int[] arr, int N) {\n    int cntOp = 0;\n    PriorityQueue<Integer> PQ = new PriorityQueue<Integer>((a, b) -> b - a);\n    for (int i = 0; i < N; i++) {\n      PQ.add(arr[i]);\n    }\n    while (PQ.size() > 1) {\n      int X = PQ.peek();\n      PQ.remove();\n      int Y = PQ.peek();\n      PQ.remove();\n      X--;\n      Y--;\n      if (X != 0) {\n        PQ.add(X);\n      }\n      if (Y != 0) {\n        PQ.add(Y);\n      }\n      cntOp += 1;\n    }\n    return cntOp;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 4, 5};\n    int N = arr.length;\n    System.out.print(cntMaxOperationToMakeN_1_0(arr, N));\n  }\n}\n", "python": "def cntMaxOperationToMakeN_1_0(arr, N):\n    cntOp = 0\n    PQ = []\n    for i in range(N):\n        PQ.append(arr[i])\n    PQ = sorted(PQ)\n    while len(PQ) > 1:\n        X = PQ[-1]\n        del PQ[-1]\n        Y = PQ[-1]\n        del PQ[-1]\n        X -= 1\n        Y -= 1\n        if X != 0:\n            PQ.append(X)\n        if Y != 0:\n            PQ.append(Y)\n        cntOp += 1\n        PQ = sorted(PQ)\n    return cntOp\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4, 5]\n    N = len(arr)\n    print(cntMaxOperationToMakeN_1_0(arr, N))\n"}
{"text": "Flip all K ", "java": "import java.util.*;\n\nclass GFG {\n  static void flippingBits(long N, long K) {\n    long X = (1 << (K - 1)) - 1;\n    N = X - N;\n    System.out.print(N);\n  }\n\n  public static void main(String[] args) {\n    long N = 1, K = 8;\n    flippingBits(N, K);\n  }\n}\n", "python": "def flippingBits(N, K):\n    X = (1 << (K - 1)) - 1\n    N = X - N\n    print(N)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N, K = 1, 8\n    flippingBits(N, K)\n"}
{"text": "Smallest number whose sum of digits is square of N ", "java": "import java.util.*;\n\nclass GFG {\n  static int smallestNum(int n) {\n    return (int) ((n * n % 9 + 1) * Math.pow(10, n * n / 9) - 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.print(smallestNum(n));\n  }\n}\n", "python": "def smallestNum(n):\n    return (n * n % 9 + 1) * pow(10, int(n * n / 9)) - 1\n\n\nN = 4\nprint(smallestNum(N))\n"}
{"text": "Find the Nth row in Pascal 's Triangle ", "java": "import java.util.ArrayList;\n\npublic class geeks {\n  public static ArrayList<Integer> getRow(int rowIndex) {\n    ArrayList<Integer> currow = new ArrayList<Integer>();\n    currow.add(1);\n    if (rowIndex == 0) {\n      return currow;\n    }\n    ArrayList<Integer> prev = getRow(rowIndex - 1);\n    for (int i = 1; i < prev.size(); i++) {\n      int curr = prev.get(i - 1) + prev.get(i);\n      currow.add(curr);\n    }\n    currow.add(1);\n    return currow;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    ArrayList<Integer> arr = getRow(n);\n    for (int i = 0; i < arr.size(); i++) {\n      if (i == arr.size() - 1) System.out.print(arr.get(i));\n      else System.out.print(arr.get(i) + \" , \u2581 \");\n    }\n  }\n}\n", "python": "def getRow(rowIndex):\n    currow = []\n    currow.append(1)\n    if rowIndex == 0:\n        return currow\n    prev = getRow(rowIndex - 1)\n    for i in range(1, len(prev)):\n        curr = prev[i - 1] + prev[i]\n        currow.append(curr)\n    currow.append(1)\n    return currow\n\n\nn = 3\narr = getRow(n)\nfor i in range(len(arr)):\n    if i == (len(arr) - 1):\n        print(arr[i])\n    else:\n        print(arr[i], end=\" , \u2581 \")\n    DEDENT\n"}
{"text": "Find last digit in factorial ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int lastDigitFactorial(int n) {\n    if (n == 0) return 1;\n    else if (n <= 2) return n;\n    else if (n == 3) return 6;\n    else if (n == 4) return 4;\n    else return 0;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(lastDigitFactorial(6));\n  }\n}\n", "python": "def lastDigitFactorial(n):\n    if n == 0:\n        return 1\n    elif n <= 2:\n        return n\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 4\n    else:\n        return 0\n\n\nprint(lastDigitFactorial(6))\n"}
{"text": "Find the sum of the first Nth Heptadecagonal Number ", "java": "class GFG {\n  public static int heptadecagonal_num(int n) {\n    return ((15 * n * n) - 13 * n) / 2;\n  }\n\n  public static int sum_heptadecagonal_num(int n) {\n    int summ = 0;\n    for (int i = 1; i < n + 1; i++) {\n      summ += heptadecagonal_num(i);\n    }\n    return summ;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(sum_heptadecagonal_num(n));\n  }\n}\n", "python": "def heptadecagonal_num(n):\n    return ((15 * n * n) - 13 * n) // 2\n\n\ndef sum_heptadecagonal_num(n):\n    summ = 0\n    for i in range(1, n + 1):\n        summ += heptadecagonal_num(i)\n    return summ\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(sum_heptadecagonal_num(n))\n"}
{"text": "Program to check if N is a Centered Pentagonal Number or not ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isCenteredpentagonal(int N) {\n    float n = (float) ((5 + Math.sqrt(40 * N - 15)) / 10);\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 6;\n    if (isCenteredpentagonal(N)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "import numpy as np\n\n\ndef isCenteredpentagonal(N):\n    n = (5 + np.sqrt(40 * N - 15)) / 10\n    return (n - int(n)) == 0\n\n\nN = 6\nif isCenteredpentagonal(N):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to check if N is a Dodecagonal Number ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isdodecagonal(int N) {\n    float n = (float) ((4 + Math.sqrt(20 * N + 16)) / 10);\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 12;\n    if (isdodecagonal(N)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "import numpy as np\n\n\ndef isdodecagonal(N):\n    n = (4 + np.sqrt(20 * N + 16)) / 10\n    return (n - int(n)) == 0\n\n\nN = 12\nif isdodecagonal(N):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Logarithm tricks for Competitive Programming ", "java": "class GFG {\n  static int prevPowerofK(int n, int k) {\n    int p = (int) (Math.log(n) / Math.log(k));\n    return (int) Math.pow(k, p);\n  }\n\n  static int nextPowerOfK(int n, int k) {\n    return prevPowerofK(n, k) * k;\n  }\n\n  public static void main(String[] args) {\n    int N = 7;\n    int K = 2;\n    System.out.print(prevPowerofK(N, K) + \" \u2581 \");\n    System.out.println(nextPowerOfK(N, K));\n  }\n}\n", "python": "import math\n\n\ndef isPowerOfTwo(n):\n    return math.ceil(math.log(n) // math.log(2)) == math.floor(\n        math.log(n) // math.log(2)\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    if isPowerOfTwo(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Probability of getting a perfect square when a random number is chosen in a given range ", "java": "class GFG {\n  static float findProb(int l, int r) {\n    float countOfPS = (float) (Math.floor(Math.sqrt(r)) - Math.ceil(Math.sqrt(l)) + 1);\n    float total = r - l + 1;\n    float prob = (float) countOfPS / (float) total;\n    return prob;\n  }\n\n  public static void main(String[] args) {\n    int L = 16, R = 25;\n    System.out.print(findProb(L, R));\n  }\n}\n", "python": "import math\n\n\ndef findProb(l, r):\n    countOfPS = math.floor(math.sqrt(r)) - math.ceil(math.sqrt(l)) + 1\n    total = r - l + 1\n    prob = countOfPS / total\n    return prob\n\n\nif __name__ == \" _ _ main _ _ \":\n    L = 16\n    R = 25\n    print(findProb(L, R))\n"}
{"text": "Find root of a number using Newton 's method ", "java": "class GFG {\n  static double squareRoot(double n, double l) {\n    double x = n;\n    double root;\n    int count = 0;\n    while (true) {\n      count++;\n      root = 0.5 * (x + (n / x));\n      if (Math.abs(root - x) < l) break;\n      x = root;\n    }\n    return root;\n  }\n\n  public static void main(String[] args) {\n    double n = 327;\n    double l = 0.00001;\n    System.out.println(squareRoot(n, l));\n  }\n}\n", "python": "def squareRoot(n, l):\n    x = n\n    count = 0\n    while 1:\n        count += 1\n        root = 0.5 * (x + (n / x))\n        if abs(root - x) < l:\n            break\n        x = root\n    return root\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 327\n    l = 0.00001\n    print(squareRoot(n, l))\n"}
{"text": "Find two co ", "java": "import java.math.*;\n\nclass GFG {\n  public static int findGCD(int a, int b) {\n    if (b == 0) return a;\n    else return findGCD(b, a % b);\n  }\n\n  static void findNumbers(int a, int b) {\n    int gcd = findGCD(a, b);\n    System.out.println((a / gcd) + \" \u2581 \" + (b / gcd));\n  }\n\n  public static void main(String[] args) {\n    int a = 12, b = 16;\n    findNumbers(a, b);\n  }\n}\n", "python": "from math import gcd\n\n\ndef findNumbers(a, b):\n    __gcd = gcd(a, b)\n    print((a // __gcd), (b // __gcd))\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 12\n    b = 16\n    findNumbers(a, b)\n"}
{"text": "Find the final sequence of the array after performing given operations ", "java": "import java.io.*;\n\nclass GFG {\n  static void solveEven(int n, int arr[], int b[]) {\n    int left = n - 1;\n    for (int i = 0; i < (n / 2); ++i) {\n      b[i] = arr[left];\n      left = left - 2;\n      if (left < 0) break;\n    }\n    int right = 0;\n    for (int i = n / 2; i <= n - 1; ++i) {\n      b[i] = arr[right];\n      right = right + 2;\n      if (right > n - 2) break;\n    }\n  }\n\n  static void solveOdd(int n, int arr[], int b[]) {\n    int left = n - 1;\n    for (int i = 0; i < (n / 2) + 1; ++i) {\n      b[i] = arr[left];\n      left = left - 2;\n      if (left < 0) break;\n    }\n    int right = 1;\n    for (int i = (n / 2) + 1; i <= n - 1; ++i) {\n      b[i] = arr[right];\n      right = right + 2;\n      if (right > n - 2) break;\n    }\n  }\n\n  static void solve(int n, int arr[]) {\n    int b[] = new int[n];\n    if (n % 2 == 0) solveEven(n, arr, b);\n    else solveOdd(n, arr, b);\n    for (int i = 0; i <= n - 1; ++i) {\n      System.out.print(b[i] + \" \u2581 \");\n    }\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 4};\n    int n = arr.length;\n    solve(n, arr);\n  }\n}\n", "python": "def solve(arr, n):\n    b = [0 for i in range(n)]\n    p = 0\n    i = n - 1\n    while i >= 0:\n        b[p] = arr[i]\n        i -= 1\n        if i >= 0:\n            b[n - 1 - p] = arr[i]\n        p += 1\n        i -= 1\n    return b\n\n\narr = [1, 2, 3, 4]\nn = len(arr)\nb = solve(arr, n)\nprint(b)\n"}
{"text": "Sequence with sum K and minimum sum of absolute differences between consecutive elements ", "java": "import java.io.*;\n\nclass GFG {\n  static int minimum_sum(int n, int k) {\n    if (k % n == 0) return 0;\n    return 1;\n  }\n\n  public static void main(String[] args) {\n    int n = 3, k = 56;\n    System.out.println(minimum_sum(n, k));\n  }\n}\n", "python": "def minimum_sum(n, k):\n    if k % n == 0:\n        return 0\n    return 1\n\n\nn = 3\nk = 56\nprint(minimum_sum(n, k))\n"}
{"text": "Number of subarrays having sum of the form k ^ m , m >= 0 ", "java": "import java.util.*;\n\nclass GFG {\n  static final int MAX = 100005;\n\n  static long[] partial_sum(long[] prefix_sum, int[] arr, int n) {\n    for (int i = 1; i <= n; i++) {\n      prefix_sum[i] = (prefix_sum[i - 1] + arr[i - 1]);\n    }\n    return prefix_sum;\n  }\n\n  static int countSubarrays(int[] arr, int n, int k) {\n    long[] prefix_sum = new long[MAX];\n    prefix_sum[0] = 0;\n    prefix_sum = partial_sum(prefix_sum, arr, n);\n    int sum;\n    if (k == 1) {\n      sum = 0;\n      HashMap<Long, Integer> m = new HashMap<>();\n      for (int i = n; i >= 0; i--) {\n        if (m.containsKey(prefix_sum[i] + 1)) sum += m.get(prefix_sum[i] + 1);\n        if (m.containsKey(prefix_sum[i])) m.put(prefix_sum[i], m.get(prefix_sum[i]) + 1);\n        else m.put(prefix_sum[i], 1);\n      }\n      return sum;\n    }\n    if (k == -1) {\n      sum = 0;\n      HashMap<Long, Integer> m = new HashMap<>();\n      for (int i = n; i >= 0; i--) {\n        if (m.containsKey(prefix_sum[i] + 1)) sum += m.get(prefix_sum[i] + 1);\n        if (m.containsKey(prefix_sum[i] - 1)) sum += m.get(prefix_sum[i] - 1);\n        if (m.containsKey(prefix_sum[i])) m.put(prefix_sum[i], m.get(prefix_sum[i]) + 1);\n        else m.put(prefix_sum[i], 1);\n      }\n      return sum;\n    }\n    sum = 0;\n    long b, l = 100000000000000L;\n    HashMap<Long, Integer> m = new HashMap<>();\n    for (int i = n; i >= 0; i--) {\n      b = 1;\n      while (true) {\n        if (b > l) break;\n        if (m.containsKey(prefix_sum[i] + b)) sum += m.get(prefix_sum[i] + b);\n        b *= k;\n      }\n      if (m.containsKey(prefix_sum[i])) m.put((prefix_sum[i]), m.get(prefix_sum[i]) + 1);\n      else m.put((prefix_sum[i]), 1);\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 2, 2, 2};\n    int n = arr.length;\n    int k = 2;\n    System.out.print(countSubarrays(arr, n, k));\n  }\n}\n", "python": "from collections import defaultdict\n\nMAX = 100005\n\n\ndef partial_sum(prefix_sum, arr, n):\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    return prefix_sum\n\n\ndef countSubarrays(arr, n, k):\n    prefix_sum = [0] * MAX\n    prefix_sum[0] = 0\n    prefix_sum = partial_sum(prefix_sum, arr, n)\n    if k == 1:\n        sum = 0\n        m = defaultdict(int)\n        for i in range(n, -1, -1):\n            if (prefix_sum[i] + 1) in m:\n                sum += m[prefix_sum[i] + 1]\n            m[prefix_sum[i]] += 1\n        return sum\n    if k == -1:\n        sum = 0\n        m = defaultdict(int)\n        for i in range(n, -1, -1):\n            if (prefix_sum[i] + 1) in m:\n                sum += m[prefix_sum[i] + 1]\n            if (prefix_sum[i] - 1) in m:\n                sum += m[prefix_sum[i] - 1]\n            m[prefix_sum[i]] += 1\n        return sum\n    sum = 0\n    m = defaultdict(int)\n    for i in range(n, -1, -1):\n        b = 1\n        while True:\n            if b > 100000000000000:\n                break\n            if (prefix_sum[i] + b) in m:\n                sum += m[prefix_sum[i] + b]\n            b *= k\n        m[prefix_sum[i]] += 1\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 2, 2, 2]\n    n = len(arr)\n    k = 2\n    print(countSubarrays(arr, n, k))\n"}
{"text": "Find the Nth term of the series 9 , 45 , 243 , 1377 ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static int nthTerm(int n) {\n    int An = ((int) Math.pow(1, n) + (int) Math.pow(2, n)) * (int) Math.pow(3, n);\n    return An;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(nthTerm(n));\n  }\n}\n", "python": "def nthterm(n):\n    An = (1 ** n + 2 ** n) * (3 ** n)\n    return An\n\n\nn = 3\nprint(nthterm(n))\n"}
{"text": "Find the nth term of the series 0 , 8 , 64 , 216 , 512 , . . . ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static int nthTerm(int n) {\n    int d = 2;\n    int a1 = 0;\n    int An = a1 + (n - 1) * d;\n    return (int) Math.pow(An, 3);\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(nthTerm(n));\n  }\n}\n", "python": "def term(n):\n    d = 2\n    a1 = 0\n    An = a1 + (n - 1) * d\n    An = An ** 3\n    return An\n\n\nn = 5\nprint(term(n))\n"}
{"text": "Minimize the value of N by applying the given operations ", "java": "import java.util.*;\n\nclass solution {\n  static int minimum(int n) {\n    int product = 1;\n    for (int i = 2; i * i <= n; i++) {\n      if (n % i == 0) {\n        while (n % i == 0) n = n / i;\n        product = product * i;\n      }\n    }\n    if (n >= 2) product = product * n;\n    return product;\n  }\n\n  public static void main(String arr[]) {\n    int n = 20;\n    System.out.println(minimum(n));\n  }\n}\n", "python": "def minimum(n):\n    product = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n = n / i\n            product = product * i\n        i = i + 1\n    if n >= 2:\n        product = product * n\n    return product\n\n\nn = 20\nprint(minimum(n))\n"}
{"text": "Program to find the smallest element among three elements ", "java": "import java.io.*;\n\nclass GFG {\n  public static void main(String[] args) {\n    int a = 5, b = 7, c = 10;\n    if (a <= b && a <= c) System.out.println(a + \" \u2581 is \u2581 the \u2581 smallest \");\n    else if (b <= a && b <= c) System.out.println(b + \" \u2581 is \u2581 the \u2581 smallest \");\n    else System.out.println(c + \" \u2581 is \u2581 the \u2581 smallest \");\n  }\n}\n", "python": "a, b, c = 5, 7, 10\nif a <= b and a <= c:\n    print(a, \" is \u2581 the \u2581 smallest \")\nelif b <= a and b <= c:\n    print(b, \" is \u2581 the \u2581 smallest \")\nelse:\n    print(c, \" is \u2581 the \u2581 smallest \")\n"}
{"text": "Find subsequences with maximum Bitwise AND and Bitwise OR ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static void maxSum(int[] a, int n) {\n    int maxAnd = Arrays.stream(a).max().getAsInt();\n    int maxOR = 0;\n    for (int i = 0; i < n; i++) {\n      maxOR |= a[i];\n    }\n    System.out.println((maxAnd + maxOR));\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    int[] a = {3, 5, 6, 1};\n    maxSum(a, n);\n  }\n}\n", "python": "def maxSum(a, n):\n    maxAnd = max(a)\n    maxOR = 0\n    for i in range(n):\n        maxOR |= a[i]\n    print(maxAnd + maxOR)\n\n\nn = 4\na = [3, 5, 6, 1]\nmaxSum(a, n)\n"}
{"text": "Sum of minimum elements of all subarrays ", "java": "import java.util.*;\n\nclass GFG {\n  static class pair {\n    int first, second;\n\n    public pair(int first, int second) {\n      this.first = first;\n      this.second = second;\n    }\n  }\n\n  static int sumSubarrayMins(int A[], int n) {\n    int[] left = new int[n];\n    int[] right = new int[n];\n    Stack<pair> s1 = new Stack<pair>();\n    Stack<pair> s2 = new Stack<pair>();\n    for (int i = 0; i < n; ++i) {\n      int cnt = 1;\n      while (!s1.isEmpty() && (s1.peek().first) > A[i]) {\n        cnt += s1.peek().second;\n        s1.pop();\n      }\n      s1.push(new pair(A[i], cnt));\n      left[i] = cnt;\n    }\n    for (int i = n - 1; i >= 0; --i) {\n      int cnt = 1;\n      while (!s2.isEmpty() && (s2.peek().first) >= A[i]) {\n        cnt += s2.peek().second;\n        s2.pop();\n      }\n      s2.push(new pair(A[i], cnt));\n      right[i] = cnt;\n    }\n    int result = 0;\n    for (int i = 0; i < n; ++i) result = (result + A[i] * left[i] * right[i]);\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {3, 1, 2, 4};\n    int n = A.length;\n    System.out.println(sumSubarrayMins(A, n));\n  }\n}\n", "python": "def sumSubarrayMins(A, n):\n    left, right = [None] * n, [None] * n\n    s1, s2 = [], []\n    for i in range(0, n):\n        cnt = 1\n        while len(s1) > 0 and s1[-1][0] > A[i]:\n            cnt += s1[-1][1]\n            s1.pop()\n        s1.append([A[i], cnt])\n        left[i] = cnt\n    for i in range(n - 1, -1, -1):\n        cnt = 1\n        while len(s2) > 0 and s2[-1][0] >= A[i]:\n            cnt += s2[-1][1]\n            s2.pop()\n        s2.append([A[i], cnt])\n        right[i] = cnt\n    result = 0\n    for i in range(0, n):\n        result += A[i] * left[i] * right[i]\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [3, 1, 2, 4]\n    n = len(A)\n    print(sumSubarrayMins(A, n))\n"}
{"text": "Program to find the Nth term of series 5 , 12 , 21 , 32 , 45. ... . . ", "java": "import java.io.*;\n\nclass GFG {\n  static int nthTerm(int n) {\n    return (int) Math.pow(n, 2) + 4 * n;\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(n):\n    return n ** 2 + 4 * n\n\n\nN = 4\nprint(nthTerm(N))\n"}
{"text": "Program to find the Nth term of the series 3 , 20 , 63 , 144 , 230 , \u00e2 \u20ac\u00a6 \u00e2 \u20ac\u00a6 ", "java": "import java.util.*;\n\nclass solution {\n  static int nthTerm(int n) {\n    return 2 * (int) Math.pow(n, 3) + (int) Math.pow(n, 2);\n  }\n\n  public static void main(String arr[]) {\n    int N = 3;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(n):\n    return 2 * pow(n, 3) + pow(n, 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    print(nthTerm(N))\n"}
{"text": "Program to print the Sum of series ", "java": "import java.util.*;\n\nclass solution {\n  static int findSum(int N) {\n    return (N * (N + 1) * (2 * N - 5) + 4 * N) / 2;\n  }\n\n  public static void main(String arr[]) {\n    int N = 3;\n    System.out.println(findSum(N));\n  }\n}\n", "python": "def findSum(N):\n    return (N * (N + 1) * (2 * N - 5) + 4 * N) / 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    print(findSum(N))\n"}
{"text": "Program to find the Nth term of series ", "java": "class GFG {\n  static int nthTerm(int N) {\n    return ((3 * N * N) - (6 * N) + 2);\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(N):\n    return (3 * N * N) - (6 * N) + 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(nthTerm(n))\n"}
{"text": "Pizza cut problem ( Or Circle Division by Lines ) ", "java": "class GFG {\n  static int findMaximumPieces(int n) {\n    return 1 + n * (n + 1) / 2;\n  }\n\n  public static void main(String arg[]) {\n    System.out.print(findMaximumPieces(3));\n  }\n}\n", "python": "def findMaximumPieces(n):\n    return int(1 + n * (n + 1) / 2)\n\n\nprint(findMaximumPieces(3))\n"}
{"text": "Program to find Sum of the series 1 * 3 + 3 * 5 + ... . ", "java": "class GFG {\n  static int calculateSum(int n) {\n    return (n * (4 * n * n + 6 * n - 1) / 3);\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(\" Sum \u2581 = \u2581 \" + calculateSum(n));\n  }\n}\n", "python": "def calculateSum(n):\n    return n * (4 * n * n + 6 * n - 1) / 3\n\n\nn = 4\nprint(\" Sum \u2581 = \", calculateSum(n))\n"}
{"text": "Program to find the percentage of difference between two numbers ", "java": "class GFG {\n  static int percent(int a, int b) {\n    float result = 0;\n    result = ((b - a) * 100) / a;\n    return (int) result;\n  }\n\n  public static void main(String[] args) {\n    int a = 20, b = 25;\n    System.out.println(percent(a, b) + \" % \");\n  }\n}\n", "python": "def percent(a, b):\n    result = int(((b - a) * 100) / a)\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    a, b = 20, 25\n    print(percent(a, b), \" % \")\n"}
{"text": "Program to find HCF ( Highest Common Factor ) of 2 Numbers ", "java": "class Test {\n  static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n  }\n\n  public static void main(String[] args) {\n    int a = 98, b = 56;\n    System.out.println(\" GCD \u2581 of \u2581 \" + a + \" \u2581 and \u2581 \" + b + \" \u2581 is \u2581 \" + gcd(a, b));\n  }\n}\n", "python": "def gcd(a, b):\n    if a == 0 and b == 0:\n        return 0\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\n\n\na = 98\nb = 56\nif gcd(a, b):\n    print(\" GCD \u2581 of \", a, \" and \", b, \" is \", gcd(a, b))\nelse:\n    print(\" not \u2581 found \")\n"}
{"text": "Egg Dropping Puzzle with 2 Eggs and K Floors ", "java": "import java.io.*;\n\nclass GFG {\n  static int twoEggDrop(int k) {\n    return (int) Math.ceil((-1.0 + Math.sqrt(1 + 8 * k)) / 2.0);\n  }\n\n  public static void main(String[] args) {\n    int k = 100;\n    System.out.println(twoEggDrop(k));\n  }\n}\n", "python": "import math as mt\n\n\ndef twoEggDrop(k):\n    return mt.ceil((-1.0 + mt.sqrt(1 + 8 * k)) / 2)\n\n\nk = 100\nprint(twoEggDrop(k))\n"}
{"text": "Program to find the Area and Volume of Icosahedron ", "java": "import java.io.*;\n\nclass GFG {\n  static float findArea(float a) {\n    float area;\n    area = (float) (5 * Math.sqrt(3) * a * a);\n    return area;\n  }\n\n  static float findVolume(float a) {\n    float volume;\n    volume = (float) (((float) 5 / 12) * (3 + Math.sqrt(5)) * a * a * a);\n    return volume;\n  }\n\n  public static void main(String[] args) {\n    float a = 5;\n    System.out.println(\" Area : \u2581 \" + findArea(a));\n    System.out.println(\" Volume : \u2581 \" + findVolume(a));\n  }\n}\n", "python": "from math import sqrt\n\n\ndef findArea(a):\n    area = 5 * sqrt(3) * a * a\n    return area\n\n\ndef findVolume(a):\n    volume = (5 / 12) * (3 + sqrt(5)) * a * a * a\n    return volume\n\n\na = 5\nprint(\" Area : \u2581 \", findArea(a))\nprint(\" Volume : \u2581 \", findVolume(a))\n"}
{"text": "Total number of ways to place X and Y at n places such that no two X are together ", "java": "public class GFG {\n  static int ways(int n) {\n    int first = 2;\n    int second = 3;\n    int res = 0;\n    for (int i = 3; i <= n; i++) {\n      res = first + second;\n      first = second;\n      second = res;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int n = 7;\n    System.out.print(\" Total \u2581 ways \u2581 are : \u2581 \" + ways(n));\n  }\n}\n", "python": "def ways(n):\n    first = 2\n    second = 3\n    res = 0\n    for i in range(3, n + 1):\n        res = first + second\n        first = second\n        second = res\n    return res\n\n\nn = 7\nprint(\" Total \u2581 ways \u2581 are : \u2581 \", ways(n))\n"}
{"text": "Program to convert centimeter into meter and kilometer ", "java": "import java.io.*;\n\nclass GFG {\n  public static void main(String[] args) {\n    double cm, meter, kilometer;\n    cm = 1000;\n    meter = cm / 100.0;\n    kilometer = cm / 100000.0;\n    System.out.println(\" Length \u2581 in \u2581 meter \u2581 = \u2581 \" + meter + \" m \");\n    System.out.println(\" Length \u2581 in \u2581 Kilometer \u2581 = \u2581 \" + kilometer + \" km \");\n  }\n}\n", "python": "cm = 1000\nmeter = cm / 100.0\nkilometer = cm / 100000.0\nprint(\" Length \u2581 in \u2581 meter \u2581 = \u2581 \", meter, \" m \")\nprint(\" Length \u2581 in \u2581 Kilometer \u2581 = \u2581 \", kilometer, \" km \")\n"}
{"text": "Check if two people starting from different points ever meet ", "java": "public class GFG {\n  static boolean everMeet(int x1, int x2, int v1, int v2) {\n    if (x1 < x2 && v1 <= v2) {\n      return false;\n    }\n    if (x1 > x2 && v1 >= v2) {\n      return false;\n    }\n    if (x1 < x2) {\n      swap(x1, x2);\n      swap(v1, v2);\n    }\n    return ((x1 - x2) % (v1 - v2) == 0);\n  }\n\n  static void swap(int a, int b) {\n    int t = a;\n    a = b;\n    b = t;\n  }\n\n  public static void main(String[] args) {\n    int x1 = 5, v1 = 8, x2 = 4, v2 = 7;\n    if (everMeet(x1, x2, v1, v2)) {\n      System.out.printf(\" Yes \");\n    } else {\n      System.out.printf(\" No \");\n    }\n  }\n}\n", "python": "def everMeet(x1, x2, v1, v2):\n    if x1 < x2 and v1 <= v2:\n        return False\n    if x1 > x2 and v1 >= v2:\n        return False\n    if x1 < x2:\n        x1, x2 = x2, x1\n        v1, v2 = v2, v1\n    while x1 >= x2:\n        if x1 == x2:\n            return True\n        x1 = x1 + v1\n        x2 = x2 + v2\n    return False\n\n\nx1 = 5\nv1 = 8\nx2 = 4\nv2 = 7\nif everMeet(x1, x2, v1, v2):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Find ceil of a / b without using ceil ( ) function ", "java": "class GFG {\n  public static void main(String args[]) {\n    int a = 4;\n    int b = 3;\n    int val = (a + b - 1) / b;\n    System.out.println(\" The \u2581 ceiling \u2581 value \u2581 of \u2581 4/3 \u2581 is \u2581 \" + val);\n    a = 6;\n    b = 3;\n    val = (a + b - 1) / b;\n    System.out.println(\" The \u2581 ceiling \u2581 value \u2581 of \u2581 6/3 \u2581 is \u2581 \" + val);\n  }\n}\n", "python": "import math\n\na = 4\nb = 3\nval = (a / b) + ((a % b) != 0)\nprint(\" The \u2581 ceiling \u2581 value \u2581 of \u2581 4/3 \u2581 is \", math.floor(val))\na = 6\nb = 3\nval = int((a / b) + ((a % b) != 0))\nprint(\" The \u2581 ceiling \u2581 value \u2581 of \u2581 6/3 \u2581 is \", val)\n"}
{"text": "Sum of range in a series of first odd then even natural numbers ", "java": "class GFG {\n  static double sumTillX(double x, double n) {\n    double odd = Math.ceil(n / 2.0);\n    if (x <= odd) return x * x;\n    double even = x - odd;\n    return ((odd * odd) + (even * even) + even);\n  }\n\n  static double rangeSum(double N, double L, double R) {\n    return sumTillX(R, N) - sumTillX(L - 1, N);\n  }\n\n  public static void main(String args[]) {\n    long N = 10, L = 1, R = 6;\n    int n = 101;\n    System.out.println((int) rangeSum(N, L, R));\n  }\n}\n", "python": "import math\n\n\ndef sumTillX(x, n):\n    odd = math.ceil(n / 2.0)\n    if x <= odd:\n        return x * x\n    even = x - odd\n    return (odd * odd) + (even * even) + even\n\n\ndef rangeSum(N, L, R):\n    return sumTillX(R, N) - sumTillX(L - 1, N)\n\n\nN = 10\nL = 1\nR = 6\nprint(rangeSum(N, L, R))\n"}
{"text": "Decimal Equivalent of Gray Code and its Inverse ", "java": "import java.io.*;\n\nclass GFG {\n  static int inversegrayCode(int n) {\n    int inv = 0;\n    for (; n != 0; n = n >> 1) inv ^= n;\n    return inv;\n  }\n\n  public static void main(String[] args) {\n    int n = 15;\n    System.out.println(inversegrayCode(n));\n  }\n}\n", "python": "def inversegrayCode(n):\n    inv = 0\n    while n:\n        inv = inv ^ n\n        n = n >> 1\n    return inv\n\n\nn = 15\nprint(inversegrayCode(n))\n"}
{"text": "Maximizing Probability of one type from N containers ", "java": "class GFG {\n  static double calculateProbability(int N) {\n    double probability = (double) N / (N + 1);\n    return probability;\n  }\n\n  public static void main(String[] args) {\n    int N;\n    double probabilityMax;\n    N = 1;\n    probabilityMax = calculateProbability(N);\n    System.out.println(\n        \" Maximum \u2581 Probability \u2581 for \"\n            + \" \u2581 N \u2581 = \u2581 \"\n            + N\n            + \" \u2581 is , \u2581 \"\n            + Math.round(probabilityMax * 10000.0) / 10000.0);\n    N = 2;\n    probabilityMax = calculateProbability(N);\n    System.out.println(\n        \" Maximum \u2581 Probability \u2581 for \u2581 N \u2581 = \u2581 \"\n            + N\n            + \" \u2581 is , \u2581 \"\n            + Math.round(probabilityMax * 10000.0) / 10000.0);\n    N = 10;\n    probabilityMax = calculateProbability(N);\n    System.out.println(\n        \" Maximum \u2581 Probability \u2581 for \u2581 N \u2581 = \u2581 \"\n            + N\n            + \" \u2581 is , \u2581 \"\n            + Math.round(probabilityMax * 10000.0) / 10000.0);\n  }\n}\n", "python": "def calculateProbability(N):\n    probability = N / (N + 1)\n    return probability\n\n\nN = 1\nprobabilityMax = calculateProbability(N)\nprint(\" Maximum \u2581 Probability \u2581 for \u2581 N \u2581 = \u2581 \", N, \" is , \u2581 % .4f \" % probabilityMax)\nN = 2\nprobabilityMax = calculateProbability(N)\nprint(\" Maximum \u2581 Probability \u2581 for \u2581 N \u2581 = \", N, \" is , \u2581 % .4f \" % probabilityMax)\nN = 10\nprobabilityMax = calculateProbability(N)\nprint(\" Maximum \u2581 Probability \u2581 for \u2581 N \u2581 = \", N, \" is , \u2581 % .4f \" % probabilityMax)\n"}
{"text": "Program to implement standard deviation of grouped data ", "java": "import java.io.*;\n\nclass GFG {\n  static float mean(float mid[], int freq[], int n) {\n    float sum = 0, freqSum = 0;\n    for (int i = 0; i < n; i++) {\n      sum = sum + mid[i] * freq[i];\n      freqSum = freqSum + freq[i];\n    }\n    return sum / freqSum;\n  }\n\n  static float groupedSD(float lower_limit[], float upper_limit[], int freq[], int n) {\n    float mid[] = new float[n];\n    float sum = 0, freqSum = 0, sd;\n    for (int i = 0; i < n; i++) {\n      mid[i] = (lower_limit[i] + upper_limit[i]) / 2;\n      sum = sum + freq[i] * mid[i] * mid[i];\n      freqSum = freqSum + freq[i];\n    }\n    sd =\n        (float)\n            Math.sqrt((sum - freqSum * mean(mid, freq, n) * mean(mid, freq, n)) / (freqSum - 1));\n    return sd;\n  }\n\n  public static void main(String[] args) {\n    float lower_limit[] = {50, 61, 71, 86, 96};\n    float upper_limit[] = {60, 70, 85, 95, 100};\n    int freq[] = {9, 7, 9, 12, 8};\n    int n = lower_limit.length;\n    System.out.println(groupedSD(lower_limit, upper_limit, freq, n));\n  }\n}\n", "python": "import math\n\n\ndef mean(mid, freq, n):\n    sum = 0\n    freqSum = 0\n    for i in range(0, n):\n        sum = sum + mid[i] * freq[i]\n        freqSum = freqSum + freq[i]\n    return sum / freqSum\n\n\ndef groupedSD(lower_limit, upper_limit, freq, n):\n    mid = [[0] for i in range(0, n)]\n    sum = 0\n    freqSum = 0\n    sd = 0\n    for i in range(0, n):\n        mid[i] = (lower_limit[i] + upper_limit[i]) / 2\n        sum = sum + freq[i] * mid[i] * mid[i]\n        freqSum = freqSum + freq[i]\n    sd = math.sqrt(\n        (sum - freqSum * mean(mid, freq, n) * mean(mid, freq, n)) / (freqSum - 1)\n    )\n    return sd\n\n\nlower_limit = [50, 61, 71, 86, 96]\nupper_limit = [60, 70, 85, 95, 100]\nfreq = [9, 7, 9, 12, 8]\nn = len(lower_limit)\nprint(groupedSD(lower_limit, upper_limit, freq, n))\n"}
{"text": "Average of first n even natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int avg_of_even_num(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) sum += 2 * i;\n    return (sum / n);\n  }\n\n  public static void main(String[] args) {\n    int n = 9;\n    System.out.print(avg_of_even_num(n));\n  }\n}\n", "python": "def avg_of_even_num(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + 2 * i\n    return sum / n\n\n\nn = 9\nprint(avg_of_even_num(n))\n"}
{"text": "Average of first n even natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int avg_of_even_num(int n) {\n    return n + 1;\n  }\n\n  public static void main(String[] args) {\n    int n = 8;\n    System.out.println(avg_of_even_num(n));\n  }\n}\n", "python": "def avg_of_even_num(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + 2 * i\n    return sum / n\n\n\nn = 9\nprint(avg_of_even_num(n))\n"}
{"text": "Sum of square of first n odd numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int squareSum(int n) {\n    return n * (4 * n * n - 1) / 3;\n  }\n\n  public static void main(String args[]) {\n    System.out.println(squareSum(8));\n  }\n}\n", "python": "def squareSum(n):\n    return int(n * (4 * n * n - 1) / 3)\n\n\nans = squareSum(8)\nprint(ans)\n"}
{"text": "Program to find sum of series 1 + 2 + 2 + 3 + 3 + 3 + . . . + n ", "java": "public class GfG {\n  static int sumOfSeries(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) sum = sum + i * i;\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int n = 10;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "import math\n\n\ndef sumOfSeries(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i * i\n    return sum\n\n\nn = 10\nprint(sumOfSeries(n))\n"}
{"text": "Program to find sum of series 1 + 2 + 2 + 3 + 3 + 3 + . . . + n ", "java": "public class GfG {\n  static int sumOfSeries(int n) {\n    return (n * (n + 1) * (2 * n + 1)) / 6;\n  }\n\n  public static void main(String s[]) {\n    int n = 10;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "import math\n\n\ndef sumOfSeries(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i * i\n    return sum\n\n\nn = 10\nprint(sumOfSeries(n))\n"}
{"text": "Sum of squares of first n natural numbers ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int squaresum(int n) {\n    return (n * (n + 1) / 2) * (2 * n + 1) / 3;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(squaresum(n));\n  }\n}\n", "python": "def squaresum(n):\n    return (n * (n + 1) / 2) * (2 * n + 1) / 3\n\n\nn = 4\nprint(squaresum(n))\n"}
{"text": "Program to calculate distance between two points ", "java": "class GFG {\n  static double distance(int x1, int y1, int x2, int y2) {\n    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) * 1.0);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(Math.round(distance(3, 4, 4, 3) * 100000.0) / 100000.0);\n  }\n}\n", "python": "import math\n\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2) * 1.0)\n\n\nprint(\" % .6f \" % distance(3, 4, 4, 3))\n"}
{"text": "Check if a large number is divisibility by 15 ", "java": "import java.util.*;\n\nclass GFG {\n  public static boolean isDivisible(String S) {\n    int n = S.length();\n    if (S.charAt(n - 1) != '5' && S.charAt(n - 1) != '0') return false;\n    int sum = 0;\n    for (int i = 0; i < S.length(); i++) sum += (int) S.charAt(i);\n    if (sum % 3 == 0) return true;\n    else return false;\n  }\n\n  public static void main(String[] args) {\n    String S = \"15645746327462384723984023940239\";\n    if (isDivisible(S) == true) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n    String S1 = \"15645746327462384723984023940235\";\n    if (isDivisible(S1) == true) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def accumulate(s):\n    acc = 0\n    for i in range(len(s)):\n        acc += ord(s[i]) - 48\n    return acc\n\n\ndef isDivisible(s):\n    n = len(s)\n    if s[n - 1] != \"5\" and s[n - 1] != \"0\":\n        return False\n    sum = accumulate(s)\n    return sum % 3 == 0\n\n\ns = \"15645746327462384723984023940239\"\nif isDivisible(s):\n    print(\" Yes \")\nelse:\n    print(\" No \")\ns = \"15645746327462384723984023940235\"\nif isDivisible(s):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Probability such that two subset contains same number of elements ", "java": "class GFG {\n  static int binomialCoeff(int n, int k) {\n    int res = 1;\n    if (k > n - k) k = n - k;\n    for (int i = 0; i < k; ++i) {\n      res *= (n - i);\n      res /= (i + 1);\n    }\n    return res;\n  }\n\n  static int power(int x, int y) {\n    int res = 1;\n    while (y > 0) {\n      if ((y & 1) == 1) res = res * x;\n      y = y >> 1;\n      x = x * x;\n    }\n    return res;\n  }\n\n  static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n  }\n\n  static void FindProbability(int n) {\n    int up = binomialCoeff(2 * n, n);\n    int down = power(2, 2 * n);\n    int g = gcd(up, down);\n    up /= g;\n    down /= g;\n    System.out.println(up + \" / \" + down);\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    FindProbability(N);\n  }\n}\n", "python": "import math\n\n\ndef binomialCoeff(n, k):\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(0, k):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res\n\n\ndef power(x, y):\n    res = 1\n    while y > 0:\n        if y & 1:\n            res = res * x\n        y = y // 2\n        x = x * x\n    return res\n\n\ndef FindProbability(n):\n    up = binomialCoeff(2 * n, n)\n    down = power(2, 2 * n)\n    g = math.gcd(up, down)\n    up = up // g\n    down = down // g\n    print(up, \" / \", down)\n\n\nN = 8\nFindProbability(N)\n"}
{"text": "How to learn Pattern printing easily ? ", "java": "class GFG {\n  public static void main(String[] args) {\n    int N = 4, i, j, min;\n    System.out.println(\" Value \u2581 of \u2581 N : \u2581 \" + N);\n    for (i = 1; i <= N; i++) {\n      for (j = 1; j <= N; j++) {\n        min = i < j ? i : j;\n        System.out.print(N - min + 1);\n      }\n      for (j = N - 1; j >= 1; j--) {\n        min = i < j ? i : j;\n        System.out.print(N - min + 1);\n      }\n      System.out.println();\n    }\n    for (i = N - 1; i >= 1; i--) {\n      for (j = 1; j <= N; j++) {\n        min = i < j ? i : j;\n        System.out.print(N - min + 1);\n      }\n      for (j = N - 1; j >= 1; j--) {\n        min = i < j ? i : j;\n        System.out.print(N - min + 1);\n      }\n      System.out.println();\n    }\n  }\n}\n", "python": "if __name__ == \" _ _ main _ _ \":\n    N = 4\n    print(\" Value \u2581 of \u2581 N : \u2581 \", N)\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            min = i if i < j else j\n            print(N - min + 1, end=\" \")\n        print()\n    DEDENT\n"}
{"text": "Count pairs ( i , j ) such that ( i + j ) is divisible by A and B both ", "java": "import java.util.*;\n\npublic class ACE {\n  static int gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n  }\n\n  static int find_LCM(int x, int y) {\n    return (x * y) / gcd(x, y);\n  }\n\n  static int CountPairs(int n, int m, int A, int B) {\n    int cnt = 0;\n    int lcm = find_LCM(A, B);\n    for (int i = 1; i <= n; i++) cnt += (m + (i % lcm)) / lcm;\n    return cnt;\n  }\n\n  public static void main(String[] args) {\n    int n = 60, m = 90, A = 5, B = 10;\n    System.out.println(CountPairs(n, m, A, B));\n  }\n}\n", "python": "from math import gcd\n\n\ndef find_LCM(x, y):\n    return (x * y) // gcd(x, y)\n\n\ndef CountPairs(n, m, A, B):\n    cnt = 0\n    lcm = find_LCM(A, B)\n    for i in range(1, n + 1):\n        cnt += (m + (i % lcm)) // lcm\n    return cnt\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, m, A, B = 60, 90, 5, 10\n    print(CountPairs(n, m, A, B))\n"}
{"text": "Minimize difference between maximum and minimum array elements by removing a K ", "java": "import java.util.*;\n\nclass GFG {\n  static void minimiseDifference(int[] arr, int K) {\n    int N = arr.length;\n    int[] maxSuffix = new int[N + 1];\n    int[] minSuffix = new int[N + 1];\n    maxSuffix[N] = -1000000000;\n    minSuffix[N] = 1000000000;\n    maxSuffix[N - 1] = arr[N - 1];\n    minSuffix[N - 1] = arr[N - 1];\n    for (int i = N - 2; i >= 0; --i) {\n      maxSuffix[i] = Math.max(maxSuffix[i + 1], arr[i]);\n      minSuffix[i] = Math.min(minSuffix[i + 1], arr[i]);\n    }\n    int maxPrefix = arr[0];\n    int minPrefix = arr[0];\n    int minDiff = maxSuffix[K] - minSuffix[K];\n    for (int i = 1; i < N; ++i) {\n      if (i + K <= N) {\n        int maximum = Math.max(maxSuffix[i + K], maxPrefix);\n        int minimum = Math.min(minSuffix[i + K], minPrefix);\n        minDiff = Math.min(minDiff, maximum - minimum);\n      }\n      maxPrefix = Math.max(maxPrefix, arr[i]);\n      minPrefix = Math.min(minPrefix, arr[i]);\n    }\n    System.out.print(minDiff);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {4, 5, 8, 9, 1, 2};\n    int K = 2;\n    minimiseDifference(arr, K);\n  }\n}\n", "python": "def minimiseDifference(arr, K):\n    N = len(arr)\n    maxSuffix = [0 for i in range(N + 1)]\n    minSuffix = [0 for i in range(N + 1)]\n    maxSuffix[N] = -1e9\n    minSuffix[N] = 1e9\n    maxSuffix[N - 1] = arr[N - 1]\n    minSuffix[N - 1] = arr[N - 1]\n    i = N - 2\n    while i >= 0:\n        maxSuffix[i] = max(maxSuffix[i + 1], arr[i])\n        minSuffix[i] = min(minSuffix[i + 1], arr[i])\n        i -= 1\n    maxPrefix = arr[0]\n    minPrefix = arr[0]\n    minDiff = maxSuffix[K] - minSuffix[K]\n    for i in range(1, N):\n        if i + K <= N:\n            maximum = max(maxSuffix[i + K], maxPrefix)\n            minimum = min(minSuffix[i + K], minPrefix)\n            minDiff = min(minDiff, maximum - minimum)\n        maxPrefix = max(maxPrefix, arr[i])\n        minPrefix = min(minPrefix, arr[i])\n    print(minDiff)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [4, 5, 8, 9, 1, 2]\n    K = 2\n    minimiseDifference(arr, K)\n"}
{"text": "Minimize segments required to be removed such that at least one segment intersects with all remaining segments ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static class Pair {\n    int first;\n    int second;\n\n    Pair(int first, int second) {\n      this.first = first;\n      this.second = second;\n    }\n  }\n\n  public static int lower_bound(int arr[], int key) {\n    int l = -1, r = arr.length;\n    while (l + 1 < r) {\n      int m = (l + r) >>> 1;\n      if (arr[m] >= key) r = m;\n      else l = m;\n    }\n    return r;\n  }\n\n  public static int upper_bound(int arr[], int key) {\n    int l = -1, r = arr.length;\n    while (l + 1 < r) {\n      int m = (l + r) >>> 1;\n      if (arr[m] <= key) l = m;\n      else r = m;\n    }\n    return l + 1;\n  }\n\n  static void minSegments(Pair segments[], int n) {\n    int startPoints[] = new int[n];\n    int endPoints[] = new int[n];\n    for (int i = 0; i < n; i++) {\n      startPoints[i] = segments[i].first;\n      endPoints[i] = segments[i].second;\n    }\n    Arrays.sort(startPoints);\n    Arrays.sort(endPoints);\n    int ans = n - 1;\n    for (int i = 0; i < n; i++) {\n      int f = segments[i].first;\n      int s = segments[i].second;\n      int leftDelete = lower_bound(endPoints, f);\n      int rightDelete = Math.max(0, n - (int) (upper_bound(startPoints, s)));\n      ans = Math.min(ans, leftDelete + rightDelete);\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    Pair arr[] = {new Pair(1, 2), new Pair(5, 6), new Pair(6, 7), new Pair(7, 10), new Pair(8, 9)};\n    int N = arr.length;\n    minSegments(arr, N);\n  }\n}\n", "python": "from bisect import bisect_left, bisect_right\n\n\ndef minSegments(segments, n):\n    startPoints = [0 for i in range(n)]\n    endPoints = [0 for i in range(n)]\n    for i in range(n):\n        startPoints[i] = segments[i][0]\n        endPoints[i] = segments[i][1]\n    startPoints.sort(reverse=False)\n    endPoints.sort(reverse=False)\n    ans = n - 1\n    for i in range(n):\n        f = segments[i][0]\n        s = segments[i][1]\n        leftDelete = bisect_left(endPoints, f)\n        rightDelete = max(0, n - bisect_right(startPoints, s))\n        ans = min(ans, leftDelete + rightDelete)\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [[1, 2], [5, 6], [6, 7], [7, 10], [8, 9]]\n    N = len(arr)\n    minSegments(arr, N)\n"}
{"text": "Minimize remaining array element by removing pairs and replacing them by their absolute difference ", "java": "import java.util.*;\n\nclass GFG {\n  static int smallestLeft(int arr[], int total, int sum, int i, int[][] dp) {\n    if (i == 0) {\n      return Math.abs(total - 2 * sum);\n    }\n    if (dp[i][sum] != -1) return dp[i][sum];\n    int X = smallestLeft(arr, total, sum + arr[i - 1], i - 1, dp);\n    int Y = smallestLeft(arr, total, sum, i - 1, dp);\n    return dp[i][sum] = Math.min(X, Y);\n  }\n\n  static void UtilSmallestElement(int arr[], int N) {\n    int total = 0;\n    for (int i = 0; i < N; i++) {\n      total += arr[i];\n    }\n    int[][] dp = new int[N + 1][total];\n    for (int[] k : dp) Arrays.fill(k, -1);\n    System.out.println(smallestLeft(arr, total, 0, N, dp));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 7, 4, 1, 8, 1};\n    int N = arr.length;\n    UtilSmallestElement(arr, N);\n  }\n}\n", "python": "def smallestLeft(arr, total, sum, i, dp):\n    if i == 0:\n        return abs(total - 2 * sum)\n    if dp[i][sum] != -1:\n        return dp[i][sum]\n    X = smallestLeft(arr, total, sum + arr[i - 1], i - 1, dp)\n    Y = smallestLeft(arr, total, sum, i - 1, dp)\n    dp[i][sum] = min(X, Y)\n    return dp[i][sum]\n\n\ndef UtilSmallestElement(arr, N):\n    total = 0\n    for i in range(0, N):\n        total += arr[i]\n    dp = [[-1 for y in range(total)] for x in range(N + 1)]\n    print(smallestLeft(arr, total, 0, N, dp))\n\n\narr = [2, 7, 4, 1, 8, 1]\nN = len(arr)\nUtilSmallestElement(arr, N)\n"}
{"text": "Minimize remaining array element by removing pairs and replacing them by their absolute difference ", "java": "import java.util.*;\n\nclass GFG {\n  static int SmallestElementLeft(int arr[], int N) {\n    int totalSum = 0;\n    for (int i = 0; i < N; i++) {\n      totalSum += arr[i];\n    }\n    int req = totalSum / 2;\n    boolean[] dp = new boolean[req + 1];\n    Arrays.fill(dp, false);\n    dp[0] = true;\n    int reach = 0;\n    for (int i = 0; i < N; i++) {\n      for (int j = req; j - arr[i] >= 0; j--) {\n        dp[j] = dp[j] || dp[j - arr[i]];\n        if (dp[j]) {\n          reach = Math.max(reach, j);\n        }\n      }\n    }\n    return totalSum - (2 * reach);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 2, 2};\n    int N = arr.length;\n    System.out.print(SmallestElementLeft(arr, N));\n  }\n}\n", "python": "def smallestLeft(arr, total, sum, i, dp):\n    if i == 0:\n        return abs(total - 2 * sum)\n    if dp[i][sum] != -1:\n        return dp[i][sum]\n    X = smallestLeft(arr, total, sum + arr[i - 1], i - 1, dp)\n    Y = smallestLeft(arr, total, sum, i - 1, dp)\n    dp[i][sum] = min(X, Y)\n    return dp[i][sum]\n\n\ndef UtilSmallestElement(arr, N):\n    total = 0\n    for i in range(0, N):\n        total += arr[i]\n    dp = [[-1 for y in range(total)] for x in range(N + 1)]\n    print(smallestLeft(arr, total, 0, N, dp))\n\n\narr = [2, 7, 4, 1, 8, 1]\nN = len(arr)\nUtilSmallestElement(arr, N)\n"}
{"text": "Replace even ", "java": "import java.io.*;\n\nclass GFG {\n  static int min_Operations(String str1, String str2) {\n    int N = str1.length();\n    char[] str = str1.toCharArray();\n    int cntOp = 0;\n    for (int i = 0; i < N; i++) {\n      if (str[i] == str2.charAt(i)) {\n        continue;\n      }\n      int ptr = i;\n      while (ptr < N && str[ptr] != str2.charAt(ptr)) {\n        str[ptr] = str2.charAt(ptr);\n        ptr += 2;\n      }\n      cntOp++;\n    }\n    return cntOp;\n  }\n\n  public static void main(String[] args) {\n    String str1 = \" abcdef \";\n    String str2 = \" ffffff \";\n    System.out.println(min_Operations(str1, str2));\n  }\n}\n", "python": "def minOperationsReq(str11, str22):\n    str1 = list(str11)\n    str2 = list(str22)\n    N = len(str1)\n    cntOp = 0\n    for i in range(N):\n        if str1[i] == str2[i]:\n            continue\n        ptr = i\n        while ptr < N and str1[ptr] != str2[ptr]:\n            str1[ptr] = str2[ptr]\n            ptr += 2\n        cntOp += 1\n    return cntOp\n\n\nstr1 = \" abcdef \"\nstr2 = \" ffffff \"\nprint(minOperationsReq(str1, str2))\n"}
{"text": "Maximize count of non ", "java": "import java.util.*;\n\nclass GFG {\n  static int CtSubarr(int[] arr, int N, int K) {\n    Set<Integer> st = new HashSet<Integer>();\n    int prefixSum = 0;\n    st.add(prefixSum);\n    int res = 0;\n    for (int i = 0; i < N; i++) {\n      prefixSum += arr[i];\n      if (st.contains(prefixSum - K)) {\n        res += 1;\n        prefixSum = 0;\n        st.clear();\n        st.add(0);\n      }\n      st.add(prefixSum);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {-2, 6, 6, 3, 5, 4, 1, 2, 8};\n    int N = arr.length;\n    int K = 10;\n    System.out.println(CtSubarr(arr, N, K));\n  }\n}\n", "python": "def CtSubarr(arr, N, K):\n    st = set()\n    prefixSum = 0\n    st.add(prefixSum)\n    res = 0\n    for i in range(N):\n        prefixSum += arr[i]\n        if (prefixSum - K) in st:\n            res += 1\n            prefixSum = 0\n            st.clear()\n            st.add(0)\n        st.add(prefixSum)\n    return res\n\n\narr = [-2, 6, 6, 3, 5, 4, 1, 2, 8]\nN = len(arr)\nK = 10\nprint(CtSubarr(arr, N, K))\n"}
{"text": "Longest Subarray consisting of unique elements from an Array ", "java": "import java.util.*;\n\nclass GFG {\n  static int largest_subarray(int a[], int n) {\n    HashMap<Integer, Integer> index = new HashMap<Integer, Integer>();\n    int ans = 0;\n    for (int i = 0, j = 0; i < n; i++) {\n      j = Math.max(index.containsKey(a[i]) ? index.get(a[i]) : 0, j);\n      ans = Math.max(ans, i - j + 1);\n      index.put(a[i], i + 1);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 5, 1, 2, 3};\n    int n = arr.length;\n    System.out.print(largest_subarray(arr, n));\n  }\n}\n", "python": "from collections import defaultdict\n\n\ndef largest_subarray(a, n):\n    index = defaultdict(lambda: 0)\n    ans = 0\n    j = 0\n    for i in range(n):\n        j = max(index[a[i]], j)\n        ans = max(ans, i - j + 1)\n        index[a[i]] = i + 1\n        i += 1\n    return ans\n\n\narr = [1, 2, 3, 4, 5, 1, 2, 3]\nn = len(arr)\nprint(largest_subarray(arr, n))\n"}
{"text": "Minimum Sum of a pair at least K distance apart from an Array ", "java": "import java.util.*;\n\nclass GFG {\n  public static void findMinSum(int A[], int K) {\n    int n = A.length;\n    int minimum_sum = Integer.MAX_VALUE;\n    for (int i = 0; i < n; i++) {\n      int min = Integer.MAX_VALUE;\n      for (int j = i + K; j < n; j++) min = Math.min(min, A[j]);\n      if (min == Integer.MAX_VALUE) continue;\n      minimum_sum = Math.min(minimum_sum, A[i] + min);\n    }\n    System.out.println(minimum_sum);\n  }\n\n  public static void main(String[] args) {\n    int A[] = {4, 2, 5, 4, 3, 2, 5};\n    int K = 3;\n    findMinSum(A, K);\n  }\n}\n", "python": "import sys\n\n\ndef findMinSum(A, K):\n    n = len(A)\n    minimum_sum = sys.maxsize\n    for i in range(n):\n        minimum = sys.maxsize\n        for j in range(i + K, n, 1):\n            minimum = min(minimum, A[j])\n        if minimum == sys.maxsize:\n            continue\n        minimum_sum = min(minimum_sum, A[i] + minimum)\n    print(minimum_sum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [4, 2, 5, 4, 3, 2, 5]\n    K = 3\n    findMinSum(A, K)\n"}
{"text": "Longest subarray with odd product ", "java": "import java.util.*;\n\nclass GFG {\n  static int Maxlen(int arr[], int n) {\n    int ans = 0;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n      if (arr[i] % 2 == 0) count = 0;\n      else count++;\n      ans = Math.max(ans, count);\n    }\n    return ans;\n  }\n\n  public static void main(String s[]) {\n    int arr[] = {1, 7, 2};\n    int n = arr.length;\n    System.out.println(Maxlen(arr, n));\n  }\n}\n", "python": "def Maxlen(a, n):\n    ans = 0\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            count = 0\n        else:\n            count += 1\n        ans = max(ans, count)\n    return ans\n\n\narr = [1, 7, 2]\nn = len(arr)\nprint(Maxlen(arr, n))\n"}
{"text": "Remove all occurrences of any element for maximum array sum ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxSumArray(int arr[], int n) {\n    int sum = 0;\n    Map<Integer, Integer> m = new HashMap<>();\n    for (int i = 0; i < n; i++) {\n      sum += arr[i];\n      if (m.containsKey(arr[i])) {\n        m.put(arr[i], m.get(arr[i]) + 1);\n      } else {\n        m.put(arr[i], 1);\n      }\n    }\n    int minimum = Integer.MAX_VALUE;\n    for (Map.Entry<Integer, Integer> x : m.entrySet())\n      minimum = Math.min(minimum, x.getValue() * x.getKey());\n    return (sum - minimum);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 1, 3, 3, 2, 2, 1, 1, 1};\n    int n = arr.length;\n    System.out.println(maxSumArray(arr, n));\n  }\n}\n", "python": "from sys import maxsize\n\n\ndef maxSumArray(arr, n):\n    sum1 = 0\n    mp = {i: 0 for i in range(4)}\n    for i in range(n):\n        sum1 += arr[i]\n        mp[arr[i]] += 1\n    minimum = maxsize\n    for key, value in mp.items():\n        if key == 0:\n            continue\n        minimum = min(minimum, value * key)\n    return sum1 - minimum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 1, 3, 3, 2, 2, 1, 1, 1]\n    n = len(arr)\n    print(maxSumArray(arr, n))\n"}
{"text": "Leftmost and rightmost indices of the maximum and the minimum element of an array ", "java": "public class GFG {\n  public static void findIndices(int arr[], int n) {\n    int leftMin = 0, rightMin = 0;\n    int leftMax = 0, rightMax = 0;\n    int min = arr[0], max = arr[0];\n    for (int i = 1; i < n; i++) {\n      if (arr[i] < min) {\n        leftMin = rightMin = i;\n        min = arr[i];\n      } else if (arr[i] == min) rightMin = i;\n      if (arr[i] > max) {\n        leftMax = rightMax = i;\n        max = arr[i];\n      } else if (arr[i] == max) rightMax = i;\n    }\n    System.out.println(\" Minimum \u2581 left \u2581 : \u2581 \" + leftMin);\n    System.out.println(\" Minimum \u2581 right \u2581 : \u2581 \" + rightMin);\n    System.out.println(\" Maximum \u2581 left \u2581 : \u2581 \" + leftMax);\n    System.out.println(\" Maximum \u2581 right \u2581 : \u2581 \" + rightMax);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 1, 1, 2, 1, 5, 6, 5};\n    int n = arr.length;\n    findIndices(arr, n);\n  }\n}\n", "python": "def getRightMin(arr, n):\n    min = arr[0]\n    rightMin = 0\n    i = 1\n    while i < n:\n        if arr[i] == min:\n            rightMin = i\n        i *= 2\n    i = rightMin + 1\n    while i < n and arr[i] == min:\n        rightMin = i\n        i += 1\n    return rightMin\n\n\ndef getLeftMax(arr, n):\n    max = arr[n - 1]\n    leftMax = n - 1\n    i = n - 2\n    while i > 0:\n        if arr[i] == max:\n            leftMax = i\n        i = int(i / 2)\n    i = leftMax - 1\n    while i >= 0 and arr[i] == max:\n        leftMax = i\n        i -= 1\n    return leftMax\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [0, 0, 1, 2, 5, 5, 6, 8, 8]\n    n = len(arr)\n    print(\" Minimum \u2581 left \u2581 : \", 0)\n    print(\" Minimum \u2581 right \u2581 : \", getRightMin(arr, n))\n    print(\" Maximum \u2581 left \u2581 : \", getLeftMax(arr, n))\n    print(\" Maximum \u2581 right \u2581 : \", (n - 1))\n"}
{"text": "Sum and Product of minimum and maximum element of an Array ", "java": "import java.io.*;\nimport java.util.Arrays;\n\nclass GFG {\n  static int findSum(int minEle, int maxEle) {\n    return minEle + maxEle;\n  }\n\n  static int findProduct(int minEle, int maxEle) {\n    return minEle * maxEle;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {12, 1234, 45, 67, 1};\n    int n = arr.length;\n    Arrays.sort(arr);\n    int minEle = arr[0];\n    int maxEle = arr[n - 1];\n    System.out.println(\" Sum \u2581 = \u2581 \" + findSum(minEle, maxEle));\n    System.out.println(\" Product \u2581 = \u2581 \" + findProduct(minEle, maxEle));\n  }\n}\n", "python": "def getMin(arr, n):\n    res = arr[0]\n    for i in range(1, n):\n        res = min(res, arr[i])\n    return res\n\n\ndef getMax(arr, n):\n    res = arr[0]\n    for i in range(1, n):\n        res = max(res, arr[i])\n    return res\n\n\ndef findSum(arr, n):\n    min = getMin(arr, n)\n    max = getMax(arr, n)\n    return min + max\n\n\ndef findProduct(arr, n):\n    min = getMin(arr, n)\n    max = getMax(arr, n)\n    return min * max\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [12, 1234, 45, 67, 1]\n    n = len(arr)\n    print(\" Sum \u2581 = \u2581 \", findSum(arr, n))\n    print(\" Product \u2581 = \u2581 \", findProduct(arr, n))\n"}
{"text": "Check if a string is suffix of another ", "java": "class GFG {\n  static boolean isSuffix(String s1, String s2) {\n    int n1 = s1.length(), n2 = s2.length();\n    if (n1 > n2) return false;\n    for (int i = 0; i < n1; i++) if (s1.charAt(n1 - i - 1) != s2.charAt(n2 - i - 1)) return false;\n    return true;\n  }\n\n  public static void main(String[] args) {\n    String s1 = \" geeks \", s2 = \" geeksforgeeks \";\n    boolean result = isSuffix(s1, s2);\n    if (result) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "if __name__ == \" _ _ main _ _ \":\n    s1 = \" geeks \"\n    s2 = \" geeksforgeeks \"\n    result = s2.endswith(s1)\n    if result:\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Counting cross lines in an array ", "java": "class GFG {\n  static int countCrossLine(int arr[], int n) {\n    int count_crossline = 0;\n    int i, key, j;\n    for (i = 1; i < n; i++) {\n      key = arr[i];\n      j = i - 1;\n      while (j >= 0 && arr[j] > key) {\n        arr[j + 1] = arr[j];\n        j = j - 1;\n        count_crossline++;\n      }\n      arr[j + 1] = key;\n    }\n    return count_crossline;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = new int[] {4, 3, 1, 2};\n    int n = arr.length;\n    System.out.print(countCrossLine(arr, n));\n  }\n}\n", "python": "def countCrossLine(arr, n):\n    count_crossline = 0\n    i, key, j = 0, 0, 0\n    for i in range(1, n):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j = j - 1\n            count_crossline += 1\n        arr[j + 1] = key\n    return count_crossline\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [4, 3, 1, 2]\n    n = len(arr)\n    print(countCrossLine(arr, n))\n"}
{"text": "Recursive Programs to find Minimum and Maximum elements of array ", "java": "import java.util.*;\n\nclass GFG {\n  public static int findMaxRec(int A[], int n) {\n    if (n == 1) return A[0];\n    return Math.max(A[n - 1], findMaxRec(A, n - 1));\n  }\n\n  public static void main(String args[]) {\n    int A[] = {1, 4, 45, 6, -50, 10, 2};\n    int n = A.length;\n    System.out.println(findMaxRec(A, n));\n  }\n}\n", "python": "def findMinRec(A, n):\n    if n == 1:\n        return A[0]\n    return min(A[n - 1], findMinRec(A, n - 1))\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [1, 4, 45, 6, -50, 10, 2]\n    n = len(A)\n    print(findMinRec(A, n))\n"}
{"text": "Program to remove vowels from a String ", "java": "\nclass GFG {\n  static String remVowel(String str) {\n    return str.replaceAll(\" [ aeiouAEIOU ] \", \" \");\n  }\n\n  public static void main(String[] args) {\n    String str = \" GeeeksforGeeks \u2581 - \u2581 A \u2581 Computer \u2581 Science \u2581 Portal \u2581 for \u2581 Geeks \";\n    System.out.println(remVowel(str));\n  }\n}\n", "python": "import re\n\n\ndef rem_vowel(string):\n    return re.sub(\" [ aeiouAEIOU ] \", \" \", string)\n\n\nstring = \" GeeksforGeeks \u2581 - \u2581 A \u2581 Computer \u2581 Science \u2581 Portal \u2581 for \u2581 Geeks \"\nprint rem_vowel(string)\n"}
{"text": "Maximum number of buckets that can be filled ", "java": "import java.util.*;\n\npublic class GFG {\n  static void getBuckets(int[] arr, int N) {\n    int availableWater = N * (N - 1) / 2;\n    Arrays.sort(arr);\n    int i = 0, sum = 0;\n    while (sum <= availableWater) {\n      sum += arr[i];\n      i++;\n    }\n    System.out.println(i - 1);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 5, 3, 4, 7, 9};\n    int N = arr.length;\n    getBuckets(arr, N);\n  }\n}\n", "python": "def getBuckets(arr, N):\n    availableWater = N * (N - 1) // 2\n    arr.sort()\n    i, Sum = 0, 0\n    while Sum <= availableWater:\n        Sum += arr[i]\n        i += 1\n    print(i - 1, end=\" \")\n\n\narr = [1, 5, 3, 4, 7, 9]\nN = len(arr)\ngetBuckets(arr, N)\n"}
{"text": "Maximize difference between the sum of absolute differences of each element with the remaining array ", "java": "import java.util.*;\n\nclass GFG {\n  static void findMaxDifference(int arr[], int n) {\n    Arrays.sort(arr);\n    int Leftsum = 0;\n    int Totalsum = 0;\n    int Min = Integer.MAX_VALUE, Max = Integer.MIN_VALUE;\n    for (int i = 0; i < n; i++) Totalsum += arr[i];\n    for (int i = 0; i < n; i++) {\n      int leftNumbers = i;\n      int rightNumbers = n - i - 1;\n      Totalsum = Totalsum - arr[i];\n      int sum = (leftNumbers * arr[i]) - Leftsum + Totalsum - (rightNumbers * arr[i]);\n      Min = Math.min(Min, sum);\n      Max = Math.max(Max, sum);\n      Leftsum += arr[i];\n    }\n    System.out.print(Max - Min);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 4, 7};\n    int N = arr.length;\n    findMaxDifference(arr, N);\n  }\n}\n", "python": "def findMaxDifference(arr, n):\n    arr = sorted(arr)\n    Leftsum = 0\n    Totalsum = 0\n    Min, Max = 10 ** 8, -(10 ** 8)\n    for i in range(n):\n        Totalsum += arr[i]\n    for i in range(n):\n        leftNumbers = i\n        rightNumbers = n - i - 1\n        Totalsum = Totalsum - arr[i]\n        sum = (leftNumbers * arr[i]) - Leftsum + Totalsum - (rightNumbers * arr[i])\n        Min = min(Min, sum)\n        Max = max(Max, sum)\n        Leftsum += arr[i]\n    print(Max - Min)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 4, 7]\n    N = len(arr)\n    findMaxDifference(arr, N)\n"}
{"text": "Minimize difference between the largest and smallest array elements by K replacements ", "java": "import java.util.*;\n\nclass GFG {\n  static int minDiff(int[] A, int K) {\n    Arrays.sort(A);\n    int n = A.length;\n    if (n <= K) return 0;\n    int mindiff = A[n - 1] - A[0];\n    if (K == 0) return mindiff;\n    for (int i = 0, j = n - 1 - K; j < n; ) {\n      mindiff = Math.min(mindiff, A[j] - A[i]);\n      i++;\n      j++;\n    }\n    return mindiff;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {-1, 3, -1, 8, 5, 4};\n    int K = 3;\n    System.out.println(minDiff(A, K));\n  }\n}\n", "python": "def minDiff(A, K):\n    A.sort()\n    n = len(A)\n    if n <= K:\n        return 0\n    mindiff = A[n - 1] - A[0]\n    if K == 0:\n        return mindiff\n    i = 0\n    for j in range(n - 1 - K, n):\n        mindiff = min(mindiff, A[j] - A[i])\n        i += 1\n        j += 1\n    return mindiff\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [-1, 3, -1, 8, 5, 4]\n    K = 3\n    print(minDiff(A, K))\n"}
{"text": "Minimize difference between the largest and smallest array elements by K replacements ", "java": "import java.util.*;\n\nclass GFG {\n  static int minDiff(int[] A, int K) {\n    if (A.length <= K + 1) return 0;\n    PriorityQueue<Integer> maxHeap = new PriorityQueue<>();\n    PriorityQueue<Integer> minHeap = new PriorityQueue<>(Collections.reverseOrder());\n    for (int n : A) {\n      maxHeap.add(n);\n      if (maxHeap.size() > K + 1) maxHeap.poll();\n      minHeap.add(n);\n      if (minHeap.size() > K + 1) minHeap.poll();\n    }\n    List<Integer> maxList = new ArrayList<>();\n    while (maxHeap.size() > 0) maxList.add(maxHeap.poll());\n    List<Integer> minList = new ArrayList<>();\n    while (minHeap.size() > 0) minList.add(minHeap.poll());\n    int mindiff = Integer.MAX_VALUE;\n    for (int i = 0; i <= K; i++) {\n      mindiff = Math.min(mindiff, maxList.get(i) - minList.get(K - i));\n    }\n    return mindiff;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {-1, 3, -1, 8, 5, 4};\n    int K = 3;\n    System.out.println(minDiff(A, K));\n  }\n}\n", "python": "def minDiff(A, K):\n    A.sort()\n    n = len(A)\n    if n <= K:\n        return 0\n    mindiff = A[n - 1] - A[0]\n    if K == 0:\n        return mindiff\n    i = 0\n    for j in range(n - 1 - K, n):\n        mindiff = min(mindiff, A[j] - A[i])\n        i += 1\n        j += 1\n    return mindiff\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [-1, 3, -1, 8, 5, 4]\n    K = 3\n    print(minDiff(A, K))\n"}
{"text": "Check if all K ", "java": "import java.util.*;\n\nclass GFG {\n  static void reverse(int myArray[]) {\n    Collections.reverse(Arrays.asList(myArray));\n  }\n\n  static boolean checkSubsetSum(int A[], int B[], int N, int K) {\n    Arrays.sort(A);\n    Arrays.sort(B);\n    reverse(B);\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < K; i++) {\n      sum1 += A[i];\n      sum2 += B[i];\n    }\n    if (sum1 > sum2) {\n      return true;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {12, 11, 10, 13};\n    int B[] = {7, 10, 6, 2};\n    int N = A.length;\n    int K = 3;\n    if (checkSubsetSum(A, B, N, K)) {\n      System.out.print(\" YES \");\n    } else {\n      System.out.print(\" NO \");\n    }\n  }\n}\n", "python": "def checkSubsetSum(A, B, N, K):\n    A.sort()\n    B.sort(reverse=True)\n    sum1 = 0\n    sum2 = 0\n    for i in range(K):\n        sum1 += A[i]\n        sum2 += B[i]\n    if sum1 > sum2:\n        return True\n    return False\n\n\nA = [12, 11, 10, 13]\nB = [7, 10, 6, 2]\nN = len(A)\nK = 3\nif checkSubsetSum(A, B, N, K):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Kth smallest element from an array of intervals ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int KthSmallestNum(int arr[][], int n, int k) {\n    PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n    for (int i = 0; i < n; i++) {\n      pq.add(new int[] {arr[i][0], arr[i][1]});\n    }\n    int cnt = 1;\n    while (cnt < k) {\n      int[] interval = pq.poll();\n      if (interval[0] < interval[1]) {\n        pq.add(new int[] {interval[0] + 1, interval[1]});\n      }\n      cnt++;\n    }\n    return pq.peek()[0];\n  }\n\n  public static void main(String args[]) {\n    int arr[][] = {{5, 11}, {10, 15}, {12, 20}};\n    int n = arr.length;\n    int k = 12;\n    System.out.println(KthSmallestNum(arr, n, k));\n  }\n}\n", "python": "def KthSmallestNum(arr, n, k):\n    pq = []\n    for i in range(n):\n        pq.append([arr[i][0], arr[i][1]])\n    cnt = 1\n    while cnt < k:\n        pq.sort(reverse=True)\n        interval = pq[0]\n        pq.remove(pq[0])\n        if interval[0] < interval[1]:\n            pq.append([interval[0] + 1, interval[1]])\n        cnt += 1\n    pq.sort(reverse=True)\n    return pq[0][0] + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [[5, 11], [10, 15], [12, 20]]\n    n = len(arr)\n    k = 12\n    print(KthSmallestNum(arr, n, k))\n"}
{"text": "Maximum Manhattan distance between a distinct pair from N coordinates ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static class Pair {\n    int x;\n    int y;\n\n    Pair(int x, int y) {\n      this.x = x;\n      this.y = y;\n    }\n  }\n\n  static void MaxDist(ArrayList<Pair> A, int N) {\n    int maximum = Integer.MIN_VALUE;\n    for (int i = 0; i < N; i++) {\n      int sum = 0;\n      for (int j = i + 1; j < N; j++) {\n        sum = Math.abs(A.get(i).x - A.get(j).x) + Math.abs(A.get(i).y - A.get(j).y);\n        maximum = Math.max(maximum, sum);\n      }\n    }\n    System.out.println(maximum);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    ArrayList<Pair> al = new ArrayList<>();\n    Pair p1 = new Pair(1, 2);\n    al.add(p1);\n    Pair p2 = new Pair(2, 3);\n    al.add(p2);\n    Pair p3 = new Pair(3, 4);\n    al.add(p3);\n    MaxDist(al, n);\n  }\n}\n", "python": "def MaxDist(A, N):\n    V = [0 for i in range(N)]\n    V1 = [0 for i in range(N)]\n    for i in range(N):\n        V[i] = A[i][0] + A[i][1]\n        V1[i] = A[i][0] - A[i][1]\n    V.sort()\n    V1.sort()\n    maximum = max(V[-1] - V[0], V1[-1] - V1[0])\n    print(maximum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    A = [[1, 2], [2, 3], [3, 4]]\n    MaxDist(A, N)\n"}
{"text": "Minimum steps required to reduce all the elements of the array to zero ", "java": "class GFG {\n  static int getMax(int inputArray[]) {\n    int maxValue = inputArray[0];\n    for (int i = 1; i < inputArray.length; i++) {\n      if (inputArray[i] > maxValue) {\n        maxValue = inputArray[i];\n      }\n    }\n    return maxValue;\n  }\n\n  static int minSteps(int arr[], int n) {\n    int maxVal = getMax(arr);\n    return maxVal;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 4};\n    int n = arr.length;\n    System.out.println(minSteps(arr, n));\n  }\n}\n", "python": "def minSteps(arr, n):\n    maxVal = max(arr)\n    return maxVal\n\n\narr = [1, 2, 4]\nn = len(arr)\nprint(minSteps(arr, n))\n"}
{"text": "Minimum length of square to contain at least half of the given Coordinates ", "java": "import java.util.*;\n\nclass GFG {\n  static int mod(int x) {\n    if (x >= 0) return x;\n    return -x;\n  }\n\n  static void findSquare(int n) {\n    int points[][] = {{1, 2}, {-3, 4}, {1, 78}, {-3, -7}};\n    int[] a = new int[n];\n    for (int i = 0; i < n; i++) {\n      int x, y;\n      x = points[i][0];\n      y = points[i][1];\n      a[i] = Math.max(mod(x), mod(y));\n    }\n    Arrays.sort(a);\n    int index = (int) (Math.floor(n / 2) - 1);\n    System.out.println(\" Minimum \u2581 M \u2581 required \u2581 is : \u2581 \" + a[index]);\n  }\n\n  public static void main(String[] args) {\n    int N;\n    N = 4;\n    findSquare(N);\n  }\n}\n", "python": "def findSquare(n):\n    points = [[1, 2], [-3, 4], [1, 78], [-3, -7]]\n    a = [None] * n\n    for i in range(0, n):\n        x = points[i][0]\n        y = points[i][1]\n        a[i] = max(abs(x), abs(y))\n    a.sort()\n    index = n // 2 - 1\n    print(\" Minimum \u2581 M \u2581 required \u2581 is : \", a[index])\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    findSquare(N)\n"}
{"text": "Array element with minimum sum of absolute differences ", "java": "import java.util.*;\n\nclass GFG {\n  static int minSum(int arr[], int n) {\n    Arrays.sort(arr);\n    int x = arr[(int) n / 2];\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum += Math.abs(arr[i] - x);\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 3, 9, 3, 6};\n    int n = arr.length;\n    System.out.println(minSum(arr, n));\n  }\n}\n", "python": "def minSum(arr, n):\n    arr.sort()\n    x = arr[n // 2]\n    sum = 0\n    for i in range(n):\n        sum += abs(arr[i] - x)\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 3, 9, 3, 6]\n    n = len(arr)\n    print(minSum(arr, n))\n"}
{"text": "Sort even and odd placed elements in increasing order ", "java": "import java.util.*;\n\nclass GFG {\n  static void odd_even(int arr[], int n) {\n    Vector<Integer> odd_indexes = new Vector<Integer>();\n    Vector<Integer> even_indexes = new Vector<Integer>();\n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) odd_indexes.add(arr[i]);\n      else even_indexes.add(arr[i]);\n    }\n    Collections.sort(odd_indexes);\n    Collections.sort(even_indexes);\n    for (int i = 0; i < odd_indexes.size(); i++) System.out.print(odd_indexes.get(i) + \" \u2581 \");\n    for (int i = 0; i < even_indexes.size(); i++) System.out.print(even_indexes.get(i) + \" \u2581 \");\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 2, 7, 6, 8};\n    int n = arr.length;\n    odd_even(arr, n);\n  }\n}\n", "python": "def odd_even(n):\n    odd_indexes = []\n    even_indexes = []\n    for i in range(len(n)):\n        if i % 2 == 0:\n            odd_indexes.append(n[i])\n        else:\n            even_indexes.append(n[i])\n    for i in sorted(odd_indexes):\n        print(i, end=\" \u2581 \")\n    for i in sorted(even_indexes):\n        print(i, end=\" \u2581 \")\n\n\nn = [3, 2, 7, 6, 8]\nodd_even(n)\n"}
{"text": "Nth Even length Palindrome ", "java": "import java.io.*;\n\nclass GFG {\n  static String evenlength(String n) {\n    String res = n;\n    for (int j = n.length() - 1; j >= 0; --j) res += n.charAt(j);\n    return res;\n  }\n\n  public static void main(String[] args) {\n    String n = \"10\";\n    System.out.println(evenlength(n));\n  }\n}\n", "python": "import math as mt\n\n\ndef evenlength(n):\n    res = n\n    for j in range(len(n) - 1, -1, -1):\n        res += n[j]\n    return res\n\n\nn = \"10\"\nprint(evenlength(n))\n"}
{"text": "Nth character in Concatenated Decimal String ", "java": "class GFG {\n  static char getDigit(int N, int d) {\n    String str = Integer.toString(N);\n    return str.charAt(d - 1);\n  }\n\n  static char getNthChar(int N) {\n    int sum = 0, nine = 9;\n    int dist = 0, len;\n    for (len = 1; ; len++) {\n      sum += nine * len;\n      dist += nine;\n      if (sum >= N) {\n        sum -= nine * len;\n        dist -= nine;\n        N -= sum;\n        break;\n      }\n      nine *= 10;\n    }\n    int diff = (int) (Math.ceil((double) (N) / (double) (len)));\n    int d = N % len;\n    if (d == 0) d = len;\n    return getDigit(dist + diff, d);\n  }\n\n  public static void main(String[] args) {\n    int N = 251;\n    System.out.println(getNthChar(N));\n  }\n}\n", "python": "def getDigit(N, d):\n    string = str(N)\n    return string[d - 1]\n\n\ndef getNthChar(N):\n    sum = 0\n    nine = 9\n    dist = 0\n    for len in range(1, N):\n        sum += nine * len\n        dist += nine\n        if sum >= N:\n            sum -= nine * len\n            dist -= nine\n            N -= sum\n            break\n        nine *= 10\n    diff = (N / len) + 1\n    d = N % len\n    if d == 0:\n        d = len\n    return getDigit(dist + diff, d)\n\n\nN = 251\nprint getNthChar(N)\n"}
{"text": "Count number of unique ways to paint a N x 3 grid ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void waysToPaint(int n) {\n    long same = 6;\n    long diff = 6;\n    for (int i = 0; i < n - 1; i++) {\n      long sameTmp = 3 * same + 2 * diff;\n      long diffTmp = 2 * same + 2 * diff;\n      same = sameTmp;\n      diff = diffTmp;\n    }\n    System.out.println(same + diff);\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    waysToPaint(N);\n  }\n}\n", "python": "def waysToPaint(n):\n    same = 6\n    diff = 6\n    for _ in range(n - 1):\n        sameTmp = 3 * same + 2 * diff\n        diffTmp = 2 * same + 2 * diff\n        same = sameTmp\n        diff = diffTmp\n    print(same + diff)\n\n\nN = 2\nwaysToPaint(N)\n"}
{"text": "Remove recurring digits in a given number ", "java": "class GFG {\n  static String removeRecurringDigits(char num[]) {\n    int len = num.length;\n    String s = \" \";\n    for (int i = 0; i < len; i++) {\n      s += String.valueOf(num[i]);\n      while (i + 1 < len && num[i] == num[i + 1]) {\n        i++;\n      }\n    }\n    return s;\n  }\n\n  public static void main(String[] args) {\n    char num[] = \"1299888833\".toCharArray();\n    System.out.print(\" Modified \u2581 number \u2581 is \u2581 \" + removeRecurringDigits(num));\n  }\n}\n", "python": "def removeRecurringDigits(num):\n    l = len(num)\n    (i, j) = (0, 0)\n    str = \" \"\n    while i < l:\n        str += num[i]\n        j += 1\n        while i + 1 < l and num[i] == num[i + 1]:\n            i += 1\n        i += 1\n    return str\n\n\nif __name__ == \" _ _ main _ _ \":\n    num = \"1299888833\"\n    print(\" Modified \u2581 number \u2581 is \u2581 { } \".format(removeRecurringDigits(num)))\n"}
{"text": "Recursive Implementation of atoi ( ) ", "java": "class GFG {\n  static int myAtoiRecursive(String str, int n) {\n    if (n == 1) {\n      return str.charAt(0) - '0';\n    }\n    return (10 * myAtoiRecursive(str, n - 1) + str.charAt(n - 1) - '0');\n  }\n\n  public static void main(String[] s) {\n    String str = \"112\";\n    int n = str.length();\n    System.out.println(myAtoiRecursive(str, n));\n  }\n}\n", "python": "def myAtoiRecursive(string, num):\n    if len(string) == 1:\n        return int(string) + (num * 10)\n    num = int(string[0:1]) + (num * 10)\n    return myAtoiRecursive(string[1:], num)\n\n\nstring = \"112\"\nprint(myAtoiRecursive(string, 0))\n"}
{"text": "Given a string , find its first non ", "java": "class GFG {\n  static final int NO_OF_CHARS = 256;\n  static char count[] = new char[NO_OF_CHARS];\n\n  static void getCharCountArray(String str) {\n    for (int i = 0; i < str.length(); i++) count[str.charAt(i)]++;\n  }\n\n  static int firstNonRepeating(String str) {\n    getCharCountArray(str);\n    int index = -1, i;\n    for (i = 0; i < str.length(); i++) {\n      if (count[str.charAt(i)] == 1) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  }\n\n  public static void main(String[] args) {\n    String str = \" geeksforgeeks \";\n    int index = firstNonRepeating(str);\n    System.out.println(\n        index == -1\n            ? \" Either \u2581 all \u2581 characters \u2581 are \u2581 repeating \u2581 or \u2581 string \u2581 \" + \" is \u2581 empty \"\n            : \" First \u2581 non - repeating \u2581 character \u2581 is \u2581 \" + str.charAt(index));\n  }\n}\n", "python": "NO_OF_CHARS = 256\n\n\ndef getCharCountArray(string):\n    count = [0] * NO_OF_CHARS\n    for i in string:\n        count[ord(i)] += 1\n    return count\n\n\ndef firstNonRepeating(string):\n    count = getCharCountArray(string)\n    index = -1\n    k = 0\n    for i in string:\n        if count[ord(i)] == 1:\n            index = k\n            break\n        k += 1\n    return index\n\n\nstring = \" geeksforgeeks \"\nindex = firstNonRepeating(string)\nif index == 1:\n    print \" Either \u2581 all \u2581 characters \u2581 are \u2581 repeating \u2581 or \u2581 string \u2581 is \u2581 empty \"\nelse:\n    print \" First \u2581 non - repeating \u2581 character \u2581 is \u2581 \" + string[index]\n"}
{"text": "Print all possible paths from top left to bottom right of a mXn matrix ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static ArrayList<ArrayList<Integer>> allPaths = new ArrayList<ArrayList<Integer>>();\n\n  static void findPathsUtil(\n      ArrayList<ArrayList<Integer>> maze,\n      int m,\n      int n,\n      int i,\n      int j,\n      ArrayList<Integer> path,\n      int indx) {\n    if (i == m - 1) {\n      for (int k = j; k < n; k++) {\n        path.set(indx + k - j, maze.get(i).get(k));\n      }\n      System.out.print(\" [ \" + path.get(0) + \" , \u2581 \");\n      for (int z = 1; z < path.size() - 1; z++) {\n        System.out.print(path.get(z) + \" , \u2581 \");\n      }\n      System.out.println(path.get(path.size() - 1) + \" ] \");\n      allPaths.add(path);\n      return;\n    }\n    if (j == n - 1) {\n      for (int k = i; k < m; k++) {\n        path.set(indx + k - i, maze.get(k).get(j));\n      }\n      System.out.print(\" [ \" + path.get(0) + \" , \u2581 \");\n      for (int z = 1; z < path.size() - 1; z++) {\n        System.out.print(path.get(z) + \" , \u2581 \");\n      }\n      System.out.println(path.get(path.size() - 1) + \" ] \");\n      allPaths.add(path);\n      return;\n    }\n    path.set(indx, maze.get(i).get(j));\n    findPathsUtil(maze, m, n, i + 1, j, path, indx + 1);\n    findPathsUtil(maze, m, n, i, j + 1, path, indx + 1);\n  }\n\n  static void findPaths(ArrayList<ArrayList<Integer>> maze, int m, int n) {\n    ArrayList<Integer> path = new ArrayList<Integer>();\n    for (int i = 0; i < m + n - 1; i++) {\n      path.add(0);\n    }\n    findPathsUtil(maze, m, n, 0, 0, path, 0);\n  }\n\n  public static void main(String[] args) {\n    ArrayList<ArrayList<Integer>> maze = new ArrayList<ArrayList<Integer>>();\n    maze.add(new ArrayList<Integer>(Arrays.asList(1, 2, 3)));\n    maze.add(new ArrayList<Integer>(Arrays.asList(4, 5, 6)));\n    maze.add(new ArrayList<Integer>(Arrays.asList(7, 8, 9)));\n    findPaths(maze, 3, 3);\n  }\n}\n", "python": "allPaths = []\n\n\ndef findPaths(maze, m, n):\n    path = [0 for d in range(m + n - 1)]\n    findPathsUtil(maze, m, n, 0, 0, path, 0)\n\n\ndef findPathsUtil(maze, m, n, i, j, path, indx):\n    global allPaths\n    if i == m - 1:\n        for k in range(j, n):\n            path[indx + k - j] = maze[i][k]\n        print(path)\n        allPaths.append(path)\n        return\n    if j == n - 1:\n        for k in range(i, m):\n            path[indx + k - i] = maze[k][j]\n        print(path)\n        allPaths.append(path)\n        return\n    path[indx] = maze[i][j]\n    findPathsUtil(maze, m, n, i + 1, j, path, indx + 1)\n    findPathsUtil(maze, m, n, i, j + 1, path, indx + 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    maze = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    findPaths(maze, 3, 3)\n"}
{"text": "Find Nth term ( A matrix exponentiation example ) ", "java": "class GfG {\n  static int MAX = 100;\n  static int MOD = 1000000009;\n\n  static int power(int n) {\n    if (n <= 1) {\n      return 1;\n    }\n    n--;\n    int res[][] = {{1, 0}, {0, 1}};\n    int tMat[][] = {{2, 3}, {1, 0}};\n    while (n > 0) {\n      if (n % 2 == 1) {\n        int tmp[][] = new int[2][2];\n        tmp[0][0] = (res[0][0] * tMat[0][0] + res[0][1] * tMat[1][0]) % MOD;\n        tmp[0][1] = (res[0][0] * tMat[0][1] + res[0][1] * tMat[1][1]) % MOD;\n        tmp[1][0] = (res[1][0] * tMat[0][0] + res[1][1] * tMat[1][0]) % MOD;\n        tmp[1][1] = (res[1][0] * tMat[0][1] + res[1][1] * tMat[1][1]) % MOD;\n        res[0][0] = tmp[0][0];\n        res[0][1] = tmp[0][1];\n        res[1][0] = tmp[1][0];\n        res[1][1] = tmp[1][1];\n      }\n      n = n / 2;\n      int tmp[][] = new int[2][2];\n      tmp[0][0] = (tMat[0][0] * tMat[0][0] + tMat[0][1] * tMat[1][0]) % MOD;\n      tmp[0][1] = (tMat[0][0] * tMat[0][1] + tMat[0][1] * tMat[1][1]) % MOD;\n      tmp[1][0] = (tMat[1][0] * tMat[0][0] + tMat[1][1] * tMat[1][0]) % MOD;\n      tmp[1][1] = (tMat[1][0] * tMat[0][1] + tMat[1][1] * tMat[1][1]) % MOD;\n      tMat[0][0] = tmp[0][0];\n      tMat[0][1] = tmp[0][1];\n      tMat[1][0] = tmp[1][0];\n      tMat[1][1] = tmp[1][1];\n    }\n    return (res[0][0] * 1 + res[0][1] * 1) % MOD;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(power(n));\n  }\n}\n", "python": "MOD = 1000000009\n\n\ndef power(n):\n    if n <= 1:\n        return 1\n    n -= 1\n    res = [[1, 0], [0, 1]]\n    tMat = [[2, 3], [1, 0]]\n    while n:\n        if n & 1:\n            tmp = [[0 for x in range(2)] for y in range(2)]\n            tmp[0][0] = (res[0][0] * tMat[0][0] + res[0][1] * tMat[1][0]) % MOD\n            tmp[0][1] = (res[0][0] * tMat[0][1] + res[0][1] * tMat[1][1]) % MOD\n            tmp[1][0] = (res[1][0] * tMat[0][0] + res[1][1] * tMat[1][0]) % MOD\n            tmp[1][1] = (res[1][0] * tMat[0][1] + res[1][1] * tMat[1][1]) % MOD\n            res[0][0] = tmp[0][0]\n            res[0][1] = tmp[0][1]\n            res[1][0] = tmp[1][0]\n            res[1][1] = tmp[1][1]\n        n = n // 2\n        tmp = [[0 for x in range(2)] for y in range(2)]\n        tmp[0][0] = (tMat[0][0] * tMat[0][0] + tMat[0][1] * tMat[1][0]) % MOD\n        tmp[0][1] = (tMat[0][0] * tMat[0][1] + tMat[0][1] * tMat[1][1]) % MOD\n        tmp[1][0] = (tMat[1][0] * tMat[0][0] + tMat[1][1] * tMat[1][0]) % MOD\n        tmp[1][1] = (tMat[1][0] * tMat[0][1] + tMat[1][1] * tMat[1][1]) % MOD\n        tMat[0][0] = tmp[0][0]\n        tMat[0][1] = tmp[0][1]\n        tMat[1][0] = tmp[1][0]\n        tMat[1][1] = tmp[1][1]\n    return (res[0][0] * 1 + res[0][1] * 1) % MOD\n\n\nn = 3\nprint(power(n))\n"}
{"text": "Sine Rule with Derivation , Example and Implementation ", "java": "class GFG {\n  static void findSides(double A, double C, double c) {\n    double B = 180 - (A + C);\n    A = A * (3.14159 / 180);\n    C = C * (3.14159 / 180);\n    B = B * (3.14159 / 180);\n    double a = (c / Math.sin(C)) * Math.sin(A);\n    double b = (c / Math.sin(C)) * Math.sin(B);\n    System.out.println(String.format(\" % .2f \", a));\n    System.out.println(String.format(\" % .2f \", b));\n  }\n\n  public static void main(String[] args) {\n    double A = 45.0;\n    double C = 35.0;\n    double c = 23;\n    findSides(A, C, c);\n  }\n}\n", "python": "import math\n\n\ndef findSides(A, C, c):\n    B = 180 - (A + C)\n    A = A * (3.14159 / 180)\n    C = C * (3.14159 / 180)\n    B = B * (3.14159 / 180)\n    a = (c / math.sin(C)) * math.sin(A)\n    b = (c / math.sin(C)) * math.sin(B)\n    print(\" { 0 : . 2f } \".format(a))\n    print(\" { 0 : . 2f } \".format(b))\n\n\nA = 45.0\nC = 35.0\nc = 23\nfindSides(A, C, c)\n"}
{"text": "Sum of squares of distances between all pairs from given points ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void findSquareSum(int Coordinates[][], int N) {\n    long xq = 0, yq = 0;\n    long xs = 0, ys = 0;\n    long res = 0;\n    for (int i = 0; i < N; i++) {\n      int a, b;\n      a = Coordinates[i][0];\n      b = Coordinates[i][1];\n      res += xq;\n      res -= 2 * xs * a;\n      res += i * (long) (a * a);\n      xq += a * a;\n      xs += a;\n      res += yq;\n      res -= 2 * ys * b;\n      res += i * (long) b * b;\n      yq += b * b;\n      ys += b;\n    }\n    System.out.println(res);\n  }\n\n  public static void main(String[] args) {\n    int arr[][] = {{1, 1}, {-1, -1}, {1, -1}, {-1, 1}};\n    int N = arr.length;\n    findSquareSum(arr, N);\n  }\n}\n", "python": "def findSquareSum(Coordinates, N):\n    xq, yq = 0, 0\n    xs, ys = 0, 0\n    res = 0\n    for i in range(N):\n        a = Coordinates[i][0]\n        b = Coordinates[i][1]\n        res += xq\n        res -= 2 * xs * a\n        res += i * (a * a)\n        xq += a * a\n        xs += a\n        res += yq\n        res -= 2 * ys * b\n        res += i * b * b\n        yq += b * b\n        ys += b\n    print(res)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [[1, 1], [-1, -1], [1, -1], [-1, 1]]\n    N = len(arr)\n    findSquareSum(arr, N)\n"}
{"text": "Circumradius of a Cyclic Quadrilateral using the length of Sides ", "java": "import java.util.*;\n\nclass GFG {\n  static double Circumradius(int a, int b, int c, int d) {\n    double s = (a + b + c + d) / 2.0;\n    double radius =\n        Math.sqrt(\n            ((a * b) + (c * d))\n                * ((a * c) + (b * d))\n                * ((a * d) + (b * c))\n                / ((s - a) * (s - b) * (s - c) * (s - d)));\n    return radius / 4;\n  }\n\n  public static void main(String[] args) {\n    int A = 3;\n    int B = 4;\n    int C = 5;\n    int D = 6;\n    double ans = Circumradius(A, B, C, D);\n    System.out.format(\" % .2f \", ans);\n  }\n}\n", "python": "import math\n\n\ndef Circumradius(a, b, c, d):\n    s = (a + b + c + d) / 2\n    radius = (1 / 4) * math.sqrt(\n        ((a * b) + (c * d))\n        * ((a * c) + (b * d))\n        * ((a * d) + (b * c))\n        / ((s - a) * (s - b) * (s - c) * (s - d))\n    )\n    return radius\n\n\nA = 3\nB = 4\nC = 5\nD = 6\nans = Circumradius(A, B, C, D)\nprint(round(ans, 2))\n"}
{"text": "Area of Triangle using Side ", "java": "class GFG {\n  static float Area_of_Triangle(int a, int b, int k) {\n    float area = (float) ((1 / 2.0) * a * b * Math.sin(k));\n    return area;\n  }\n\n  public static void main(String[] args) {\n    int a = 9;\n    int b = 12;\n    int k = 2;\n    float ans = Area_of_Triangle(a, b, k);\n    System.out.printf(\" % .1f \", ans);\n  }\n}\n", "python": "import math\n\n\ndef Area_of_Triangle(a, b, k):\n    area = (1 / 2) * a * b * math.sin(k)\n    return area\n\n\na = 9\nb = 12\nk = 2\nans = Area_of_Triangle(a, b, k)\nprint(round(ans, 2))\n"}
{"text": "Determine the number of squares of unit area that a given line will pass through . ", "java": "class GFG {\n  static int __gcd(int a, int b) {\n    if (b == 0) return a;\n    return __gcd(b, a % b);\n  }\n\n  static void noOfSquares(int x1, int y1, int x2, int y2) {\n    int dx = Math.abs(x2 - x1);\n    int dy = Math.abs(y2 - y1);\n    int ans = dx + dy - __gcd(dx, dy);\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int x1 = 1, y1 = 1, x2 = 4, y2 = 3;\n    noOfSquares(x1, y1, x2, y2);\n  }\n}\n", "python": "from math import gcd\n\n\ndef noOfSquares(x1, y1, x2, y2):\n    dx = abs(x2 - x1)\n    dy = abs(y2 - y1)\n    ans = dx + dy - gcd(dx, dy)\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    x1 = 1\n    y1 = 1\n    x2 = 4\n    y2 = 3\n    noOfSquares(x1, y1, x2, y2)\n"}
{"text": "Count paths with distance equal to Manhattan distance ", "java": "class GfG {\n  static long binomialCoeff(int n, int k) {\n    long res = 1;\n    if (k > n - k) k = n - k;\n    for (int i = 0; i < k; ++i) {\n      res *= (n - i);\n      res /= (i + 1);\n    }\n    return res;\n  }\n\n  static long countPaths(int x1, int y1, int x2, int y2) {\n    int m = Math.abs(x1 - x2);\n    int n = Math.abs(y1 - y2);\n    return (binomialCoeff(m + n, n));\n  }\n\n  public static void main(String[] args) {\n    int x1 = 2, y1 = 3, x2 = 4, y2 = 5;\n    System.out.println(countPaths(x1, y1, x2, y2));\n  }\n}\n", "python": "def binomialCoeff(n, k):\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= n - i\n        res //= i + 1\n    return res\n\n\ndef countPaths(x1, y1, x2, y2):\n    m = abs(x1 - x2)\n    n = abs(y1 - y2)\n    return binomialCoeff(m + n, n)\n\n\nx1, y1, x2, y2 = 2, 3, 4, 5\nprint(countPaths(x1, y1, x2, y2))\n"}
{"text": "Find the area of largest circle inscribed in ellipse ", "java": "class GFG {\n  static double areaCircle(double b) {\n    double area = (double) 3.1415926 * b * b;\n    return area;\n  }\n\n  public static void main(String args[]) {\n    float a = 10, b = 8;\n    System.out.println(areaCircle(b));\n  }\n}\n", "python": "import math\n\n\ndef areaCircle(b):\n    area = math.pi * b * b\n    return area\n\n\na = 10\nb = 8\nprint(areaCircle(b))\n"}
{"text": "Section formula for 3 D ", "java": "import java.util.*;\n\nclass solution {\n  static void section(\n      double x1, double x2, double y1, double y2, double z1, double z2, double m, double n) {\n    double x = ((m * x2) + (n * x1)) / (m + n);\n    double y = ((m * y2) + (n * y1)) / (m + n);\n    double z = ((m * z2) + (n * z1)) / (m + n);\n    System.out.print(\" ( \" + x + \" , \u2581 \");\n    System.out.print(y + \" , \u2581 \");\n    System.out.println(z + \" ) \");\n  }\n\n  public static void main(String arr[]) {\n    double x1 = 2, x2 = 4, y1 = -1, y2 = 3, z1 = 4, z2 = 2, m = 2, n = 3;\n    section(x1, x2, y1, y2, z1, z2, m, n);\n  }\n}\n", "python": "def section(x1, x2, y1, y2, z1, z2, m, n):\n    x = ((m * x2) + (n * x1)) / (m + n)\n    y = ((m * y2) + (n * y1)) / (m + n)\n    z = ((m * z2) + (n * z1)) / (m + n)\n    print(\" ( \", x, \" , \", y, \" , \", z, \" ) \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    x1 = 2\n    x2 = 4\n    y1 = -1\n    y2 = 3\n    z1 = 4\n    z2 = 2\n    m = 2\n    n = 3\n    section(x1, x2, y1, y2, z1, z2, m, n)\n"}
{"text": "Find area of triangle if two vectors of two adjacent sides are given ", "java": "import java.util.*;\n\nclass solution {\n  static float area(int x1, int y1, int z1, int x2, int y2, int z2) {\n    double a =\n        Math.pow((y1 * z2 - y2 * z1), 2)\n            + Math.pow((x1 * z2 - x2 * z1), 2)\n            + Math.pow((x1 * y2 - x2 * y1), 2);\n    float area = (float) Math.sqrt(a);\n    area = area / 2;\n    return area;\n  }\n\n  public static void main(String arr[]) {\n    int x1 = -2;\n    int y1 = 0;\n    int z1 = -5;\n    int x2 = 1;\n    int y2 = -2;\n    int z2 = -1;\n    float a = area(x1, y1, z1, x2, y2, z2);\n    System.out.println(\" Area = \u2581 \" + a);\n  }\n}\n", "python": "import math\n\n\ndef area(x1, y1, z1, x2, y2, z2):\n    area = math.sqrt(\n        (y1 * z2 - y2 * z1) ** 2 + (x1 * z2 - x2 * z1) ** 2 + (x1 * y2 - x2 * y1) ** 2\n    )\n    area = area / 2\n    return area\n\n\ndef main():\n    x1 = -2\n    y1 = 0\n    z1 = -5\n    x2 = 1\n    y2 = -2\n    z2 = -1\n    a = area(x1, y1, z1, x2, y2, z2)\n    print(\" Area \u2581 = \u2581 \", a)\n\n\nif __name__ == \" _ _ main _ _ \":\n    main()\n"}
{"text": "Largest trapezoid that can be inscribed in a semicircle ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static float trapezoidarea(float r) {\n    if (r < 0) return -1;\n    float a = (3 * (float) Math.sqrt(3) * (float) Math.pow(r, 2)) / 4;\n    return a;\n  }\n\n  public static void main(String args[]) {\n    float r = 5;\n    System.out.printf(\" % .3f \", trapezoidarea(r));\n  }\n}\n", "python": "from math import *\n\n\ndef trapezoidarea(r):\n    if r < 0:\n        return -1\n    a = (3 * sqrt(3) * pow(r, 2)) / 4\n    return a\n\n\nif __name__ == \" _ _ main _ _ \":\n    r = 5\n    print(round(trapezoidarea(r), 3))\n"}
{"text": "Largest rectangle that can be inscribed in a semicircle ", "java": "class GFG {\n  static float rectanglearea(float r) {\n    if (r < 0) return -1;\n    float a = r * r;\n    return a;\n  }\n\n  public static void main(String[] args) {\n    float r = 5;\n    System.out.println((int) rectanglearea(r));\n  }\n}\n", "python": "def rectanglearea(r):\n    if r < 0:\n        return -1\n    a = r * r\n    return a\n\n\nif __name__ == \" _ _ main _ _ \":\n    r = 5\n"}
{"text": "Maximum distinct lines passing through a single point ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int maxLines(int n, int x1[], int y1[], int x2[], int y2[]) {\n    Set<Double> s = new HashSet<Double>();\n    double slope;\n    for (int i = 0; i < n; ++i) {\n      if (x1[i] == x2[i]) slope = Integer.MAX_VALUE;\n      else slope = (y2[i] - y1[i]) * 1.0 / (x2[i] - x1[i]) * 1.0;\n      s.add(slope);\n    }\n    return s.size();\n  }\n\n  public static void main(String args[]) {\n    int n = 2, x1[] = {1, 2}, y1[] = {1, 2}, x2[] = {2, 4}, y2[] = {2, 10};\n    System.out.print(maxLines(n, x1, y1, x2, y2));\n  }\n}\n", "python": "import sys\n\n\ndef maxLines(n, x1, y1, x2, y2):\n    s = []\n    slope = sys.maxsize\n    for i in range(n):\n        if x1[i] == x2[i]:\n            slope = sys.maxsize\n        else:\n            slope = (y2[i] - y1[i]) * 1.0 / (x2[i] - x1[i]) * 1.0\n        s.append(slope)\n    return len(s)\n\n\nn = 2\nx1 = [1, 2]\ny1 = [1, 2]\nx2 = [2, 4]\ny2 = [2, 10]\nprint(maxLines(n, x1, y1, x2, y2))\n"}
{"text": "Find area of parallelogram if vectors of two adjacent sides are given ", "java": "public class GFG {\n  static float area(float x1, float y1, float z1, float x2, float y2, float z2) {\n    float area =\n        (float)\n            Math.sqrt(\n                Math.pow((y1 * z2 - y2 * z1), 2)\n                    + Math.pow((x1 * z2 - x2 * z1), 2)\n                    + Math.pow((x1 * y2 - x2 * y1), 2));\n    return area;\n  }\n\n  public static void main(String args[]) {\n    float x1 = 3;\n    float y1 = 1;\n    float z1 = -2;\n    float x2 = 1;\n    float y2 = -3;\n    float z2 = 4;\n    float a = area(x1, y1, z1, x2, y2, z2);\n    System.out.println(\" Area \u2581 = \u2581 \" + a);\n  }\n}\n", "python": "import math\n\n\ndef area(x1, y1, z1, x2, y2, z2):\n    area = math.sqrt(\n        (y1 * z2 - y2 * z1) ** 2 + (x1 * z2 - x2 * z1) ** 2 + (x1 * y2 - x2 * y1) ** 2\n    )\n    return area\n\n\ndef main():\n    x1 = 3\n    y1 = 1\n    z1 = -2\n    x2 = 1\n    y2 = -3\n    z2 = 4\n    a = area(x1, y1, z1, x2, y2, z2)\n    print(\" Area \u2581 = \u2581 \", a)\n\n\nif __name__ == \" _ _ main _ _ \":\n    main()\n"}
{"text": "Haversine formula to find distance between two points on a sphere ", "java": "public class Haversine {\n  static double haversine(double lat1, double lon1, double lat2, double lon2) {\n    double dLat = Math.toRadians(lat2 - lat1);\n    double dLon = Math.toRadians(lon2 - lon1);\n    lat1 = Math.toRadians(lat1);\n    lat2 = Math.toRadians(lat2);\n    double a =\n        Math.pow(Math.sin(dLat / 2), 2)\n            + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n    double rad = 6371;\n    double c = 2 * Math.asin(Math.sqrt(a));\n    return rad * c;\n  }\n\n  public static void main(String[] args) {\n    double lat1 = 51.5007;\n    double lon1 = 0.1246;\n    double lat2 = 40.6892;\n    double lon2 = 74.0445;\n    System.out.println(haversine(lat1, lon1, lat2, lon2) + \" \u2581 K . M . \");\n  }\n}\n", "python": "import math\n\n\ndef haversine(lat1, lon1, lat2, lon2):\n    dLat = (lat2 - lat1) * math.pi / 180.0\n    dLon = (lon2 - lon1) * math.pi / 180.0\n    lat1 = (lat1) * math.pi / 180.0\n    lat2 = (lat2) * math.pi / 180.0\n    a = pow(math.sin(dLat / 2), 2) + pow(math.sin(dLon / 2), 2) * math.cos(\n        lat1\n    ) * math.cos(lat2)\n    rad = 6371\n    c = 2 * math.asin(math.sqrt(a))\n    return rad * c\n\n\nif __name__ == \" _ _ main _ _ \":\n    lat1 = 51.5007\n    lon1 = 0.1246\n    lat2 = 40.6892\n    lon2 = 74.0445\n    print(haversine(lat1, lon1, lat2, lon2), \" K . M . \")\n"}
{"text": "Pentatope number ", "java": "import java.io.*;\n\nclass GFG {\n  static int pentatopeNum(int n) {\n    return (n * (n + 1) * (n + 2) * (n + 3)) / 24;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(pentatopeNum(n));\n    n = 11;\n    System.out.println(pentatopeNum(n));\n  }\n}\n", "python": "def Pentatope_number(n):\n    return n * (n + 1) * (n + 2) * (n + 3) // 24\n\n\nn = 7\nprint(\" % sth \u2581 Pentatope \u2581 number \u2581 : \u2581 \" % n, Pentatope_number(n))\nn = 12\nprint(\" % sth \u2581 Pentatope \u2581 number \u2581 : \u2581 \" % n, Pentatope_number(n))\n"}
{"text": "Heptagonal number ", "java": "import java.io.*;\n\nclass GFG {\n  static int heptagonalNumber(int n) {\n    return ((5 * n * n) - (3 * n)) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(heptagonalNumber(n));\n    n = 15;\n    System.out.println(heptagonalNumber(n));\n  }\n}\n", "python": "def heptagonalNumber(n):\n    return ((5 * n * n) - (3 * n)) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 2\n    print(heptagonalNumber(n))\n    n = 15\n    print(heptagonalNumber(n))\n"}
{"text": "Icosidigonal number ", "java": "import java.io.*;\n\nclass GFG {\n  static int icosidigonal_num(int n) {\n    return (20 * n * n - 18 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.print(n + \" th \u2581 Icosidigonal \u2581 number \u2581 : \");\n    System.out.println(icosidigonal_num(n));\n    n = 8;\n    System.out.print(n + \" th \u2581 Icosidigonal \u2581 number \u2581 : \");\n    System.out.println(icosidigonal_num(n));\n  }\n}\n", "python": "def icosidigonal_num(n):\n    return (20 * n * n - 18 * n) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(n, \" th \u2581 Icosidigonal \u2581 \" + \" number \u2581 : \u2581 \", icosidigonal_num(n))\n    n = 8\n    print(n, \" th \u2581 Icosidigonal \u2581 \" + \" number \u2581 : \u2581 \", icosidigonal_num(n))\n"}
{"text": "Hypercube Graph ", "java": "class GfG {\n  static int power(int n) {\n    if (n == 1) return 2;\n    return 2 * power(n - 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(power(n));\n  }\n}\n", "python": "def power(n):\n    if n == 1:\n        return 2\n    return 2 * power(n - 1)\n\n\nn = 4\nprint(power(n))\n"}
{"text": "Reflection of a point at 180 degree rotation of another point ", "java": "class GFG {\n  static void findPoint(int x1, int y1, int x2, int y2) {\n    System.out.println(\" ( \" + (int) (2 * x2 - x1) + \" , \" + (int) (2 * y2 - y1) + \" \u2581 ) \");\n  }\n\n  public static void main(String args[]) {\n    int x1 = 0, y1 = 0, x2 = 1, y2 = 1;\n    findPoint(x1, y1, x2, y2);\n  }\n}\n", "python": "def findPoint(x1, y1, x2, y2):\n    print(\" ( \", 2 * x2 - x1, \" , \", 2 * y2 - y1, \" ) \")\n\n\nx1 = 0\ny1 = 0\nx2 = 1\ny2 = 1\nfindPoint(x1, y1, x2, y2)\n"}
{"text": "Triangular Matchstick Number ", "java": "public class TriangularPyramidNumber {\n  public static int numberOfSticks(int x) {\n    return (3 * x * (x + 1)) / 2;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(numberOfSticks(7));\n  }\n}\n", "python": "def numberOfSticks(x):\n    return (3 * x * (x + 1)) / 2\n\n\nprint(int(numberOfSticks(7)))\n"}
{"text": "Area of square Circumscribed by Circle ", "java": "class GFG {\n  static int find_Area(int r) {\n    return (2 * r * r);\n  }\n\n  public static void main(String[] args) {\n    int r = 3;\n    System.out.print(\" \u2581 Area \u2581 of \u2581 square \u2581 = \u2581 \" + find_Area(r));\n  }\n}\n", "python": "def find_Area(r):\n    return 2 * r * r\n\n\nr = 3\nprint(\" \u2581 Area \u2581 of \u2581 square \u2581 = \u2581 \", find_Area(r))\n"}
{"text": "Program to find slope of a line ", "java": "import java.util.*;\n\nclass GFG {\n  static float slope(float x1, float y1, float x2, float y2) {\n    if (x1 == x2) return Integer.MAX_VALUE;\n    return (y2 - y1) / (x2 - x1);\n  }\n\n  public static void main(String[] args) {\n    float x1 = 4, y1 = 2;\n    float x2 = 2, y2 = 5;\n    System.out.print(\" Slope \u2581 is : \u2581 \" + slope(x1, y1, x2, y2));\n  }\n}\n", "python": "import sys\n\n\ndef slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return sys.maxsize\n    return (y2 - y1) / (x2 - x1)\n\n\nx1 = 4\ny1 = 2\nx2 = 2\ny2 = 5\nprint(\" Slope \u2581 is \u2581 : \", slope(4, 2, 2, 5))\n"}
{"text": "Program to calculate area and perimeter of equilateral triangle ", "java": "import java.io.*;\n\nclass GFG {\n  static float area_equi_triangle(float side) {\n    return (float) (((Math.sqrt(3)) / 4) * side * side);\n  }\n\n  static float peri_equi_triangle(float side) {\n    return 3 * side;\n  }\n\n  public static void main(String arg[]) {\n    float side = 4;\n    System.out.print(\" Area \u2581 of \u2581 Equilateral \u2581 Triangle : \");\n    System.out.println(area_equi_triangle(side));\n    System.out.print(\" Perimeter \u2581 of \u2581 Equilateral \u2581 Triangle : \");\n    System.out.println(peri_equi_triangle(side));\n  }\n}\n", "python": "from math import *\n\n\ndef area_equilateral(side):\n    area = (sqrt(3) / 4) * side * side\n    print(\" Area \u2581 of \u2581 Equilateral \u2581 Triangle : \u2581 % \u2581 f \" % area)\n\n\ndef perimeter(side):\n    perimeter = 3 * side\n    print(\" Perimeter \u2581 of \u2581 Equilateral \u2581 Triangle : \u2581 % \u2581 f \" % perimeter)\n\n\nside = 4\narea_equilateral(side)\nperimeter(side)\n"}
{"text": "Program for Volume and Surface Area of Cuboid ", "java": "class GFG {\n  static double areaCuboid(double l, double h, double w) {\n    return (l * h * w);\n  }\n\n  static double surfaceAreaCuboid(double l, double h, double w) {\n    return (2 * l * w + 2 * w * h + 2 * l * h);\n  }\n\n  public static void main(String[] args) {\n    double l = 1;\n    double h = 5;\n    double w = 7;\n    System.out.println(\" Area \u2581 = \u2581 \" + areaCuboid(l, h, w));\n    System.out.println(\" Total \u2581 Surface \u2581 Area \u2581 = \u2581 \" + surfaceAreaCuboid(l, h, w));\n  }\n}\n", "python": "def volumeCuboid(l, h, w):\n    return l * h * w\n\n\ndef surfaceAreaCuboid(l, h, w):\n    return 2 * l * w + 2 * w * h + 2 * l * h\n\n\nl = 1\nh = 5\nw = 7\nprint(\" Volume \u2581 = \", volumeCuboid(l, h, w))\nprint(\" Total \u2581 Surface \u2581 Area \u2581 = \", surfaceAreaCuboid(l, h, w))\n"}
{"text": "Program to find Circumference of a Circle ", "java": "import java.io.*;\n\nclass Geometry {\n  static double circumference(double r) {\n    double PI = 3.1415;\n    double cir = 2 * PI * r;\n    return cir;\n  }\n\n  public static void main(String[] args) {\n    double r = 5;\n    double result = Math.round(circumference(r) * 1000) / 1000.0;\n    System.out.println(\" Circumference \u2581 = \u2581 \" + result);\n  }\n}\n", "python": "PI = 3.1415\n\n\ndef circumference(r):\n    return 2 * PI * r\n\n\nprint(\" % .3f \" % circumference(5))\n"}
{"text": "Number of rectangles in N * M grid ", "java": "import java.util.*;\n\nclass GFG {\n  public static long rectCount(int n, int m) {\n    return (m * n * (n + 1) * (m + 1)) / 4;\n  }\n\n  public static void main(String[] args) {\n    int n = 5, m = 4;\n    System.out.println(rectCount(n, m));\n  }\n}\n", "python": "def rectCount(n, m):\n    return (m * n * (n + 1) * (m + 1)) // 4\n\n\nn, m = 5, 4\nprint(rectCount(n, m))\n"}
{"text": "Find the Missing Point of Parallelogram ", "java": "import java.io.*;\n\nclass GFG {\n  public static void main(String[] args) {\n    int ax = 5, ay = 0;\n    int bx = 1, by = 1;\n    int cx = 2, cy = 5;\n    System.out.println(ax + (cx - bx) + \" , \u2581 \" + ay + (cy - by));\n  }\n}\n", "python": "if __name__ == \" _ _ main _ _ \":\n    ax, ay = 5, 0\n    bx, by = 1, 1\n    cx, cy = 2, 5\n    print(ax + cx - bx, \" , \", ay + cy - by)\n"}
{"text": "Represent a given set of points by the best possible straight line ", "java": "import static java.lang.Math.pow;\n\nimport java.io.*;\n\npublic class A {\n  static void bestApproximate(int x[], int y[]) {\n    int n = x.length;\n    double m, c, sum_x = 0, sum_y = 0, sum_xy = 0, sum_x2 = 0;\n    for (int i = 0; i < n; i++) {\n      sum_x += x[i];\n      sum_y += y[i];\n      sum_xy += x[i] * y[i];\n      sum_x2 += pow(x[i], 2);\n    }\n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - pow(sum_x, 2));\n    c = (sum_y - m * sum_x) / n;\n    System.out.println(\" m \u2581 = \u2581 \" + m);\n    System.out.println(\" c \u2581 = \u2581 \" + c);\n  }\n\n  public static void main(String args[]) {\n    int x[] = {1, 2, 3, 4, 5};\n    int y[] = {14, 27, 40, 55, 68};\n    bestApproximate(x, y);\n  }\n}\n", "python": "def bestApproximate(x, y, n):\n    sum_x = 0\n    sum_y = 0\n    sum_xy = 0\n    sum_x2 = 0\n    for i in range(0, n):\n        sum_x += x[i]\n        sum_y += y[i]\n        sum_xy += x[i] * y[i]\n        sum_x2 += pow(x[i], 2)\n    m = (float)((n * sum_xy - sum_x * sum_y) / (n * sum_x2 - pow(sum_x, 2)))\n    c = (float)(sum_y - m * sum_x) / n\n    print(\" m \u2581 = \u2581 \", m)\n    print(\" c \u2581 = \u2581 \", c)\n\n\nx = [1, 2, 3, 4, 5]\ny = [14, 27, 40, 55, 68]\nn = len(x)\nbestApproximate(x, y, n)\n"}
{"text": "Find all angles of a given triangle ", "java": "import static java.lang.Math.PI;\nimport static java.lang.Math.acos;\nimport static java.lang.Math.sqrt;\n\nimport java.awt.Point;\n\nclass Test {\n  static int lengthSquare(Point p1, Point p2) {\n    int xDiff = p1.x - p2.x;\n    int yDiff = p1.y - p2.y;\n    return xDiff * xDiff + yDiff * yDiff;\n  }\n\n  static void printAngle(Point A, Point B, Point C) {\n    int a2 = lengthSquare(B, C);\n    int b2 = lengthSquare(A, C);\n    int c2 = lengthSquare(A, B);\n    float a = (float) sqrt(a2);\n    float b = (float) sqrt(b2);\n    float c = (float) sqrt(c2);\n    float alpha = (float) acos((b2 + c2 - a2) / (2 * b * c));\n    float betta = (float) acos((a2 + c2 - b2) / (2 * a * c));\n    float gamma = (float) acos((a2 + b2 - c2) / (2 * a * b));\n    alpha = (float) (alpha * 180 / PI);\n    betta = (float) (betta * 180 / PI);\n    gamma = (float) (gamma * 180 / PI);\n    System.out.println(\" alpha \u2581 : \u2581 \" + alpha);\n    System.out.println(\" betta \u2581 : \u2581 \" + betta);\n    System.out.println(\" gamma \u2581 : \u2581 \" + gamma);\n  }\n\n  public static void main(String[] args) {\n    Point A = new Point(0, 0);\n    Point B = new Point(0, 1);\n    Point C = new Point(1, 0);\n    printAngle(A, B, C);\n  }\n}\n", "python": "import math\n\n\ndef lengthSquare(X, Y):\n    xDiff = X[0] - Y[0]\n    yDiff = X[1] - Y[1]\n    return xDiff * xDiff + yDiff * yDiff\n\n\ndef printAngle(A, B, C):\n    a2 = lengthSquare(B, C)\n    b2 = lengthSquare(A, C)\n    c2 = lengthSquare(A, B)\n    a = math.sqrt(a2)\n    b = math.sqrt(b2)\n    c = math.sqrt(c2)\n    alpha = math.acos((b2 + c2 - a2) / (2 * b * c))\n    betta = math.acos((a2 + c2 - b2) / (2 * a * c))\n    gamma = math.acos((a2 + b2 - c2) / (2 * a * b))\n    alpha = alpha * 180 / math.pi\n    betta = betta * 180 / math.pi\n    gamma = gamma * 180 / math.pi\n    print(\" alpha \u2581 : \u2581 % f \" % (alpha))\n    print(\" betta \u2581 : \u2581 % f \" % (betta))\n    print(\" gamma \u2581 : \u2581 % f \" % (gamma))\n\n\nA = (0, 0)\nB = (0, 1)\nC = (1, 0)\nprintAngle(A, B, C)\n"}
{"text": "Check if all the digits of the given number are same ", "java": "import java.io.*;\n\nclass GFG {\n  public static String checkSameDigits(int N) {\n    int length = ((int) Math.log10(N)) + 1;\n    int M = ((int) Math.pow(10, length) - 1) / (10 - 1);\n    M *= N % 10;\n    if (M == N) return \" Yes \";\n    return \" No \";\n  }\n\n  public static void main(String args[]) throws IOException {\n    int N = 222;\n    System.out.println(checkSameDigits(N));\n  }\n}\n", "python": "import math\n\n\ndef checkSameDigits(N):\n    length = int(math.log10(N)) + 1\n    M = (int(math.pow(10, length)) - 1) // (10 - 1)\n    M *= N % 10\n    if M == N:\n        return \" Yes \"\n    return \" No \"\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 222\n    print(checkSameDigits(N))\n"}
{"text": "Maximize the rightmost element of an array in k operations in Linear Time ", "java": "import java.io.*;\n\nclass GFG {\n  static int maxRightmostElement(int N, int k, int p, int arr[]) {\n    while (k > 0) {\n      for (int i = N - 2; i >= 0; i--) {\n        if (arr[i] >= p) {\n          arr[i] = arr[i] - p;\n          arr[i + 1] = arr[i + 1] + p;\n          break;\n        }\n      }\n      k--;\n    }\n    return arr[N - 1];\n  }\n\n  public static void main(String[] args) {\n    int N = 4, k = 5, p = 2;\n    int arr[] = {3, 8, 1, 4};\n    System.out.println(maxRightmostElement(N, k, p, arr));\n  }\n}\n", "python": "def maxRightmostElement(N, k, arr):\n    ans = arr[N - 1]\n    i = N - 2\n    while i >= 0:\n        d = min(arr[i] // 2, k // (N - 1 - i))\n        k -= d * (N - 1 - i)\n        ans += d * 2\n        i -= 1\n    print(ans, end=\" \u2581 \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    k = 5\n    arr = [3, 8, 1, 4]\n    maxRightmostElement(N, k, arr)\n"}
{"text": "Mean of minimum of all possible K ", "java": "import java.util.*;\n\nclass GFG {\n  static int nCr(int n, int r, int f[]) {\n    if (n < r) {\n      return 0;\n    }\n    return f[n] / (f[r] * f[n - r]);\n  }\n\n  static int findMean(int N, int X) {\n    int[] f = new int[N + 1];\n    f[0] = 1;\n    for (int i = 1; i <= N; i++) {\n      f[i] = f[i - 1] * i;\n    }\n    int total = nCr(N, X, f);\n    int count = 0;\n    for (int i = 1; i <= N; i++) {\n      count += nCr(N - i, X - 1, f) * i;\n    }\n    double E_X = (double) (count) / (double) (total);\n    System.out.print(String.format(\" % .6f \", E_X));\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 3, X = 2;\n    findMean(N, X);\n  }\n}\n", "python": "def nCr(n, r, f):\n    if n < r:\n        return 0\n    return f[n] / (f[r] * f[n - r])\n\n\ndef findMean(N, X):\n    f = [0 for i in range(N + 1)]\n    f[0] = 1\n    for i in range(1, N + 1, 1):\n        f[i] = f[i - 1] * i\n    total = nCr(N, X, f)\n    count = 0\n    for i in range(1, N + 1, 1):\n        count += nCr(N - i, X - 1, f) * i\n    E_X = (count) / (total)\n    print(\" { 0 : . 9f } \".format(E_X))\n    return 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    X = 2\n    findMean(N, X)\n"}
{"text": "Mean of fourth powers of first N natural numbers ", "java": "class GFG {\n  static double findAverage(int N) {\n    double S = 0;\n    for (int i = 1; i <= N; i++) {\n      S += i * i * i * i;\n    }\n    return S / N;\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    System.out.println(findAverage(N));\n  }\n}\n", "python": "def findAverage(N):\n    avg = ((6 * N * N * N * N) + (15 * N * N * N) + (10 * N * N) - 1) / 30\n    return avg\n\n\nN = 3\nprint(round(findAverage(N), 4))\n"}
{"text": "Decimal equivalent of concatenation of absolute difference of floor and rounded ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void findDecimal(double arr[], int N) {\n    int bit, power = 0, result = 0;\n    for (int i = N - 1; i >= 0; i--) {\n      bit = Math.abs((int) Math.floor(arr[i]) - (int) Math.round(arr[i]));\n      if (bit != 0) result += Math.pow(2, power);\n      power++;\n    }\n    System.out.print(result);\n  }\n\n  public static void main(String[] args) {\n    double arr[] = {1.2, 2.6, 4.2, 6.9, 3.1, 21.6, 91.2};\n    int N = arr.length;\n    findDecimal(arr, N);\n  }\n}\n", "python": "def findDecimal(arr, N):\n    power = 0\n    result = 0\n    for i in range(N - 1, -1, -1):\n        bit = abs(int(arr[i]) - round(arr[i]))\n        if bit:\n            result += pow(2, power)\n        power += 1\n    print(result)\n\n\narr = [1.2, 2.6, 4.2, 6.9, 3.1, 21.6, 91.2]\nN = len(arr)\nfindDecimal(arr, N)\n"}
{"text": "Calculate money placed in boxes after N days based on given conditions ", "java": "import java.io.*;\n\nclass GFG {\n  public static int totalMoney(int N) {\n    int ans = 0;\n    for (int i = 0; i < N; i++) {\n      ans += i / 7;\n      ans += (i % 7 + 1);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 15;\n    System.out.println(totalMoney(N));\n  }\n}\n", "python": "def totalMoney(N):\n    ans = 0\n    for i in range(0, N):\n        ans += i / 7\n        ans += i % 7 + 1\n    return ans\n\n\nN = 15\nprint(totalMoney(N))\n"}
{"text": "Calculate money placed in boxes after N days based on given conditions ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void totalMoney(int N) {\n    int CompWeeks = N / 7;\n    int RemDays = N % 7;\n    int X = 28 * CompWeeks + 7 * (CompWeeks * (CompWeeks - 1) / 2);\n    int Y = RemDays * (RemDays + 1) / 2 + CompWeeks * RemDays;\n    int cost = X + Y;\n    System.out.print(cost);\n  }\n\n  public static void main(String[] args) {\n    int N = 15;\n    totalMoney(N);\n  }\n}\n", "python": "def totalMoney(N):\n    ans = 0\n    for i in range(0, N):\n        ans += i / 7\n        ans += i % 7 + 1\n    return ans\n\n\nN = 15\nprint(totalMoney(N))\n"}
{"text": "Sum of dependencies in a graph ", "java": "import java.util.Vector;\n\nclass Test {\n  static void addEdge(Vector<Integer> adj[], int u, int v) {\n    adj[u].addElement((v));\n  }\n\n  static int findSum(Vector<Integer> adj[], int V) {\n    int sum = 0;\n    for (int u = 0; u < V; u++) sum += adj[u].size();\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int V = 4;\n    @SuppressWarnings(\" unchecked \")\n    Vector<Integer> adj[] = new Vector[V];\n    for (int i = 0; i < adj.length; i++) {\n      adj[i] = new Vector<>();\n    }\n    addEdge(adj, 0, 2);\n    addEdge(adj, 0, 3);\n    addEdge(adj, 1, 3);\n    addEdge(adj, 2, 3);\n    System.out.println(\" Sum \u2581 of \u2581 dependencies \u2581 is \u2581 \" + findSum(adj, V));\n  }\n}\n", "python": "def addEdge(adj, u, v):\n    adj[u].append(v)\n\n\ndef findSum(adj, V):\n    sum = 0\n    for u in range(V):\n        sum += len(adj[u])\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    V = 4\n    adj = [[] for i in range(V)]\n    addEdge(adj, 0, 2)\n    addEdge(adj, 0, 3)\n    addEdge(adj, 1, 3)\n    addEdge(adj, 2, 3)\n    print(\" Sum \u2581 of \u2581 dependencies \u2581 is \", findSum(adj, V))\n"}
{"text": "Write a function that counts the number of times a given int occurs in a Linked List ", "java": "import java.io.*;\nimport java.util.*;\n\nclass Node {\n  int data;\n  Node next;\n\n  Node(int val) {\n    data = val;\n    next = null;\n  }\n}\n\nclass GFG {\n  static int frequency = 0;\n\n  static Node push(Node head, int new_data) {\n    Node new_node = new Node(new_data);\n    new_node.next = head;\n    head = new_node;\n    return head;\n  }\n\n  static int count(Node head, int key) {\n    if (head == null) return frequency;\n    if (head.data == key) frequency++;\n    return count(head.next, key);\n  }\n\n  public static void main(String args[]) {\n    Node head = null;\n    head = push(head, 1);\n    head = push(head, 3);\n    head = push(head, 1);\n    head = push(head, 2);\n    head = push(head, 1);\n    System.out.print(\" count \u2581 of \u2581 1 \u2581 is \u2581 \" + count(head, 1));\n  }\n}\n", "python": "def count(self, temp, key):\n    if temp is None:\n        return 0\n    if temp.data == key:\n        return 1 + count(temp.next, key)\n    return count(temp.next, key)\n"}
{"text": "Practice questions for Linked List and Recursion ", "java": "static class Node {\n  int data;\n  Node next;\n}\n;\n", "python": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n    DEDENT\n"}
{"text": "Sorted order printing of a given array that represents a BST ", "java": "class GFG {\n  private static void printSorted(int[] arr, int start, int end) {\n    if (start > end) return;\n    printSorted(arr, start * 2 + 1, end);\n    System.out.print(arr[start] + \" \u2581 \");\n    printSorted(arr, start * 2 + 2, end);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 2, 5, 1, 3};\n    printSorted(arr, 0, arr.length - 1);\n  }\n}\n", "python": "def printSorted(arr, start, end):\n    if start > end:\n        return\n    printSorted(arr, start * 2 + 1, end)\n    print(arr[start], end=\" \u2581 \")\n    printSorted(arr, start * 2 + 2, end)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [4, 2, 5, 1, 3]\n    arr_size = len(arr)\n    printSorted(arr, 0, arr_size - 1)\n"}
{"text": "Leaf nodes from Preorder of a Binary Search Tree ", "java": "import java.util.*;\n\nclass GfG {\n  static void leafNode(int preorder[], int n) {\n    Stack<Integer> s = new Stack<Integer>();\n    for (int i = 0, j = 1; j < n; i++, j++) {\n      boolean found = false;\n      if (preorder[i] > preorder[j]) s.push(preorder[i]);\n      else {\n        while (!s.isEmpty()) {\n          if (preorder[j] > s.peek()) {\n            s.pop();\n            found = true;\n          } else break;\n        }\n      }\n      if (found) System.out.print(preorder[i] + \" \u2581 \");\n    }\n    System.out.println(preorder[n - 1]);\n  }\n\n  public static void main(String[] args) {\n    int preorder[] = {890, 325, 290, 530, 965};\n    int n = preorder.length;\n    leafNode(preorder, n);\n  }\n}\n", "python": "def binarySearch(inorder, l, r, d):\n    mid = (l + r) >> 1\n    if inorder[mid] == d:\n        return mid\n    elif inorder[mid] > d:\n        return binarySearch(inorder, l, mid - 1, d)\n    else:\n        return binarySearch(inorder, mid + 1, r, d)\n    ind = [0]\n\n\ndef leafNodesRec(preorder, inorder, l, r, ind, n):\n    if l == r:\n        print(inorder[l], end=\" \u2581 \")\n        ind[0] = ind[0] + 1\n        return\n    if l < 0 or l > r or r >= n:\n        return\n    loc = binarySearch(inorder, l, r, preorder[ind[0]])\n    ind[0] = ind[0] + 1\n    leafNodesRec(preorder, inorder, l, loc - 1, ind, n)\n    leafNodesRec(preorder, inorder, loc + 1, r, ind, n)\n\n\ndef leafNodes(preorder, n):\n    inorder = [0] * n\n    for i in range(n):\n        inorder[i] = preorder[i]\n    inorder.sort()\n    ind = [0]\n    leafNodesRec(preorder, inorder, 0, n - 1, ind, n)\n\n\npreorder = [890, 325, 290, 530, 965]\nn = len(preorder)\nleafNodes(preorder, n)\n"}
{"text": "Leaf nodes from Preorder of a Binary Search Tree ( Using Recursion ) ", "java": "class GFG {\n  static int i = 0;\n\n  static boolean isLeaf(int pre[], int n, int min, int max) {\n    if (i >= n) {\n      return false;\n    }\n    if (pre[i] > min && pre[i] < max) {\n      i++;\n      boolean left = isLeaf(pre, n, min, pre[i - 1]);\n      boolean right = isLeaf(pre, n, pre[i - 1], max);\n      if (!left && !right) {\n        System.out.print(pre[i - 1] + \" \u2581 \");\n      }\n      return true;\n    }\n    return false;\n  }\n\n  static void printLeaves(int preorder[], int n) {\n    isLeaf(preorder, n, Integer.MIN_VALUE, Integer.MAX_VALUE);\n  }\n\n  public static void main(String[] args) {\n    int preorder[] = {890, 325, 290, 530, 965};\n    int n = preorder.length;\n    printLeaves(preorder, n);\n  }\n}\n", "python": "def isLeaf(pre, i, n, Min, Max):\n    if i[0] >= n:\n        return False\n    if pre[i[0]] > Min and pre[i[0]] < Max:\n        i[0] += 1\n        left = isLeaf(pre, i, n, Min, pre[i[0] - 1])\n        right = isLeaf(pre, i, n, pre[i[0] - 1], Max)\n        if left == False and right == False:\n            print(pre[i[0] - 1], end=\" \u2581 \")\n        return True\n    return False\n\n\ndef printLeaves(preorder, n):\n    i = [0]\n    INT_MIN, INT_MAX = -999999999999, 999999999999\n    isLeaf(preorder, i, n, INT_MIN, INT_MAX)\n\n\nif __name__ == \" _ _ main _ _ \":\n    preorder = [890, 325, 290, 530, 965]\n    n = len(preorder)\n    printLeaves(preorder, n)\n"}
{"text": "Sum of middle row and column in Matrix ", "java": "import java.io.*;\n\nclass GFG {\n  static int MAX = 100;\n\n  static void middlesum(int mat[][], int n) {\n    int row_sum = 0, col_sum = 0;\n    for (int i = 0; i < n; i++) row_sum += mat[n / 2][i];\n    System.out.println(\" Sum \u2581 of \u2581 middle \u2581 row \u2581 = \u2581 \" + row_sum);\n    for (int i = 0; i < n; i++) col_sum += mat[i][n / 2];\n    System.out.println(\" Sum \u2581 of \u2581 middle \u2581 column \u2581 = \u2581 \" + col_sum);\n  }\n\n  public static void main(String[] args) {\n    int mat[][] = {{2, 5, 7}, {3, 7, 2}, {5, 6, 9}};\n    middlesum(mat, 3);\n  }\n}\n", "python": "def middlesum(mat, n):\n    row_sum = 0\n    col_sum = 0\n    for i in range(n):\n        row_sum += mat[n // 2][i]\n    print(\" Sum \u2581 of \u2581 middle \u2581 row \u2581 = \u2581 \", row_sum)\n    for i in range(n):\n        col_sum += mat[i][n // 2]\n    print(\" Sum \u2581 of \u2581 middle \u2581 column \u2581 = \u2581 \", col_sum)\n\n\nmat = [[2, 5, 7], [3, 7, 2], [5, 6, 9]]\nmiddlesum(mat, 3)\n"}
{"text": "Center element of matrix equals sums of half diagonals ", "java": "\npublic class GFG {\n  static int MAX = 100;\n\n  static boolean HalfDiagonalSums(int mat[][], int n) {\n    int diag1_left = 0, diag1_right = 0;\n    int diag2_left = 0, diag2_right = 0;\n    for (int i = 0, j = n - 1; i < n; i++, j--) {\n      if (i < n / 2) {\n        diag1_left += mat[i][i];\n        diag2_left += mat[j][i];\n      } else if (i > n / 2) {\n        diag1_right += mat[i][i];\n        diag2_right += mat[j][i];\n      }\n    }\n    return (diag1_left == diag2_right\n        && diag2_right == diag2_left\n        && diag1_right == diag2_left\n        && diag2_right == mat[n / 2][n / 2]);\n  }\n\n  public static void main(String args[]) {\n    int a[][] = {\n      {2, 9, 1, 4, -2}, {6, 7, 2, 11, 4}, {4, 2, 9, 2, 4}, {1, 9, 2, 4, 4}, {0, 2, 4, 2, 5}\n    };\n    System.out.print(HalfDiagonalSums(a, 5) ? \" Yes \" : \" No \");\n  }\n}\n", "python": "MAX = 100\n\n\ndef HalfDiagonalSums(mat, n):\n    diag1_left = 0\n    diag1_right = 0\n    diag2_left = 0\n    diag2_right = 0\n    i = 0\n    j = n - 1\n    while i < n:\n        if i < n // 2:\n            diag1_left += mat[i][i]\n            diag2_left += mat[j][i]\n        elif i > n // 2:\n            diag1_right += mat[i][i]\n            diag2_right += mat[j][i]\n        i += 1\n        j -= 1\n    return (\n        diag1_left == diag2_right\n        and diag2_right == diag2_left\n        and diag1_right == diag2_left\n        and diag2_right == mat[n // 2][n // 2]\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [\n        [2, 9, 1, 4, -2],\n        [6, 7, 2, 11, 4],\n        [4, 2, 9, 2, 4],\n        [1, 9, 2, 4, 4],\n        [0, 2, 4, 2, 5],\n    ]\n    print(\" Yes \") if (HalfDiagonalSums(a, 5)) else print(\" No \")\n"}
{"text": "Print a matrix in a spiral form starting from a point ", "java": "import java.io.*;\n\nclass GFG {\n  static void printSpiral(int[][] mat, int r, int c) {\n    int i, a = 0, b = 2;\n    int low_row = (0 > a) ? 0 : a;\n    int low_column = (0 > b) ? 0 : b - 1;\n    int high_row = ((a + 1) >= r) ? r - 1 : a + 1;\n    int high_column = ((b + 1) >= c) ? c - 1 : b + 1;\n    while ((low_row > 0 - r && low_column > 0 - c)) {\n      for (i = low_column + 1; i <= high_column && i < c && low_row >= 0; ++i)\n        System.out.print(mat[low_row][i] + \" \u2581 \");\n      low_row -= 1;\n      for (i = low_row + 2; i <= high_row && i < r && high_column < c; ++i)\n        System.out.print(mat[i][high_column] + \" \u2581 \");\n      high_column += 1;\n      for (i = high_column - 2; i >= low_column && i >= 0 && high_row < r; --i)\n        System.out.print(mat[high_row][i] + \" \u2581 \");\n      high_row += 1;\n      for (i = high_row - 2; i > low_row && i >= 0 && low_column >= 0; --i)\n        System.out.print(mat[i][low_column] + \" \u2581 \");\n      low_column -= 1;\n    }\n    System.out.println();\n  }\n\n  public static void main(String[] args) {\n    int[][] mat = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int r = 3, c = 3;\n    printSpiral(mat, r, c);\n  }\n}\n", "python": "MAX = 100\n\n\ndef printSpiral(mat, r, c):\n    a = 0\n    b = 2\n    low_row = 0 if (0 > a) else a\n    low_column = 0 if (0 > b) else b - 1\n    high_row = r - 1 if ((a + 1) >= r) else a + 1\n    high_column = c - 1 if ((b + 1) >= c) else b + 1\n    while low_row > 0 - r and low_column > 0 - c:\n        i = low_column + 1\n        while i <= high_column and i < c and low_row >= 0:\n            print(mat[low_row][i], end=\" \u2581 \")\n            i += 1\n        low_row -= 1\n        i = low_row + 2\n        while i <= high_row and i < r and high_column < c:\n            print(mat[i][high_column], end=\" \u2581 \")\n            i += 1\n        high_column += 1\n        i = high_column - 2\n        while i >= low_column and i >= 0 and high_row < r:\n            print(mat[high_row][i], end=\" \u2581 \")\n            i -= 1\n        high_row += 1\n        i = high_row - 2\n        while i > low_row and i >= 0 and low_column >= 0:\n            print(mat[i][low_column], end=\" \u2581 \")\n            i -= 1\n        low_column -= 1\n    print()\n\n\nif __name__ == \" _ _ main _ _ \":\n    mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    r = 3\n    c = 3\n    printSpiral(mat, r, c)\n"}
{"text": "Sum of both diagonals of a spiral odd ", "java": "class GFG {\n  static int spiralDiaSum(int n) {\n    if (n == 1) return 1;\n    return (4 * n * n - 6 * n + 6 + spiralDiaSum(n - 2));\n  }\n\n  public static void main(String[] args) {\n    int n = 7;\n    System.out.print(spiralDiaSum(n));\n  }\n}\n", "python": "def spiralDiaSum(n):\n    if n == 1:\n        return 1\n    return 4 * n * n - 6 * n + 6 + spiralDiaSum(n - 2)\n\n\nn = 7\nprint(spiralDiaSum(n))\n"}
{"text": "Count zeros in a row wise and column wise sorted matrix ", "java": "import java.io.*;\n\nclass GFG {\n  public static int N = 5;\n\n  static int countZeroes(int mat[][]) {\n    int row = N - 1, col = 0;\n    int count = 0;\n    while (col < N) {\n      while (mat[row][col] > 0) if (--row < 0) return count;\n      count += (row + 1);\n      col++;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int mat[][] = {\n      {0, 0, 0, 0, 1}, {0, 0, 0, 1, 1}, {0, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}\n    };\n    System.out.println(countZeroes(mat));\n  }\n}\n", "python": "N = 5\n\n\ndef countZeroes(mat):\n    row = N - 1\n    col = 0\n    count = 0\n    while col < N:\n        while mat[row][col]:\n            if row < 0:\n                return count\n            row = row - 1\n        count = count + (row + 1)\n        col = col + 1\n    return count\n\n\nmat = [\n    [0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 1],\n    [0, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1],\n]\nprint(countZeroes(mat))\n"}
{"text": "A Product Array Puzzle ", "java": "class ProductArray {\n  void productArray(int arr[], int n) {\n    if (n == 1) {\n      System.out.print(\"0\");\n      return;\n    }\n    int i, temp = 1;\n    int prod[] = new int[n];\n    for (int j = 0; j < n; j++) prod[j] = 1;\n    for (i = 0; i < n; i++) {\n      prod[i] = temp;\n      temp *= arr[i];\n    }\n    temp = 1;\n    for (i = n - 1; i >= 0; i--) {\n      prod[i] *= temp;\n      temp *= arr[i];\n    }\n    for (i = 0; i < n; i++) System.out.print(prod[i] + \" \u2581 \");\n    return;\n  }\n\n  public static void main(String[] args) {\n    ProductArray pa = new ProductArray();\n    int arr[] = {10, 3, 5, 6, 2};\n    int n = arr.length;\n    System.out.println(\" The \u2581 product \u2581 array \u2581 is \u2581 : \u2581 \");\n    pa.productArray(arr, n);\n  }\n}\n", "python": "def productArray(arr, n):\n    if n == 1:\n        print(0)\n        return\n    i, temp = 1, 1\n    prod = [1 for i in range(n)]\n    for i in range(n):\n        prod[i] = temp\n        temp *= arr[i]\n    temp = 1\n    for i in range(n - 1, -1, -1):\n        prod[i] *= temp\n        temp *= arr[i]\n    for i in range(n):\n        print(prod[i], end=\" \u2581 \")\n    return\n\n\narr = [10, 3, 5, 6, 2]\nn = len(arr)\nprint(\" The \u2581 product \u2581 array \u2581 is : \u2581 n \")\nproductArray(arr, n)\n"}
{"text": "A Product Array Puzzle ", "java": "import java.io.*;\nimport java.util.*;\n\nclass Solution {\n  public static long[] productExceptSelf(int a[], int n) {\n    long prod = 1;\n    long flag = 0;\n    for (int i = 0; i < n; i++) {\n      if (a[i] == 0) flag++;\n      else prod *= a[i];\n    }\n    long arr[] = new long[n];\n    for (int i = 0; i < n; i++) {\n      if (flag > 1) {\n        arr[i] = 0;\n      } else if (flag == 0) arr[i] = (prod / a[i]);\n      else if (flag == 1 && a[i] != 0) {\n        arr[i] = 0;\n      } else arr[i] = prod;\n    }\n    return arr;\n  }\n\n  public static void main(String args[]) throws IOException {\n    int n = 5;\n    int[] array = {10, 3, 5, 6, 2};\n    Solution ob = new Solution();\n    long[] ans = new long[n];\n    ans = ob.productExceptSelf(array, n);\n    for (int i = 0; i < n; i++) {\n      System.out.print(ans[i] + \" \u2581 \");\n    }\n  }\n}\n", "python": "def productArray(arr, n):\n    if n == 1:\n        print(0)\n        return\n    i, temp = 1, 1\n    prod = [1 for i in range(n)]\n    for i in range(n):\n        prod[i] = temp\n        temp *= arr[i]\n    temp = 1\n    for i in range(n - 1, -1, -1):\n        prod[i] *= temp\n        temp *= arr[i]\n    for i in range(n):\n        print(prod[i], end=\" \u2581 \")\n    return\n\n\narr = [10, 3, 5, 6, 2]\nn = len(arr)\nprint(\" The \u2581 product \u2581 array \u2581 is : \u2581 n \")\nproductArray(arr, n)\n"}
{"text": "Check if array elements are consecutive ", "java": "class AreConsecutive {\n  boolean areConsecutive(int arr[], int n) {\n    if (n < 1) return false;\n    int min = getMin(arr, n);\n    int max = getMax(arr, n);\n    if (max - min + 1 == n) {\n      boolean visited[] = new boolean[n];\n      int i;\n      for (i = 0; i < n; i++) {\n        if (visited[arr[i] - min] != false) return false;\n        visited[arr[i] - min] = true;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  int getMin(int arr[], int n) {\n    int min = arr[0];\n    for (int i = 1; i < n; i++) {\n      if (arr[i] < min) min = arr[i];\n    }\n    return min;\n  }\n\n  int getMax(int arr[], int n) {\n    int max = arr[0];\n    for (int i = 1; i < n; i++) {\n      if (arr[i] > max) max = arr[i];\n    }\n    return max;\n  }\n\n  public static void main(String[] args) {\n    AreConsecutive consecutive = new AreConsecutive();\n    int arr[] = {5, 4, 2, 3, 1, 6};\n    int n = arr.length;\n    if (consecutive.areConsecutive(arr, n) == true)\n      System.out.println(\" Array \u2581 elements \u2581 are \u2581 consecutive \");\n    else System.out.println(\" Array \u2581 elements \u2581 are \u2581 not \u2581 consecutive \");\n  }\n}\n", "python": "def areConsecutive(arr, n):\n    if n < 1:\n        return False\n    Min = min(arr)\n    Max = max(arr)\n    if Max - Min + 1 == n:\n        visited = [False for i in range(n)]\n        for i in range(n):\n            if visited[arr[i] - Min] != False:\n                return False\n            visited[arr[i] - Min] = True\n        return True\n    return False\n\n\narr = [5, 4, 2, 3, 1, 6]\nn = len(arr)\nif areConsecutive(arr, n) == True:\n    print(\" Array \u2581 elements \u2581 are \u2581 consecutive \u2581 \")\nelse:\n    print(\" Array \u2581 elements \u2581 are \u2581 not \u2581 consecutive \u2581 \")\n"}
{"text": "Check if array elements are consecutive ", "java": "class AreConsecutive {\n  boolean areConsecutive(int arr[], int n) {\n    if (n < 1) return false;\n    int min = getMin(arr, n);\n    int max = getMax(arr, n);\n    if (max - min + 1 == n) {\n      int i;\n      for (i = 0; i < n; i++) {\n        int j;\n        if (arr[i] < 0) j = -arr[i] - min;\n        else j = arr[i] - min;\n        if (arr[j] > 0) arr[j] = -arr[j];\n        else return false;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  int getMin(int arr[], int n) {\n    int min = arr[0];\n    for (int i = 1; i < n; i++) {\n      if (arr[i] < min) min = arr[i];\n    }\n    return min;\n  }\n\n  int getMax(int arr[], int n) {\n    int max = arr[0];\n    for (int i = 1; i < n; i++) {\n      if (arr[i] > max) max = arr[i];\n    }\n    return max;\n  }\n\n  public static void main(String[] args) {\n    AreConsecutive consecutive = new AreConsecutive();\n    int arr[] = {5, 4, 2, 3, 1, 6};\n    int n = arr.length;\n    if (consecutive.areConsecutive(arr, n) == true)\n      System.out.println(\" Array \u2581 elements \u2581 are \u2581 consecutive \");\n    else System.out.println(\" Array \u2581 elements \u2581 are \u2581 not \u2581 consecutive \");\n  }\n}\n", "python": "def areConsecutive(arr, n):\n    if n < 1:\n        return False\n    Min = min(arr)\n    Max = max(arr)\n    if Max - Min + 1 == n:\n        visited = [False for i in range(n)]\n        for i in range(n):\n            if visited[arr[i] - Min] != False:\n                return False\n            visited[arr[i] - Min] = True\n        return True\n    return False\n\n\narr = [5, 4, 2, 3, 1, 6]\nn = len(arr)\nif areConsecutive(arr, n) == True:\n    print(\" Array \u2581 elements \u2581 are \u2581 consecutive \u2581 \")\nelse:\n    print(\" Array \u2581 elements \u2581 are \u2581 not \u2581 consecutive \u2581 \")\n"}
{"text": "Exponential Search ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int exponentialSearch(int arr[], int n, int x) {\n    if (arr[0] == x) return 0;\n    int i = 1;\n    while (i < n && arr[i] <= x) i = i * 2;\n    return Arrays.binarySearch(arr, i / 2, Math.min(i, n - 1), x);\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {2, 3, 4, 10, 40};\n    int x = 10;\n    int result = exponentialSearch(arr, arr.length, x);\n    System.out.println(\n        (result < 0)\n            ? \" Element \u2581 is \u2581 not \u2581 present \u2581 in \u2581 array \"\n            : \" Element \u2581 is \u2581 present \u2581 at \u2581 index \u2581 \" + result);\n  }\n}\n", "python": "def exponentialSearch(arr, n, x):\n    if arr[0] == x:\n        return 0\n    i = 1\n    while i < n and arr[i] <= x:\n        i = i * 2\n    return binarySearch(arr, i / 2, min(i, n - 1), x)\n\n\ndef binarySearch(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) / 2\n        if arr[mid] == x:\n            return mid\n        if arr[mid] > x:\n            return binarySearch(arr, l, mid - 1, x)\n        return binarySearch(arr, mid + 1, r, x)\n    return -1\n\n\narr = [2, 3, 4, 10, 40]\nn = len(arr)\nx = 10\nresult = exponentialSearch(arr, n, x)\nif result == -1:\n    print \" Element \u2581 not \u2581 found \u2581 in \u2581 thye \u2581 array \"\nelse:\n    print \" Element \u2581 is \u2581 present \u2581 at \u2581 index \u2581 % d \" % (result)\n"}
{"text": "Search in an almost sorted array ", "java": "class GFG {\n  int binarySearch(int arr[], int l, int r, int x) {\n    if (r >= l) {\n      int mid = l + (r - l) / 2;\n      if (arr[mid] == x) return mid;\n      if (mid > l && arr[mid - 1] == x) return (mid - 1);\n      if (mid < r && arr[mid + 1] == x) return (mid + 1);\n      if (arr[mid] > x) return binarySearch(arr, l, mid - 2, x);\n      return binarySearch(arr, mid + 2, r, x);\n    }\n    return -1;\n  }\n\n  public static void main(String args[]) {\n    GFG ob = new GFG();\n    int arr[] = {3, 2, 10, 4, 40};\n    int n = arr.length;\n    int x = 4;\n    int result = ob.binarySearch(arr, 0, n - 1, x);\n    if (result == -1) System.out.println(\" Element \u2581 is \u2581 not \u2581 present \u2581 in \u2581 array \");\n    else System.out.println(\" Element \u2581 is \u2581 present \u2581 at \u2581 index \u2581 \" + result);\n  }\n}\n", "python": "def binarySearch(arr, l, r, x):\n    if r >= l:\n        mid = int(l + (r - l) / 2)\n        if arr[mid] == x:\n            return mid\n        if mid > l and arr[mid - 1] == x:\n            return mid - 1\n        if mid < r and arr[mid + 1] == x:\n            return mid + 1\n        if arr[mid] > x:\n            return binarySearch(arr, l, mid - 2, x)\n        return binarySearch(arr, mid + 2, r, x)\n    return -1\n\n\narr = [3, 2, 10, 4, 40]\nn = len(arr)\nx = 4\nresult = binarySearch(arr, 0, n - 1, x)\nif result == -1:\n    print(\" Element \u2581 is \u2581 not \u2581 present \u2581 in \u2581 array \")\nelse:\n    print(\" Element \u2581 is \u2581 present \u2581 at \u2581 index \", result)\n"}
{"text": "Longest Palindromic Subsequence ", "java": "class GFG {\n  static int max(int x, int y) {\n    return (x > y) ? x : y;\n  }\n\n  static int lps(char seq[], int i, int j) {\n    if (i == j) {\n      return 1;\n    }\n    if (seq[i] == seq[j] && i + 1 == j) {\n      return 2;\n    }\n    if (seq[i] == seq[j]) {\n      return lps(seq, i + 1, j - 1) + 2;\n    }\n    return max(lps(seq, i, j - 1), lps(seq, i + 1, j));\n  }\n\n  public static void main(String[] args) {\n    String seq = \" GEEKSFORGEEKS \";\n    int n = seq.length();\n    System.out.printf(\n        \" The \u2581 length \u2581 of \u2581 the \u2581 LPS \u2581 is \u2581 % d \", lps(seq.toCharArray(), 0, n - 1));\n  }\n}\n", "python": "def max(x, y):\n    if x > y:\n        return x\n    return y\n\n\ndef lps(seq, i, j):\n    if i == j:\n        return 1\n    if seq[i] == seq[j] and i + 1 == j:\n        return 2\n    if seq[i] == seq[j]:\n        return lps(seq, i + 1, j - 1) + 2\n    return max(lps(seq, i, j - 1), lps(seq, i + 1, j))\n\n\nif __name__ == \" _ _ main _ _ \":\n    seq = \" GEEKSFORGEEKS \"\n    n = len(seq)\n    print(\" The \u2581 length \u2581 of \u2581 the \u2581 LPS \u2581 is \", lps(seq, 0, n - 1))\n"}
{"text": "Longest Palindromic Subsequence ", "java": "class LPS {\n  static int max(int x, int y) {\n    return (x > y) ? x : y;\n  }\n\n  static int lps(String seq) {\n    int n = seq.length();\n    int i, j, cl;\n    int L[][] = new int[n][n];\n    for (i = 0; i < n; i++) L[i][i] = 1;\n    for (cl = 2; cl <= n; cl++) {\n      for (i = 0; i < n - cl + 1; i++) {\n        j = i + cl - 1;\n        if (seq.charAt(i) == seq.charAt(j) && cl == 2) L[i][j] = 2;\n        else if (seq.charAt(i) == seq.charAt(j)) L[i][j] = L[i + 1][j - 1] + 2;\n        else L[i][j] = max(L[i][j - 1], L[i + 1][j]);\n      }\n    }\n    return L[0][n - 1];\n  }\n\n  public static void main(String args[]) {\n    String seq = \" GEEKSFORGEEKS \";\n    int n = seq.length();\n    System.out.println(\" The \u2581 length \u2581 of \u2581 the \u2581 lps \u2581 is \u2581 \" + lps(seq));\n  }\n}\n", "python": "def max(x, y):\n    if x > y:\n        return x\n    return y\n\n\ndef lps(seq, i, j):\n    if i == j:\n        return 1\n    if seq[i] == seq[j] and i + 1 == j:\n        return 2\n    if seq[i] == seq[j]:\n        return lps(seq, i + 1, j - 1) + 2\n    return max(lps(seq, i, j - 1), lps(seq, i + 1, j))\n\n\nif __name__ == \" _ _ main _ _ \":\n    seq = \" GEEKSFORGEEKS \"\n    n = len(seq)\n    print(\" The \u2581 length \u2581 of \u2581 the \u2581 LPS \u2581 is \", lps(seq, 0, n - 1))\n"}
{"text": "Shortest Common Supersequence ", "java": "class GFG {\n  static int superSeq(String X, String Y, int m, int n) {\n    if (m == 0) return n;\n    if (n == 0) return m;\n    if (X.charAt(m - 1) == Y.charAt(n - 1)) return 1 + superSeq(X, Y, m - 1, n - 1);\n    return 1 + Math.min(superSeq(X, Y, m - 1, n), superSeq(X, Y, m, n - 1));\n  }\n\n  public static void main(String args[]) {\n    String X = \" AGGTAB \";\n    String Y = \" GXTXAYB \";\n    System.out.println(\n        \" Length \u2581 of \u2581 the \u2581 shortest \"\n            + \" supersequence \u2581 is : \u2581 \"\n            + superSeq(X, Y, X.length(), Y.length()));\n  }\n}\n", "python": "def superSeq(X, Y, m, n):\n    if not m:\n        return n\n    if not n:\n        return m\n    if X[m - 1] == Y[n - 1]:\n        return 1 + superSeq(X, Y, m - 1, n - 1)\n    return 1 + min(superSeq(X, Y, m - 1, n), superSeq(X, Y, m, n - 1))\n\n\nX = \" AGGTAB \"\nY = \" GXTXAYB \"\nprint(\n    \" Length \u2581 of \u2581 the \u2581 shortest \u2581 supersequence \u2581 is \u2581 % d \"\n    % superSeq(X, Y, len(X), len(Y))\n)\n"}
{"text": "Shortest Common Supersequence ", "java": "class GFG {\n  static int superSeq(String X, String Y, int m, int n) {\n    int[][] dp = new int[m + 1][n + 1];\n    for (int i = 0; i <= m; i++) {\n      for (int j = 0; j <= n; j++) {\n        if (i == 0) dp[i][j] = j;\n        else if (j == 0) dp[i][j] = i;\n        else if (X.charAt(i - 1) == Y.charAt(j - 1)) dp[i][j] = 1 + dp[i - 1][j - 1];\n        else dp[i][j] = 1 + Math.min(dp[i - 1][j], dp[i][j - 1]);\n      }\n    }\n    return dp[m][n];\n  }\n\n  public static void main(String args[]) {\n    String X = \" AGGTAB \";\n    String Y = \" GXTXAYB \";\n    System.out.println(\n        \" Length \u2581 of \u2581 the \u2581 shortest \u2581 supersequence \u2581 is \u2581 \"\n            + superSeq(X, Y, X.length(), Y.length()));\n  }\n}\n", "python": "def superSeq(X, Y, m, n):\n    if not m:\n        return n\n    if not n:\n        return m\n    if X[m - 1] == Y[n - 1]:\n        return 1 + superSeq(X, Y, m - 1, n - 1)\n    return 1 + min(superSeq(X, Y, m - 1, n), superSeq(X, Y, m, n - 1))\n\n\nX = \" AGGTAB \"\nY = \" GXTXAYB \"\nprint(\n    \" Length \u2581 of \u2581 the \u2581 shortest \u2581 supersequence \u2581 is \u2581 % d \"\n    % superSeq(X, Y, len(X), len(Y))\n)\n"}
{"text": "Compute sum of digits in all numbers from 1 to n ", "java": "import java.io.*;\n\nclass GFG {\n  static int sumOfDigitsFrom1ToN(int n) {\n    int result = 0;\n    for (int x = 1; x <= n; x++) result += sumOfDigits(x);\n    return result;\n  }\n\n  static int sumOfDigits(int x) {\n    int sum = 0;\n    while (x != 0) {\n      sum += x % 10;\n      x = x / 10;\n    }\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int n = 328;\n    System.out.println(\n        \" Sum \u2581 of \u2581 digits \u2581 in \u2581 numbers \"\n            + \" \u2581 from \u2581 1 \u2581 to \u2581 \"\n            + n\n            + \" \u2581 is \u2581 \"\n            + sumOfDigitsFrom1ToN(n));\n  }\n}\n", "python": "def sumOfDigitsFrom1ToN(n):\n    result = 0\n    for x in range(1, n + 1):\n        result = result + sumOfDigits(x)\n    return result\n\n\ndef sumOfDigits(x):\n    sum = 0\n    while x != 0:\n        sum = sum + x % 10\n        x = x // 10\n    return sum\n\n\nn = 328\nprint(\n    \" Sum \u2581 of \u2581 digits \u2581 in \u2581 numbers \u2581 from \u2581 1 \u2581 to \",\n    n,\n    \" is \",\n    sumOfDigitsFrom1ToN(n),\n)\n"}
{"text": "Compute sum of digits in all numbers from 1 to n ", "java": "import java.io.*;\nimport java.math.*;\n\nclass GFG {\n  static int sumOfDigitsFrom1ToN(int n) {\n    if (n < 10) return (n * (n + 1) / 2);\n    int d = (int) (Math.log10(n));\n    int a[] = new int[d + 1];\n    a[0] = 0;\n    a[1] = 45;\n    for (int i = 2; i <= d; i++) a[i] = a[i - 1] * 10 + 45 * (int) (Math.ceil(Math.pow(10, i - 1)));\n    int p = (int) (Math.ceil(Math.pow(10, d)));\n    int msd = n / p;\n    return (msd * a[d]\n        + (msd * (msd - 1) / 2) * p\n        + msd * (1 + n % p)\n        + sumOfDigitsFrom1ToN(n % p));\n  }\n\n  public static void main(String args[]) {\n    int n = 328;\n    System.out.println(\n        \" Sum \u2581 of \u2581 digits \u2581 in \u2581 numbers \u2581 \"\n            + \" from \u2581 1 \u2581 to \u2581 \"\n            + n\n            + \" \u2581 is \u2581 \"\n            + sumOfDigitsFrom1ToN(n));\n  }\n}\n", "python": "def sumOfDigitsFrom1ToN(n):\n    result = 0\n    for x in range(1, n + 1):\n        result = result + sumOfDigits(x)\n    return result\n\n\ndef sumOfDigits(x):\n    sum = 0\n    while x != 0:\n        sum = sum + x % 10\n        x = x // 10\n    return sum\n\n\nn = 328\nprint(\n    \" Sum \u2581 of \u2581 digits \u2581 in \u2581 numbers \u2581 from \u2581 1 \u2581 to \",\n    n,\n    \" is \",\n    sumOfDigitsFrom1ToN(n),\n)\n"}
{"text": "Compute sum of digits in all numbers from 1 to n ", "java": "import java.io.*;\nimport java.math.*;\n\nclass GFG {\n  static int sumOfDigitsFrom1ToNUtil(int n, int a[]) {\n    if (n < 10) return (n * (n + 1) / 2);\n    int d = (int) (Math.log10(n));\n    int p = (int) (Math.ceil(Math.pow(10, d)));\n    int msd = n / p;\n    return (msd * a[d]\n        + (msd * (msd - 1) / 2) * p\n        + msd * (1 + n % p)\n        + sumOfDigitsFrom1ToNUtil(n % p, a));\n  }\n\n  static int sumOfDigitsFrom1ToN(int n) {\n    int d = (int) (Math.log10(n));\n    int a[] = new int[d + 1];\n    a[0] = 0;\n    a[1] = 45;\n    for (int i = 2; i <= d; i++) a[i] = a[i - 1] * 10 + 45 * (int) (Math.ceil(Math.pow(10, i - 1)));\n    return sumOfDigitsFrom1ToNUtil(n, a);\n  }\n\n  public static void main(String args[]) {\n    int n = 328;\n    System.out.println(\n        \" Sum \u2581 of \u2581 digits \u2581 in \u2581 numbers \u2581 \"\n            + \" from \u2581 1 \u2581 to \u2581 \"\n            + n\n            + \" \u2581 is \u2581 \"\n            + sumOfDigitsFrom1ToN(n));\n  }\n}\n", "python": "def sumOfDigitsFrom1ToN(n):\n    result = 0\n    for x in range(1, n + 1):\n        result = result + sumOfDigits(x)\n    return result\n\n\ndef sumOfDigits(x):\n    sum = 0\n    while x != 0:\n        sum = sum + x % 10\n        x = x // 10\n    return sum\n\n\nn = 328\nprint(\n    \" Sum \u2581 of \u2581 digits \u2581 in \u2581 numbers \u2581 from \u2581 1 \u2581 to \",\n    n,\n    \" is \",\n    sumOfDigitsFrom1ToN(n),\n)\n"}
{"text": "Count possible ways to construct buildings ", "java": "class Building {\n  static int countWays(int N) {\n    if (N == 1) return 4;\n    int countB = 1, countS = 1, prev_countB, prev_countS;\n    for (int i = 2; i <= N; i++) {\n      prev_countB = countB;\n      prev_countS = countS;\n      countS = prev_countB + prev_countS;\n      countB = prev_countS;\n    }\n    int result = countS + countB;\n    return (result * result);\n  }\n\n  public static void main(String args[]) {\n    int N = 3;\n    System.out.println(\" Count \u2581 of \u2581 ways \u2581 for \u2581 \" + N + \" \u2581 sections \u2581 is \u2581 \" + countWays(N));\n  }\n}\n", "python": "def countWays(N):\n    if N == 1:\n        return 4\n    countB = 1\n    countS = 1\n    for i in range(2, N + 1):\n        prev_countB = countB\n        prev_countS = countS\n        countS = prev_countB + prev_countS\n        countB = prev_countS\n    result = countS + countB\n    return result * result\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    print(\" Count \u2581 of \u2581 ways \u2581 for \u2581 \", N, \" \u2581 sections \u2581 is \u2581 \", countWays(N))\n"}
{"text": "Count number of ways to reach a given score in a game ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int count(int n) {\n    int table[] = new int[n + 1], i;\n    Arrays.fill(table, 0);\n    table[0] = 1;\n    for (i = 3; i <= n; i++) table[i] += table[i - 3];\n    for (i = 5; i <= n; i++) table[i] += table[i - 5];\n    for (i = 10; i <= n; i++) table[i] += table[i - 10];\n    return table[n];\n  }\n\n  public static void main(String[] args) {\n    int n = 20;\n    System.out.println(\" Count \u2581 for \u2581 \" + n + \" \u2581 is \u2581 \" + count(n));\n    n = 13;\n    System.out.println(\" Count \u2581 for \u2581 \" + n + \" \u2581 is \u2581 \" + count(n));\n  }\n}\n", "python": "def count(n):\n    table = [0 for i in range(n + 1)]\n    table[0] = 1\n    for i in range(3, n + 1):\n        table[i] += table[i - 3]\n    for i in range(5, n + 1):\n        table[i] += table[i - 5]\n    for i in range(10, n + 1):\n        table[i] += table[i - 10]\n    return table[n]\n\n\nn = 20\nprint(\" Count \u2581 for \", n, \" is \", count(n))\nn = 13\nprint(\" Count \u2581 for \", n, \" is \", count(n))\n"}
{"text": "Lucky Numbers ", "java": "import java.io.*;\n\nclass GFG {\n  public static int counter = 2;\n\n  static boolean isLucky(int n) {\n    int next_position = n;\n    if (counter > n) return true;\n    if (n % counter == 0) return false;\n    next_position -= next_position / counter;\n    counter++;\n    return isLucky(next_position);\n  }\n\n  public static void main(String[] args) {\n    int x = 5;\n    if (isLucky(x)) System.out.println(x + \" \u2581 is \u2581 a \u2581 lucky \u2581 no . \");\n    else System.out.println(x + \" \u2581 is \u2581 not \u2581 a \u2581 lucky \u2581 no . \");\n  }\n}\n", "python": "def isLucky(n):\n    next_position = n\n    if isLucky.counter > n:\n        return 1\n    if n % isLucky.counter == 0:\n        return 0\n    next_position = next_position - next_position / isLucky.counter\n    isLucky.counter = isLucky.counter + 1\n    return isLucky(next_position)\n\n\nisLucky.counter = 2\nx = 5\nif isLucky(x):\n    print x, \" is \u2581 a \u2581 Lucky \u2581 number \"\nelse:\n    print x, \" is \u2581 not \u2581 a \u2581 Lucky \u2581 number \"\n"}
{"text": "Write you own Power without using multiplication ( * ) and division ( / ) operators ", "java": "import java.io.*;\n\nclass GFG {\n  static int pow(int a, int b) {\n    if (b == 0) return 1;\n    int answer = a;\n    int increment = a;\n    int i, j;\n    for (i = 1; i < b; i++) {\n      for (j = 1; j < a; j++) {\n        answer += increment;\n      }\n      increment = answer;\n    }\n    return answer;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(pow(5, 3));\n  }\n}\n", "python": "def pow(a, b):\n    if b == 0:\n        return 1\n    answer = a\n    increment = a\n    for i in range(1, b):\n        for j in range(1, a):\n            answer += increment\n        increment = answer\n    return answer\n\n\nprint(pow(5, 3))\n"}
{"text": "Write you own Power without using multiplication ( * ) and division ( / ) operators ", "java": "import java.io.*;\n\nclass GFG {\n  static int multiply(int x, int y) {\n    if (y > 0) return (x + multiply(x, y - 1));\n    else return 0;\n  }\n\n  static int pow(int a, int b) {\n    if (b > 0) return multiply(a, pow(a, b - 1));\n    else return 1;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(pow(5, 3));\n  }\n}\n", "python": "def pow(a, b):\n    if b == 0:\n        return 1\n    answer = a\n    increment = a\n    for i in range(1, b):\n        for j in range(1, a):\n            answer += increment\n        increment = answer\n    return answer\n\n\nprint(pow(5, 3))\n"}
{"text": "Lexicographic rank of a string ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int fact(int n) {\n    return (n <= 1) ? 1 : n * fact(n - 1);\n  }\n\n  static int findSmallerInRight(String str, int low, int high) {\n    int countRight = 0, i;\n    for (i = low + 1; i <= high; ++i) if (str.charAt(i) < str.charAt(low)) ++countRight;\n    return countRight;\n  }\n\n  static int findRank(String str) {\n    int len = str.length();\n    int mul = fact(len);\n    int rank = 1;\n    int countRight;\n    for (int i = 0; i < len; ++i) {\n      mul /= len - i;\n      countRight = findSmallerInRight(str, i, len - 1);\n      rank += countRight * mul;\n    }\n    return rank;\n  }\n\n  public static void main(String[] args) {\n    String str = \" string \";\n    System.out.println(findRank(str));\n  }\n}\n", "python": "def fact(n):\n    f = 1\n    while n >= 1:\n        f = f * n\n        n = n - 1\n    return f\n\n\ndef findSmallerInRight(st, low, high):\n    countRight = 0\n    i = low + 1\n    while i <= high:\n        if st[i] < st[low]:\n            countRight = countRight + 1\n        i = i + 1\n    return countRight\n\n\ndef findRank(st):\n    ln = len(st)\n    mul = fact(ln)\n    rank = 1\n    i = 0\n    while i < ln:\n        mul = mul / (ln - i)\n        countRight = findSmallerInRight(st, i, ln - 1)\n        rank = rank + countRight * mul\n        i = i + 1\n    return rank\n\n\nst = \" string \"\nprint(findRank(st))\n"}
{"text": "Lexicographic rank of a string ", "java": "class GFG {\n  static int MAX_CHAR = 256;\n  int count[] = new int[MAX_CHAR];\n\n  static int fact(int n) {\n    return (n <= 1) ? 1 : n * fact(n - 1);\n  }\n\n  static void populateAndIncreaseCount(int[] count, char[] str) {\n    int i;\n    for (i = 0; i < str.length; ++i) ++count[str[i]];\n    for (i = 1; i < MAX_CHAR; ++i) count[i] += count[i - 1];\n  }\n\n  static void updatecount(int[] count, char ch) {\n    int i;\n    for (i = ch; i < MAX_CHAR; ++i) --count[i];\n  }\n\n  static int findRank(char[] str) {\n    int len = str.length;\n    int mul = fact(len);\n    int rank = 1, i;\n    populateAndIncreaseCount(count, str);\n    for (i = 0; i < len; ++i) {\n      mul /= len - i;\n      rank += count[str[i] - 1] * mul;\n      updatecount(count, str[i]);\n    }\n    return rank;\n  }\n\n  public static void main(String args[]) {\n    char str[] = \" string \".toCharArray();\n    System.out.println(findRank(str));\n  }\n}\n", "python": "def fact(n):\n    f = 1\n    while n >= 1:\n        f = f * n\n        n = n - 1\n    return f\n\n\ndef findSmallerInRight(st, low, high):\n    countRight = 0\n    i = low + 1\n    while i <= high:\n        if st[i] < st[low]:\n            countRight = countRight + 1\n        i = i + 1\n    return countRight\n\n\ndef findRank(st):\n    ln = len(st)\n    mul = fact(ln)\n    rank = 1\n    i = 0\n    while i < ln:\n        mul = mul / (ln - i)\n        countRight = findSmallerInRight(st, i, ln - 1)\n        rank = rank + countRight * mul\n        i = i + 1\n    return rank\n\n\nst = \" string \"\nprint(findRank(st))\n"}
{"text": "Efficient program to calculate e ^ x ", "java": "import java.io.*;\n\nclass GFG {\n  static float exponential(int n, float x) {\n    float sum = 1;\n    for (int i = n - 1; i > 0; --i) sum = 1 + x * sum / i;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    float x = 1;\n    System.out.println(\" e ^ x \u2581 = \u2581 \" + exponential(n, x));\n  }\n}\n", "python": "def exponential(n, x):\n    sum = 1.0\n    for i in range(n, 0, -1):\n        sum = 1 + x * sum / i\n    print(\" e ^ x \u2581 = \", sum)\n\n\nn = 10\nx = 1.0\nexponential(n, x)\n"}
{"text": "How to check if a given number is Fibonacci number ? ", "java": "class GFG {\n  static boolean isPerfectSquare(int x) {\n    int s = (int) Math.sqrt(x);\n    return (s * s == x);\n  }\n\n  static boolean isFibonacci(int n) {\n    return isPerfectSquare(5 * n * n + 4) || isPerfectSquare(5 * n * n - 4);\n  }\n\n  public static void main(String[] args) {\n    for (int i = 1; i <= 10; i++)\n      System.out.println(\n          isFibonacci(i)\n              ? i + \" \u2581 is \u2581 a \u2581 Fibonacci \u2581 Number \"\n              : i + \" \u2581 is \u2581 a \u2581 not \u2581 Fibonacci \u2581 Number \");\n  }\n}\n", "python": "import math\n\n\ndef isPerfectSquare(x):\n    s = int(math.sqrt(x))\n    return s * s == x\n\n\ndef isFibonacci(n):\n    return isPerfectSquare(5 * n * n + 4) or isPerfectSquare(5 * n * n - 4)\n\n\nfor i in range(1, 11):\n    if isFibonacci(i) == True:\n        print i, \" is \u2581 a \u2581 Fibonacci \u2581 Number \"\n    else:\n        print i, \" is \u2581 a \u2581 not \u2581 Fibonacci \u2581 Number \u2581 \"\n    DEDENT\n"}
{"text": "Count trailing zeroes in factorial of a number ", "java": "import java.io.*;\n\nclass GFG {\n  static int findTrailingZeros(int n) {\n    int count = 0;\n    for (int i = 5; n / i >= 1; i *= 5) count += n / i;\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 100;\n    System.out.println(\n        \" Count \u2581 of \u2581 trailing \u2581 0s \u2581 in \u2581 \" + n + \" ! \u2581 is \u2581 \" + findTrailingZeros(n));\n  }\n}\n", "python": "def findTrailingZeros(n):\n    count = 0\n    while n >= 5:\n        n //= 5\n        count += n\n    return count\n\n\nn = 100\nprint(\" Count \u2581 of \u2581 trailing \u2581 0s \u2581 \" + \" in \u2581 100 ! \u2581 is \", findTrailingZeros(n))\n"}
{"text": "Program for nth Catalan Number ", "java": "class CatalnNumber {\n  int catalan(int n) {\n    if (n <= 1) {\n      return 1;\n    }\n    int res = 0;\n    for (int i = 0; i < n; i++) {\n      res += catalan(i) * catalan(n - i - 1);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    CatalnNumber cn = new CatalnNumber();\n    for (int i = 0; i < 10; i++) {\n      System.out.print(cn.catalan(i) + \" \u2581 \");\n    }\n  }\n}\n", "python": "def catalan(n):\n    if n <= 1:\n        return 1\n    res = 0\n    for i in range(n):\n        res += catalan(i) * catalan(n - i - 1)\n    return res\n\n\nfor i in range(10):\n    print catalan(i),\n"}
{"text": "Program for nth Catalan Number ", "java": "class GFG {\n  static int catalanDP(int n) {\n    int catalan[] = new int[n + 2];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for (int i = 2; i <= n; i++) {\n      catalan[i] = 0;\n      for (int j = 0; j < i; j++) {\n        catalan[i] += catalan[j] * catalan[i - j - 1];\n      }\n    }\n    return catalan[n];\n  }\n\n  public static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n      System.out.print(catalanDP(i) + \" \u2581 \");\n    }\n  }\n}\n", "python": "def catalan(n):\n    if n <= 1:\n        return 1\n    res = 0\n    for i in range(n):\n        res += catalan(i) * catalan(n - i - 1)\n    return res\n\n\nfor i in range(10):\n    print catalan(i),\n"}
{"text": "Program for nth Catalan Number ", "java": "class GFG {\n  static long binomialCoeff(int n, int k) {\n    long res = 1;\n    if (k > n - k) {\n      k = n - k;\n    }\n    for (int i = 0; i < k; ++i) {\n      res *= (n - i);\n      res /= (i + 1);\n    }\n    return res;\n  }\n\n  static long catalan(int n) {\n    long c = binomialCoeff(2 * n, n);\n    return c / (n + 1);\n  }\n\n  public static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n      System.out.print(catalan(i) + \" \u2581 \");\n    }\n  }\n}\n", "python": "def catalan(n):\n    if n <= 1:\n        return 1\n    res = 0\n    for i in range(n):\n        res += catalan(i) * catalan(n - i - 1)\n    return res\n\n\nfor i in range(10):\n    print catalan(i),\n"}
{"text": "Program for nth Catalan Number ", "java": "import java.util.*;\n\nclass GFG {\n  static void catalan(int n) {\n    int cat_ = 1;\n    System.out.print(cat_ + \" \u2581 \");\n    for (int i = 1; i < n; i++) {\n      cat_ *= (4 * i - 2);\n      cat_ /= (i + 1);\n      System.out.print(cat_ + \" \u2581 \");\n    }\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    catalan(n);\n  }\n}\n", "python": "def catalan(n):\n    if n <= 1:\n        return 1\n    res = 0\n    for i in range(n):\n        res += catalan(i) * catalan(n - i - 1)\n    return res\n\n\nfor i in range(10):\n    print catalan(i),\n"}
{"text": "Birthday Paradox ", "java": "class GFG {\n  static double find(double p) {\n    return Math.ceil(Math.sqrt(2 * 365 * Math.log(1 / (1 - p))));\n  }\n\n  public static void main(String[] args) {\n    System.out.println(find(0.70));\n  }\n}\n", "python": "import math\n\n\ndef find(p):\n    return math.ceil(math.sqrt(2 * 365 * math.log(1 / (1 - p))))\n\n\nprint(find(0.70))\n"}
{"text": "Count Distinct Non ", "java": "import java.io.*;\n\nclass GFG {\n  static int countSolutions(int n) {\n    int res = 0;\n    for (int x = 0; x * x < n; x++) for (int y = 0; x * x + y * y < n; y++) res++;\n    return res;\n  }\n\n  public static void main(String args[]) {\n    System.out.println(\n        \" Total \u2581 Number \u2581 of \u2581 distinct \u2581 Non - Negative \u2581 pairs \u2581 is \u2581 \" + countSolutions(6));\n  }\n}\n", "python": "def countSolutions(n):\n    res = 0\n    x = 0\n    while x * x < n:\n        y = 0\n        while x * x + y * y < n:\n            res = res + 1\n            y = y + 1\n        x = x + 1\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    print(\n        \" Total \u2581 Number \u2581 of \u2581 distinct \u2581 Non - Negative \u2581 pairs \u2581 is \u2581 \",\n        countSolutions(6),\n    )\n"}
{"text": "Count Distinct Non ", "java": "import java.io.*;\n\nclass GFG {\n  static int countSolutions(int n) {\n    int x = 0, yCount, res = 0;\n    for (yCount = 0; yCount * yCount < n; yCount++)\n      ;\n    while (yCount != 0) {\n      res += yCount;\n      x++;\n      while (yCount != 0 && (x * x + (yCount - 1) * (yCount - 1) >= n)) yCount--;\n    }\n    return res;\n  }\n\n  public static void main(String args[]) {\n    System.out.println(\n        \" Total \u2581 Number \u2581 of \u2581 distinct \u2581 Non - Negative \u2581 pairs \u2581 is \u2581 \" + countSolutions(6));\n  }\n}\n", "python": "def countSolutions(n):\n    res = 0\n    x = 0\n    while x * x < n:\n        y = 0\n        while x * x + y * y < n:\n            res = res + 1\n            y = y + 1\n        x = x + 1\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    print(\n        \" Total \u2581 Number \u2581 of \u2581 distinct \u2581 Non - Negative \u2581 pairs \u2581 is \u2581 \",\n        countSolutions(6),\n    )\n"}
{"text": "Program for Newton Raphson Method ", "java": "class GFG {\n  static final double EPSILON = 0.001;\n\n  static double func(double x) {\n    return x * x * x - x * x + 2;\n  }\n\n  static double derivFunc(double x) {\n    return 3 * x * x - 2 * x;\n  }\n\n  static void newtonRaphson(double x) {\n    double h = func(x) / derivFunc(x);\n    while (Math.abs(h) >= EPSILON) {\n      h = func(x) / derivFunc(x);\n      x = x - h;\n    }\n    System.out.print(\n        \" The \u2581 value \u2581 of \u2581 the \" + \" \u2581 root \u2581 is \u2581 : \u2581 \" + Math.round(x * 100.0) / 100.0);\n  }\n\n  public static void main(String[] args) {\n    double x0 = -20;\n    newtonRaphson(x0);\n  }\n}\n", "python": "def func(x):\n    return x * x * x - x * x + 2\n\n\ndef derivFunc(x):\n    return 3 * x * x - 2 * x\n\n\ndef newtonRaphson(x):\n    h = func(x) / derivFunc(x)\n    while abs(h) >= 0.0001:\n        h = func(x) / derivFunc(x)\n        x = x - h\n    print(\" The \u2581 value \u2581 of \u2581 the \u2581 root \u2581 is \u2581 : \u2581 \", \" % .4f \" % x)\n\n\nx0 = -20\nnewtonRaphson(x0)\n"}
{"text": "Find the element that appears once ", "java": "class GFG {\n  static int getSingle(int arr[], int n) {\n    int ones = 0, twos = 0;\n    int common_bit_mask;\n    for (int i = 0; i < n; i++) {\n      twos = twos | (ones & arr[i]);\n      ones = ones ^ arr[i];\n      common_bit_mask = ~(ones & twos);\n      ones &= common_bit_mask;\n      twos &= common_bit_mask;\n    }\n    return ones;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {3, 3, 2, 3};\n    int n = arr.length;\n    System.out.println(\" The \u2581 element \u2581 with \u2581 single \u2581 occurrence \u2581 is \u2581 \" + getSingle(arr, n));\n  }\n}\n", "python": "def getSingle(arr, n):\n    ones = 0\n    twos = 0\n    for i in range(n):\n        twos = twos | (ones & arr[i])\n        ones = ones ^ arr[i]\n        common_bit_mask = ~(ones & twos)\n        ones &= common_bit_mask\n        twos &= common_bit_mask\n    return ones\n\n\narr = [3, 3, 2, 3]\nn = len(arr)\nprint(\" The \u2581 element \u2581 with \u2581 single \u2581 occurrence \u2581 is \u2581 \", getSingle(arr, n))\n"}
{"text": "Find the element that appears once ", "java": "class GFG {\n  static final int INT_SIZE = 32;\n\n  static int getSingle(int arr[], int n) {\n    int result = 0;\n    int x, sum;\n    for (int i = 0; i < INT_SIZE; i++) {\n      sum = 0;\n      x = (1 << i);\n      for (int j = 0; j < n; j++) {\n        if ((arr[j] & x) == 0) sum++;\n      }\n      if ((sum % 3) != 0) result |= x;\n    }\n    return result;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {12, 1, 12, 3, 12, 1, 1, 2, 3, 2, 2, 3, 7};\n    int n = arr.length;\n    System.out.println(\" The \u2581 element \u2581 with \u2581 single \u2581 occurrence \u2581 is \u2581 \" + getSingle(arr, n));\n  }\n}\n", "python": "def getSingle(arr, n):\n    ones = 0\n    twos = 0\n    for i in range(n):\n        twos = twos | (ones & arr[i])\n        ones = ones ^ arr[i]\n        common_bit_mask = ~(ones & twos)\n        ones &= common_bit_mask\n        twos &= common_bit_mask\n    return ones\n\n\narr = [3, 3, 2, 3]\nn = len(arr)\nprint(\" The \u2581 element \u2581 with \u2581 single \u2581 occurrence \u2581 is \u2581 \", getSingle(arr, n))\n"}
{"text": "Detect if two integers have opposite signs ", "java": "class GFG {\n  static boolean oppositeSigns(int x, int y) {\n    return ((x ^ y) < 0);\n  }\n\n  public static void main(String[] args) {\n    int x = 100, y = -100;\n    if (oppositeSigns(x, y) == true) System.out.println(\" Signs \u2581 are \u2581 opposite \");\n    else System.out.println(\" Signs \u2581 are \u2581 not \u2581 opposite \");\n  }\n}\n", "python": "def oppositeSigns(x, y):\n    return (x ^ y) < 0\n\n\nx = 100\ny = 1\nif oppositeSigns(x, y) == True:\n    print \" Signs \u2581 are \u2581 opposite \"\nelse:\n    print \" Signs \u2581 are \u2581 not \u2581 opposite \"\n"}
{"text": "Count total set bits in all numbers from 1 to n ", "java": "class GFG {\n  static int countSetBits(int n) {\n    int bitCount = 0;\n    for (int i = 1; i <= n; i++) bitCount += countSetBitsUtil(i);\n    return bitCount;\n  }\n\n  static int countSetBitsUtil(int x) {\n    if (x <= 0) return 0;\n    return (x % 2 == 0 ? 0 : 1) + countSetBitsUtil(x / 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.print(\" Total \u2581 set \u2581 bit \u2581 count \u2581 is \u2581 \");\n    System.out.print(countSetBits(n));\n  }\n}\n", "python": "def countSetBits(n):\n    n += 1\n    powerOf2 = 2\n    cnt = n // 2\n    while powerOf2 <= n:\n        totalPairs = n // powerOf2\n        cnt += (totalPairs // 2) * powerOf2\n        if totalPairs & 1:\n            cnt += n % powerOf2\n        else:\n            cnt += 0\n        powerOf2 <<= 1\n    return cnt\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 14\n    print(countSetBits(n))\n"}
{"text": "Count total set bits in all numbers from 1 to n ", "java": "public class GFG {\n  static int countSetBits(int n) {\n    int i = 0;\n    int ans = 0;\n    while ((1 << i) <= n) {\n      boolean k = false;\n      int change = 1 << i;\n      for (int j = 0; j <= n; j++) {\n        if (k == true) ans += 1;\n        else ans += 0;\n        if (change == 1) {\n          k = !k;\n          change = 1 << i;\n        } else {\n          change--;\n        }\n      }\n      i++;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 17;\n    System.out.println(countSetBits(n));\n  }\n}\n", "python": "def countSetBits(n):\n    n += 1\n    powerOf2 = 2\n    cnt = n // 2\n    while powerOf2 <= n:\n        totalPairs = n // powerOf2\n        cnt += (totalPairs // 2) * powerOf2\n        if totalPairs & 1:\n            cnt += n % powerOf2\n        else:\n            cnt += 0\n        powerOf2 <<= 1\n    return cnt\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 14\n    print(countSetBits(n))\n"}
{"text": "Count total set bits in all numbers from 1 to n ", "java": "import java.io.*;\n\nclass GFG {\n  static int getLeftmostBit(int n) {\n    int m = 0;\n    while (n > 1) {\n      n = n >> 1;\n      m++;\n    }\n    return m;\n  }\n\n  static int getNextLeftmostBit(int n, int m) {\n    int temp = 1 << m;\n    while (n < temp) {\n      temp = temp >> 1;\n      m--;\n    }\n    return m;\n  }\n\n  static int countSetBits(int n) {\n    int m = getLeftmostBit(n);\n    return countSetBits(n, m);\n  }\n\n  static int countSetBits(int n, int m) {\n    if (n == 0) return 0;\n    m = getNextLeftmostBit(n, m);\n    if (n == ((int) 1 << (m + 1)) - 1) return (int) (m + 1) * (1 << m);\n    n = n - (1 << m);\n    return (n + 1) + countSetBits(n) + m * (1 << (m - 1));\n  }\n\n  public static void main(String[] args) {\n    int n = 17;\n    System.out.println(\" Total \u2581 set \u2581 bit \u2581 count \u2581 is \u2581 \" + countSetBits(n));\n  }\n}\n", "python": "def countSetBits(n):\n    n += 1\n    powerOf2 = 2\n    cnt = n // 2\n    while powerOf2 <= n:\n        totalPairs = n // powerOf2\n        cnt += (totalPairs // 2) * powerOf2\n        if totalPairs & 1:\n            cnt += n % powerOf2\n        else:\n            cnt += 0\n        powerOf2 <<= 1\n    return cnt\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 14\n    print(countSetBits(n))\n"}
{"text": "Swap bits in a given number ", "java": "class GFG {\n  static int swapBits(int x, int p1, int p2, int n) {\n    int set1 = (x >> p1) & ((1 << n) - 1);\n    int set2 = (x >> p2) & ((1 << n) - 1);\n    int xor = (set1 ^ set2);\n    xor = (xor << p1) | (xor << p2);\n    int result = x ^ xor;\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int res = swapBits(28, 0, 3, 2);\n    System.out.println(\" Result \u2581 = \u2581 \" + res);\n  }\n}\n", "python": "def swapBits(x, p1, p2, n):\n    set1 = (x >> p1) & ((1 << n) - 1)\n    set2 = (x >> p2) & ((1 << n) - 1)\n    xor = set1 ^ set2\n    xor = (xor << p1) | (xor << p2)\n    result = x ^ xor\n    return result\n\n\nres = swapBits(28, 0, 3, 2)\nprint(\" Result \u2581 = \", res)\n"}
{"text": "Swap bits in a given number ", "java": "class GFG {\n  static int swapBits(int num, int p1, int p2, int n) {\n    int shift1, shift2, value1, value2;\n    while (n-- > 0) {\n      shift1 = 1 << p1;\n      shift2 = 1 << p2;\n      value1 = ((num & shift1));\n      value2 = ((num & shift2));\n      if ((value1 == 0 && value2 != 0) || (value2 == 0 && value1 != 0)) {\n        if (value1 != 0) {\n          num = num & (~shift1);\n          num = num | shift2;\n        } else {\n          num = num & (~shift2);\n          num = num | shift1;\n        }\n      }\n      p1++;\n      p2++;\n    }\n    return num;\n  }\n\n  public static void main(String[] args) {\n    int res = swapBits(28, 0, 3, 2);\n    System.out.println(\" Result \u2581 = \u2581 \" + res);\n  }\n}\n", "python": "def swapBits(x, p1, p2, n):\n    set1 = (x >> p1) & ((1 << n) - 1)\n    set2 = (x >> p2) & ((1 << n) - 1)\n    xor = set1 ^ set2\n    xor = (xor << p1) | (xor << p2)\n    result = x ^ xor\n    return result\n\n\nres = swapBits(28, 0, 3, 2)\nprint(\" Result \u2581 = \", res)\n"}
{"text": "Smallest of three integers without comparison operators ", "java": "class GFG {\n  static int smallest(int x, int y, int z) {\n    int c = 0;\n    while (x != 0 && y != 0 && z != 0) {\n      x--;\n      y--;\n      z--;\n      c++;\n    }\n    return c;\n  }\n\n  public static void main(String[] args) {\n    int x = 12, y = 15, z = 5;\n    System.out.printf(\" Minimum \u2581 of \u2581 3\" + \" \u2581 numbers \u2581 is \u2581 % d \", smallest(x, y, z));\n  }\n}\n", "python": "def smallest(x, y, z):\n    c = 0\n    while x and y and z:\n        x = x - 1\n        y = y - 1\n        z = z - 1\n        c = c + 1\n    return c\n\n\nx = 12\ny = 15\nz = 5\nprint(\" Minimum \u2581 of \u2581 3 \u2581 numbers \u2581 is \", smallest(x, y, z))\n"}
{"text": "Smallest of three integers without comparison operators ", "java": "class GFG {\n  static int CHAR_BIT = 8;\n\n  static int min(int x, int y) {\n    return y + ((x - y) & ((x - y) >> ((Integer.SIZE / 8) * CHAR_BIT - 1)));\n  }\n\n  static int smallest(int x, int y, int z) {\n    return Math.min(x, Math.min(y, z));\n  }\n\n  public static void main(String[] args) {\n    int x = 12, y = 15, z = 5;\n    System.out.println(\" Minimum \u2581 of \u2581 3 \u2581 numbers \u2581 is \u2581 \" + smallest(x, y, z));\n  }\n}\n", "python": "def smallest(x, y, z):\n    c = 0\n    while x and y and z:\n        x = x - 1\n        y = y - 1\n        z = z - 1\n        c = c + 1\n    return c\n\n\nx = 12\ny = 15\nz = 5\nprint(\" Minimum \u2581 of \u2581 3 \u2581 numbers \u2581 is \", smallest(x, y, z))\n"}
{"text": "Smallest of three integers without comparison operators ", "java": "class GfG {\n  static int smallest(int x, int y, int z) {\n    if ((y / x) != 1) return ((y / z) != 1) ? y : z;\n    return ((x / z) != 1) ? x : z;\n  }\n\n  public static void main(String[] args) {\n    int x = 78, y = 88, z = 68;\n    System.out.printf(\" Minimum \u2581 of \u2581 3 \u2581 numbers \" + \" \u2581 is \u2581 % d \", smallest(x, y, z));\n  }\n}\n", "python": "def smallest(x, y, z):\n    c = 0\n    while x and y and z:\n        x = x - 1\n        y = y - 1\n        z = z - 1\n        c = c + 1\n    return c\n\n\nx = 12\ny = 15\nz = 5\nprint(\" Minimum \u2581 of \u2581 3 \u2581 numbers \u2581 is \", smallest(x, y, z))\n"}
{"text": "A Boolean Array Puzzle ", "java": "import java.io.*;\n\nclass GFG {\n  public static void changeToZero(int a[]) {\n    a[a[1]] = a[1 - a[1]];\n  }\n\n  public static void main(String args[]) {\n    int[] arr;\n    arr = new int[2];\n    arr[0] = 1;\n    arr[1] = 0;\n    changeToZero(arr);\n    System.out.println(\" arr [ 0 ] = \u2581 \" + arr[0]);\n    System.out.println(\" arr [ 1 ] = \u2581 \" + arr[1]);\n  }\n}\n", "python": "def changeToZero(a):\n    a[a[1]] = a[not a[1]]\n    return a\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [1, 0]\n    a = changeToZero(a)\n    print(\" \u2581 arr [ 0 ] \u2581 = \u2581 \" + str(a[0]))\n    print(\" \u2581 arr [ 1 ] \u2581 = \u2581 \" + str(a[1]))\n"}
{"text": "Next higher number with same number of set bits ", "java": "class GFG {\n  static int snoob(int x) {\n    int rightOne, nextHigherOneBit, rightOnesPattern, next = 0;\n    if (x > 0) {\n      rightOne = x & -x;\n      nextHigherOneBit = x + rightOne;\n      rightOnesPattern = x ^ nextHigherOneBit;\n      rightOnesPattern = (rightOnesPattern) / rightOne;\n      rightOnesPattern >>= 2;\n      next = nextHigherOneBit | rightOnesPattern;\n    }\n    return next;\n  }\n\n  public static void main(String[] args) {\n    int x = 156;\n    System.out.println(\n        \" Next \u2581 higher \u2581 number \u2581 with \u2581 same \" + \" number \u2581 of \u2581 set \u2581 bits \u2581 is \u2581 \" + snoob(x));\n  }\n}\n", "python": "def snoob(x):\n    next = 0\n    if x:\n        rightOne = x & -(x)\n        nextHigherOneBit = x + int(rightOne)\n        rightOnesPattern = x ^ int(nextHigherOneBit)\n        rightOnesPattern = int(rightOnesPattern) / int(rightOne)\n        rightOnesPattern = int(rightOnesPattern) >> 2\n        next = nextHigherOneBit | rightOnesPattern\n    return next\n\n\nx = 156\nprint(\n    \" Next \u2581 higher \u2581 number \u2581 with \u2581 \" + \" same \u2581 number \u2581 of \u2581 set \u2581 bits \u2581 is \",\n    snoob(x),\n)\n"}
{"text": "Add 1 to a given number ", "java": "class GFG {\n  static int addOne(int x) {\n    int m = 1;\n    while ((int) (x & m) >= 1) {\n      x = x ^ m;\n      m <<= 1;\n    }\n    x = x ^ m;\n    return x;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(addOne(13));\n  }\n}\n", "python": "def addOne(x):\n    m = 1\n    while x & m:\n        x = x ^ m\n        m <<= 1\n    x = x ^ m\n    return x\n\n\nn = 13\nprint addOne(n)\n"}
{"text": "Add 1 to a given number ", "java": "class GFG {\n  static int addOne(int x) {\n    return (-(~x));\n  }\n\n  public static void main(String[] args) {\n    System.out.printf(\" % d \", addOne(13));\n  }\n}\n", "python": "def addOne(x):\n    m = 1\n    while x & m:\n        x = x ^ m\n        m <<= 1\n    x = x ^ m\n    return x\n\n\nn = 13\nprint addOne(n)\n"}
{"text": "Multiply a given Integer with 3.5 ", "java": "class GFG {\n  static int multiplyWith3Point5(int x) {\n    return (x << 1) + x + (x >> 1);\n  }\n\n  public static void main(String[] args) {\n    int x = 2;\n    System.out.println(multiplyWith3Point5(x));\n  }\n}\n", "python": "def multiplyWith3Point5(x):\n    return (x << 1) + x + (x >> 1)\n\n\nx = 4\nprint(multiplyWith3Point5(x))\n"}
{"text": "Multiply a given Integer with 3.5 ", "java": "import java.io.*;\n\nclass GFG {\n  static int multiplyWith3Point5(int x) {\n    int r = 0;\n    int x1Shift = x << 1;\n    int x2Shifts = x << 2;\n    r = (x ^ x1Shift) ^ x2Shifts;\n    int c = (x & x1Shift) | (x & x2Shifts) | (x1Shift & x2Shifts);\n    while (c > 0) {\n      c <<= 1;\n      int t = r;\n      r ^= c;\n      c &= t;\n    }\n    r = r >> 1;\n    return r;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(multiplyWith3Point5(5));\n  }\n}\n", "python": "def multiplyWith3Point5(x):\n    return (x << 1) + x + (x >> 1)\n\n\nx = 4\nprint(multiplyWith3Point5(x))\n"}
{"text": "Turn off the rightmost set bit ", "java": "class GFG {\n  static int fun(int n) {\n    return n & (n - 1);\n  }\n\n  public static void main(String arg[]) {\n    int n = 7;\n    System.out.print(\n        \" The \u2581 number \u2581 after \u2581 unsetting \u2581 \" + \" the \u2581 rightmost \u2581 set \u2581 bit \u2581 \" + fun(n));\n  }\n}\n", "python": "def fun(n):\n    return n & (n - 1)\n\n\nn = 7\nprint(\" The \u2581 number \u2581 after \u2581 unsetting \u2581 the \u2581 rightmost \u2581 set \u2581 bit \", fun(n))\n"}
{"text": "Find whether a given number is a power of 4 or not ", "java": "class GFG {\n  static int isPowerOfFour(int n) {\n    if (n == 0) return 0;\n    while (n != 1) {\n      if (n % 4 != 0) return 0;\n      n = n / 4;\n    }\n    return 1;\n  }\n\n  public static void main(String[] args) {\n    int test_no = 64;\n    if (isPowerOfFour(test_no) == 1) System.out.println(test_no + \" \u2581 is \u2581 a \u2581 power \u2581 of \u2581 4\");\n    else System.out.println(test_no + \" is \u2581 not \u2581 a \u2581 power \u2581 of \u2581 4\");\n  }\n}\n", "python": "def isPowerOfFour(n):\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 4 != 0:\n            return False\n        n = n // 4\n    return True\n\n\ntest_no = 64\nif isPowerOfFour(64):\n    print(test_no, \" is \u2581 a \u2581 power \u2581 of \u2581 4\")\nelse:\n    print(test_no, \" is \u2581 not \u2581 a \u2581 power \u2581 of \u2581 4\")\n"}
{"text": "Find whether a given number is a power of 4 or not ", "java": "import java.io.*;\n\nclass GFG {\n  static int isPowerOfFour(int n) {\n    int count = 0;\n    int x = n & (n - 1);\n    if (n > 0 && x == 0) {\n      while (n > 1) {\n        n >>= 1;\n        count += 1;\n      }\n      return (count % 2 == 0) ? 1 : 0;\n    }\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int test_no = 64;\n    if (isPowerOfFour(test_no) > 0) System.out.println(test_no + \" \u2581 is \u2581 a \u2581 power \u2581 of \u2581 4\");\n    else System.out.println(test_no + \" \u2581 is \u2581 not \u2581 a \u2581 power \u2581 of \u2581 4\");\n  }\n}\n", "python": "def isPowerOfFour(n):\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 4 != 0:\n            return False\n        n = n // 4\n    return True\n\n\ntest_no = 64\nif isPowerOfFour(64):\n    print(test_no, \" is \u2581 a \u2581 power \u2581 of \u2581 4\")\nelse:\n    print(test_no, \" is \u2581 not \u2581 a \u2581 power \u2581 of \u2581 4\")\n"}
{"text": "Find whether a given number is a power of 4 or not ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isPowerOfFour(int n) {\n    return n != 0 && ((n & (n - 1)) == 0) && (n & 0xAAAAAAAA) == 0;\n  }\n\n  public static void main(String[] args) {\n    int test_no = 64;\n    if (isPowerOfFour(test_no)) System.out.println(test_no + \" \u2581 is \u2581 a \u2581 power \u2581 of \u2581 4\");\n    else System.out.println(test_no + \" \u2581 is \u2581 not \u2581 a \u2581 power \u2581 of \u2581 4\");\n  }\n}\n", "python": "def isPowerOfFour(n):\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 4 != 0:\n            return False\n        n = n // 4\n    return True\n\n\ntest_no = 64\nif isPowerOfFour(64):\n    print(test_no, \" is \u2581 a \u2581 power \u2581 of \u2581 4\")\nelse:\n    print(test_no, \" is \u2581 not \u2581 a \u2581 power \u2581 of \u2581 4\")\n"}
{"text": "Find whether a given number is a power of 4 or not ", "java": "import java.util.*;\n\nclass GFG {\n  static double logn(int n, int r) {\n    return Math.log(n) / Math.log(r);\n  }\n\n  static boolean isPowerOfFour(int n) {\n    if (n == 0) return false;\n    return Math.floor(logn(n, 4)) == Math.ceil(logn(n, 4));\n  }\n\n  public static void main(String[] args) {\n    int test_no = 64;\n    if (isPowerOfFour(test_no)) System.out.print(test_no + \" \u2581 is \u2581 a \u2581 power \u2581 of \u2581 4\");\n    else System.out.print(test_no + \" \u2581 is \u2581 not \u2581 a \u2581 power \u2581 of \u2581 4\");\n  }\n}\n", "python": "def isPowerOfFour(n):\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 4 != 0:\n            return False\n        n = n // 4\n    return True\n\n\ntest_no = 64\nif isPowerOfFour(64):\n    print(test_no, \" is \u2581 a \u2581 power \u2581 of \u2581 4\")\nelse:\n    print(test_no, \" is \u2581 not \u2581 a \u2581 power \u2581 of \u2581 4\")\n"}
{"text": "Compute the minimum or maximum of two integers without branching ", "java": "public class AWS {\n  static int min(int x, int y) {\n    return y ^ ((x ^ y) & -(x << y));\n  }\n\n  static int max(int x, int y) {\n    return x ^ ((x ^ y) & -(x << y));\n  }\n\n  public static void main(String[] args) {\n    int x = 15;\n    int y = 6;\n    System.out.print(\" Minimum \u2581 of \u2581 \" + x + \" \u2581 and \u2581 \" + y + \" \u2581 is \u2581 \");\n    System.out.println(min(x, y));\n    System.out.print(\" Maximum \u2581 of \u2581 \" + x + \" \u2581 and \u2581 \" + y + \" \u2581 is \u2581 \");\n    System.out.println(max(x, y));\n  }\n}\n", "python": "def min(x, y):\n    return y ^ ((x ^ y) & -(x < y))\n\n\ndef max(x, y):\n    return x ^ ((x ^ y) & -(x < y))\n\n\nx = 15\ny = 6\nprint(\" Minimum \u2581 of \", x, \" and \", y, \" is \", end=\" \u2581 \")\nprint(min(x, y))\nprint(\" Maximum \u2581 of \", x, \" and \", y, \" is \", end=\" \u2581 \")\nprint(max(x, y))\n"}
{"text": "Compute the minimum or maximum of two integers without branching ", "java": "class GFG {\n  static int CHAR_BIT = 4;\n  static int INT_BIT = 8;\n\n  static int min(int x, int y) {\n    return y + ((x - y) & ((x - y) >> (INT_BIT * CHAR_BIT - 1)));\n  }\n\n  static int max(int x, int y) {\n    return x - ((x - y) & ((x - y) >> (INT_BIT * CHAR_BIT - 1)));\n  }\n\n  public static void main(String[] args) {\n    int x = 15;\n    int y = 6;\n    System.out.println(\" Minimum \u2581 of \u2581 \" + x + \" \u2581 and \u2581 \" + y + \" \u2581 is \u2581 \" + min(x, y));\n    System.out.println(\" Maximum \u2581 of \u2581 \" + x + \" \u2581 and \u2581 \" + y + \" \u2581 is \u2581 \" + max(x, y));\n  }\n}\n", "python": "def min(x, y):\n    return y ^ ((x ^ y) & -(x < y))\n\n\ndef max(x, y):\n    return x ^ ((x ^ y) & -(x < y))\n\n\nx = 15\ny = 6\nprint(\" Minimum \u2581 of \", x, \" and \", y, \" is \", end=\" \u2581 \")\nprint(min(x, y))\nprint(\" Maximum \u2581 of \", x, \" and \", y, \" is \", end=\" \u2581 \")\nprint(max(x, y))\n"}
{"text": "Compute the minimum or maximum of two integers without branching ", "java": "import java.io.*;\n\nclass GFG {\n  public static int absbit32(int x, int y) {\n    int sub = x - y;\n    int mask = (sub >> 31);\n    return (sub ^ mask) - mask;\n  }\n\n  public static int max(int x, int y) {\n    int abs = absbit32(x, y);\n    return (x + y + abs) / 2;\n  }\n\n  public static int min(int x, int y) {\n    int abs = absbit32(x, y);\n    return (x + y - abs) / 2;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(max(2, 3));\n    System.out.println(max(2, -3));\n    System.out.println(max(-2, -3));\n    System.out.println(min(2, 3));\n    System.out.println(min(2, -3));\n    System.out.println(min(-2, -3));\n  }\n}\n", "python": "def min(x, y):\n    return y ^ ((x ^ y) & -(x < y))\n\n\ndef max(x, y):\n    return x ^ ((x ^ y) & -(x < y))\n\n\nx = 15\ny = 6\nprint(\" Minimum \u2581 of \", x, \" and \", y, \" is \", end=\" \u2581 \")\nprint(min(x, y))\nprint(\" Maximum \u2581 of \", x, \" and \", y, \" is \", end=\" \u2581 \")\nprint(max(x, y))\n"}
{"text": "Count number of bits to be flipped to convert A to B ", "java": "import java.util.*;\n\nclass Count {\n  public static int countSetBits(int n) {\n    int count = 0;\n    while (n != 0) {\n      count++;\n      n &= (n - 1);\n    }\n    return count;\n  }\n\n  public static int FlippedCount(int a, int b) {\n    return countSetBits(a ^ b);\n  }\n\n  public static void main(String[] args) {\n    int a = 10;\n    int b = 20;\n    System.out.print(FlippedCount(a, b));\n  }\n}\n", "python": "def countSetBits(n):\n    count = 0\n    while n:\n        count += 1\n        n &= n - 1\n    return count\n\n\ndef FlippedCount(a, b):\n    return countSetBits(a ^ b)\n\n\na = 10\nb = 20\nprint(FlippedCount(a, b))\n"}
{"text": "Position of rightmost set bit ", "java": "class GFG {\n  public static int getFirstSetBitPos(int n) {\n    return (int) ((Math.log10(n & -n)) / Math.log10(2)) + 1;\n  }\n\n  public static void main(String[] args) {\n    int n = 12;\n    System.out.println(getFirstSetBitPos(n));\n  }\n}\n", "python": "import math\n\n\ndef getFirstSetBitPos(n):\n    return math.log2(n & -n) + 1\n\n\nn = 12\nprint(int(getFirstSetBitPos(n)))\n"}
{"text": "Position of rightmost set bit ", "java": "class GFG {\n  static int PositionRightmostSetbit(int n) {\n    int position = 1;\n    int m = 1;\n    while ((n & m) == 0) {\n      m = m << 1;\n      position++;\n    }\n    return position;\n  }\n\n  public static void main(String[] args) {\n    int n = 16;\n    System.out.println(PositionRightmostSetbit(n));\n  }\n}\n", "python": "import math\n\n\ndef getFirstSetBitPos(n):\n    return math.log2(n & -n) + 1\n\n\nn = 12\nprint(int(getFirstSetBitPos(n)))\n"}
{"text": "Position of rightmost set bit ", "java": "public class GFG {\n  static int INT_SIZE = 32;\n\n  static int Right_most_setbit(int num) {\n    int pos = 1;\n    for (int i = 0; i < INT_SIZE; i++) {\n      if ((num & (1 << i)) == 0) pos++;\n      else break;\n    }\n    return pos;\n  }\n\n  public static void main(String[] args) {\n    int num = 18;\n    int pos = Right_most_setbit(num);\n    System.out.println(pos);\n  }\n}\n", "python": "import math\n\n\ndef getFirstSetBitPos(n):\n    return math.log2(n & -n) + 1\n\n\nn = 12\nprint(int(getFirstSetBitPos(n)))\n"}
{"text": "Position of rightmost set bit ", "java": "import java.io.*;\n\nclass GFG {\n  public static int Last_set_bit(int n) {\n    int p = 1;\n    while (n > 0) {\n      if ((n & 1) > 0) {\n        return p;\n      }\n      p++;\n      n = n >> 1;\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int n = 18;\n    int pos = Last_set_bit(n);\n    if (pos != -1) System.out.println(pos);\n    else System.out.println(\"0\");\n  }\n}\n", "python": "import math\n\n\ndef getFirstSetBitPos(n):\n    return math.log2(n & -n) + 1\n\n\nn = 12\nprint(int(getFirstSetBitPos(n)))\n"}
{"text": "Find position of the only set bit ", "java": "class GFG {\n  static boolean isPowerOfTwo(int n) {\n    return (n > 0 && ((n & (n - 1)) == 0)) ? true : false;\n  }\n\n  static int findPosition(int n) {\n    if (!isPowerOfTwo(n)) return -1;\n    int i = 1, pos = 1;\n    while ((i & n) == 0) {\n      i = i << 1;\n      ++pos;\n    }\n    return pos;\n  }\n\n  public static void main(String[] args) {\n    int n = 16;\n    int pos = findPosition(n);\n    if (pos == -1) System.out.println(\" n \u2581 = \u2581 \" + n + \" , \u2581 Invalid \u2581 number \");\n    else System.out.println(\" n \u2581 = \u2581 \" + n + \" , \u2581 Position \u2581 \" + pos);\n    n = 12;\n    pos = findPosition(n);\n    if (pos == -1) System.out.println(\" n \u2581 = \u2581 \" + n + \" , \u2581 Invalid \u2581 number \");\n    else System.out.println(\" n \u2581 = \u2581 \" + n + \" , \u2581 Position \u2581 \" + pos);\n    n = 128;\n    pos = findPosition(n);\n    if (pos == -1) System.out.println(\" n \u2581 = \u2581 \" + n + \" , \u2581 Invalid \u2581 number \");\n    else System.out.println(\" n \u2581 = \u2581 \" + n + \" , \u2581 Position \u2581 \" + pos);\n  }\n}\n", "python": "def isPowerOfTwo(n):\n    return True if (n > 0 and ((n & (n - 1)) > 0)) else False\n\n\ndef findPosition(n):\n    if isPowerOfTwo(n) == True:\n        return -1\n    i = 1\n    pos = 1\n    while (i & n) == 0:\n        i = i << 1\n        pos += 1\n    return pos\n\n\nn = 16\npos = findPosition(n)\nif pos == -1:\n    print(\" n \u2581 = \", n, \" , \u2581 Invalid \u2581 number \")\nelse:\n    print(\" n \u2581 = \", n, \" , \u2581 Position \u2581 \", pos)\nn = 12\npos = findPosition(n)\nif pos == -1:\n    print(\" n \u2581 = \", n, \" , \u2581 Invalid \u2581 number \")\nelse:\n    print(\" n \u2581 = \", n, \" , \u2581 Position \u2581 \", pos)\nn = 128\npos = findPosition(n)\nif pos == -1:\n    print(\" n \u2581 = \", n, \" , \u2581 Invalid \u2581 number \")\nelse:\n    print(\" n \u2581 = \", n, \" , \u2581 Position \u2581 \", pos)\n"}
{"text": "Find position of the only set bit ", "java": "class GFG {\n  static boolean isPowerOfTwo(int n) {\n    return n > 0 && ((n & (n - 1)) == 0);\n  }\n\n  static int findPosition(int n) {\n    if (!isPowerOfTwo(n)) return -1;\n    int count = 0;\n    while (n > 0) {\n      n = n >> 1;\n      ++count;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 0;\n    int pos = findPosition(n);\n    if (pos == -1) System.out.println(\" n \u2581 = \u2581 \" + n + \" , \u2581 Invalid \u2581 number \");\n    else System.out.println(\" n \u2581 = \u2581 \" + n + \" , \u2581 Position \u2581 \" + pos);\n    n = 12;\n    pos = findPosition(n);\n    if (pos == -1) System.out.println(\" n \u2581 = \u2581 \" + n + \" , \u2581 Invalid \u2581 number \");\n    else System.out.println(\" n \u2581 = \u2581 \" + n + \" , \u2581 Position \u2581 \" + pos);\n    n = 128;\n    pos = findPosition(n);\n    if (pos == -1) System.out.println(\" n \u2581 = \u2581 \" + n + \" , \u2581 Invalid \u2581 number \");\n    else System.out.println(\" n \u2581 = \u2581 \" + n + \" , \u2581 Position \u2581 \" + pos);\n  }\n}\n", "python": "def isPowerOfTwo(n):\n    return True if (n > 0 and ((n & (n - 1)) > 0)) else False\n\n\ndef findPosition(n):\n    if isPowerOfTwo(n) == True:\n        return -1\n    i = 1\n    pos = 1\n    while (i & n) == 0:\n        i = i << 1\n        pos += 1\n    return pos\n\n\nn = 16\npos = findPosition(n)\nif pos == -1:\n    print(\" n \u2581 = \", n, \" , \u2581 Invalid \u2581 number \")\nelse:\n    print(\" n \u2581 = \", n, \" , \u2581 Position \u2581 \", pos)\nn = 12\npos = findPosition(n)\nif pos == -1:\n    print(\" n \u2581 = \", n, \" , \u2581 Invalid \u2581 number \")\nelse:\n    print(\" n \u2581 = \", n, \" , \u2581 Position \u2581 \", pos)\nn = 128\npos = findPosition(n)\nif pos == -1:\n    print(\" n \u2581 = \", n, \" , \u2581 Invalid \u2581 number \")\nelse:\n    print(\" n \u2581 = \", n, \" , \u2581 Position \u2581 \", pos)\n"}
{"text": "How to swap two numbers without using a temporary variable ? ", "java": "import java.io.*;\n\nclass GFG {\n  public static void main(String[] args) {\n    int x = 10;\n    int y = 5;\n    x = x * y;\n    y = x / y;\n    x = x / y;\n    System.out.println(\" After \u2581 swaping : \" + \" \u2581 x \u2581 = \u2581 \" + x + \" , \u2581 y \u2581 = \u2581 \" + y);\n  }\n}\n", "python": "x = 10\ny = 5\nx = x * y\ny = x // y\nx = x // y\nprint(\" After \u2581 Swapping : \u2581 x \u2581 = \", x, \" \u2581 y \u2581 = \", y)\n"}
{"text": "How to swap two numbers without using a temporary variable ? ", "java": "import java.io.*;\n\npublic class GFG {\n  public static void main(String a[]) {\n    int x = 10;\n    int y = 5;\n    x = x ^ y;\n    y = x ^ y;\n    x = x ^ y;\n    System.out.println(\" After \u2581 swap : \u2581 x \u2581 = \u2581 \" + x + \" , \u2581 y \u2581 = \u2581 \" + y);\n  }\n}\n", "python": "x = 10\ny = 5\nx = x * y\ny = x // y\nx = x // y\nprint(\" After \u2581 Swapping : \u2581 x \u2581 = \", x, \" \u2581 y \u2581 = \", y)\n"}
{"text": "How to swap two numbers without using a temporary variable ? ", "java": "class GFG {\n  static void swap(int[] xp, int[] yp) {\n    xp[0] = xp[0] ^ yp[0];\n    yp[0] = xp[0] ^ yp[0];\n    xp[0] = xp[0] ^ yp[0];\n  }\n\n  public static void main(String[] args) {\n    int[] x = {10};\n    swap(x, x);\n    System.out.println(\" After \u2581 swap ( & x , \u2581 & x ) : \u2581 x \u2581 = \u2581 \" + x[0]);\n  }\n}\n", "python": "x = 10\ny = 5\nx = x * y\ny = x // y\nx = x // y\nprint(\" After \u2581 Swapping : \u2581 x \u2581 = \", x, \" \u2581 y \u2581 = \", y)\n"}
{"text": "Given two strings , find if first string is a subsequence of second ", "java": "import java.io.*;\n\nclass SubSequence {\n  static boolean isSubSequence(String str1, String str2, int m, int n) {\n    if (m == 0) return true;\n    if (n == 0) return false;\n    if (str1.charAt(m - 1) == str2.charAt(n - 1)) return isSubSequence(str1, str2, m - 1, n - 1);\n    return isSubSequence(str1, str2, m, n - 1);\n  }\n\n  public static void main(String[] args) {\n    String str1 = \" gksrek \";\n    String str2 = \" geeksforgeeks \";\n    int m = str1.length();\n    int n = str2.length();\n    boolean res = isSubSequence(str1, str2, m, n);\n    if (res) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isSubSequence(string1, string2, m, n):\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n    if string1[m - 1] == string2[n - 1]:\n        return isSubSequence(string1, string2, m - 1, n - 1)\n    return isSubSequence(string1, string2, m, n - 1)\n\n\nstring1 = \" gksrek \"\nstring2 = \" geeksforgeeks \"\nif isSubSequence(string1, string2, len(string1), len(string2)):\n    print \" Yes \"\nelse:\n    print \" No \"\n"}
{"text": "Maximum Product Subarray ", "java": "import java.io.*;\n\nclass GFG {\n  static int maxSubarrayProduct(int arr[]) {\n    int result = arr[0];\n    int n = arr.length;\n    for (int i = 0; i < n; i++) {\n      int mul = arr[i];\n      for (int j = i + 1; j < n; j++) {\n        result = Math.max(result, mul);\n        mul *= arr[j];\n      }\n      result = Math.max(result, mul);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, -2, -3, 0, 7, -8, -2};\n    System.out.println(\" Maximum \u2581 Sub \u2581 array \u2581 product \u2581 is \u2581 \" + maxSubarrayProduct(arr));\n  }\n}\n", "python": "def maxSubarrayProduct(arr, n):\n    result = arr[0]\n    for i in range(n):\n        mul = arr[i]\n        for j in range(i + 1, n):\n            result = max(result, mul)\n            mul *= arr[j]\n        result = max(result, mul)\n    return result\n\n\narr = [1, -2, -3, 0, 7, -8, -2]\nn = len(arr)\nprint(\" Maximum \u2581 Sub \u2581 array \u2581 product \u2581 is \", maxSubarrayProduct(arr, n))\n"}
{"text": "Maximum circular subarray sum ", "java": "import java.io.*;\n\nclass GFG {\n  public static int maxCircularSum(int a[], int n) {\n    if (n == 1) return a[0];\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += a[i];\n    }\n    int curr_max = a[0], max_so_far = a[0], curr_min = a[0], min_so_far = a[0];\n    for (int i = 1; i < n; i++) {\n      curr_max = Math.max(curr_max + a[i], a[i]);\n      max_so_far = Math.max(max_so_far, curr_max);\n      curr_min = Math.min(curr_min + a[i], a[i]);\n      min_so_far = Math.min(min_so_far, curr_min);\n    }\n    if (min_so_far == sum) {\n      return max_so_far;\n    }\n    return Math.max(max_so_far, sum - min_so_far);\n  }\n\n  public static void main(String[] args) {\n    int a[] = {11, 10, -20, 5, -3, -5, 8, -13, 10};\n    int n = 9;\n    System.out.println(\" Maximum \u2581 circular \u2581 sum \u2581 is \u2581 \" + maxCircularSum(a, n));\n  }\n}\n", "python": "def maxCircularSum(a, n):\n    if n == 1:\n        return a[0]\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    curr_max = a[0]\n    max_so_far = a[0]\n    curr_min = a[0]\n    min_so_far = a[0]\n    for i in range(1, n):\n        curr_max = max(curr_max + a[i], a[i])\n        max_so_far = max(max_so_far, curr_max)\n        curr_min = min(curr_min + a[i], a[i])\n        min_so_far = min(min_so_far, curr_min)\n    if min_so_far == sum:\n        return max_so_far\n    return max(max_so_far, sum - min_so_far)\n\n\na = [11, 10, -20, 5, -3, -5, 8, -13, 10]\nn = len(a)\nprint(\" Maximum \u2581 circular \u2581 sum \u2581 is \", maxCircularSum(a, n))\n"}
{"text": "Maximize sum of consecutive differences in a circular array ", "java": "import java.io.*;\nimport java.util.Arrays;\n\nclass MaxSum {\n  static int maxSum(int arr[], int n) {\n    int sum = 0;\n    Arrays.sort(arr);\n    for (int i = 0; i < n / 2; i++) {\n      sum -= (2 * arr[i]);\n      sum += (2 * arr[n - i - 1]);\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 2, 1, 8};\n    int n = arr.length;\n    System.out.println(maxSum(arr, n));\n  }\n}\n", "python": "def maxSum(arr, n):\n    sum = 0\n    arr.sort()\n    for i in range(0, int(n / 2)):\n        sum -= 2 * arr[i]\n        sum += 2 * arr[n - i - 1]\n    return sum\n\n\narr = [4, 2, 1, 8]\nn = len(arr)\nprint(maxSum(arr, n))\n"}
{"text": "Minimum number of swaps required for arranging pairs adjacent to each other ", "java": "class GFG {\n  static void updateindex(int index[], int a, int ai, int b, int bi) {\n    index[a] = ai;\n    index[b] = bi;\n  }\n\n  static int minSwapsUtil(int arr[], int pairs[], int index[], int i, int n) {\n    if (i > n) return 0;\n    if (pairs[arr[i]] == arr[i + 1]) return minSwapsUtil(arr, pairs, index, i + 2, n);\n    int one = arr[i + 1];\n    int indextwo = i + 1;\n    int indexone = index[pairs[arr[i]]];\n    int two = arr[index[pairs[arr[i]]]];\n    arr[i + 1] = arr[i + 1] ^ arr[indexone] ^ (arr[indexone] = arr[i + 1]);\n    updateindex(index, one, indexone, two, indextwo);\n    int a = minSwapsUtil(arr, pairs, index, i + 2, n);\n    arr[i + 1] = arr[i + 1] ^ arr[indexone] ^ (arr[indexone] = arr[i + 1]);\n    updateindex(index, one, indextwo, two, indexone);\n    one = arr[i];\n    indexone = index[pairs[arr[i + 1]]];\n    two = arr[index[pairs[arr[i + 1]]]];\n    indextwo = i;\n    arr[i] = arr[i] ^ arr[indexone] ^ (arr[indexone] = arr[i]);\n    updateindex(index, one, indexone, two, indextwo);\n    int b = minSwapsUtil(arr, pairs, index, i + 2, n);\n    arr[i] = arr[i] ^ arr[indexone] ^ (arr[indexone] = arr[i]);\n    updateindex(index, one, indextwo, two, indexone);\n    return 1 + Math.min(a, b);\n  }\n\n  static int minSwaps(int n, int pairs[], int arr[]) {\n    int index[] = new int[2 * n + 1];\n    for (int i = 1; i <= 2 * n; i++) index[arr[i]] = i;\n    return minSwapsUtil(arr, pairs, index, 1, 2 * n);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {0, 3, 5, 6, 4, 1, 2};\n    int pairs[] = {0, 3, 6, 1, 5, 4, 2};\n    int m = pairs.length;\n    int n = m / 2;\n    System.out.print(\" Min \u2581 swaps \u2581 required \u2581 is \u2581 \" + minSwaps(n, pairs, arr));\n  }\n}\n", "python": "def updateindex(index, a, ai, b, bi):\n    index[a] = ai\n    index[b] = bi\n\n\ndef minSwapsUtil(arr, pairs, index, i, n):\n    if i > n:\n        return 0\n    if pairs[arr[i]] == arr[i + 1]:\n        return minSwapsUtil(arr, pairs, index, i + 2, n)\n    one = arr[i + 1]\n    indextwo = i + 1\n    indexone = index[pairs[arr[i]]]\n    two = arr[index[pairs[arr[i]]]]\n    arr[i + 1], arr[indexone] = arr[indexone], arr[i + 1]\n    updateindex(index, one, indexone, two, indextwo)\n    a = minSwapsUtil(arr, pairs, index, i + 2, n)\n    arr[i + 1], arr[indexone] = arr[indexone], arr[i + 1]\n    updateindex(index, one, indextwo, two, indexone)\n    one = arr[i]\n    indexone = index[pairs[arr[i + 1]]]\n    two = arr[index[pairs[arr[i + 1]]]]\n    indextwo = i\n    arr[i], arr[indexone] = arr[indexone], arr[i]\n    updateindex(index, one, indexone, two, indextwo)\n    b = minSwapsUtil(arr, pairs, index, i + 2, n)\n    arr[i], arr[indexone] = arr[indexone], arr[i]\n    updateindex(index, one, indextwo, two, indexone)\n    return 1 + min(a, b)\n\n\ndef minSwaps(n, pairs, arr):\n    index = []\n    for i in range(2 * n + 1 + 1):\n        index.append(0)\n    for i in range(1, 2 * n + 1):\n        index[arr[i]] = i\n    return minSwapsUtil(arr, pairs, index, 1, 2 * n)\n\n\narr = [0, 3, 5, 6, 4, 1, 2]\npairs = [0, 3, 6, 1, 5, 4, 2]\nm = len(pairs)\nn = m // 2\nprint(\" Min \u2581 swaps \u2581 required \u2581 is \u2581 \", minSwaps(n, pairs, arr))\n"}
{"text": "Maximum difference between group of k ", "java": "import java.util.Arrays;\n\npublic class GFG {\n  static long arraySum(int arr[], int n) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) sum = sum + arr[i];\n    return sum;\n  }\n\n  static long maxDiff(int arr[], int n, int k) {\n    Arrays.sort(arr);\n    long arraysum = arraySum(arr, n);\n    long diff1 = Math.abs(arraysum - 2 * arraySum(arr, k));\n    int end = arr.length - 1;\n    int start = 0;\n    while (start < end) {\n      int temp = arr[start];\n      arr[start] = arr[end];\n      arr[end] = temp;\n      start++;\n      end--;\n    }\n    long diff2 = Math.abs(arraysum - 2 * arraySum(arr, k));\n    return (Math.max(diff1, diff2));\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 7, 4, 8, -1, 5, 2, 1};\n    int n = arr.length;\n    int k = 3;\n    System.out.println(\" Maximum \u2581 Difference \u2581 = \u2581 \" + maxDiff(arr, n, k));\n  }\n}\n", "python": "def arraySum(arr, n):\n    sum = 0\n    for i in range(n):\n        sum = sum + arr[i]\n    return sum\n\n\ndef maxDiff(arr, n, k):\n    arr.sort()\n    arraysum = arraySum(arr, n)\n    diff1 = abs(arraysum - 2 * arraySum(arr, k))\n    arr.reverse()\n    diff2 = abs(arraysum - 2 * arraySum(arr, k))\n    return max(diff1, diff2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 7, 4, 8, -1, 5, 2, 1]\n    n = len(arr)\n    k = 3\n    print(\" Maximum \u2581 Difference \u2581 = \", maxDiff(arr, n, k))\n"}
{"text": "Minimum number of elements to add to make median equals x ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int minNumber(int a[], int n, int x) {\n    Arrays.sort(a);\n    int k;\n    for (k = 0; a[(n) / 2] != x; k++) {\n      a[n++] = x;\n      Arrays.sort(a);\n    }\n    return k;\n  }\n\n  public static void main(String[] args) {\n    int x = 10;\n    int a[] = {10, 20, 30};\n    int n = 3;\n    System.out.println(minNumber(a, n - 1, x));\n  }\n}\n", "python": "def minNumber(a, n, x):\n    a.sort(reverse=False)\n    k = 0\n    while a[int((n - 1) / 2)] != x:\n        a[n - 1] = x\n        n += 1\n        a.sort(reverse=False)\n        k += 1\n    return k\n\n\nif __name__ == \" _ _ main _ _ \":\n    x = 10\n    a = [10, 20, 30]\n    n = 3\n    print(minNumber(a, n, x))\n"}
{"text": "Minimum number of elements to add to make median equals x ", "java": "import java.util.*;\n\nclass GFG {\n  public static int minNumber(int a[], int n, int x) {\n    int l = 0, h = 0, e = 0;\n    for (int i = 0; i < n; i++) {\n      if (a[i] == x) e++;\n      else if (a[i] > x) h++;\n      else if (a[i] < x) l++;\n    }\n    int ans = 0;\n    if (l > h) ans = l - h;\n    else if (l < h) ans = h - l - 1;\n    return ans + 1 - e;\n  }\n\n  public static void main(String[] args) {\n    int x = 10;\n    int a[] = {10, 20, 30};\n    int n = a.length;\n    System.out.println(minNumber(a, n, x));\n  }\n}\n", "python": "def minNumber(a, n, x):\n    a.sort(reverse=False)\n    k = 0\n    while a[int((n - 1) / 2)] != x:\n        a[n - 1] = x\n        n += 1\n        a.sort(reverse=False)\n        k += 1\n    return k\n\n\nif __name__ == \" _ _ main _ _ \":\n    x = 10\n    a = [10, 20, 30]\n    n = 3\n    print(minNumber(a, n, x))\n"}
{"text": "Mean of range in array ", "java": "public class Main {\n  static int findMean(int arr[], int l, int r) {\n    int sum = 0, count = 0;\n    for (int i = l; i <= r; i++) {\n      sum += arr[i];\n      count++;\n    }\n    int mean = (int) Math.floor(sum / count);\n    return mean;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 5};\n    System.out.println(findMean(arr, 0, 2));\n    System.out.println(findMean(arr, 1, 3));\n    System.out.println(findMean(arr, 0, 4));\n  }\n}\n", "python": "import math\n\n\ndef findMean(arr, l, r):\n    sum, count = 0, 0\n    for i in range(l, r + 1):\n        sum += arr[i]\n        count += 1\n    mean = math.floor(sum / count)\n    return mean\n\n\narr = [1, 2, 3, 4, 5]\nprint(findMean(arr, 0, 2))\nprint(findMean(arr, 1, 3))\nprint(findMean(arr, 0, 4))\n"}
{"text": "Mean of range in array ", "java": "public class Main {\n  public static final int MAX = 1000005;\n  static int prefixSum[] = new int[MAX];\n\n  static void calculatePrefixSum(int arr[], int n) {\n    prefixSum[0] = arr[0];\n    for (int i = 1; i < n; i++) prefixSum[i] = prefixSum[i - 1] + arr[i];\n  }\n\n  static int findMean(int l, int r) {\n    if (l == 0) return (int) Math.floor(prefixSum[r] / (r + 1));\n    return (int) Math.floor((prefixSum[r] - prefixSum[l - 1]) / (r - l + 1));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 5};\n    int n = arr.length;\n    calculatePrefixSum(arr, n);\n    System.out.println(findMean(1, 2));\n    System.out.println(findMean(1, 3));\n    System.out.println(findMean(1, 4));\n  }\n}\n", "python": "import math\n\n\ndef findMean(arr, l, r):\n    sum, count = 0, 0\n    for i in range(l, r + 1):\n        sum += arr[i]\n        count += 1\n    mean = math.floor(sum / count)\n    return mean\n\n\narr = [1, 2, 3, 4, 5]\nprint(findMean(arr, 0, 2))\nprint(findMean(arr, 1, 3))\nprint(findMean(arr, 0, 4))\n"}
{"text": "Print modified array after executing the commands of addition and subtraction ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static void updateQuery(int arr[], int n, int q, int l, int r, int k) {\n    if (q == 0) {\n      arr[l - 1] += k;\n      arr[r] += -k;\n    } else {\n      arr[l - 1] += -k;\n      arr[r] += k;\n    }\n    return;\n  }\n\n  static void generateArray(int arr[], int n) {\n    for (int i = 1; i < n; ++i) arr[i] += arr[i - 1];\n  }\n\n  public static void main(String arg[]) {\n    int n = 5;\n    int arr[] = new int[n + 1];\n    Arrays.fill(arr, 0);\n    int q = 0, l = 1, r = 3, k = 2;\n    updateQuery(arr, n, q, l, r, k);\n    q = 1;\n    l = 3;\n    r = 5;\n    k = 3;\n    updateQuery(arr, n, q, l, r, k);\n    q = 0;\n    l = 2;\n    r = 5;\n    k = 1;\n    updateQuery(arr, n, q, l, r, k);\n    generateArray(arr, n);\n    for (int i = 0; i < n; ++i) System.out.print(arr[i] + \" \u2581 \");\n  }\n}\n", "python": "def updateQuery(arr, n, q, l, r, k):\n    if q == 0:\n        arr[l - 1] += k\n        arr[r] += -k\n    else:\n        arr[l - 1] += -k\n        arr[r] += k\n    return\n\n\ndef generateArray(arr, n):\n    for i in range(1, n):\n        arr[i] += arr[i - 1]\n    return\n\n\nn = 5\narr = [0 for i in range(n + 1)]\nq = 0\nl = 1\nr = 3\nk = 2\nupdateQuery(arr, n, q, l, r, k)\nq, l, r, k = 1, 3, 5, 3\nupdateQuery(arr, n, q, l, r, k)\nq, l, r, k = 0, 2, 5, 1\nupdateQuery(arr, n, q, l, r, k)\ngenerateArray(arr, n)\nfor i in range(n):\n    print(arr[i], end=\" \u2581 \")\n"}
{"text": "Products of ranges in an array ", "java": "import java.io.*;\n\nclass GFG {\n  static int calculateProduct(int[] A, int L, int R, int P) {\n    L = L - 1;\n    R = R - 1;\n    int ans = 1;\n    for (int i = L; i <= R; i++) {\n      ans = ans * A[i];\n      ans = ans % P;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] A = {1, 2, 3, 4, 5, 6};\n    int P = 229;\n    int L = 2, R = 5;\n    System.out.println(calculateProduct(A, L, R, P));\n    L = 1;\n    R = 3;\n    System.out.println(calculateProduct(A, L, R, P));\n  }\n}\n", "python": "def calculateProduct(A, L, R, P):\n    L = L - 1\n    R = R - 1\n    ans = 1\n    for i in range(R + 1):\n        ans = ans * A[i]\n        ans = ans % P\n    return ans\n\n\nA = [1, 2, 3, 4, 5, 6]\nP = 229\nL = 2\nR = 5\nprint(calculateProduct(A, L, R, P))\nL = 1\nR = 3\nprint(calculateProduct(A, L, R, P))\n"}
{"text": "Products of ranges in an array ", "java": "class GFG {\n  static int MAX = 100;\n  int pre_product[] = new int[MAX];\n  int inverse_product[] = new int[MAX];\n\n  int modInverse(int a, int m) {\n    int m0 = m, t, q;\n    int x0 = 0, x1 = 1;\n    if (m == 1) return 0;\n    while (a > 1) {\n      q = a / m;\n      t = m;\n      m = a % m;\n      a = t;\n      t = x0;\n      x0 = x1 - q * x0;\n      x1 = t;\n    }\n    if (x1 < 0) x1 += m0;\n    return x1;\n  }\n\n  void calculate_Pre_Product(int A[], int N, int P) {\n    pre_product[0] = A[0];\n    for (int i = 1; i < N; i++) {\n      pre_product[i] = pre_product[i - 1] * A[i];\n      pre_product[i] = pre_product[i] % P;\n    }\n  }\n\n  void calculate_inverse_product(int A[], int N, int P) {\n    inverse_product[0] = modInverse(pre_product[0], P);\n    for (int i = 1; i < N; i++) inverse_product[i] = modInverse(pre_product[i], P);\n  }\n\n  int calculateProduct(int A[], int L, int R, int P) {\n    L = L - 1;\n    R = R - 1;\n    int ans;\n    if (L == 0) ans = pre_product[R];\n    else ans = pre_product[R] * inverse_product[L - 1];\n    return ans;\n  }\n\n  public static void main(String[] s) {\n    GFG d = new GFG();\n    int A[] = {1, 2, 3, 4, 5, 6};\n    int P = 113;\n    d.calculate_Pre_Product(A, A.length, P);\n    d.calculate_inverse_product(A, A.length, P);\n    int L = 2, R = 5;\n    System.out.println(d.calculateProduct(A, L, R, P));\n    L = 1;\n    R = 3;\n    System.out.println(d.calculateProduct(A, L, R, P));\n  }\n}\n", "python": "def calculateProduct(A, L, R, P):\n    L = L - 1\n    R = R - 1\n    ans = 1\n    for i in range(R + 1):\n        ans = ans * A[i]\n        ans = ans % P\n    return ans\n\n\nA = [1, 2, 3, 4, 5, 6]\nP = 229\nL = 2\nR = 5\nprint(calculateProduct(A, L, R, P))\nL = 1\nR = 3\nprint(calculateProduct(A, L, R, P))\n"}
{"text": "No of pairs ( a [ j ] >= a [ i ] ) with k numbers in range ( a [ i ] , a [ j ] ) that are divisible by x ", "java": "import java.util.*;\n\nclass GFG {\n  static int countPairs(int a[], int n, int x, int k) {\n    Arrays.sort(a);\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n      int d = (a[i] - 1) / x;\n      int it1 = Arrays.binarySearch(a, Math.max((d + k) * x, a[i]));\n      int it2 = Arrays.binarySearch(a, Math.max((d + k + 1) * x, a[i]));\n      ans += it1 - it2;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] a = {1, 3, 5, 7};\n    int n = a.length;\n    int x = 2, k = 1;\n    System.out.println(countPairs(a, n, x, k));\n  }\n}\n", "python": "import bisect\n\n\ndef countPairs(a, n, x, k):\n    a.sort()\n    ans = 0\n    for i in range(n):\n        d = (a[i] - 1) // x\n        it1 = bisect.bisect_left(a, max((d + k) * x, a[i]))\n        it2 = bisect.bisect_left(a, max((d + k + 1) * x, a[i]))\n        ans += it2 - it1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [1, 3, 5, 7]\n    n = len(a)\n    x = 2\n    k = 1\n    print(countPairs(a, n, x, k))\n"}
{"text": "Minimum De ", "java": "import java.util.*;\nimport java.util.Arrays;\n\npublic class GeeksforGeeks {\n  public static int countDe(int arr[], int n) {\n    int v[] = new int[n];\n    for (int i = 0; i < n; i++) v[i] = arr[i];\n    Arrays.sort(arr);\n    int count1 = 0;\n    for (int i = 0; i < n; i++) if (arr[i] != v[i]) count1++;\n    Collections.reverse(Arrays.asList(arr));\n    int count2 = 0;\n    for (int i = 0; i < n; i++) if (arr[i] != v[i]) count2++;\n    return (Math.min(count1, count2));\n  }\n\n  public static void main(String argc[]) {\n    int arr[] = {5, 9, 21, 17, 13};\n    int n = 5;\n    System.out.println(\" Minimum \u2581 Dearrangement \u2581 = \u2581 \" + countDe(arr, n));\n  }\n}\n", "python": "def countDe(arr, n):\n    i = 0\n    v = arr.copy()\n    arr.sort()\n    count1 = 0\n    i = 0\n    while i < n:\n        if arr[i] != v[i]:\n            count1 = count1 + 1\n        i = i + 1\n    arr.sort(reverse=True)\n    count2 = 0\n    i = 0\n    while i < n:\n        if arr[i] != v[i]:\n            count2 = count2 + 1\n        i = i + 1\n    return min(count1, count2)\n\n\narr = [5, 9, 21, 17, 13]\nn = 5\nprint(\" Minimum \u2581 Dearrangement \u2581 = \", countDe(arr, n))\n"}
{"text": "Divide an array into k segments to maximize maximum of segment minimums ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int maxOfSegmentMins(int[] a, int n, int k) {\n    if (k == 1) {\n      Arrays.sort(a);\n      return a[0];\n    }\n    if (k == 2) return Math.max(a[0], a[n - 1]);\n    return a[n - 1];\n  }\n\n  public static void main(String[] args) {\n    int[] a = {-10, -9, -8, 2, 7, -6, -5};\n    int n = a.length;\n    int k = 2;\n    System.out.println(maxOfSegmentMins(a, n, k));\n  }\n}\n", "python": "def maxOfSegmentMins(a, n, k):\n    if k == 1:\n        return min(a)\n    if k == 2:\n        return max(a[0], a[n - 1])\n    return max(a)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [-10, -9, -8, 2, 7, -6, -5]\n    n = len(a)\n    k = 2\n    print(maxOfSegmentMins(a, n, k))\n"}
{"text": "Sorting all array elements except one ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int sortExceptK(int arr[], int k, int n) {\n    int temp = arr[k];\n    arr[k] = arr[n - 1];\n    arr[n - 1] = temp;\n    Arrays.sort(arr, 0, n - 1);\n    int last = arr[n - 1];\n    for (int i = n - 1; i > k; i--) arr[i] = arr[i - 1];\n    arr[k] = last;\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {10, 4, 11, 7, 6, 20};\n    int k = 2;\n    int n = a.length;\n    sortExceptK(a, k, n);\n    for (int i = 0; i < n; i++) System.out.print(a[i] + \" \u2581 \");\n  }\n}\n", "python": "def sortExcept(arr, k, n):\n    arr[k], arr[-1] = arr[-1], arr[k]\n    arr = sorted(arr, key=lambda i: (i is arr[-1], i))\n    last = arr[-1]\n    i = n - 1\n    while i > k:\n        arr[i] = arr[i - 1]\n        i -= 1\n    arr[k] = last\n    return arr\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [10, 4, 11, 7, 6, 20]\n    k = 2\n    n = len(a)\n    a = sortExcept(a, k, n)\n    print(\" \u2581 \".join(list(map(str, a))))\n"}
{"text": "Minimum number of subtract operation to make an array decreasing ", "java": "import java.util.*;\n\npublic class GfG {\n  public static int min_noOf_operation(int arr[], int n, int k) {\n    int noOfSubtraction;\n    int res = 0;\n    for (int i = 1; i < n; i++) {\n      noOfSubtraction = 0;\n      if (arr[i] > arr[i - 1]) {\n        noOfSubtraction = (arr[i] - arr[i - 1]) / k;\n        if ((arr[i] - arr[i - 1]) % k != 0) noOfSubtraction++;\n        arr[i] = arr[i] - k * noOfSubtraction;\n      }\n      res = res + noOfSubtraction;\n    }\n    return res;\n  }\n\n  public static void main(String argc[]) {\n    int arr = {1, 1, 2, 3};\n    int N = 4;\n    int k = 5;\n    System.out.println(min_noOf_operation(arr, N, k));\n  }\n}\n", "python": "def min_noOf_operation(arr, n, k):\n    res = 0\n    for i in range(1, n):\n        noOfSubtraction = 0\n        if arr[i] > arr[i - 1]:\n            noOfSubtraction = (arr[i] - arr[i - 1]) / k\n            if (arr[i] - arr[i - 1]) % k != 0:\n                noOfSubtraction += 1\n            arr[i] = arr[i] - k * noOfSubtraction\n        res = res + noOfSubtraction\n    return int(res)\n\n\narr = [1, 1, 2, 3]\nN = len(arr)\nk = 5\nprint(min_noOf_operation(arr, N, k))\n"}
{"text": "Maximize the sum of arr [ i ] * i ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxSum(int arr[], int n) {\n    Arrays.sort(arr);\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum += (arr[i] * i);\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 5, 6, 1};\n    int n = arr.length;\n    System.out.println(maxSum(arr, n));\n  }\n}\n", "python": "def maxSum(arr, n):\n    arr.sort()\n    sum = 0\n    for i in range(n):\n        sum += arr[i] * i\n    return sum\n\n\narr = [3, 5, 6, 1]\nn = len(arr)\nprint(maxSum(arr, n))\n"}
{"text": "Sum of minimum absolute difference of each array element ", "java": "import java.*;\nimport java.util.Arrays;\n\npublic class GFG {\n  static int sumOfMinAbsDifferences(int arr[], int n) {\n    Arrays.sort(arr);\n    int sum = 0;\n    sum += Math.abs(arr[0] - arr[1]);\n    sum += Math.abs(arr[n - 1] - arr[n - 2]);\n    for (int i = 1; i < n - 1; i++)\n      sum += Math.min(Math.abs(arr[i] - arr[i - 1]), Math.abs(arr[i] - arr[i + 1]));\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {5, 10, 1, 4, 8, 7};\n    int n = arr.length;\n    System.out.println(\" Sum \u2581 = \u2581 \" + sumOfMinAbsDifferences(arr, n));\n  }\n}\n", "python": "def sumOfMinAbsDifferences(arr, n):\n    arr.sort()\n    sum = 0\n    sum += abs(arr[0] - arr[1])\n    sum += abs(arr[n - 1] - arr[n - 2])\n    for i in range(1, n - 1):\n        sum += min(abs(arr[i] - arr[i - 1]), abs(arr[i] - arr[i + 1]))\n    return sum\n\n\narr = [5, 10, 1, 4, 8, 7]\nn = len(arr)\nprint(\" Sum \u2581 = \u2581 \", sumOfMinAbsDifferences(arr, n))\n"}
{"text": "Find the element that appears once in an array where every other element appears twice ", "java": "import java.io.*;\nimport java.util.Arrays;\n\nclass GFG {\n  static int singleelement(int arr[], int n) {\n    int low = 0, high = n - 2;\n    int mid;\n    while (low <= high) {\n      mid = (low + high) / 2;\n      if (arr[mid] == arr[mid ^ 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n    return arr[low];\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 3, 5, 4, 5, 3, 4};\n    int size = 7;\n    Arrays.sort(arr);\n    System.out.println(singleelement(arr, size));\n  }\n}\n", "python": "def findSingle(ar, n):\n    res = ar[0]\n    for i in range(1, n):\n        res = res ^ ar[i]\n    return res\n\n\nar = [2, 3, 5, 4, 5, 3, 4]\nprint \" Element \u2581 occurring \u2581 once \u2581 is \", findSingle(ar, len(ar))\n"}
{"text": "Find the Missing Number ", "java": "import java.util.*;\n\nclass GFG {\n  public static List<Integer> findDisappearedNumbers(int[] nums) {\n    for (int i = 0; i < nums.length; i++) {\n      int index = Math.abs(nums[i]);\n      if (nums[index - 1] > 0) {\n        nums[index - 1] *= -1;\n      }\n    }\n    List<Integer> res = new ArrayList<>();\n    for (int i = 0; i < nums.length; i++) {\n      if (nums[i] > 0) {\n        res.add(i + 1);\n      }\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int[] a = {1, 2, 4, 5, 6};\n    System.out.println(findDisappearedNumbers(a));\n  }\n}\n", "python": "def getMissingNo(A):\n    n = len(A)\n    total = (n + 1) * (n + 2) / 2\n    sum_of_A = sum(A)\n    return total - sum_of_A\n\n\nA = [1, 2, 4, 5, 6]\nmiss = getMissingNo(A)\nprint(miss)\n"}
{"text": "Find the Missing Number ", "java": "class GFG {\n  static int getMissingNo(int a[], int n) {\n    int total = 1;\n    for (int i = 2; i <= (n + 1); i++) {\n      total += i;\n      total -= a[i - 2];\n    }\n    return total;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 5};\n    System.out.println(getMissingNo(arr, arr.length));\n  }\n}\n", "python": "def getMissingNo(A):\n    n = len(A)\n    total = (n + 1) * (n + 2) / 2\n    sum_of_A = sum(A)\n    return total - sum_of_A\n\n\nA = [1, 2, 4, 5, 6]\nmiss = getMissingNo(A)\nprint(miss)\n"}
{"text": "Find the Missing Number ", "java": "class GFG {\n  static int getMissingNo(int a[], int n) {\n    int n_elements_sum = n * (n + 1) / 2;\n    int sum = 0;\n    for (int i = 0; i < n - 1; i++) sum += a[i];\n    return n_elements_sum - sum;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {1, 2, 4, 5, 6};\n    int n = a.length + 1;\n    int miss = getMissingNo(a, n);\n    System.out.print(miss);\n  }\n}\n", "python": "def getMissingNo(A):\n    n = len(A)\n    total = (n + 1) * (n + 2) / 2\n    sum_of_A = sum(A)\n    return total - sum_of_A\n\n\nA = [1, 2, 4, 5, 6]\nmiss = getMissingNo(A)\nprint(miss)\n"}
{"text": "Search an element in an array where difference between adjacent elements is 1 ", "java": "import java.io.*;\n\nclass GFG {\n  static int search(int arr[], int n, int x) {\n    int i = 0;\n    while (i < n) {\n      if (arr[i] == x) return i;\n      i = i + Math.abs(arr[i] - x);\n    }\n    System.out.println(\" number \u2581 is \u2581 not \" + \" \u2581 present ! \");\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {8, 7, 6, 7, 6, 5, 4, 3, 2, 3, 4, 3};\n    int n = arr.length;\n    int x = 3;\n    System.out.println(\" Element \u2581 \" + x + \" \u2581 is \u2581 present \u2581 at \u2581 index \u2581 \" + search(arr, n, 3));\n  }\n}\n", "python": "def search(arr, n, x):\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            return i\n        i = i + abs(arr[i] - x)\n    print(\" number \u2581 is \u2581 not \u2581 present ! \")\n    return -1\n\n\narr = [8, 7, 6, 7, 6, 5, 4, 3, 2, 3, 4, 3]\nn = len(arr)\nx = 3\nprint(\" Element \", x, \" \u2581 is \u2581 present \u2581 at \u2581 index \u2581 \", search(arr, n, 3))\n"}
{"text": "Find element in a sorted array whose frequency is greater than or equal to n / 2. ", "java": "public class Test {\n  public static int findMajority(int arr[], int n) {\n    return arr[n / 2];\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 2, 2, 3};\n    int n = arr.length;\n    System.out.println(findMajority(arr, n));\n  }\n}\n", "python": "def findMajority(arr, n):\n    return arr[int(n / 2)]\n\n\narr = [1, 2, 2, 3]\nn = len(arr)\nprint(findMajority(arr, n))\n"}
{"text": "Minimum absolute difference of adjacent elements in a circular array ", "java": "class GFG {\n  static void minAdjDifference(int arr[], int n) {\n    if (n < 2) return;\n    int res = Math.abs(arr[1] - arr[0]);\n    for (int i = 2; i < n; i++) res = Math.min(res, Math.abs(arr[i] - arr[i - 1]));\n    res = Math.min(res, Math.abs(arr[n - 1] - arr[0]));\n    System.out.print(\" Min \u2581 Difference \u2581 = \u2581 \" + res);\n  }\n\n  public static void main(String arg[]) {\n    int a[] = {10, 12, 13, 15, 10};\n    int n = a.length;\n    minAdjDifference(a, n);\n  }\n}\n", "python": "def minAdjDifference(arr, n):\n    if n < 2:\n        return\n    res = abs(arr[1] - arr[0])\n    for i in range(2, n):\n        res = min(res, abs(arr[i] - arr[i - 1]))\n    res = min(res, abs(arr[n - 1] - arr[0]))\n    print(\" Min \u2581 Difference \u2581 = \u2581 \", res)\n\n\na = [10, 12, 13, 15, 10]\nn = len(a)\nminAdjDifference(a, n)\n"}
{"text": "Trapping Rain Water ", "java": "class GFG {\n  public static int maxWater(int[] arr, int n) {\n    int res = 0;\n    for (int i = 1; i < n - 1; i++) {\n      int left = arr[i];\n      for (int j = 0; j < i; j++) {\n        left = Math.max(left, arr[j]);\n      }\n      int right = arr[i];\n      for (int j = i + 1; j < n; j++) {\n        right = Math.max(right, arr[j]);\n      }\n      res += Math.min(left, right) - arr[i];\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};\n    int n = arr.length;\n    System.out.print(maxWater(arr, n));\n  }\n}\n", "python": "def maxWater(arr, n):\n    res = 0\n    for i in range(1, n - 1):\n        left = arr[i]\n        for j in range(i):\n            left = max(left, arr[j])\n        right = arr[i]\n        for j in range(i + 1, n):\n            right = max(right, arr[j])\n        res = res + (min(left, right) - arr[i])\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\n    n = len(arr)\n    print(maxWater(arr, n))\n"}
{"text": "Trapping Rain Water ", "java": "class Test {\n  static int arr[] = new int[] {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};\n\n  static int findWater(int n) {\n    int left[] = new int[n];\n    int right[] = new int[n];\n    int water = 0;\n    left[0] = arr[0];\n    for (int i = 1; i < n; i++) left[i] = Math.max(left[i - 1], arr[i]);\n    right[n - 1] = arr[n - 1];\n    for (int i = n - 2; i >= 0; i--) right[i] = Math.max(right[i + 1], arr[i]);\n    for (int i = 0; i < n; i++) water += Math.min(left[i], right[i]) - arr[i];\n    return water;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(\n        \" Maximum \u2581 water \u2581 that \u2581 can \u2581 be \u2581 accumulated \u2581 is \u2581 \" + findWater(arr.length));\n  }\n}\n", "python": "def maxWater(arr, n):\n    res = 0\n    for i in range(1, n - 1):\n        left = arr[i]\n        for j in range(i):\n            left = max(left, arr[j])\n        right = arr[i]\n        for j in range(i + 1, n):\n            right = max(right, arr[j])\n        res = res + (min(left, right) - arr[i])\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\n    n = len(arr)\n    print(maxWater(arr, n))\n"}
{"text": "Trapping Rain Water ", "java": "import java.util.*;\n\nclass GFG {\n  static int findWater(int arr[], int n) {\n    int result = 0;\n    int left_max = 0, right_max = 0;\n    int lo = 0, hi = n - 1;\n    while (lo <= hi) {\n      if (arr[lo] < arr[hi]) {\n        if (arr[lo] > left_max) left_max = arr[lo];\n        else result += left_max - arr[lo];\n        lo++;\n      } else {\n        if (arr[hi] > right_max) right_max = arr[hi];\n        else result += right_max - arr[hi];\n        hi--;\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};\n    int n = arr.length;\n    System.out.println(\n        \" Maximum \u2581 water \u2581 that \u2581 \" + \" can \u2581 be \u2581 accumulated \u2581 is \u2581 \" + findWater(arr, n));\n  }\n}\n", "python": "def maxWater(arr, n):\n    res = 0\n    for i in range(1, n - 1):\n        left = arr[i]\n        for j in range(i):\n            left = max(left, arr[j])\n        right = arr[i]\n        for j in range(i + 1, n):\n            right = max(right, arr[j])\n        res = res + (min(left, right) - arr[i])\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\n    n = len(arr)\n    print(maxWater(arr, n))\n"}
{"text": "Trapping Rain Water ", "java": "class GFG {\n  public static int maxWater(int arr[], int n) {\n    int size = n - 1;\n    int prev = arr[0];\n    int prev_index = 0;\n    int water = 0;\n    int temp = 0;\n    for (int i = 1; i <= size; i++) {\n      if (arr[i] >= prev) {\n        prev = arr[i];\n        prev_index = i;\n        temp = 0;\n      } else {\n        water += prev - arr[i];\n        temp += prev - arr[i];\n      }\n    }\n    if (prev_index < size) {\n      water -= temp;\n      prev = arr[size];\n      for (int i = size; i >= prev_index; i--) {\n        if (arr[i] >= prev) {\n          prev = arr[i];\n        } else {\n          water += prev - arr[i];\n        }\n      }\n    }\n    return water;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};\n    int n = arr.length;\n    System.out.print(maxWater(arr, n));\n  }\n}\n", "python": "def maxWater(arr, n):\n    res = 0\n    for i in range(1, n - 1):\n        left = arr[i]\n        for j in range(i):\n            left = max(left, arr[j])\n        right = arr[i]\n        for j in range(i + 1, n):\n            right = max(right, arr[j])\n        res = res + (min(left, right) - arr[i])\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\n    n = len(arr)\n    print(maxWater(arr, n))\n"}
{"text": "Trapping Rain Water ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int maxWater(int[] height) {\n    Stack<Integer> stack = new Stack<>();\n    int n = height.length;\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n      while ((!stack.isEmpty()) && (height[stack.peek()] < height[i])) {\n        int pop_height = height[stack.peek()];\n        stack.pop();\n        if (stack.isEmpty()) break;\n        int distance = i - stack.peek() - 1;\n        int min_height = Math.min(height[stack.peek()], height[i]) - pop_height;\n        ans += distance * min_height;\n      }\n      stack.push(i);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};\n    System.out.print(maxWater(arr));\n  }\n}\n", "python": "def maxWater(arr, n):\n    res = 0\n    for i in range(1, n - 1):\n        left = arr[i]\n        for j in range(i):\n            left = max(left, arr[j])\n        right = arr[i]\n        for j in range(i + 1, n):\n            right = max(right, arr[j])\n        res = res + (min(left, right) - arr[i])\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\n    n = len(arr)\n    print(maxWater(arr, n))\n"}
{"text": "Trapping Rain Water ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxWater(int[] arr, int n) {\n    int left = 0;\n    int right = n - 1;\n    int l_max = 0;\n    int r_max = 0;\n    int result = 0;\n    while (left <= right) {\n      if (r_max <= l_max) {\n        result += Math.max(0, r_max - arr[right]);\n        r_max = Math.max(r_max, arr[right]);\n        right -= 1;\n      } else {\n        result += Math.max(0, l_max - arr[left]);\n        l_max = Math.max(l_max, arr[left]);\n        left += 1;\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};\n    int n = arr.length;\n    System.out.print(maxWater(arr, n));\n  }\n}\n", "python": "def maxWater(arr, n):\n    res = 0\n    for i in range(1, n - 1):\n        left = arr[i]\n        for j in range(i):\n            left = max(left, arr[j])\n        right = arr[i]\n        for j in range(i + 1, n):\n            right = max(right, arr[j])\n        res = res + (min(left, right) - arr[i])\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\n    n = len(arr)\n    print(maxWater(arr, n))\n"}
{"text": "Maximum difference between groups of size two ", "java": "import java.io.*;\nimport java.util.Arrays;\n\nclass GFG {\n  static int CalculateMax(int arr[], int n) {\n    Arrays.sort(arr);\n    int min_sum = arr[0] + arr[1];\n    int max_sum = arr[n - 1] + arr[n - 2];\n    return (Math.abs(max_sum - min_sum));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {6, 7, 1, 11};\n    int n = arr.length;\n    System.out.println(CalculateMax(arr, n));\n  }\n}\n", "python": "def CalculateMax(arr, n):\n    arr.sort()\n    min_sum = arr[0] + arr[1]\n    max_sum = arr[n - 1] + arr[n - 2]\n    return abs(max_sum - min_sum)\n\n\narr = [6, 7, 1, 11]\nn = len(arr)\nprint(CalculateMax(arr, n))\n"}
{"text": "Minimum difference between groups of size two ", "java": "import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Vector;\n\nclass GFG {\n  static long calculate(long a[], int n) {\n    Arrays.sort(a);\n    int i, j;\n    Vector<Long> s = new Vector<>();\n    for (i = 0, j = n - 1; i < j; i++, j--) s.add((a[i] + a[j]));\n    long mini = Collections.min(s);\n    long maxi = Collections.max(s);\n    return Math.abs(maxi - mini);\n  }\n\n  public static void main(String[] args) {\n    long a[] = {2, 6, 4, 3};\n    int n = a.length;\n    System.out.println(calculate(a, n));\n  }\n}\n", "python": "def calculate(a, n):\n    a.sort()\n    s = []\n    i = 0\n    j = n - 1\n    while i < j:\n        s.append((a[i] + a[j]))\n        i += 1\n        j -= 1\n    mini = min(s)\n    maxi = max(s)\n    return abs(maxi - mini)\n\n\na = [2, 6, 4, 3]\nn = len(a)\nprint(calculate(a, n))\n"}
{"text": "Number of local extrema in an array ", "java": "import java.io.*;\n\nclass GFG {\n  static int extrema(int a[], int n) {\n    int count = 0;\n    for (int i = 1; i < n - 1; i++) {\n      if (a[i] > a[i - 1] && a[i] > a[i + 1]) count += 1;\n      if (a[i] < a[i - 1] && a[i] < a[i + 1]) count += 1;\n    }\n    return count;\n  }\n\n  public static void main(String args[]) throws IOException {\n    int a[] = {1, 0, 2, 1};\n    int n = a.length;\n    System.out.println(extrema(a, n));\n  }\n}\n", "python": "def extrema(a, n):\n    count = 0\n    for i in range(1, n - 1):\n        count += a[i] > a[i - 1] and a[i] > a[i + 1]\n        count += a[i] < a[i - 1] and a[i] < a[i + 1]\n    return count\n\n\na = [1, 0, 2, 1]\nn = len(a)\nprint(extrema(a, n))\n"}
{"text": "Minimum sum of absolute difference of pairs of two arrays ", "java": "import java.util.Arrays;\n\nclass MinSum {\n  static long findMinSum(long a[], long b[], long n) {\n    Arrays.sort(a);\n    Arrays.sort(b);\n    long sum = 0;\n    for (int i = 0; i < n; i++) sum = sum + Math.abs(a[i] - b[i]);\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    long a[] = {4, 1, 8, 7};\n    long b[] = {2, 3, 6, 5};\n    int n = a.length;\n    System.out.println(findMinSum(a, b, n));\n  }\n}\n", "python": "def findMinSum(a, b, n):\n    a.sort()\n    b.sort()\n    sum = 0\n    for i in range(n):\n        sum = sum + abs(a[i] - b[i])\n    return sum\n\n\na = [4, 1, 8, 7]\nb = [2, 3, 6, 5]\nn = len(a)\nprint(findMinSum(a, b, n))\n"}
{"text": "Minimum product subset of an array ", "java": "class GFG {\n  static int minProductSubset(int a[], int n) {\n    if (n == 1) return a[0];\n    int negmax = Integer.MIN_VALUE;\n    int posmin = Integer.MAX_VALUE;\n    int count_neg = 0, count_zero = 0;\n    int product = 1;\n    for (int i = 0; i < n; i++) {\n      if (a[i] == 0) {\n        count_zero++;\n        continue;\n      }\n      if (a[i] < 0) {\n        count_neg++;\n        negmax = Math.max(negmax, a[i]);\n      }\n      if (a[i] > 0 && a[i] < posmin) posmin = a[i];\n      product *= a[i];\n    }\n    if (count_zero == n || (count_neg == 0 && count_zero > 0)) return 0;\n    if (count_neg == 0) return posmin;\n    if (count_neg % 2 == 0 && count_neg != 0) {\n      product = product / negmax;\n    }\n    return product;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {-1, -1, -2, 4, 3};\n    int n = 5;\n    System.out.println(minProductSubset(a, n));\n  }\n}\n", "python": "def minProductSubset(a, n):\n    if n == 1:\n        return a[0]\n    max_neg = float(\" - inf \")\n    min_pos = float(\" inf \")\n    count_neg = 0\n    count_zero = 0\n    prod = 1\n    for i in range(0, n):\n        if a[i] == 0:\n            count_zero = count_zero + 1\n            continue\n        if a[i] < 0:\n            count_neg = count_neg + 1\n            max_neg = max(max_neg, a[i])\n        if a[i] > 0:\n            min_pos = min(min_pos, a[i])\n        prod = prod * a[i]\n    if count_zero == n or (count_neg == 0 and count_zero > 0):\n        return 0\n    if count_neg == 0:\n        return min_pos\n    if (count_neg & 1) == 0 and count_neg != 0:\n        prod = int(prod / max_neg)\n    return prod\n\n\na = [-1, -1, -2, 4, 3]\nn = len(a)\nprint(minProductSubset(a, n))\n"}
{"text": "Flatten a multilevel linked list ", "java": "static class List {\n  public int data;\n  public List next;\n  public List child;\n}\n;\n", "python": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.child = None\n\n    DEDENT\n"}
{"text": "Implementing Iterator pattern of a single Linked List ", "java": "import java.util.*;\n\nclass GFG {\n  public static void main(String[] args) {\n    ArrayList<Integer> list = new ArrayList<>();\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    Iterator<Integer> it = list.iterator();\n    while (it.hasNext()) {\n      System.out.print(it.next() + \" \u2581 \");\n    }\n  }\n}\n", "python": "if __name__ == \" _ _ main _ _ \":\n    list = []\n    list.append(1)\n    list.append(2)\n    list.append(3)\n    for it in list:\n        print(it, end=\" \u2581 \")\n    DEDENT\n"}
{"text": "Reduce the given Array of [ 1 , N ] by rotating left or right based on given conditions ", "java": "import java.io.*;\n\nclass GFG {\n  static int rotate(int arr[], int N, int X) {\n    long nextPower = 1;\n    while (nextPower <= N) nextPower *= 2;\n    if (X == 1) return (int) nextPower - N;\n    long prevPower = nextPower / 2;\n    return 2 * (N - (int) prevPower) + 1;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 5};\n    int X = 1;\n    int N = arr.length;\n    System.out.println(rotate(arr, N, X));\n  }\n}\n", "python": "def rotate(arr, N, X):\n    nextPower = 1\n    while nextPower <= N:\n        nextPower *= 2\n    if X == 1:\n        ans = nextPower - N\n        return ans\n    prevPower = nextPower // 2\n    return 2 * (N - prevPower) + 1\n\n\narr = [1, 2, 3, 4, 5]\nX = 1\nN = len(arr)\nprint(rotate(arr, N, X))\n"}
{"text": "Rotate digits of a given number by K ", "java": "import java.io.*;\n\nclass GFG {\n  static int numberOfDigit(int N) {\n    int digit = 0;\n    while (N > 0) {\n      digit++;\n      N /= 10;\n    }\n    return digit;\n  }\n\n  static void rotateNumberByK(int N, int K) {\n    int X = numberOfDigit(N);\n    K = ((K % X) + X) % X;\n    int left_no = N / (int) (Math.pow(10, X - K));\n    N = N % (int) (Math.pow(10, X - K));\n    int left_digit = numberOfDigit(left_no);\n    N = (N * (int) (Math.pow(10, left_digit))) + left_no;\n    System.out.println(N);\n  }\n\n  public static void main(String args[]) {\n    int N = 12345, K = 7;\n    rotateNumberByK(N, K);\n  }\n}\n", "python": "def numberOfDigit(N):\n    digit = 0\n    while N > 0:\n        digit += 1\n        N //= 10\n    return digit\n\n\ndef rotateNumberByK(N, K):\n    X = numberOfDigit(N)\n    K = ((K % X) + X) % X\n    left_no = N // pow(10, X - K)\n    N = N % pow(10, X - K)\n    left_digit = numberOfDigit(left_no)\n    N = N * pow(10, left_digit) + left_no\n    print(N)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N, K = 12345, 7\n    rotateNumberByK(N, K)\n"}
{"text": "Maximize sum of diagonal of a matrix by rotating all rows or all columns ", "java": "import java.util.*;\n\nclass GFG {\n  static int N = 3;\n\n  static int findMaximumDiagonalSumOMatrixf(int A[][]) {\n    int maxDiagonalSum = Integer.MIN_VALUE;\n    for (int i = 0; i < N; i++) {\n      int curr = 0;\n      for (int j = 0; j < N; j++) {\n        curr += A[j][(i + j) % N];\n      }\n      maxDiagonalSum = Math.max(maxDiagonalSum, curr);\n    }\n    for (int i = 0; i < N; i++) {\n      int curr = 0;\n      for (int j = 0; j < N; j++) {\n        curr += A[(i + j) % N][j];\n      }\n      maxDiagonalSum = Math.max(maxDiagonalSum, curr);\n    }\n    return maxDiagonalSum;\n  }\n\n  public static void main(String[] args) {\n    int[][] mat = {{1, 1, 2}, {2, 1, 2}, {1, 2, 2}};\n    System.out.println(findMaximumDiagonalSumOMatrixf(mat));\n  }\n}\n", "python": "import sys\n\nN = 3\n\n\ndef findMaximumDiagonalSumOMatrixf(A):\n    maxDiagonalSum = -sys.maxsize - 1\n    for i in range(N):\n        curr = 0\n        for j in range(N):\n            curr += A[j][(i + j) % N]\n        maxDiagonalSum = max(maxDiagonalSum, curr)\n    for i in range(N):\n        curr = 0\n        for j in range(N):\n            curr += A[(i + j) % N][j]\n        maxDiagonalSum = max(maxDiagonalSum, curr)\n    return maxDiagonalSum\n\n\nif __name__ == \" _ _ main _ _ \":\n    mat = [[1, 1, 2], [2, 1, 2], [1, 2, 2]]\n    print(findMaximumDiagonalSumOMatrixf(mat))\n"}
{"text": "Mth element after K Right Rotations of an Array ", "java": "class GFG {\n  static int getFirstElement(int a[], int N, int K, int M) {\n    K %= N;\n    int index;\n    if (K >= M) index = (N - K) + (M - 1);\n    else index = (M - K - 1);\n    int result = a[index];\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {1, 2, 3, 4, 5};\n    int N = 5;\n    int K = 3, M = 2;\n    System.out.println(getFirstElement(a, N, K, M));\n  }\n}\n", "python": "def getFirstElement(a, N, K, M):\n    K %= N\n    if K >= M:\n        index = (N - K) + (M - 1)\n    else:\n        index = M - K - 1\n    result = a[index]\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [1, 2, 3, 4, 5]\n    N = len(a)\n    K, M = 3, 2\n    print(getFirstElement(a, N, K, M))\n"}
{"text": "Find the Mth element of the Array after K left rotations ", "java": "import java.util.*;\n\nclass GFG {\n  public static int getFirstElement(int[] a, int N, int K, int M) {\n    K %= N;\n    int index = (K + M - 1) % N;\n    int result = a[index];\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {3, 4, 5, 23};\n    int N = a.length;\n    int K = 2, M = 1;\n    System.out.println(getFirstElement(a, N, K, M));\n  }\n}\n", "python": "def getFirstElement(a, N, K, M):\n    K %= N\n    index = (K + M - 1) % N\n    result = a[index]\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [3, 4, 5, 23]\n    N = len(a)\n    K = 2\n    M = 1\n    print(getFirstElement(a, N, K, M))\n"}
{"text": "Count rotations which are divisible by 10 ", "java": "class GFG {\n  static int countRotation(int n) {\n    int count = 0;\n    do {\n      int digit = n % 10;\n      if (digit == 0) count++;\n      n = n / 10;\n    } while (n != 0);\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 10203;\n    System.out.println(countRotation(n));\n  }\n}\n", "python": "def countRotation(n):\n    count = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            count = count + 1\n        n = int(n / 10)\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10203\n    print(countRotation(n))\n"}
{"text": "Count rotations of N which are Odd and Even ", "java": "class Solution {\n  static void countOddRotations(int n) {\n    int odd_count = 0, even_count = 0;\n    do {\n      int digit = n % 10;\n      if (digit % 2 == 1) odd_count++;\n      else even_count++;\n      n = n / 10;\n    } while (n != 0);\n    System.out.println(\" Odd \u2581 = \u2581 \" + odd_count);\n    System.out.println(\" Even \u2581 = \u2581 \" + even_count);\n  }\n\n  public static void main(String[] args) {\n    int n = 1234;\n    countOddRotations(n);\n  }\n}\n", "python": "def countOddRotations(n):\n    odd_count = 0\n    even_count = 0\n    while n != 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            odd_count += 1\n        else:\n            even_count += 1\n        n = n // 10\n    print(\" Odd \u2581 = \", odd_count)\n    print(\" Even \u2581 = \", even_count)\n\n\nn = 1234\ncountOddRotations(n)\n"}
{"text": "Minimum move to end operations to make all strings equal ", "java": "import java.util.*;\n\nclass GFG {\n  static int minimunMoves(String arr[], int n) {\n    int ans = Integer.MAX_VALUE;\n    for (int i = 0; i < n; i++) {\n      int curr_count = 0;\n      String tmp = \" \";\n      for (int j = 0; j < n; j++) {\n        tmp = arr[j] + arr[j];\n        int index = tmp.indexOf(arr[i]);\n        if (index == arr[i].length()) return -1;\n        curr_count += index;\n      }\n      ans = Math.min(curr_count, ans);\n    }\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    String arr[] = {\" xzzwo \", \" zwoxz \", \" zzwox \", \" xzzwo \"};\n    int n = arr.length;\n    System.out.println(minimunMoves(arr, n));\n  }\n}\n", "python": "import sys\n\n\ndef minimunMoves(arr, n):\n    ans = sys.maxsize\n    for i in range(n):\n        curr_count = 0\n        for j in range(n):\n            tmp = arr[j] + arr[j]\n            index = tmp.find(arr[i])\n            if index == len(arr[i]):\n                return -1\n            curr_count += index\n        ans = min(curr_count, ans)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [\" xzzwo \", \" zwoxz \", \" zzwox \", \" xzzwo \"]\n    n = len(arr)\n    print(minimunMoves(arr, n))\n"}
{"text": "Check if two numbers are bit rotations of each other or not ", "java": "class GFG {\n  static boolean isRotation(long x, long y) {\n    long x64 = x | (x << 32);\n    while (x64 >= y) {\n      if (x64 == y) {\n        return true;\n      }\n      x64 >>= 1;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    long x = 122;\n    long y = 2147483678L;\n    if (isRotation(x, y) == false) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "def isRotation(x, y):\n    x64 = x | (x << 32)\n    while x64 >= y:\n        if (x64) == y:\n            return True\n        x64 >>= 1\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    x = 122\n    y = 2147483678\n    if isRotation(x, y) == False:\n        print(\" yes \")\n    else:\n        print(\" no \")\n    DEDENT\n"}
{"text": "Check if a string can be obtained by rotating another string 2 places ", "java": "class Test {\n  static boolean isRotated(String str1, String str2) {\n    if (str1.length() != str2.length()) return false;\n    if (str1.length() < 2) {\n      return str1.equals(str2);\n    }\n    String clock_rot = \" \";\n    String anticlock_rot = \" \";\n    int len = str2.length();\n    anticlock_rot = anticlock_rot + str2.substring(len - 2, len) + str2.substring(0, len - 2);\n    clock_rot = clock_rot + str2.substring(2) + str2.substring(0, 2);\n    return (str1.equals(clock_rot) || str1.equals(anticlock_rot));\n  }\n\n  public static void main(String[] args) {\n    String str1 = \" geeks \";\n    String str2 = \" eksge \";\n    System.out.println(isRotated(str1, str2) ? \" Yes \" : \" No \");\n  }\n}\n", "python": "def isRotated(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    if len(str1) < 2:\n        return str1 == str2\n    clock_rot = \" \"\n    anticlock_rot = \" \"\n    l = len(str2)\n    anticlock_rot = anticlock_rot + str2[l - 2 :] + str2[0 : l - 2]\n    clock_rot = clock_rot + str2[2:] + str2[0:2]\n    return str1 == clock_rot or str1 == anticlock_rot\n\n\nif __name__ == \" _ _ main _ _ \":\n    str1 = \" geeks \"\n    str2 = \" eksge \"\nif isRotated(str1, str2):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Lexicographically minimum string rotation ", "java": "import java.util.*;\n\nclass GFG {\n  static String minLexRotation(String str) {\n    int n = str.length();\n    String arr[] = new String[n];\n    String concat = str + str;\n    for (int i = 0; i < n; i++) {\n      arr[i] = concat.substring(i, i + n);\n    }\n    Arrays.sort(arr);\n    return arr[0];\n  }\n\n  public static void main(String[] args) {\n    System.out.println(minLexRotation(\" GEEKSFORGEEKS \"));\n    System.out.println(minLexRotation(\" GEEKSQUIZ \"));\n    System.out.println(minLexRotation(\" BCABDADAB \"));\n  }\n}\n", "python": "def minLexRotation(str_):\n    n = len(str_)\n    arr = [0] * n\n    concat = str_ + str_\n    for i in range(n):\n        arr[i] = concat[i : n + i]\n    arr.sort()\n    return arr[0]\n\n\nprint(minLexRotation(\" GEEKSFORGEEKS \"))\nprint(minLexRotation(\" GEEKSQUIZ \"))\nprint(minLexRotation(\" BCABDADAB \"))\n"}
{"text": "Types of Linked List ", "java": "static class Node {\n  int data;\n  Node next;\n}\n;\n", "python": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n    DEDENT\n"}
{"text": "Types of Linked List ", "java": "class GFG {\n  static class Node {\n    int data;\n    Node next;\n  }\n  ;\n\n  static void printList(Node n) {\n    while (n != null) {\n      System.out.print(n.data + \" \u2581 \");\n      n = n.next;\n    }\n  }\n\n  public static void main(String[] args) {\n    Node head = null;\n    Node second = null;\n    Node third = null;\n    head = new Node();\n    second = new Node();\n    third = new Node();\n    head.data = 1;\n    head.next = second;\n    second.data = 2;\n    second.next = third;\n    third.data = 3;\n    third.next = null;\n    printList(head);\n  }\n}\n", "python": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n    DEDENT\n"}
{"text": "Types of Linked List ", "java": "static class Node {\n  int data;\n  Node next;\n  Node prev;\n}\n;\n", "python": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n    DEDENT\n"}
{"text": "Types of Linked List ", "java": "static class Node {\n  int data;\n  Node next;\n}\n;\n", "python": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n    DEDENT\n"}
{"text": "Lowest Common Ancestor in Parent Array Representation ", "java": "import java.util.*;\n\nclass GFG {\n  static int MAX = 1000;\n\n  static int findLCA(int n1, int n2, int parent[]) {\n    boolean[] visited = new boolean[MAX];\n    visited[n1] = true;\n    while (parent[n1] != -1) {\n      visited[n1] = true;\n      n1 = parent[n1];\n    }\n    visited[n1] = true;\n    while (!visited[n2]) n2 = parent[n2];\n    return n2;\n  }\n\n  static void insertAdj(int parent[], int i, int j) {\n    parent[i] = j;\n  }\n\n  public static void main(String[] args) {\n    int[] parent = new int[MAX];\n    parent[20] = -1;\n    insertAdj(parent, 8, 20);\n    insertAdj(parent, 22, 20);\n    insertAdj(parent, 4, 8);\n    insertAdj(parent, 12, 8);\n    insertAdj(parent, 10, 12);\n    insertAdj(parent, 14, 12);\n    System.out.println(findLCA(10, 14, parent));\n  }\n}\n", "python": "MAX = 1000\n\n\ndef findLCA(n1, n2, parent):\n    visited = [False for i in range(MAX)]\n    visited[n1] = True\n    while parent[n1] != -1:\n        visited[n1] = True\n        n1 = parent[n1]\n    visited[n1] = True\n    while visited[n2] == False:\n        n2 = parent[n2]\n    return n2\n\n\ndef insertAdj(parent, i, j):\n    parent[i] = j\n\n\nif __name__ == \" _ _ main _ _ \":\n    parent = [0 for i in range(MAX)]\n    parent[20] = -1\n    insertAdj(parent, 8, 20)\n    insertAdj(parent, 22, 20)\n    insertAdj(parent, 4, 8)\n    insertAdj(parent, 12, 8)\n    insertAdj(parent, 10, 12)\n    insertAdj(parent, 14, 12)\n    print(findLCA(10, 14, parent))\n"}
{"text": "Count of subarrays of size K having at least one pair with absolute difference divisible by K ", "java": "class GFG {\n  static int findSubarrays(int arr[], int N, int K) {\n    return N - K + 1;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 5, 3, 2, 17, 18};\n    int K = 4;\n    int N = arr.length;\n    System.out.print(findSubarrays(arr, N, K));\n  }\n}\n", "python": "def findSubarrays(arr, N, K):\n    return N - K + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 5, 3, 2, 17, 18]\n    K = 4\n    N = len(arr)\n    print(findSubarrays(arr, N, K))\n"}
{"text": "Count of pairs in a given range with sum of their product and sum equal to their concatenated number ", "java": "import java.util.*;\n\nclass GFG {\n  static int countPairs(int A, int B) {\n    int countY = 0, countX = (B - A) + 1, next_val = 9;\n    while (next_val <= B) {\n      if (next_val >= A) {\n        countY += 1;\n      }\n      next_val = next_val * 10 + 9;\n    }\n    return (countX * countY);\n  }\n\n  public static void main(String args[]) {\n    int A = 1;\n    int B = 16;\n    System.out.print(countPairs(A, B));\n  }\n}\n", "python": "def countPairs(A, B):\n    countY = 0\n    countX = (B - A) + 1\n    next_val = 9\n    while next_val <= B:\n        if next_val >= A:\n            countY += 1\n        next_val = next_val * 10 + 9\n    return countX * countY\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = 1\n    B = 16\n    print(countPairs(A, B))\n"}
{"text": "Minimum sprinklers required to water a rectangular park ", "java": "class GFG {\n  public static int solve(int n, int m) {\n    int ans = n * (m / 2);\n    if (m % 2 == 1) {\n      ans += (n + 1) / 2;\n    }\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int N = 5;\n    int M = 3;\n    System.out.println(solve(N, M));\n  }\n}\n", "python": "def solve(N, M):\n    ans = int((N) * int(M / 2))\n    if M % 2 == 1:\n        ans += int((N + 1) / 2)\n    print(ans)\n\n\nN = 5\nM = 3\nsolve(N, M)\n"}
{"text": "Count of pairs satisfying the given condition ", "java": "class GFG {\n  static int countPair(int a, int b) {\n    String s = String.valueOf(b);\n    int i;\n    for (i = 0; i < s.length(); i++) {\n      if (s.charAt(i) != '9') break;\n    }\n    int result;\n    if (i == s.length()) result = a * s.length();\n    else result = a * (s.length() - 1);\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int a = 5, b = 101;\n    System.out.print(countPair(a, b));\n  }\n}\n", "python": "def countPair(a, b):\n    s = str(b)\n    i = 0\n    while i < (len(s)):\n        if s[i] != \"9\":\n            break\n        i += 1\n    result = 0\n    if i == len(s):\n        result = a * len(s)\n    else:\n        result = a * (len(s) - 1)\n    return result\n\n\na = 5\nb = 101\nprint(countPair(a, b))\n"}
{"text": "Area of the circle that has a square and a circle inscribed in it ", "java": "class GFG {\n  static float getArea(int a) {\n    float area = (float) (Math.PI * a * a) / 4;\n    return area;\n  }\n\n  public static void main(String args[]) {\n    int a = 3;\n    System.out.println(getArea(a));\n  }\n}\n", "python": "import math\n\n\ndef getArea(a):\n    area = (math.pi * a * a) / 4\n    return area\n\n\na = 3\nprint(\" { 0 : . 6f } \".format(getArea(a)))\n"}
{"text": "Minimize the sum of digits of A and B such that A + B = N ", "java": "class GFG {\n  static int minSum(int n) {\n    int sum = 0;\n    while (n > 0) {\n      sum += (n % 10);\n      n /= 10;\n    }\n    if (sum == 1) return 10;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 1884;\n    System.out.print(minSum(n));\n  }\n}\n", "python": "def minSum(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    if sum == 1:\n        return 10\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 1884\n    print(minSum(n))\n"}
{"text": "Find the coordinates of a triangle whose Area = ( S / 2 ) ", "java": "class GFG {\n  static final long MAX = 1000000000;\n\n  static void findTriangle(long S) {\n    long X1 = 0, Y1 = 0;\n    long X2 = MAX, Y2 = 1;\n    long X3 = (MAX - S % MAX) % MAX;\n    long Y3 = (S + X3) / MAX;\n    System.out.println(\" ( \" + X1 + \" , \u2581 \" + Y1 + \" ) \");\n    System.out.println(\" ( \" + X2 + \" , \u2581 \" + Y2 + \" ) \");\n    System.out.println(\" ( \" + X3 + \" , \u2581 \" + Y3 + \" ) \");\n  }\n\n  public static void main(String[] args) {\n    long S = 4;\n    findTriangle(S);\n  }\n}\n", "python": "MAX = 1000000000\n\n\ndef findTriangle(S):\n    X1 = 0\n    Y1 = 0\n    X2 = MAX\n    Y2 = 1\n    X3 = (MAX - S % MAX) % MAX\n    Y3 = (S + X3) / MAX\n    print(\" ( \", X1, \" , \", Y1, \" ) \")\n    print(\" ( \", X2, \" , \", Y2, \" ) \")\n    print(\" ( \", X3, \" , \", Y3, \" ) \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    S = 4\n    findTriangle(S)\n"}
{"text": "Maximum prime moves to convert X to Y ", "java": "class GFG {\n  static int maxOperations(int X, int Y) {\n    if (X > Y) return -1;\n    int diff = Y - X;\n    if (diff == 1) return -1;\n    if (diff % 2 == 0) return (diff / 2);\n    return (1 + ((diff - 3) / 2));\n  }\n\n  public static void main(String[] args) {\n    int X = 5, Y = 16;\n    System.out.println(maxOperations(X, Y));\n  }\n}\n", "python": "def maxOperations(X, Y):\n    if X > Y:\n        return -1\n    diff = Y - X\n    if diff == 1:\n        return -1\n    if diff % 2 == 0:\n        return diff // 2\n    return 1 + ((diff - 3) // 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    X = 5\n    Y = 16\n    print(maxOperations(X, Y))\n"}
{"text": "Minimum numbers with one 's place as 9 to be added to get N ", "java": "class GFG {\n  static int findMin(int N) {\n    int digit = N % 10;\n    switch (digit) {\n      case 0:\n        if (N >= 90) return 10;\n        break;\n      case 1:\n        if (N >= 81) return 9;\n        break;\n      case 2:\n        if (N >= 72) return 8;\n        break;\n      case 3:\n        if (N >= 63) return 7;\n        break;\n      case 4:\n        if (N >= 54) return 6;\n        break;\n      case 5:\n        if (N >= 45) return 5;\n        break;\n      case 6:\n        if (N >= 36) return 4;\n        break;\n      case 7:\n        if (N >= 27) return 3;\n        break;\n      case 8:\n        if (N >= 18) return 2;\n        break;\n      case 9:\n        if (N >= 9) return 1;\n        break;\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int N = 27;\n    System.out.println(findMin(N));\n  }\n}\n", "python": "def findMin(N: int):\n    digit = N % 10\n    if digit == 0 and N >= 90:\n        return 10\n    elif digit == 1 and N >= 81:\n        return 9\n    elif digit == 2 and N >= 72:\n        return 8\n    elif digit == 3 and N >= 63:\n        return 7\n    elif digit == 4 and N >= 54:\n        return 6\n    elif digit == 5 and N >= 45:\n        return 5\n    elif digit == 6 and N >= 36:\n        return 4\n    elif digit == 7 and N >= 27:\n        return 3\n    elif digit == 8 and N >= 18:\n        return 2\n    elif digit == 9 and N >= 9:\n        return 1\n    return -1\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 27\n    print(findMin(N))\n"}
{"text": "How to learn Pattern printing easily ? ", "java": "class GFG {\n  public static void main(String[] args) {\n    int N = 4, i, j, min;\n    System.out.println(\" Value \u2581 of \u2581 N : \u2581 \" + N);\n    for (i = 1; i <= N; i++) {\n      for (j = 1; j <= N; j++) {\n        min = i < j ? i : j;\n        System.out.print(N - min + 1);\n      }\n      for (j = N - 1; j >= 1; j--) {\n        min = i < j ? i : j;\n        System.out.print(N - min + 1);\n      }\n      System.out.println();\n    }\n  }\n}\n", "python": "if __name__ == \" _ _ main _ _ \":\n    N = 4\n    print(\" Value \u2581 of \u2581 N : \u2581 \", N)\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            min = i if i < j else j\n            print(N - min + 1, end=\" \")\n        print()\n    DEDENT\n"}
{"text": "Find Nth smallest number that is divisible by 100 exactly K times ", "java": "import java.util.*;\n\nclass GFG {\n  static String find_number(int N, int K) {\n    String r;\n    if (N % 100 == 0) {\n      N += 1;\n      r = String.valueOf(N);\n    } else {\n      r = String.valueOf(N);\n    }\n    for (int i = 1; i <= K; i++) r += \"00\";\n    return r;\n  }\n\n  public static void main(String[] args) {\n    int N = 1000, K = 2;\n    String ans = find_number(N, K);\n    System.out.println(ans);\n  }\n}\n", "python": "def find_number(N, K):\n    r = \" \"\n    if N % 100 == 0:\n        N += 1\n        r = str(N)\n    else:\n        r = str(N)\n    for i in range(1, K + 1):\n        r += \"00\"\n    return r\n\n\nN = 1000\nK = 2\nans = find_number(N, K)\nprint(ans)\n"}
{"text": "Find the largest interval that contains exactly one of the given N integers . ", "java": "import static java.lang.Integer.max;\n\nimport java.util.*;\n\nclass GFG {\n  static int maxSize(Vector<Integer> v, int n) {\n    v.add(0);\n    v.add(100001);\n    n += 2;\n    Collections.sort(v);\n    int mx = 0;\n    for (int i = 1; i < n - 1; i++) {\n      int L = v.get(i - 1) + 1;\n      int R = v.get(i + 1) - 1;\n      int cnt = R - L + 1;\n      mx = max(mx, cnt);\n    }\n    return mx;\n  }\n\n  public static void main(String[] args) {\n    Integer arr[] = {200, 10, 5};\n    Vector v = new Vector(Arrays.asList(arr));\n    int n = v.size();\n    System.out.println(maxSize(v, n));\n  }\n}\n", "python": "def maxSize(v, n):\n    v.append(0)\n    v.append(100001)\n    n += 2\n    v = sorted(v)\n    mx = 0\n    for i in range(1, n - 1):\n        L = v[i - 1] + 1\n        R = v[i + 1] - 1\n        cnt = R - L + 1\n        mx = max(mx, cnt)\n    return mx\n\n\nv = [200, 10, 5]\nn = len(v)\nprint(maxSize(v, n))\n"}
{"text": "Find smallest number K such that K % p = 0 and q % K = 0 ", "java": "import java.io.*;\n\nclass GFG {\n  static int getMinVal(int p, int q) {\n    if (q % p == 0) return p;\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int p = 24, q = 48;\n    System.out.println(getMinVal(p, q));\n  }\n}\n", "python": "def getMinVal(p, q):\n    if q % p == 0:\n        return p\n    return -1\n\n\np = 24\nq = 48\nprint(getMinVal(p, q))\n"}
{"text": "Minimum operations of the given type required to make a complete graph ", "java": "class GFG {\n  static int minOperations(int N) {\n    double x = Math.log(N) / Math.log(2);\n    int ans = (int) (Math.ceil(x));\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 10;\n    System.out.println(minOperations(N));\n  }\n}\n", "python": "from math import log2, ceil\n\n\ndef minOperations(N):\n    x = log2(N)\n    ans = ceil(x)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 10\n    print(minOperations(N))\n"}
{"text": "Greatest divisor which divides all natural number in range [ L , R ] ", "java": "class GFG {\n  static int find_greatest_divisor(int l, int r) {\n    if (l == r) {\n      return l;\n    }\n    return 1;\n  }\n\n  public static void main(String[] args) {\n    int l = 2, r = 12;\n    System.out.println(find_greatest_divisor(l, r));\n  }\n}\n", "python": "def find_greatest_divisor(l, r):\n    if l == r:\n        return l\n    return 1\n\n\nl = 2\nr = 12\nprint(find_greatest_divisor(l, r))\n"}
{"text": "Probability of getting two consecutive heads after choosing a random coin among two different types of coins ", "java": "import java.io.*;\n\nclass GFG {\n  static double getProbability(double p, double q) {\n    p /= 100;\n    q /= 100;\n    double probability = (p * p + q * q) / (p + q);\n    return probability;\n  }\n\n  public static void main(String[] args) {\n    double p, q;\n    p = 80;\n    q = 40;\n    System.out.println(getProbability(p, q));\n  }\n}\n", "python": "def getProbability(p, q):\n    p /= 100\n    q /= 100\n    probability = (p * p + q * q) / (p + q)\n    return probability\n\n\nif __name__ == \" _ _ main _ _ \":\n    p = 80\n    q = 40\n    print(getProbability(p, q))\n"}
{"text": "Time taken by Loop unrolling vs Normal loop ", "java": "class GFG {\n  public static void main(String[] args) {\n    int n = 800000;\n    double t = (double) System.nanoTime();\n    long sum = 0;\n    for (int i = 1; i <= n; i++) sum += i;\n    t = (double) System.nanoTime() - t;\n    System.out.println(\" sum \u2581 is : \u2581 \" + Double.toString(sum));\n    System.out.println(\n        \" time \u2581 taken \u2581 by \u2581 normal \u2581 loops : \" + Double.toString(t / Math.pow(10.0, 9.0)));\n    t = (double) System.nanoTime();\n    sum = 0;\n    for (int i = 1; i <= n; i += 8) {\n      sum += i;\n      sum += (i + 1);\n      sum += (i + 2);\n      sum += (i + 3);\n      sum += (i + 4);\n      sum += (i + 5);\n      sum += (i + 6);\n      sum += (i + 7);\n    }\n    t = (double) System.nanoTime() - t;\n    System.out.println(\" sum \u2581 is : \u2581 \" + Double.toString(sum));\n    System.out.println(\n        \" time \u2581 taken \u2581 by \u2581 normal \u2581 loops : \" + Double.toString(t / Math.pow(10.0, 9.0)));\n  }\n}\n", "python": "from timeit import default_timer as clock\n\nif __name__ == \" _ _ main _ _ \":\n    n = 800000\n    t = clock()\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    t = clock() - t\n    print(\" sum \u2581 is : \u2581 \" + str(sum))\n    print(\" time \u2581 taken \u2581 by \u2581 normal \u2581 \" + \" loops : \" + str(t))\n    t = clock()\n    sum = 0\n    for i in range(1, n + 1, 8):\n        sum += i\n        sum += i + 1\n        sum += i + 2\n        sum += i + 3\n        sum += i + 4\n        sum += i + 5\n        sum += i + 6\n        sum += i + 7\n    t = clock() - t\n    print(\" Sum \u2581 is : \u2581 \" + str(sum))\n    print(\" Time \u2581 taken \u2581 by \u2581 unrolling : \u2581 \" + str(t))\n"}
{"text": "Find the repeating element in an Array of size N consisting of first M natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  public static int repeatingElement(int arr[], int N) {\n    int M = 0, sum = 0;\n    for (int i = 0; i < N; i++) {\n      sum += arr[i];\n      M = Math.max(M, arr[i]);\n    }\n    int sum1 = M * (M + 1) / 2;\n    int ans = (sum - sum1) / (N - M);\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 6, 4, 3, 1, 5, 2};\n    int N = arr.length;\n    System.out.println(repeatingElement(arr, N));\n  }\n}\n", "python": "def repeatingElement(arr, N):\n    M = 0\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n        M = max(M, arr[i])\n    sum1 = M * (M + 1) // 2\n    ans = (sum - sum1) // (N - M)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 6, 4, 3, 1, 5, 2]\n    N = len(arr)\n    print(repeatingElement(arr, N))\n"}
{"text": "Count inversions in a permutation of first N natural numbers ", "java": "import java.util.Vector;\n\nclass GFG {\n  static void countInversions(int arr[], int n) {\n    Vector<Integer> v = new Vector<>();\n    for (int i = 1; i <= n; i++) {\n      v.add(i);\n    }\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n      int itr = v.indexOf(arr[i]);\n      ans += itr;\n      v.remove(itr);\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 3, 1, 5, 4};\n    int n = arr.length;\n    countInversions(arr, n);\n  }\n}\n", "python": "from bisect import bisect_left\n\n\ndef countInversions(arr, n):\n    v = []\n    for i in range(1, n + 1, 1):\n        v.append(i)\n    ans = 0\n    for i in range(n):\n        itr = bisect_left(v, arr[i])\n        ans += itr\n        v = v[:itr] + v[itr + 1 :]\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 3, 1, 5, 4]\n    n = len(arr)\n    countInversions(arr, n)\n"}
{"text": "Count triplets from a sorted array having difference between adjacent elements equal to D ", "java": "import java.util.*;\n\nclass GFG {\n  static int countTriplets(int D, int[] arr) {\n    HashMap<Integer, Integer> freq = new HashMap<Integer, Integer>();\n    int ans = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (freq.containsKey(arr[i] - D) && freq.containsKey(arr[i] - 2 * D)) {\n        ans += freq.get(arr[i] - D) * freq.get(arr[i] - 2 * D);\n      }\n      if (freq.containsKey(arr[i])) {\n        freq.put(arr[i], freq.get(arr[i]) + 1);\n      } else {\n        freq.put(arr[i], 1);\n      }\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 4, 5, 7, 8, 10};\n    int D = 1;\n    System.out.print(countTriplets(D, arr));\n  }\n}\n", "python": "def countTriplets(D, arr):\n    freq = {}\n    ans = 0\n    for i in range(len(arr)):\n        if ((arr[i] - D) in freq) and (arr[i] - 2 * D) in freq:\n            ans += freq[arr[i] - D] * freq[arr[i] - 2 * D]\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 4, 5, 7, 8, 10]\n    D = 1\n    print(countTriplets(D, arr))\n"}
{"text": "Smallest value of X satisfying the condition X % A [ i ] = B [ i ] for two given arrays ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n  static int inv(int a, int m) {\n    int m0 = m, t, q;\n    int x0 = 0, x1 = 1;\n    if (m == 1) return 0;\n    while (a > 1) {\n      q = a / m;\n      t = m;\n      m = a % m;\n      a = t;\n      t = x0;\n      x0 = x1 - q * x0;\n      x1 = t;\n    }\n    if (x1 < 0) x1 += m0;\n    return x1;\n  }\n\n  static int findMinX(int A[], int B[], int N) {\n    int prod = 1;\n    for (int i = 0; i < N; i++) prod *= A[i];\n    int result = 0;\n    for (int i = 0; i < N; i++) {\n      int pp = prod / A[i];\n      result += B[i] * inv(pp, A[i]) * pp;\n    }\n    return result % prod;\n  }\n\n  static int product(int a[]) {\n    int ans = 1;\n    for (int i = 0; i < a.length; i++) {\n      ans *= a[i];\n    }\n    return ans;\n  }\n\n  public static void findSmallestInteger(int A[], int B[], int P) {\n    int Y = findMinX(A, B, A.length);\n    int M = product(A);\n    int K = (int) Math.ceil(((double) P - (double) Y) / (double) M);\n    int X = Y + K * M;\n    System.out.println(X);\n  }\n\n  public static void main(String[] args) {\n    int A[] = {3, 4, 5};\n    int B[] = {2, 3, 1};\n    int P = 72;\n    findSmallestInteger(A, B, P);\n  }\n}\n", "python": "import math\n\n\ndef inv(a, m):\n    m0 = m\n    x0 = 0\n    x1 = 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = x0\n        x0 = x1 - q * x0\n        x1 = t\n    if x1 < 0:\n        x1 += m0\n    return x1\n\n\ndef findMinX(A, B, N):\n    prod = 1\n    for i in range(N):\n        prod *= A[i]\n    result = 0\n    for i in range(N):\n        pp = prod // A[i]\n        result += B[i] * inv(pp, A[i]) * pp\n    return result % prod\n\n\ndef product(a, n):\n    ans = 1\n    for i in range(n):\n        ans *= a[i]\n    return ans\n\n\ndef findSmallestInteger(A, B, P, n):\n    Y = findMinX(A, B, n)\n    M = product(A, n)\n    K = math.ceil((P - Y) / M)\n    X = Y + K * M\n    print(X)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [3, 4, 5]\n    B = [2, 3, 1]\n    n = len(A)\n    P = 72\n    findSmallestInteger(A, B, P, n)\n"}
{"text": "Count pairs ( i , j ) from an array such that ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static void findPairs(int arr[], int N) {\n    for (int i = 0; i < N; i++) arr[i] = Math.abs(arr[i]);\n    Arrays.sort(arr);\n    int left = 0;\n    int ans = 0;\n    for (int right = 0; right < N; right++) {\n      while (2 * arr[left] < arr[right]) left++;\n      ans += (right - left);\n    }\n    System.out.print(ans);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 3, 5, 7};\n    int N = arr.length;\n    findPairs(arr, N);\n  }\n}\n", "python": "def findPairs(arr, N):\n    for i in range(N):\n        arr[i] = abs(arr[i])\n    arr.sort()\n    left = 0\n    ans = 0\n    for right in range(N):\n        while 2 * arr[left] < arr[right]:\n            left += 1\n        ans += right - left\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 3, 5, 7]\n    N = len(arr)\n    findPairs(arr, N)\n"}
{"text": "Count pairs made up of an element divisible by the other from an array consisting of powers of 2 ", "java": "import java.util.*;\n\nclass GFG {\n  static void numberOfPairs(int arr[], int N) {\n    int[] set_bits = new int[31];\n    Arrays.fill(set_bits, 0);\n    int count = 0;\n    for (int i = 0; i < N; i++) {\n      int x = arr[i];\n      int bitpos = -1;\n      while (x > 0) {\n        bitpos++;\n        x /= 2;\n      }\n      for (int j = 0; j <= bitpos; j++) {\n        count += set_bits[j];\n      }\n      set_bits[bitpos]++;\n    }\n    System.out.println(count);\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {4, 16, 8, 64};\n    int N = arr.length;\n    numberOfPairs(arr, N);\n  }\n}\n", "python": "def numberOfPairs(arr, N):\n    set_bits = [0] * 31\n    count = 0\n    for i in range(N):\n        x = arr[i]\n        bitpos = -1\n        while x > 0:\n            bitpos += 1\n            x //= 2\n        for j in range(bitpos + 1):\n            count += set_bits[j]\n        set_bits[bitpos] += 1\n    print(count)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [4, 16, 8, 64]\n    N = len(arr)\n    numberOfPairs(arr, N)\n"}
{"text": "Count pairs from a given range having even sum ", "java": "class GFG {\n  static void countPairs(int L, int R) {\n    int count_even;\n    if (L % 2 == 0) {\n      count_even = (R / 2) - (L / 2) + 1;\n    } else {\n      count_even = (R / 2) - (L / 2);\n    }\n    int count_odd;\n    if (L % 2 == 0) {\n      count_odd = ((R + 1) / 2) - ((L + 1) / 2);\n    } else {\n      count_odd = ((R + 1) / 2) - ((L + 1) / 2) + 1;\n    }\n    count_even *= count_even;\n    count_odd *= count_odd;\n    System.out.println(count_even + count_odd);\n  }\n\n  public static void main(String[] args) {\n    int L = 1, R = 3;\n    countPairs(L, R);\n  }\n}\n", "python": "def countPairs(L, R):\n    count_even = 0\n    if L % 2 == 0:\n        count_even = (R // 2) - (L // 2) + 1\n    else:\n        count_even = (R // 2) - (L // 2)\n    count_odd = 0\n    if L % 2 == 0:\n        count_odd = ((R + 1) // 2) - ((L + 1) // 2)\n    else:\n        count_odd = ((R + 1) // 2) - ((L + 1) // 2) + 1\n    count_even *= count_even\n    count_odd *= count_odd\n    print(count_even + count_odd)\n\n\nif __name__ == \" _ _ main _ _ \":\n    L, R = 1, 3\n    countPairs(L, R)\n"}
{"text": "Count of array elements that can be found using Randomized Binary Search on every array element ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int getDefiniteFinds(int[] arr) {\n    int n = arr.length;\n    int[] smallestRight = new int[n + 1];\n    smallestRight[n] = Integer.MAX_VALUE;\n    for (int i = n - 1; i >= 0; i--) {\n      smallestRight[i] = Math.min(smallestRight[i + 1], arr[i]);\n    }\n    int mn = Integer.MIN_VALUE;\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n      if (mn < arr[i] && arr[i] < smallestRight[i + 1]) {\n        ans++;\n      }\n      mn = Math.max(arr[i], mn);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = new int[] {5, 4, 9};\n    System.out.println(getDefiniteFinds(arr));\n  }\n}\n", "python": "import sys\n\n\ndef getDefiniteFinds(arr):\n    n = len(arr)\n    smallestRight = [0] * (n + 1)\n    smallestRight[n] = sys.maxsize\n    for i in range(n - 1, -1, -1):\n        smallestRight[i] = min(smallestRight[i + 1], arr[i])\n    mn = -sys.maxsize - 1\n    ans = 0\n    for i in range(n):\n        if mn < arr[i] and arr[i] < smallestRight[i + 1]:\n            ans += 1\n        mn = max(arr[i], mn)\n    return ans\n\n\narr = [5, 4, 9]\nprint(getDefiniteFinds(arr))\n"}
{"text": "Find the index having sum of elements on its left equal to reverse of the sum of elements on its right ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean checkReverse(int leftSum, int rightSum) {\n    int rev = 0;\n    int temp = rightSum;\n    while (temp != 0) {\n      rev = (rev * 10) + (temp % 10);\n      temp /= 10;\n    }\n    if (rev == leftSum) {\n      return true;\n    }\n    return false;\n  }\n\n  static int findIndex(int[] arr, int N) {\n    int rightSum = 0;\n    int leftSum = 0;\n    for (int i = 0; i < N; i++) {\n      rightSum += arr[i];\n    }\n    for (int i = 0; i < N; i++) {\n      rightSum -= arr[i];\n      if (checkReverse(leftSum, rightSum)) {\n        return i;\n      }\n      leftSum += arr[i];\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {5, 7, 3, 6, 4, 9, 2};\n    int N = arr.length;\n    System.out.print(findIndex(arr, N));\n  }\n}\n", "python": "def checkReverse(leftSum, rightSum):\n    rev = 0\n    temp = rightSum\n    while temp != 0:\n        rev = (rev * 10) + (temp % 10)\n        temp //= 10\n    if rev == leftSum:\n        return True\n    return False\n\n\ndef findIndex(arr, N):\n    rightSum = 0\n    leftSum = 0\n    for i in range(N):\n        rightSum += arr[i]\n    for i in range(N):\n        rightSum -= arr[i]\n        if checkReverse(leftSum, rightSum):\n            return i\n        leftSum += arr[i]\n    return -1\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [5, 7, 3, 6, 4, 9, 2]\n    N = len(arr)\n    print(findIndex(arr, N))\n"}
{"text": "Smallest number not less than N which is divisible by all digits of N ", "java": "class GFG {\n  static int LCM(int A, int B) {\n    return (A * B / __gcd(A, B));\n  }\n\n  static void findSmallestNumber(int X) {\n    int lcm = 1;\n    int temp = X;\n    while (temp > 0) {\n      int last = temp % 10;\n      temp /= 10;\n      if (last == 0) continue;\n      lcm = LCM(lcm, last);\n    }\n    int answer = ((X + lcm - 1) / lcm) * lcm;\n    System.out.print(answer);\n  }\n\n  static int __gcd(int a, int b) {\n    return b == 0 ? a : __gcd(b, a % b);\n  }\n\n  public static void main(String[] args) {\n    int X = 280;\n    findSmallestNumber(X);\n  }\n}\n", "python": "import math\n\n\ndef LCM(A, B):\n    return A * B // math.gcd(A, B)\n\n\ndef findSmallestNumber(X):\n    lcm = 1\n    temp = X\n    while temp:\n        last = temp % 10\n        temp //= 10\n        if not last:\n            continue\n        lcm = LCM(lcm, last)\n    answer = ((X + lcm - 1) // lcm) * lcm\n    print(answer)\n\n\nif __name__ == \" _ _ main _ _ \":\n    X = 280\n    findSmallestNumber(X)\n"}
{"text": "Make all the elements of array odd by incrementing odd ", "java": "import java.util.*;\n\nclass GFG {\n  static void minOperations(int arr[], int n) {\n    int flips = 0;\n    for (int i = 0; i < n; i += 2) {\n      if (arr[i] % 2 == 1) {\n        continue;\n      }\n      while (i < n && arr[i] % 2 == 0) {\n        i += 2;\n      }\n      flips++;\n    }\n    for (int i = 1; i < n; i += 2) {\n      if (arr[i] % 2 == 1) {\n        continue;\n      }\n      while (i < n && arr[i] % 2 == 0) {\n        i += 2;\n      }\n      flips++;\n    }\n    System.out.println(flips);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 3, 4, 3, 5, 3, 2};\n    int N = arr.length;\n    minOperations(arr, N);\n  }\n}\n", "python": "def minOperations(arr, n):\n    flips = 0\n    i = 0\n    while i < n:\n        if arr[i] % 2 == 1:\n            i += 2\n            continue\n        while i < n and arr[i] % 2 == 0:\n            i += 2\n        flips += 1\n        i += 2\n    i = 1\n    while i < n:\n        if arr[i] % 2 == 1:\n            i += 2\n            continue\n        while i < n and arr[i] % 2 == 0:\n            i += 2\n        flips += 1\n        i += 2\n    print(flips)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 3, 4, 3, 5, 3, 2]\n    N = len(arr)\n    minOperations(arr, N)\n"}
{"text": "Maximize frequency of an element by at most one increment or decrement of all array elements ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static void max_freq(int arr[], int N) {\n    Arrays.sort(arr);\n    int Max = arr[N - 1];\n    int Min = arr[0];\n    int freq[] = new int[Max - Min + 1];\n    for (int i = 0; i < N; i++) {\n      freq[arr[i] - Min]++;\n    }\n    int maxSum = 0;\n    for (int i = 0; i < (Max - Min - 1); i++) {\n      int val = freq[i] + freq[i + 1] + freq[i + 2];\n      maxSum = Math.max(maxSum, val);\n    }\n    System.out.println(maxSum);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 1, 4, 1, 5, 9, 2};\n    int N = arr.length;\n    max_freq(arr, N);\n  }\n}\n", "python": "def max_freq(arr, N):\n    Max = max(arr)\n    Min = min(arr)\n    freq = [0] * (Max - Min + 1)\n    for i in range(N):\n        freq[arr[i] - Min] += 1\n    maxSum = 0\n    for i in range(Max - Min - 1):\n        val = freq[i] + freq[i + 1] + freq[i + 2]\n        maxSum = max(maxSum, val)\n    print(maxSum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 1, 4, 1, 5, 9, 2]\n    N = len(arr)\n    max_freq(arr, N)\n"}
{"text": "Minimum distance to visit given K points on X ", "java": "import java.util.*;\n\nclass solution {\n  static int MinDistK(int arr[], int N, int K) {\n    int res = Integer.MAX_VALUE;\n    int dist = 0;\n    for (int i = 0; i <= (N - K); i++) {\n      if (arr[i] >= 0 && arr[i + K - 1] >= 0) {\n        dist = Math.max(arr[i], arr[i + K - 1]);\n      } else {\n        dist =\n            Math.abs(arr[i])\n                + Math.abs(arr[i + K - 1])\n                + Math.min(Math.abs(arr[i]), Math.abs(arr[i + K - 1]));\n      }\n      res = Math.min(res, dist);\n    }\n    return res;\n  }\n\n  public static void main(String args[]) {\n    int K = 3;\n    int arr[] = {-30, -10, 10, 20, 50};\n    int N = arr.length;\n    System.out.println(MinDistK(arr, N, K));\n  }\n}\n", "python": "import sys\n\n\ndef MinDistK(arr, N, K):\n    res = sys.maxsize\n    dist = 0\n    for i in range(N - K + 1):\n        if arr[i] >= 0 and arr[i + K - 1] >= 0:\n            dist = max(arr[i], arr[i + K - 1])\n        else:\n            dist = (\n                abs(arr[i])\n                + abs(arr[i + K - 1])\n                + min(abs(arr[i]), abs(arr[i + K - 1]))\n            )\n        res = min(res, dist)\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    K = 3\n    arr = [-30, -10, 10, 20, 50]\n    N = len(arr)\n    print(MinDistK(arr, N, K))\n"}
{"text": "Smallest number to be subtracted to convert given number to a palindrome ", "java": "import java.util.*;\n\nclass GFG {\n  static void minSub(int N) {\n    int count = 0;\n    while (N >= 0) {\n      int num = N;\n      int rev = 0;\n      while (num != 0) {\n        int digit = num % 10;\n        rev = (rev * 10) + digit;\n        num = num / 10;\n      }\n      if (N == rev) {\n        break;\n      }\n      count++;\n      N--;\n    }\n    System.out.print(count);\n  }\n\n  public static void main(String[] args) {\n    int N = 3456;\n    minSub(N);\n  }\n}\n", "python": "def minSub(N):\n    count = 0\n    while N >= 0:\n        num = N\n        rev = 0\n        while num != 0:\n            digit = num % 10\n            rev = (rev * 10) + digit\n            num = num // 10\n        if N == rev:\n            break\n        count += 1\n        N -= 1\n    print(count)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3456\n    minSub(N)\n"}
{"text": "Count subarrays of atleast size 3 forming a Geometric Progression ( GP ) ", "java": "import java.util.*;\n\nclass GFG {\n  static int numberOfGP(int L[], int N) {\n    if (N <= 2) return 0;\n    int count = 0;\n    int res = 0;\n    for (int i = 2; i < N; ++i) {\n      if (L[i - 1] * L[i - 1] == L[i] * L[i - 2]) {\n        ++count;\n      } else {\n        count = 0;\n      }\n      res += count;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 4, 8, 16, 24};\n    int N = arr.length;\n    System.out.print(numberOfGP(arr, N));\n  }\n}\n", "python": "def numberOfGP(L, N):\n    if N <= 2:\n        return 0\n    count = 0\n    res = 0\n    for i in range(2, N):\n        if L[i - 1] * L[i - 1] == L[i] * L[i - 2]:\n            count += 1\n        else:\n            count = 0\n        res += count\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 4, 8, 16, 24]\n    N = len(arr)\n    print(numberOfGP(arr, N))\n"}
{"text": "Maximize sum of array elements removed by performing the given operations ", "java": "import java.util.*;\n\nclass GFG {\n  static int S;\n\n  static void findMaxSum(int[] arr, int n, int[] min, int k) {\n    ArrayList<int[]> A = new ArrayList<>();\n    for (int i = 0; i < n; i++) {\n      A.add(new int[] {arr[i], min[i]});\n    }\n    Collections.sort(A, (a, b) -> b[0] - a[0]);\n    int K = 0;\n    for (int i = 0; i < n; i++) {\n      S += Math.max(A.get(i)[0] - K, A.get(i)[1]);\n      K += k;\n    }\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {3, 5, 2, 1};\n    int[] min = {3, 2, 1, 3};\n    int N = arr.length;\n    int K = 3;\n    S = 0;\n    findMaxSum(arr, N, min, K);\n    System.out.println(S);\n  }\n}\n", "python": "def findMaxSum(arr, n, min, k, S):\n    A = []\n    for i in range(n):\n        A.append((arr[i], min[i]))\n    A = sorted(A)\n    A = A[::-1]\n    K = 0\n    for i in range(n):\n        S += max(A[i][0] - K, A[i][1])\n        K += k\n    return S\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr, min = [], []\n    arr = [3, 5, 2, 1]\n    min = [3, 2, 1, 3]\n    N = len(arr)\n    K = 3\n    S = 0\n    S = findMaxSum(arr, N, min, K, S)\n    print(S)\n"}
{"text": "Minimize length of string by replacing K pairs of distinct adjacent characters ", "java": "class GFG {\n  static int MinLen(String str, int K) {\n    int N = str.length();\n    int i = 0;\n    while (i < N - 1) {\n      if (str.charAt(i) != str.charAt(i + 1)) {\n        break;\n      }\n      i++;\n    }\n    if (i == N - 1) {\n      return N;\n    }\n    return Math.max(1, N - K);\n  }\n\n  public static void main(String[] args) {\n    String str = \" aabc \";\n    int K = 1;\n    System.out.print(MinLen(str, K));\n  }\n}\n", "python": "def MinLen(str, K):\n    N = len(str)\n    i = 0\n    while i < N - 1:\n        if str[i] != str[i + 1]:\n            break\n        i += 1\n    if i == N - 1:\n        return N\n    return max(1, N - K)\n\n\nif __name__ == \" _ _ main _ _ \":\n    str = \" aabc \"\n    K = 1\n    print(MinLen(str, K))\n"}
{"text": "Smallest prefix to be deleted such that remaining array can be rearranged to form a sorted array ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int findMinLength(int[] arr) {\n    int index = (int) arr.length - 1;\n    while (index > 0 && arr[index] >= arr[index - 1]) {\n      index--;\n    }\n    return index;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {7, 8, 5, 0, -1, -1, 0, 1, 2, 3, 4};\n    int n = arr.length;\n    System.out.println(findMinLength(arr));\n  }\n}\n", "python": "def findMinLength(arr):\n    index = len(arr) - 1\n    while index > 0 and arr[index] >= arr[index - 1]:\n        index -= 1\n    return index\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [7, 8, 5, 0, -1, -1, 0, 1, 2, 3, 4]\n    n = len(arr)\n    print(findMinLength(arr))\n"}
{"text": "Count minimum moves required to convert A to B ", "java": "import java.io.*;\n\nclass GFG {\n  static void convertBfromA(int a, int b) {\n    int moves = 0;\n    int x = Math.abs(a - b);\n    for (int i = 10; i > 0; i--) {\n      moves += x / i;\n      x = x % i;\n    }\n    System.out.print(moves + \" \u2581 \");\n  }\n\n  public static void main(String[] args) {\n    int A = 188, B = 4;\n    convertBfromA(A, B);\n  }\n}\n", "python": "def convertBfromA(a, b):\n    moves = 0\n    x = abs(a - b)\n    for i in range(10, 0, -1):\n        moves += x // i\n        x = x % i\n    print(moves, end=\" \u2581 \")\n\n\nA = 188\nB = 4\nconvertBfromA(A, B)\n"}
{"text": "Length of longest substring to be deleted to make a string equal to another string ", "java": "import java.io.*;\n\nclass GFG {\n  static int longDelSub(String str1, String str2) {\n    int N = str1.length();\n    int M = str2.length();\n    int prev_pos = 0;\n    int pos[] = new int[M];\n    for (int i = 0; i < M; i++) {\n      int index = prev_pos;\n      while (index < N && str1.charAt(index) != str2.charAt(i)) {\n        index++;\n      }\n      pos[i] = index;\n      prev_pos = index + 1;\n    }\n    int res = N - prev_pos;\n    prev_pos = N - 1;\n    for (int i = M - 1; i >= 0; i--) {\n      int index = prev_pos;\n      while (index >= 0 && str1.charAt(index) != str2.charAt(i)) {\n        index--;\n      }\n      if (i != 0) {\n        res = Math.max(res, index - pos[i - 1] - 1);\n      }\n      prev_pos = index - 1;\n    }\n    res = Math.max(res, prev_pos + 1);\n    return res;\n  }\n\n  public static void main(String[] args) {\n    String str1 = \" GeeksforGeeks \";\n    String str2 = \" forks \";\n    System.out.print(longDelSub(str1, str2));\n  }\n}\n", "python": "def longDelSub(str1, str2):\n    N = len(str1)\n    M = len(str2)\n    prev_pos = 0\n    pos = [0] * M\n    for i in range(M):\n        index = prev_pos\n        while index < N and str1[index] != str2[i]:\n            index += 1\n        pos[i] = index\n        prev_pos = index + 1\n    res = N - prev_pos\n    prev_pos = N - 1\n    for i in range(M - 1, -1, -1):\n        index = prev_pos\n        while index >= 0 and str1[index] != str2[i]:\n            index -= 1\n        if i != 0:\n            res = max(res, index - pos[i - 1] - 1)\n        prev_pos = index - 1\n    res = max(res, prev_pos + 1)\n    return res\n\n\nstr1 = \" GeeksforGeeks \"\nstr2 = \" forks \"\nprint(longDelSub(str1, str2))\n"}
{"text": "Count numbers from a given range that contains a given number as the suffix ", "java": "class GFG {\n  static void countNumEnds(int A, int L, int R) {\n    int temp, count = 0, digits;\n    int cycle;\n    digits = (int) (Math.log10(A) + 1);\n    temp = (int) Math.pow(10, digits);\n    cycle = temp;\n    while (temp <= R) {\n      if (temp >= L) count++;\n      temp += cycle;\n    }\n    System.out.print(count);\n  }\n\n  public static void main(String[] args) {\n    int A = 2, L = 2, R = 20;\n    countNumEnds(A, L, R);\n  }\n}\n", "python": "from math import log10\n\n\ndef countNumEnds(A, L, R):\n    count = 0\n    digits = int(log10(A) + 1)\n    temp = int(pow(10, digits))\n    cycle = temp\n    while temp <= R:\n        if temp >= L:\n            count += 1\n        temp += cycle\n    print(count)\n\n\nA = 2\nL = 2\nR = 20\ncountNumEnds(A, L, R)\n"}
{"text": "Minimize replacement of characters to its nearest alphabet to make a string palindromic ", "java": "class GFG {\n  public static int minOperations(String s) {\n    int len = s.length();\n    int result = 0;\n    for (int i = 0; i < len / 2; i++) {\n      int D1 =\n          Math.max(s.charAt(i), s.charAt(len - 1 - i))\n              - Math.min(s.charAt(i), s.charAt(len - 1 - i));\n      int D2 = 26 - D1;\n      result += Math.min(D1, D2);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    String s = \" abccdb \";\n    System.out.println(minOperations(s));\n  }\n}\n", "python": "def minOperations(s):\n    length = len(s)\n    result = 0\n    for i in range(length // 2):\n        D1 = ord(max(s[i], s[length - 1 - i])) - ord(min(s[i], s[length - 1 - i]))\n        D2 = 26 - D1\n        result += min(D1, D2)\n    return result\n\n\ns = \" abccdb \"\nprint(minOperations(s))\n"}
{"text": "Count subsequences which contains both the maximum and minimum array element ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static double countSubSequence(int[] arr, int n) {\n    int maximum = Arrays.stream(arr).max().getAsInt();\n    int minimum = Arrays.stream(arr).min().getAsInt();\n    if (maximum == minimum) return Math.pow(2, n) - 1;\n    int i = count(arr, maximum);\n    int j = count(arr, minimum);\n    double res = (Math.pow(2, i) - 1) * (Math.pow(2, j) - 1) * Math.pow(2, n - i - j);\n    return res;\n  }\n\n  static int count(int[] arr, int value) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) if (arr[i] == value) sum++;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 4};\n    int n = arr.length;\n    System.out.println(countSubSequence(arr, n));\n  }\n}\n", "python": "def countSubSequence(arr, n):\n    maximum = max(arr)\n    minimum = min(arr)\n    if maximum == minimum:\n        return pow(2, n) - 1\n    i = arr.count(maximum)\n    j = arr.count(minimum)\n    res = (pow(2, i) - 1) * (pow(2, j) - 1) * pow(2, n - i - j)\n    return res\n\n\narr = [1, 2, 3, 4]\nn = len(arr)\nprint(countSubSequence(arr, n))\n"}
{"text": "Remove odd indexed characters from a given string ", "java": "import java.util.*;\n\nclass GFG {\n  static String removeOddIndexCharacters(String s) {\n    String new_string = \" \";\n    for (int i = 0; i < s.length(); i++) {\n      if (i % 2 == 1) continue;\n      new_string += s.charAt(i);\n    }\n    return new_string;\n  }\n\n  public static void main(String[] args) {\n    String str = \" abcdef \";\n    str = removeOddIndexCharacters(str);\n    System.out.print(str);\n  }\n}\n", "python": "def removeOddIndexCharacters(s):\n    new_s = \" \"\n    i = 0\n    while i < len(s):\n        if i % 2 == 1:\n            i += 1\n            continue\n        new_s += s[i]\n        i += 1\n    return new_s\n\n\nif __name__ == \" _ _ main _ _ \":\n    str = \" abcdef \"\n    str = removeOddIndexCharacters(str)\n    print(str)\n"}
{"text": "Count of collisions at a point ( X , Y ) ", "java": "import java.util.*;\n\nclass GFG {\n  static double solve(int[][] D, int N, int X, int Y) {\n    ArrayList<Double> T = new ArrayList<>();\n    for (int i = 0; i < N; i++) {\n      int x = D[i][0];\n      int y = D[i][1];\n      double speed = D[i][2];\n      double time = ((x * x - X * X) + (y * y - Y * Y)) / (speed * speed);\n      T.add(time);\n    }\n    Collections.sort(T);\n    int i = 0;\n    int total = 0;\n    while (i < (T.size() - 1)) {\n      int count = 1;\n      while ((i < (T.size() - 1)) && (Double.compare(T.get(i), T.get(i + 1)) == 0)) {\n        count += 1;\n        i += 1;\n      }\n      total += (count * (count - 1)) / 2;\n      i += 1;\n    }\n    return total;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 5};\n    int N = 5;\n    int[][] D = {{5, 12, 1}, {16, 63, 5}, {-10, 24, 2}, {7, 24, 2}, {-24, 7, 2}};\n    int X = 0, Y = 0;\n    System.out.println(solve(D, N, X, Y));\n  }\n}\n", "python": "def solve(D, N, X, Y):\n    T = []\n    for i in range(N):\n        x = D[i][0]\n        y = D[i][1]\n        speed = D[i][2]\n        time = ((x * x - X * X) + (y * y - Y * Y)) / (speed * speed)\n        T.append(time)\n    T.sort()\n    i = 0\n    total = 0\n    while i < len(T) - 1:\n        count = 1\n        while i < len(T) - 1 and T[i] == T[i + 1]:\n            count += 1\n            i += 1\n        total += (count * (count - 1)) / 2\n        i += 1\n    return total\n\n\nN = 5\nD = [[5, 12, 1], [16, 63, 5], [-10, 24, 2], [7, 24, 2], [-24, 7, 2]]\nX = 0\nY = 0\nprint(solve(D, N, X, Y))\n"}
{"text": "Count of ways to split an Array into three contiguous Subarrays having increasing Sum ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int findCount(int arr[], int n) {\n    int[] prefix_sum = new int[n];\n    prefix_sum[0] = arr[0];\n    for (int i = 1; i < n; i++) prefix_sum[i] = prefix_sum[i - 1] + arr[i];\n    int[] suffix_sum = new int[n];\n    suffix_sum[n - 1] = arr[n - 1];\n    for (int i = n - 2; i >= 0; i--) suffix_sum[i] = suffix_sum[i + 1] + arr[i];\n    int s = 1, e = 1;\n    int curr_subarray_sum = 0, count = 0;\n    while (s < n - 1 && e < n - 1) {\n      while (e < n - 1 && curr_subarray_sum < prefix_sum[s - 1]) {\n        curr_subarray_sum += arr[e++];\n      }\n      if (curr_subarray_sum <= suffix_sum[e]) {\n        count++;\n      }\n      curr_subarray_sum -= arr[s++];\n    }\n    return count;\n  }\n\n  public static void main(String args[]) {\n    int[] arr = {2, 3, 1, 7};\n    int n = arr.length;\n    System.out.println(findCount(arr, n));\n  }\n}\n", "python": "def findCount(arr, n):\n    prefix_sum = [0 for x in range(n)]\n    prefix_sum[0] = arr[0]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i]\n    suffix_sum = [0 for x in range(n)]\n    suffix_sum[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix_sum[i] = suffix_sum[i + 1] + arr[i]\n    s = 1\n    e = 1\n    curr_subarray_sum = 0\n    count = 0\n    while s < n - 1 and e < n - 1:\n        while e < n - 1 and curr_subarray_sum < prefix_sum[s - 1]:\n            curr_subarray_sum += arr[e]\n            e += 1\n        if curr_subarray_sum <= suffix_sum[e]:\n            count += 1\n        curr_subarray_sum -= arr[s]\n        s += 1\n    return count\n\n\narr = [2, 3, 1, 7]\nn = len(arr)\nprint(findCount(arr, n))\n"}
{"text": "Minimum Sum of a pair at least K distance apart from an Array ", "java": "import java.util.*;\n\nclass GFG {\n  public static void findMinSum(int A[], int K) {\n    int n = A.length;\n    int suffix_min[] = new int[n];\n    suffix_min[n - 1] = A[n - 1];\n    for (int i = n - 2; i >= 0; i--) suffix_min[i] = Math.min(suffix_min[i + 1], A[i]);\n    int min_sum = Integer.MAX_VALUE;\n    for (int i = 0; i < n; i++) {\n      if (i + K < n) min_sum = Math.min(min_sum, A[i] + suffix_min[i + K]);\n    }\n    System.out.println(min_sum);\n  }\n\n  public static void main(String[] args) {\n    int A[] = {1, 2, 3, 4, 5, 6};\n    int K = 2;\n    findMinSum(A, K);\n  }\n}\n", "python": "import sys\n\n\ndef findMinSum(A, K):\n    n = len(A)\n    minimum_sum = sys.maxsize\n    for i in range(n):\n        minimum = sys.maxsize\n        for j in range(i + K, n, 1):\n            minimum = min(minimum, A[j])\n        if minimum == sys.maxsize:\n            continue\n        minimum_sum = min(minimum_sum, A[i] + minimum)\n    print(minimum_sum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [4, 2, 5, 4, 3, 2, 5]\n    K = 3\n    findMinSum(A, K)\n"}
{"text": "Check if the count of inversions of two given types on an Array are equal or not ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean solve(int a[], int n) {\n    int mx = Integer.MIN_VALUE;\n    for (int j = 1; j < n; j++) {\n      if (mx > a[j]) return false;\n      mx = Math.max(mx, a[j - 1]);\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {1, 0, 2};\n    int n = a.length;\n    boolean possible = solve(a, n);\n    if (possible) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "import sys\n\n\ndef solve(a, n):\n    mx = -sys.maxsize - 1\n    for j in range(1, n):\n        if mx > a[j]:\n            return False\n        mx = max(mx, a[j - 1])\n    return True\n\n\na = [1, 0, 2]\nn = len(a)\npossible = solve(a, n)\nif possible != 0:\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Find number of pairs ( x , y ) in an Array such that x ^ y > y ^ x ", "java": "class GFG {\n  static int countPairs(int X[], int Y[], int m, int n) {\n    int[] suffix = new int[1005];\n    long total_pairs = 0;\n    for (int i = 0; i < n; i++) suffix[Y[i]]++;\n    for (int i = (int) 1e3; i >= 3; i--) suffix[i] += suffix[i + 1];\n    for (int i = 0; i < m; i++) {\n      if (X[i] == 0) continue;\n      else if (X[i] == 1) {\n        total_pairs += suffix[0];\n        continue;\n      } else if (X[i] == 2) total_pairs += suffix[5];\n      else if (X[i] == 3) total_pairs += suffix[2] + suffix[4];\n      else total_pairs += suffix[X[i] + 1];\n      total_pairs += suffix[0] + suffix[1];\n    }\n    return (int) total_pairs;\n  }\n\n  public static void main(String[] args) {\n    int X[] = {10, 19, 18};\n    int Y[] = {11, 15, 9};\n    int m = X.length;\n    int n = Y.length;\n    System.out.print(countPairs(X, Y, m, n));\n  }\n}\n", "python": "def countPairs(X, Y, m, n):\n    suffix = [0] * 1005\n    total_pairs = 0\n    for i in range(n):\n        suffix[Y[i]] += 1\n    for i in range(int(1e3), 2, -1):\n        suffix[i] += suffix[i + 1]\n    for i in range(m):\n        if X[i] == 0:\n            continue\n        elif X[i] == 1:\n            total_pairs += suffix[0]\n            continue\n        elif X[i] == 2:\n            total_pairs += suffix[5]\n        elif X[i] == 3:\n            total_pairs += suffix[2] + suffix[4]\n        else:\n            total_pairs += suffix[X[i] + 1]\n        total_pairs += suffix[0] + suffix[1]\n    return total_pairs\n\n\nif __name__ == \" _ _ main _ _ \":\n    X = [10, 19, 18]\n    Y = [11, 15, 9]\n    m = len(X)\n    n = len(Y)\n    print(countPairs(X, Y, m, n))\n"}
{"text": "Count of distinct power of prime factor of N ", "java": "import java.util.*;\n\nclass GFG {\n  static int countFac(int n) {\n    int m = n;\n    int count = 0;\n    for (int i = 2; (i * i) <= m; ++i) {\n      int total = 0;\n      while (n % i == 0) {\n        n /= i;\n        ++total;\n      }\n      int temp = 0;\n      for (int j = 1; (temp + j) <= total; ++j) {\n        temp += j;\n        ++count;\n      }\n    }\n    if (n != 1) ++count;\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int N = 24;\n    System.out.println(countFac(N));\n  }\n}\n", "python": "def countFac(n):\n    m = n\n    count = 0\n    i = 2\n    while (i * i) <= m:\n        total = 0\n        while n % i == 0:\n            n /= i\n            total += 1\n        temp = 0\n        j = 1\n        while (temp + j) <= total:\n            temp += j\n            count += 1\n            j += 1\n        i += 1\n    if n != 1:\n        count += 1\n    return count\n\n\nN = 24\nprint(countFac(N))\n"}
{"text": "Longest permutation subsequence in a given array ", "java": "import java.util.*;\n\nclass GFG {\n  static int longestPermutation(int arr[], int n) {\n    HashMap<Integer, Integer> freq = new HashMap<Integer, Integer>();\n    for (int i = 0; i < n; i++) {\n      if (freq.containsKey(arr[i])) {\n        freq.put(arr[i], freq.get(arr[i]) + 1);\n      } else {\n        freq.put(arr[i], 1);\n      }\n    }\n    int len = 0;\n    for (int i = 1; i <= n; i++) {\n      if (!freq.containsKey(i)) {\n        break;\n      }\n      len++;\n    }\n    return len;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 2, 1, 6, 5};\n    int n = arr.length;\n    System.out.print(longestPermutation(arr, n));\n  }\n}\n", "python": "from collections import defaultdict\n\n\ndef longestPermutation(a, n):\n    freq = defaultdict(int)\n    for i in range(n):\n        freq[a[i]] += 1\n    length = 0\n    for i in range(1, n + 1):\n        if freq[i] == 0:\n            break\n        length += 1\n    return length\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 2, 1, 6, 5]\n    n = len(arr)\n    print(longestPermutation(arr, n))\n"}
{"text": "Check if an Array is a permutation of numbers from 1 to N ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean permutation(int[] arr, int n) {\n    Set<Integer> hash = new HashSet<Integer>();\n    int maxEle = 0;\n    for (int i = 0; i < n; i++) {\n      hash.add(arr[i]);\n      maxEle = Math.max(maxEle, arr[i]);\n    }\n    if (maxEle != n) return false;\n    if (hash.size() == n) return true;\n    return false;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 2, 5, 3, 2};\n    int n = arr.length;\n    if (permutation(arr, n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def permutation(arr, n):\n    s = set()\n    maxEle = 0\n    for i in range(n):\n        s.add(arr[i])\n        maxEle = max(maxEle, arr[i])\n    if maxEle != n:\n        return False\n    if len(s) == n:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 5, 3, 2]\n    n = len(arr)\n    if permutation(arr, n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Number of intersections between two ranges ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int upperBound(ArrayList<Integer> a, int low, int high, int element) {\n    while (low < high) {\n      int middle = low + (high - low) / 2;\n      if (a.get(middle) > element) {\n        high = middle;\n      } else {\n        low = middle + 1;\n      }\n    }\n    return low;\n  }\n\n  static int FindIntersection(\n      ArrayList<ArrayList<Integer>> type1, int n, ArrayList<ArrayList<Integer>> type2, int m) {\n    int ans = n * m;\n    ArrayList<Integer> start = new ArrayList<Integer>();\n    ArrayList<Integer> end = new ArrayList<Integer>();\n    for (int i = 0; i < n; i++) {\n      start.add(type1.get(i).get(0));\n      end.add(type1.get(i).get(1));\n    }\n    Collections.sort(start);\n    Collections.sort(end);\n    for (int i = 0; i < m; i++) {\n      int L = type2.get(i).get(0);\n      int R = type2.get(i).get(1);\n      ans -= start.size() - upperBound(start, 0, start.size(), R);\n      ans -= upperBound(end, 0, end.size(), L - 1);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<ArrayList<Integer>> type1 = new ArrayList<ArrayList<Integer>>();\n    type1.add(new ArrayList<Integer>(Arrays.asList(1, 2)));\n    type1.add(new ArrayList<Integer>(Arrays.asList(2, 3)));\n    type1.add(new ArrayList<Integer>(Arrays.asList(4, 5)));\n    type1.add(new ArrayList<Integer>(Arrays.asList(6, 7)));\n    ArrayList<ArrayList<Integer>> type2 = new ArrayList<ArrayList<Integer>>();\n    type2.add(new ArrayList<Integer>(Arrays.asList(1, 5)));\n    type2.add(new ArrayList<Integer>(Arrays.asList(2, 3)));\n    type2.add(new ArrayList<Integer>(Arrays.asList(4, 7)));\n    type2.add(new ArrayList<Integer>(Arrays.asList(5, 7)));\n    int n = type1.size();\n    int m = type2.size();\n    System.out.println(FindIntersection(type1, n, type2, m));\n  }\n}\n", "python": "from bisect import bisect as upper_bound\n\n\ndef FindIntersection(type1, n, type2, m):\n    ans = n * m\n    start = []\n    end = []\n    for i in range(n):\n        start.append(type1[i][0])\n        end.append(type1[i][1])\n    start = sorted(start)\n    start = sorted(end)\n    for i in range(m):\n        L = type2[i][0]\n        R = type2[i][1]\n        ans -= len(start) - upper_bound(start, R)\n        ans -= upper_bound(end, L - 1)\n    return ans\n\n\ntype1 = [[1, 2], [2, 3], [4, 5], [6, 7]]\ntype2 = [[1, 5], [2, 3], [4, 7], [5, 7]]\nn = len(type1)\nm = len(type2)\nprint(FindIntersection(type1, n, type2, m))\n"}
{"text": "Minimize the number of steps required to reach the end of the array ", "java": "import java.util.*;\n\nclass GFG {\n  static int minSteps(int arr[], int n) {\n    boolean[] v = new boolean[n];\n    Queue<Integer> q = new LinkedList<>();\n    q.add(0);\n    int depth = 0;\n    while (q.size() > 0) {\n      int x = q.size();\n      while (x-- > 0) {\n        int i = q.peek();\n        q.poll();\n        if (v[i]) continue;\n        if (i == n - 1) return depth;\n        v[i] = true;\n        if (i + arr[i] < n) q.add(i + arr[i]);\n        if (i - arr[i] >= 0) q.add(i - arr[i]);\n      }\n      depth++;\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 1, 1, 1, 1, 1};\n    int n = arr.length;\n    System.out.println(minSteps(arr, n));\n  }\n}\n", "python": "maxLen = 10\nmaskLen = 130\ndp = [[0 for i in range(maskLen)] for i in range(maxLen)]\nv = [[False for i in range(maskLen)] for i in range(maxLen)]\n\n\ndef minSteps(arr, i, mask, n):\n    if i == n - 1:\n        return 0\n    if i > n - 1 or i < 0:\n        return 9999999\n    if (mask >> i) & 1:\n        return 9999999\n    if v[i][mask] == True:\n        return dp[i][mask]\n    v[i][mask] = True\n    dp[i][mask] = 1 + min(\n        minSteps(arr, i - arr[i], (mask | (1 << i)), n),\n        minSteps(arr, i + arr[i], (mask | (1 << i)), n),\n    )\n    return dp[i][mask]\n\n\narr = [1, 2, 2, 2, 1, 1]\nn = len(arr)\nans = minSteps(arr, 0, 0, n)\nif ans >= 9999999:\n    print(-1)\nelse:\n    print(ans)\n"}
{"text": "Find maximum sum taking every Kth element in the array ", "java": "class GFG {\n  static int maxSum(int arr[], int n, int K) {\n    int maximum = Integer.MIN_VALUE;\n    for (int i = 0; i < n; i++) {\n      int sumk = 0;\n      for (int j = i; j < n; j += K) sumk = sumk + arr[j];\n      maximum = Math.max(maximum, sumk);\n    }\n    return maximum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 6, 4, 7, 2};\n    int n = arr.length;\n    int K = 2;\n    System.out.println(maxSum(arr, n, K));\n  }\n}\n", "python": "import sys\n\n\ndef maxSum(arr, n, K):\n    maximum = -sys.maxsize - 1\n    for i in range(n):\n        sumk = 0\n        for j in range(i, n, K):\n            sumk = sumk + arr[j]\n        maximum = max(maximum, sumk)\n    return maximum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 6, 4, 7, 2]\n    n = len(arr)\n    K = 2\n    print(maxSum(arr, n, K))\n"}
{"text": "Occurrences of a pattern in binary representation of a number ", "java": "import java.util.*;\n\nclass solution {\n  static int countPattern(int n, String pat) {\n    int pattern_int = 0;\n    int power_two = 1;\n    int all_ones = 0;\n    for (int i = pat.length() - 1; i >= 0; i--) {\n      int current_bit = pat.charAt(i) - '0';\n      pattern_int += (power_two * current_bit);\n      all_ones = all_ones + power_two;\n      power_two = power_two * 2;\n    }\n    int count = 0;\n    while (n != 0 && n >= pattern_int) {\n      if ((n & all_ones) == pattern_int) {\n        count++;\n      }\n      n = n >> 1;\n    }\n    return count;\n  }\n\n  public static void main(String args[]) {\n    int n = 500;\n    String pat = \"10\";\n    System.out.println(countPattern(n, pat));\n  }\n}\n", "python": "def countPattern(n, pat):\n    pattern_int = 0\n    power_two = 1\n    all_ones = 0\n    i = len(pat) - 1\n    while i >= 0:\n        current_bit = ord(pat[i]) - ord(\"0\")\n        pattern_int += power_two * current_bit\n        all_ones = all_ones + power_two\n        power_two = power_two * 2\n        i -= 1\n    count = 0\n    while n != 0 and n >= pattern_int:\n        if (n & all_ones) == pattern_int:\n            count += 1\n        n = n >> 1\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 500\n    pat = \"10\"\n    print(countPattern(n, pat))\n"}
{"text": "Sum and Product of minimum and maximum element of an Array ", "java": "import java.io.*;\n\nclass GFG {\n  static int getMin(int arr[], int n) {\n    int res = arr[0];\n    for (int i = 1; i < n; i++) res = Math.min(res, arr[i]);\n    return res;\n  }\n\n  static int getMax(int arr[], int n) {\n    int res = arr[0];\n    for (int i = 1; i < n; i++) res = Math.max(res, arr[i]);\n    return res;\n  }\n\n  static int findSum(int arr[], int n) {\n    int min = getMin(arr, n);\n    int max = getMax(arr, n);\n    return min + max;\n  }\n\n  static int findProduct(int arr[], int n) {\n    int min = getMin(arr, n);\n    int max = getMax(arr, n);\n    return min * max;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {12, 1234, 45, 67, 1};\n    int n = arr.length;\n    System.out.println(\" Sum \u2581 = \u2581 \" + findSum(arr, n));\n    System.out.println(\" Product \u2581 = \u2581 \" + findProduct(arr, n));\n  }\n}\n", "python": "def getMin(arr, n):\n    res = arr[0]\n    for i in range(1, n):\n        res = min(res, arr[i])\n    return res\n\n\ndef getMax(arr, n):\n    res = arr[0]\n    for i in range(1, n):\n        res = max(res, arr[i])\n    return res\n\n\ndef findSum(arr, n):\n    min = getMin(arr, n)\n    max = getMax(arr, n)\n    return min + max\n\n\ndef findProduct(arr, n):\n    min = getMin(arr, n)\n    max = getMax(arr, n)\n    return min * max\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [12, 1234, 45, 67, 1]\n    n = len(arr)\n    print(\" Sum \u2581 = \u2581 \", findSum(arr, n))\n    print(\" Product \u2581 = \u2581 \", findProduct(arr, n))\n"}
{"text": "Probability of a key K present in array ", "java": "class GFG {\n  static float kPresentProbability(int a[], int n, int k) {\n    float count = 0;\n    for (int i = 0; i < n; i++) if (a[i] == k) count++;\n    return count / n;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {4, 7, 2, 0, 8, 7, 5};\n    int K = 2;\n    int N = A.length;\n    double n = kPresentProbability(A, N, K);\n    double p = (double) Math.round(n * 100) / 100;\n    System.out.println(p);\n  }\n}\n", "python": "def kPresentProbability(a, n, k):\n    count = a.count(k)\n    return round(count / n, 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [4, 7, 2, 0, 8, 7, 5]\n    K = 2\n    N = len(A)\n    print(kPresentProbability(A, N, K))\n"}
{"text": "Minimum value of \" max \u2581 + \u2581 min \" in a subarray ", "java": "import java.io.*;\n\nclass GFG {\n  static int maxSum(int arr[], int n) {\n    if (n < 2) return -1;\n    int ans = arr[0] + arr[1];\n    for (int i = 1; i + 1 < n; i++) ans = Math.min(ans, (arr[i] + arr[i + 1]));\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 12, 2, 2};\n    int n = arr.length;\n    System.out.println(maxSum(arr, n));\n  }\n}\n", "python": "def maxSum(arr, n):\n    if n < 2:\n        return -1\n    ans = arr[0] + arr[1]\n    for i in range(1, n - 1, 1):\n        ans = min(ans, (arr[i] + arr[i + 1]))\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 12, 2, 2]\n    n = len(arr)\n    print(maxSum(arr, n))\n"}
{"text": "Find if given number is sum of first n natural numbers ", "java": "class GFG {\n  static int findS(int s) {\n    int sum = 0;\n    for (int n = 1; sum < s; n++) {\n      sum += n;\n      if (sum == s) return n;\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int s = 15;\n    int n = findS(s);\n    if (n == -1) System.out.println(\" - 1\");\n    else System.out.println(n);\n  }\n}\n", "python": "def findS(s):\n    _sum = 0\n    n = 1\n    while _sum < s:\n        _sum += n\n        n += 1\n    n -= 1\n    if _sum == s:\n        return n\n    return -1\n\n\ns = 15\nn = findS(s)\nif n == -1:\n    print(\" - 1\")\nelse:\n    print(n)\n"}
{"text": "Find if given number is sum of first n natural numbers ", "java": "import java.util.*;\n\nclass GFG {\n  public static int isvalid(int s) {\n    double k = (-1.0 + Math.sqrt(1 + 8 * s)) / 2;\n    if (Math.ceil(k) == Math.floor(k)) return (int) k;\n    else return -1;\n  }\n\n  public static void main(String[] args) {\n    int s = 15;\n    System.out.print(isvalid(s));\n  }\n}\n", "python": "def findS(s):\n    _sum = 0\n    n = 1\n    while _sum < s:\n        _sum += n\n        n += 1\n    n -= 1\n    if _sum == s:\n        return n\n    return -1\n\n\ns = 15\nn = findS(s)\nif n == -1:\n    print(\" - 1\")\nelse:\n    print(n)\n"}
{"text": "Save from Bishop in chessboard ", "java": "class GFG {\n  static int calcSafe(int pos) {\n    int j = pos % 10;\n    int i = pos / 10;\n    int dis_11 = Math.min(Math.abs(1 - i), Math.abs(1 - j));\n    int dis_18 = Math.min(Math.abs(1 - i), Math.abs(8 - j));\n    int dis_81 = Math.min(Math.abs(8 - i), Math.abs(1 - j));\n    int dis_88 = Math.min(Math.abs(8 - i), Math.abs(8 - j));\n    int sum = dis_11 + dis_18 + dis_81 + dis_88 + 1;\n    return (64 - sum);\n  }\n\n  public static void main(String[] args) {\n    int pos = 34;\n    System.out.print(\" Safe \u2581 Positions \u2581 = \u2581 \" + calcSafe(pos));\n  }\n}\n", "python": "import math\n\n\ndef calcSafe(pos):\n    j = pos % 10\n    i = pos / 10\n    dis_11 = min(abs(1 - i), abs(1 - j))\n    dis_18 = min(abs(1 - i), abs(8 - j))\n    dis_81 = min(abs(8 - i), abs(1 - j))\n    dis_88 = min(abs(8 - i), abs(8 - j))\n    sum = dis_11 + dis_18 + dis_81 + dis_88 + 1\n    return 64 - sum\n\n\npos = 34\nprint(\" Safe \u2581 Positions \u2581 = \u2581 \", math.ceil(calcSafe(pos)))\n"}
{"text": "Counting cross lines in an array ", "java": "import java.util.*;\n\nclass GFG {\n  static int count_crossline;\n\n  static void merge(int arr[], int l, int m, int r) {\n    int i, j, k;\n    int n1 = m - l + 1;\n    int n2 = r - m;\n    int[] L = new int[n1];\n    int[] R = new int[n2];\n    for (i = 0; i < n1; i++) {\n      L[i] = arr[l + i];\n    }\n    for (j = 0; j < n2; j++) {\n      R[j] = arr[m + 1 + j];\n    }\n    while (i < n1 && j < n2) {\n      if (L[i] <= R[j]) {\n        arr[k] = L[i];\n        i++;\n      } else {\n        arr[k] = R[j];\n        count_crossline += (n1 - i);\n        j++;\n      }\n      k++;\n    }\n    while (i < n1) {\n      arr[k] = L[i];\n      i++;\n      k++;\n    }\n    while (j < n2) {\n      arr[k] = R[j];\n      j++;\n      k++;\n    }\n  }\n\n  static void mergeSort(int arr[], int l, int r) {\n    if (l < r) {\n      int m = l + (r - l) / 2;\n      mergeSort(arr, l, m);\n      mergeSort(arr, m + 1, r);\n      merge(arr, l, m, r);\n    }\n  }\n\n  static int countCrossLine(int arr[], int n) {\n    mergeSort(arr, 0, n - 1);\n    return count_crossline;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {12, 11, 13, 5, 6, 7};\n    int n = arr.length;\n    System.out.println(countCrossLine(arr, n));\n  }\n}\n", "python": "def countCrossLine(arr, n):\n    count_crossline = 0\n    i, key, j = 0, 0, 0\n    for i in range(1, n):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j = j - 1\n            count_crossline += 1\n        arr[j + 1] = key\n    return count_crossline\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [4, 3, 1, 2]\n    n = len(arr)\n    print(countCrossLine(arr, n))\n"}
{"text": "Minimum number of jumps required to sort numbers placed on a number line ", "java": "import java.util.*;\n\nclass GFG {\n  static void minJumps(int[] w, int[] l, int n) {\n    if (n == 1) {\n      System.out.print(0);\n      return;\n    }\n    int ans = 0;\n    HashMap<Integer, Integer> pos = new HashMap<Integer, Integer>();\n    HashMap<Integer, Integer> jump = new HashMap<Integer, Integer>();\n    HashMap<Integer, Boolean> filled = new HashMap<Integer, Boolean>();\n    int[] a = new int[n];\n    for (int i = 0; i < n; i++) {\n      if (pos.containsKey(w[i])) pos.put(w[i], i);\n      else pos.put(w[i], i);\n      if (filled.containsKey(w[i])) filled.put(i, true);\n      else filled.put(i, true);\n      if (jump.containsKey(w[i])) jump.put(w[i], l[i]);\n      else jump.put(w[i], l[i]);\n      a[i] = w[i];\n    }\n    Arrays.sort(a);\n    for (int curr = 1; curr < n; curr++) {\n      int currElementPos = pos.get(a[curr]);\n      int prevElementPos = pos.get(a[curr - 1]);\n      if (currElementPos > prevElementPos) continue;\n      while (currElementPos <= prevElementPos\n          || filled.containsKey(currElementPos) && filled.containsKey(currElementPos)) {\n        currElementPos += jump.get(a[curr]);\n        ans++;\n      }\n      if (pos.containsKey(a[curr])) pos.put(a[curr], currElementPos);\n      else pos.put(a[curr], currElementPos);\n      if (filled.containsKey(currElementPos)) filled.put(currElementPos, true);\n      else filled.put(currElementPos, true);\n    }\n    System.out.print(ans);\n  }\n\n  public static void main(String[] args) {\n    int[] W = {2, 1, 4, 3};\n    int[] L = {4, 1, 2, 4};\n    int N = W.length;\n    minJumps(W, L, N);\n  }\n}\n", "python": "def minJumps(w, l, n):\n    if n == 1:\n        print(0)\n        return\n    ans = 0\n    pos = {}\n    jump = {}\n    filled = {}\n    a = [0 for i in range(n)]\n    for i in range(n):\n        pos[w[i]] = i\n        filled[i] = True\n        jump[w[i]] = l[i]\n        a[i] = w[i]\n    a.sort()\n    for curr in range(1, n, 1):\n        currElementPos = pos[a[curr]]\n        prevElementPos = pos[a[curr - 1]]\n        if currElementPos > prevElementPos:\n            continue\n        while currElementPos <= prevElementPos or (\n            currElementPos in filled and filled[currElementPos]\n        ):\n            currElementPos += jump[a[curr]]\n            ans += 1\n        pos[a[curr]] = currElementPos\n        filled[currElementPos] = True\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    W = [2, 1, 4, 3]\n    L = [4, 1, 2, 4]\n    N = len(W)\n    minJumps(W, L, N)\n"}
{"text": "Rearrange array to make decimal equivalents of reversed binary representations of array elements sorted ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int keyFunc(int n) {\n    int rev = 0;\n    while (n > 0) {\n      rev = rev << 1;\n      if ((n & 1) == 1) rev = rev ^ 1;\n      n = n >> 1;\n    }\n    return rev;\n  }\n\n  static int[][] getNew(int arr[]) {\n    int ans[][] = new int[arr.length][2];\n    for (int i = 0; i < arr.length; i++) ans[i] = new int[] {keyFunc(arr[i]), arr[i]};\n    return ans;\n  }\n\n  static int[] getArr(int[][] arr) {\n    int ans[] = new int[arr.length];\n    int idx = 0;\n    for (int i[] : arr) ans[idx++] = i[1];\n    return ans;\n  }\n\n  static void sortArray(int arr[]) {\n    int[][] newArr = getNew(arr);\n    Arrays.sort(\n        newArr,\n        (a, b) -> {\n          if (Integer.compare(a[0], b[0]) == 0) return Integer.compare(a[1], b[1]);\n          return Integer.compare(a[0], b[0]);\n        });\n    arr = getArr(newArr);\n    int n = arr.length;\n    System.out.print(\" [ \");\n    for (int i = 0; i < n - 1; i++) System.out.print(arr[i] + \" , \u2581 \");\n    System.out.print(arr[n - 1] + \" ] \");\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {43, 52, 61, 41};\n    sortArray(arr);\n  }\n}\n", "python": "def keyFunc(n):\n    rev = 0\n    while n > 0:\n        rev = rev << 1\n        if n & 1 == 1:\n            rev = rev ^ 1\n        n = n >> 1\n    return rev\n\n\ndef getNew(arr):\n    ans = []\n    for i in arr:\n        ans.append([keyFunc(i), i])\n    return ans\n\n\ndef getArr(arr):\n    ans = []\n    for i in arr:\n        ans.append(i[1])\n    return ans\n\n\ndef sortArray(arr):\n    newArr = getNew(arr)\n    newArr.sort()\n    arr = getArr(newArr)\n    print(arr)\n\n\narr = [43, 52, 61, 41]\nsortArray(arr)\n"}
{"text": "Modify an array by sorting after reversal of bits of each array element ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int binaryToDecimal(String n) {\n    String num = n;\n    int dec_value = 0;\n    int base = 1;\n    int len = num.length();\n    for (int i = len - 1; i >= 0; i--) {\n      if (num.charAt(i) == '1') dec_value += base;\n      base = base * 2;\n    }\n    return dec_value;\n  }\n\n  static String decimalToBinary(int n) {\n    String binstr = \" \";\n    while (n > 0) {\n      binstr += (char) (n % 2 + 48);\n      n = n / 2;\n    }\n    return binstr;\n  }\n\n  static int reversedBinaryDecimal(int N) {\n    String decimal_to_binar = decimalToBinary(N);\n    int binary_to_decimal = binaryToDecimal(decimal_to_binar);\n    return binary_to_decimal;\n  }\n\n  static void printSortedArray(int arr[], int size) {\n    Arrays.sort(arr);\n    for (int i = 0; i < size; i++) System.out.print(arr[i] + \" \u2581 \");\n    System.out.println();\n  }\n\n  static void modifyArray(int arr[], int size) {\n    for (int i = 0; i < size; i++) {\n      arr[i] = reversedBinaryDecimal(arr[i]);\n    }\n    printSortedArray(arr, size);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {98, 43, 66, 83};\n    int n = arr.length;\n    modifyArray(arr, n);\n  }\n}\n", "python": "def binaryToDecimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    length = len(num)\n    for i in range(length - 1, -1, -1):\n        if num[i] == \"1\":\n            dec_value += base\n        base = base * 2\n    return dec_value\n\n\ndef decimalToBinary(n):\n    binstr = \" \"\n    while n > 0:\n        binstr += chr(n % 2 + 48)\n        n = n // 2\n    return binstr\n\n\ndef reversedBinaryDecimal(N):\n    decimal_to_binar = decimalToBinary(N)\n    binary_to_decimal = binaryToDecimal(decimal_to_binar)\n    return binary_to_decimal\n\n\ndef printSortedArray(arr, size):\n    arr.sort()\n    for i in range(size):\n        print(arr[i], end=\" \u2581 \")\n    print()\n\n\ndef modifyArray(arr, size):\n    for i in range(size):\n        arr[i] = reversedBinaryDecimal(arr[i])\n    printSortedArray(arr, size)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [98, 43, 66, 83]\n    n = len(arr)\n    modifyArray(arr, n)\n"}
{"text": "Count pairs from an array whose quotient of division of larger number by the smaller number does not exceed K ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int upper_bound(int arr[], int key) {\n    int l = -1, r = arr.length;\n    while (l + 1 < r) {\n      int m = (l + r) >>> 1;\n      if (arr[m] <= key) l = m;\n      else r = m;\n    }\n    return l + 1;\n  }\n\n  static void countPairs(int arr[], int n, int k) {\n    Arrays.sort(arr);\n    int ans = 0;\n    for (int i = 0; i < n - 1; i++) {\n      int high = upper_bound(arr, k * arr[i]);\n      ans += high - i - 1;\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 3, 9, 5};\n    int n = arr.length;\n    int k = 2;\n    countPairs(arr, n, k);\n  }\n}\n", "python": "from bisect import bisect_right\n\n\ndef countPairs(arr, n, k):\n    arr.sort()\n    ans = 0\n    for i in range(n - 1):\n        high = bisect_right(arr, k * arr[i])\n        ans += high - i - 1\n    print(ans)\n\n\narr = [2, 3, 9, 5]\nn = len(arr)\nk = 2\ncountPairs(arr, n, k)\n"}
{"text": "Kth highest XOR of diagonal elements from a Matrix ", "java": "import java.util.*;\n\nclass GFG {\n  static void findXOR(int[][] mat, int K) {\n    int N = mat.length;\n    int M = mat[0].length;\n    ArrayList<Integer> digXOR = new ArrayList<Integer>();\n    for (int l = 1; l <= (N + M - 1); l++) {\n      int s_col = Math.max(0, l - N);\n      int count = Math.min(l, Math.min((M - s_col), N));\n      int currXOR = 0;\n      for (int j = 0; j < count; j++) {\n        currXOR = (currXOR ^ mat[Math.min(N, l) - j - 1][s_col + j]);\n      }\n      digXOR.add(currXOR);\n    }\n    Collections.sort(digXOR);\n    System.out.print(digXOR.get(N + M - 1 - K));\n  }\n\n  public static void main(String[] args) {\n    int[][] mat = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int K = 3;\n    findXOR(mat, K);\n  }\n}\n", "python": "def findXOR(mat, K):\n    N = len(mat)\n    M = len(mat[0])\n    digXOR = []\n    for l in range(1, N + M, 1):\n        s_col = max(0, l - N)\n        count = min([l, (M - s_col), N])\n        currXOR = 0\n        for j in range(count):\n            currXOR = currXOR ^ mat[min(N, l) - j - 1][s_col + j]\n        digXOR.append(currXOR)\n    digXOR.sort(reverse=False)\n    print(digXOR[N + M - 1 - K])\n\n\nif __name__ == \" _ _ main _ _ \":\n    mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    K = 3\n    findXOR(mat, K)\n"}
{"text": "Maximum sum of absolute differences between distinct pairs of a triplet from an array ", "java": "import java.util.*;\n\nclass GFG {\n  static void maximumSum(int[] arr, int N) {\n    int sum;\n    Arrays.sort(arr);\n    sum = (arr[N - 1] - arr[0]) + (arr[N - 2] - arr[0]) + (arr[N - 1] - arr[N - 2]);\n    System.out.println(sum);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 3, 4, 2};\n    int N = arr.length;\n    maximumSum(arr, N);\n  }\n}\n", "python": "def maximumSum(arr, N):\n    sum = 0\n    arr.sort()\n    sum = (arr[N - 1] - arr[0]) + (arr[N - 2] - arr[0]) + (arr[N - 1] - arr[N - 2])\n    print(sum)\n\n\narr = [1, 3, 4, 2]\nN = len(arr)\nmaximumSum(arr, N)\n"}
{"text": "Maximize count of 1 s in an array by repeated division of array elements by 2 at most K times ", "java": "import java.util.*;\n\npublic class GFG {\n  static void findMaxNumbers(int arr[], int n, int k) {\n    Arrays.sort(arr);\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n      int opr = (int) Math.ceil((Math.log(arr[i]) / Math.log(2)));\n      k -= opr;\n      if (k < 0) {\n        break;\n      }\n      cnt++;\n    }\n    System.out.println(cnt);\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {5, 8, 4, 7};\n    int N = arr.length;\n    int K = 5;\n    findMaxNumbers(arr, N, K);\n  }\n}\n", "python": "import math\n\n\ndef findMaxNumbers(arr, n, k):\n    arr.sort()\n    cnt = 0\n    for i in range(n):\n        opr = math.ceil(math.log2(arr[i]))\n        k -= opr\n        if k < 0:\n            break\n        cnt += 1\n    print(cnt)\n\n\narr = [5, 8, 4, 7]\nN = len(arr)\nK = 5\nfindMaxNumbers(arr, N, K)\n"}
{"text": "Make the array elements equal by performing given operations minimum number of times ", "java": "import java.io.*;\n\nclass GFG {\n  static void minOperation(int a[], int N) {\n    int totOps = 0;\n    for (int i = 0; i < N - 1; i++) {\n      totOps += Math.abs(a[i] - a[i + 1]);\n    }\n    int maxOps = Math.max(Math.abs(a[0] - a[1]), Math.abs(a[N - 1] - a[N - 2]));\n    for (int i = 1; i < N - 1; i++) {\n      maxOps =\n          Math.max(\n              maxOps,\n              Math.abs(a[i] - a[i - 1])\n                  + Math.abs(a[i] - a[i + 1])\n                  - Math.abs(a[i - 1] - a[i + 1]));\n    }\n    System.out.println(totOps - maxOps);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, -1, 0, 1, 1};\n    int N = arr.length;\n    minOperation(arr, N);\n  }\n}\n", "python": "def minOperation(a, N):\n    totOps = 0\n    for i in range(N - 1):\n        totOps += abs(a[i] - a[i + 1])\n    maxOps = max(abs(a[0] - a[1]), abs(a[N - 1] - a[N - 2]))\n    for i in range(1, N - 1):\n        maxOps = max(\n            maxOps,\n            abs(a[i] - a[i - 1]) + abs(a[i] - a[i + 1]) - abs(a[i - 1] - a[i + 1]),\n        )\n    print(totOps - maxOps)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, -1, 0, 1, 1]\n    N = len(arr)\n    minOperation(arr, N)\n"}
{"text": "Maximize sum of second minimums of each K length partitions of the array ", "java": "import java.util.*;\n\nclass GFG {\n  static void findSum(int A[], int N, int K) {\n    Arrays.sort(A);\n    int sum = 0;\n    for (int i = N / K; i < N; i += K - 1) {\n      sum += A[i];\n    }\n    System.out.print(sum);\n  }\n\n  public static void main(String[] args) {\n    int K = 4;\n    int A[] = {2, 3, 1, 4, 7, 5, 6, 1};\n    int N = A.length;\n    findSum(A, N, K);\n  }\n}\n", "python": "def findSum(A, N, K):\n    A.sort()\n    sum = 0\n    for i in range(N // K, N, K - 1):\n        sum += A[i]\n    print(sum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    K = 4\n    A = [2, 3, 1, 4, 7, 5, 6, 1]\n    N = len(A)\n    findSum(A, N, K)\n"}
{"text": "Minimize remaining array element by removing pairs and replacing them with their average ", "java": "import java.util.PriorityQueue;\n\nclass GFG {\n  static int findSmallestNumLeft(int arr[], int N) {\n    PriorityQueue<Integer> PQ = new PriorityQueue<Integer>((a, b) -> b - a);\n    for (int i = 0; i < N; i++) {\n      PQ.add(arr[i]);\n    }\n    while (PQ.size() > 1) {\n      int top1 = PQ.peek();\n      PQ.remove();\n      int top2 = PQ.peek();\n      PQ.remove();\n      PQ.add((top1 + top2 + 1) / 2);\n    }\n    return PQ.peek();\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {30, 16, 40};\n    int N = arr.length;\n    System.out.print(findSmallestNumLeft(arr, N));\n  }\n}\n", "python": "def findSmallestNumLeft(arr, N):\n    PQ = []\n    for i in range(N):\n        PQ.append(arr[i])\n    PQ = sorted(PQ)\n    while len(PQ) > 1:\n        top1 = PQ[-1]\n        del PQ[-1]\n        top2 = PQ[-1]\n        del PQ[-1]\n        PQ.append((top1 + top2 + 1) // 2)\n        PQ = sorted(PQ)\n    return PQ[-1]\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [30, 16, 40]\n    N = len(arr)\n    print(findSmallestNumLeft(arr, N))\n"}
{"text": "Split array into K ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static void findMinimum(int arr[], int N, int K) {\n    Arrays.sort(arr);\n    int ans = 0;\n    for (int i = 1; i < 2 * (N / K); i += 2) {\n      ans += arr[i];\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {11, 20, 5, 7, 8, 14, 2, 17, 16, 10};\n    int N = arr.length;\n    int K = 5;\n    findMinimum(arr, N, K);\n  }\n}\n", "python": "def findMinimum(arr, N, K):\n    arr = sorted(arr)\n    ans = 0\n    for i in range(1, 2 * (N // K), 2):\n        ans += arr[i]\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [11, 20, 5, 7, 8, 14, 2, 17, 16, 10]\n    N = len(arr)\n    K = 5\n    findMinimum(arr, N, K)\n"}
{"text": "Minimize cost required to complete all processes ", "java": "import java.util.*;\n\nclass GFG {\n  static int minimumCostReqToCompthePrcess(int[][] arr) {\n    Arrays.sort(arr, (a, b) -> b[1] - a[1]);\n    int n = arr.length;\n    int minCost = 0;\n    int minCostInit = 0;\n    for (int i = 0; i < n; i++) {\n      if (arr[i][1] > minCostInit) {\n        minCost += (arr[i][1] - minCostInit);\n        minCostInit = arr[i][1];\n      }\n      minCostInit -= arr[i][0];\n    }\n    return minCost;\n  }\n\n  public static void main(String[] args) {\n    int[][] arr = {{1, 2}, {2, 4}, {4, 8}};\n    System.out.println(minimumCostReqToCompthePrcess(arr));\n  }\n}\n", "python": "def minimumCostReqToCompthePrcess(arr):\n    arr.sort(key=lambda x: x[0] - x[1])\n    n = len(arr)\n    minCost = 0\n    minCostInit = 0\n    for i in range(n):\n        if arr[i][1] > minCostInit:\n            minCost += arr[i][1] - minCostInit\n            minCostInit = arr[i][1]\n        minCostInit -= arr[i][0]\n    return minCost\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [[1, 2], [2, 4], [4, 8]]\n    print(minimumCostReqToCompthePrcess(arr))\n"}
{"text": "Split array into equal length subsets with maximum sum of Kth largest element of each subset ", "java": "import java.util.*;\n\nclass GFG {\n  static int maximumKthLargestsumPart(int[] arr, int N, int M, int K) {\n    int maxSum = 0;\n    if (N % M != 0) return -1;\n    int sz = (N / M);\n    if (K > sz) return -1;\n    Arrays.sort(arr);\n    int i, k, t;\n    for (i = 0; i < N / 2; i++) {\n      t = arr[i];\n      arr[i] = arr[N - i - 1];\n      arr[N - i - 1] = t;\n    }\n    for (i = 1; i <= M; i++) {\n      maxSum += arr[i * K - 1];\n    }\n    return maxSum;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 4, 5, 6};\n    int M = 2;\n    int K = 1;\n    int N = arr.length;\n    System.out.println(maximumKthLargestsumPart(arr, N, M, K));\n  }\n}\n", "python": "def maximumKthLargestsumPart(arr, N, M, K):\n    maxSum = 0\n    if N % M != 0:\n        return -1\n    sz = N / M\n    if K > sz:\n        return -1\n    arr = sorted(arr)\n    for i in range(0, N // 2):\n        t = arr[i]\n        arr[i] = arr[N - i - 1]\n        arr[N - i - 1] = t\n    for i in range(1, M + 1):\n        maxSum += arr[i * K - 1]\n    return maxSum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4, 5, 6]\n    M = 2\n    K = 1\n    N = len(arr)\n    print(maximumKthLargestsumPart(arr, N, M, K))\n"}
{"text": "Split array into K subsets to maximize sum of their second largest elements ", "java": "import java.io.*;\nimport java.util.Arrays;\n\nclass GFG {\n  static void splitArray(int arr[], int n, int K) {\n    Arrays.sort(arr);\n    int i = n - 1;\n    int result = 0;\n    while (K-- != 0) {\n      result += arr[i - 1];\n      i -= 2;\n    }\n    System.out.print(result);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 3, 1, 5, 1, 3};\n    int N = arr.length;\n    int K = 2;\n    splitArray(arr, N, K);\n  }\n}\n", "python": "def splitArray(arr, n, K):\n    arr.sort()\n    i = n - 1\n    result = 0\n    while K > 0:\n        result += arr[i - 1]\n        i -= 2\n        K -= 1\n    print(result)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 3, 1, 5, 1, 3]\n    N = len(arr)\n    K = 2\n    splitArray(arr, N, K)\n"}
{"text": "Maximize cost to empty given array by repetitively removing K array elements ", "java": "import java.io.*;\nimport java.util.Arrays;\n\nclass GFG {\n  static int maxCostToRemove(int arr[], int N, int K) {\n    int maxCost = 0;\n    Arrays.sort(arr);\n    for (int i = 0; i < N; i += K) {\n      maxCost += arr[i + 1];\n    }\n    return maxCost;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 3, 4, 1, 5, 1, 5, 3};\n    int N = arr.length;\n    int K = 4;\n    System.out.print(maxCostToRemove(arr, N, K));\n  }\n}\n", "python": "def maxCostToRemove(arr, N, K):\n    maxCost = 0\n    arr = sorted(arr)\n    for i in range(0, N, K):\n        maxCost += arr[i + 1]\n    return maxCost\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 3, 4, 1, 5, 1, 5, 3]\n    N = len(arr)\n    K = 4\n    print(maxCostToRemove(arr, N, K))\n"}
{"text": "Area of the largest rectangle formed by lines parallel to X and Y axis from given set of points ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxRectangle(int[][] sequence, int size) {\n    int[] X_Cord = new int[size];\n    int[] Y_Cord = new int[size];\n    for (int i = 0; i < size; i++) {\n      X_Cord[i] = sequence[i][0];\n      Y_Cord[i] = sequence[i][1];\n    }\n    Arrays.sort(X_Cord);\n    Arrays.sort(Y_Cord);\n    int X_Max = 0, Y_Max = 0;\n    for (int i = 0; i < size - 1; i++) {\n      X_Max = Math.max(X_Max, X_Cord[i + 1] - X_Cord[i]);\n      Y_Max = Math.max(Y_Max, Y_Cord[i + 1] - Y_Cord[i]);\n    }\n    return X_Max * Y_Max;\n  }\n\n  public static void main(String[] args) {\n    int[][] point = {{-2, 0}, {2, 0}, {4, 0}, {4, 2}};\n    int n = point.length;\n    System.out.print(maxRectangle(point, n));\n  }\n}\n", "python": "def maxRectangle(sequence, size):\n    X_Cord = [0] * size\n    Y_Cord = [0] * size\n    for i in range(size):\n        X_Cord[i] = sequence[i][0]\n        Y_Cord[i] = sequence[i][1]\n    X_Cord.sort()\n    Y_Cord.sort()\n    X_Max = 0\n    Y_Max = 0\n    for i in range(size - 1):\n        X_Max = max(X_Max, X_Cord[i + 1] - X_Cord[i])\n        Y_Max = max(Y_Max, Y_Cord[i + 1] - Y_Cord[i])\n    return X_Max * Y_Max\n\n\nif __name__ == \" _ _ main _ _ \":\n    point = [[-2, 0], [2, 0], [4, 0], [4, 2]]\n    n = len(point)\n    print(maxRectangle(point, n))\n"}
{"text": "Rearrange two given arrays to maximize sum of same indexed elements ", "java": "import java.util.Arrays;\nimport java.util.Collections;\n\nclass GFG {\n  static int MaxRearrngeSum(Integer A[], Integer B[], int N) {\n    Arrays.sort(A);\n    Arrays.sort(B, Collections.reverseOrder());\n    int maxSum = 0;\n    for (int i = 0; i < N; i++) {\n      maxSum += Math.abs(A[i] - B[i]);\n    }\n    return maxSum;\n  }\n\n  public static void main(String[] args) {\n    Integer A[] = {1, 2, 2, 4, 5};\n    Integer B[] = {5, 5, 5, 6, 6};\n    int N = A.length;\n    System.out.println(MaxRearrngeSum(A, B, N));\n  }\n}\n", "python": "def MaxRearrngeSum(A, B, N):\n    A.sort()\n    B.sort(reverse=True)\n    maxSum = 0\n    for i in range(N):\n        maxSum += abs(A[i] - B[i])\n    return maxSum\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [1, 2, 2, 4, 5]\n    B = [5, 5, 5, 6, 6]\n    N = len(A)\n    print(MaxRearrngeSum(A, B, N))\n"}
{"text": "Maximize count of pairs ( i , j ) from two arrays having element from first array not exceeding that from second array ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int numberOfPairs(int[] arr1, int n, int[] arr2, int m) {\n    PriorityQueue<Integer> pQueue =\n        new PriorityQueue<Integer>(\n            new Comparator<Integer>() {\n              public int compare(Integer lhs, Integer rhs) {\n                if (lhs < rhs) {\n                  return +1;\n                }\n                if (lhs.equals(rhs)) {\n                  return 0;\n                }\n                return -1;\n              }\n            });\n    int i, j;\n    Arrays.sort(arr1);\n    for (j = 0; j < m; j++) {\n      pQueue.add(arr2[j]);\n    }\n    int ans = 0;\n    for (i = n - 1; i >= 0; i--) {\n      if (pQueue.peek() >= 2 * arr1[i]) {\n        ans++;\n        pQueue.poll();\n      }\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] arr1 = {3, 1, 2};\n    int[] arr2 = {3, 4, 2, 1};\n    int N = 3;\n    int M = 4;\n    System.out.println(numberOfPairs(arr1, N, arr2, M));\n  }\n}\n", "python": "def numberOfPairs(arr1, n, arr2, m):\n    pq = []\n    arr1.sort(reverse=False)\n    for j in range(m):\n        pq.append(arr2[j])\n    ans = 2\n    i = n - 1\n    while i >= 0:\n        pq.sort(reverse=False)\n        if pq[0] >= 2 * arr1[i]:\n            ans += 1\n            print(pq[0])\n            pq.remove(pq[0])\n        i -= 1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr1 = [3, 2, 1]\n    arr2 = [3, 4, 2, 1]\n    N = len(arr1)\n    M = len(arr2)\n    print(numberOfPairs(arr1, N, arr2, M))\n"}
{"text": "Largest area in a grid unbounded by towers ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void maxArea(int[] point_x, int[] point_y, int n, int length, int width) {\n    Arrays.sort(point_x);\n    Arrays.sort(point_y);\n    int dx = point_x[0];\n    int dy = point_y[0];\n    for (int i = 1; i < n; i++) {\n      dx = Math.max(dx, point_x[i] - point_x[i - 1]);\n      dy = Math.max(dy, point_y[i] - point_y[i - 1]);\n    }\n    dx = Math.max(dx, (length + 1) - point_x[n - 1]);\n    dy = Math.max(dy, (width + 1) - point_y[n - 1]);\n    System.out.println((dx - 1) * (dy - 1));\n  }\n\n  public static void main(String[] args) {\n    int length = 15, width = 8;\n    int n = 3;\n    int point_x[] = {3, 11, 8};\n    int point_y[] = {8, 2, 6};\n    maxArea(point_x, point_y, n, length, width);\n  }\n}\n", "python": "def maxArea(point_x, point_y, n, length, width):\n    point_x.sort()\n    point_y.sort()\n    dx = point_x[0]\n    dy = point_y[0]\n    for i in range(1, n):\n        dx = max(dx, point_x[i] - point_x[i - 1])\n        dy = max(dy, point_y[i] - point_y[i - 1])\n    dx = max(dx, (length + 1) - point_x[n - 1])\n    dy = max(dy, (width + 1) - point_y[n - 1])\n    print((dx - 1) * (dy - 1))\n\n\nif __name__ == \" _ _ main _ _ \":\n    length = 15\n    width = 8\n    n = 3\n    point_x = [3, 11, 8]\n    point_y = [8, 2, 6]\n    maxArea(point_x, point_y, n, length, width)\n"}
{"text": "Minimize difference between maximum and minimum of Array by at most K replacements ", "java": "import java.io.*;\nimport java.util.Arrays;\n\nclass GFG {\n  static int maxMinDifference(int arr[], int n, int k) {\n    if (k >= n - 1) return 0;\n    Arrays.sort(arr);\n    int ans = arr[n - 1] - arr[0];\n    for (int i = k, j = n - 1; i >= 0; --i, --j) {\n      ans = Math.min(arr[j] - arr[i], ans);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 4, 6, 11, 15};\n    int N = arr.length;\n    int K = 3;\n    System.out.print(maxMinDifference(arr, N, K));\n  }\n}\n", "python": "def maxMinDifference(arr, n, k):\n    if k >= n - 1:\n        return 0\n    arr.sort()\n    ans = arr[n - 1] - arr[0]\n    i = k\n    j = n - 1\n    while i >= 0:\n        ans = min(arr[j] - arr[i], ans)\n        i -= 1\n        j -= 1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 4, 6, 11, 15]\n    N = len(arr)\n    K = 3\n    print(maxMinDifference(arr, N, K))\n"}
{"text": "Count of minimum reductions required to get the required sum K ", "java": "import java.util.*;\n\nclass GFG {\n  static int countReductions(ArrayList<int[]> v, int K) {\n    int sum = 0;\n    for (int[] i : v) {\n      sum += i[0];\n    }\n    if (sum <= K) {\n      return 0;\n    }\n    Collections.sort(v, (a, b) -> Math.abs(b[0] - b[1]) - Math.abs(a[0] - a[1]));\n    int i = 0;\n    while (sum > K && i < v.size()) {\n      sum -= (v.get(i)[0] - v.get(i)[1]);\n      i++;\n    }\n    if (sum <= K) return i;\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int N = 4, K = 25;\n    ArrayList<int[]> v = new ArrayList<>();\n    v.add(new int[] {10, 5});\n    v.add(new int[] {20, 9});\n    v.add(new int[] {12, 10});\n    v.add(new int[] {4, 2});\n    System.out.println(countReductions(v, K));\n  }\n}\n", "python": "from typing import Any, List\n\n\ndef countReductions(v: List[Any], K: int) -> int:\n    sum = 0\n    for i in v:\n        sum += i[0]\n    if sum <= K:\n        return 0\n    v.sort(key=lambda a: a[0] - a[1])\n    i = 0\n    while sum > K and i < len(v):\n        sum -= v[i][0] - v[i][1]\n        i += 1\n    if sum <= K:\n        return i\n    return -1\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    K = 25\n    v = [[0, 0] for _ in range(N)]\n    v[0] = [10, 5]\n    v[1] = [20, 9]\n    v[2] = [12, 10]\n    v[3] = [4, 2]\n    print(countReductions(v, K))\n"}
{"text": "Split array into two subarrays such that difference of their maximum is minimum ", "java": "import java.util.*;\n\nclass GFG {\n  static int findMinDif(int arr[], int N) {\n    Arrays.sort(arr);\n    return (arr[N - 1] - arr[N - 2]);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {7, 9, 5, 10};\n    int N = arr.length;\n    System.out.println(findMinDif(arr, N));\n  }\n}\n", "python": "def findMinDif(arr, N):\n    arr.sort()\n    return arr[N - 1] - arr[N - 2]\n\n\narr = [7, 9, 5, 10]\nN = len(arr)\nprint(findMinDif(arr, N))\n"}
{"text": "Sort elements of an array in increasing order of absolute difference of adjacent elements ", "java": "import java.util.*;\n\nclass GFG {\n  static void sortDiff(Vector<Integer> arr, int n) {\n    Collections.sort(arr);\n    Vector<Integer> out = new Vector<Integer>();\n    while (n > 0) {\n      out.add(arr.get(n / 2));\n      arr.remove(n / 2);\n      n = n - 1;\n    }\n    for (int i : out) System.out.print(i + \" \u2581 \");\n  }\n\n  public static void main(String[] args) {\n    Integer[] a = {8, 1, 2, 3, 0};\n    Vector<Integer> arr = new Vector<Integer>(Arrays.asList(a));\n    int n = 5;\n    sortDiff(arr, n);\n  }\n}\n", "python": "def sortDiff(arr, n):\n    arr.sort()\n    out = []\n    while n:\n        out.append(arr.pop(n // 2))\n        n = n - 1\n    print(*out)\n    return out\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [8, 1, 2, 3, 0]\n    n = 5\n    sortDiff(arr, n)\n"}
{"text": "Find the Kth pair in ordered list of all possible sorted pairs of the Array ", "java": "import java.util.*;\n\nclass GFG {\n  static void kthpair(int n, int k, int arr[]) {\n    int i, t = 0;\n    Arrays.sort(arr);\n    --k;\n    for (i = 0; i < n; i += t) {\n      for (t = 1; arr[i] == arr[i + t]; ++t)\n        ;\n      if (t * n > k) break;\n      k = k - t * n;\n    }\n    System.out.print(arr[i] + \" \u2581 \" + arr[k / t]);\n  }\n\n  public static void main(String[] args) {\n    int n = 3, k = 2;\n    int arr[] = {3, 1, 5};\n    kthpair(n, k, arr);\n  }\n}\n", "python": "def kthpair(n, k, arr):\n    arr.sort()\n    k -= 1\n    i = 0\n    while i < n:\n        t = 1\n        while arr[i] == arr[i + t]:\n            t += 1\n        if t * n > k:\n            break\n        k = k - t * n\n        i += t\n    print(arr[i], \" \u2581 \", arr[k // t])\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, k = 3, 2\n    arr = [3, 1, 5]\n    kthpair(n, k, arr)\n"}
{"text": "Minimum steps to convert an Array into permutation of numbers from 1 to N ", "java": "import java.util.*;\n\nclass GFG {\n  static int get_permutation(int arr[], int n) {\n    Arrays.sort(arr);\n    int result = 0;\n    for (int i = 0; i < n; i++) {\n      result += Math.abs(arr[i] - (i + 1));\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {0, 2, 3, 4, 1, 6, 8, 9};\n    int n = arr.length;\n    System.out.print(get_permutation(arr, n));\n  }\n}\n", "python": "def get_permutation(arr, n):\n    arr = sorted(arr)\n    result = 0\n    for i in range(n):\n        result += abs(arr[i] - (i + 1))\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [0, 2, 3, 4, 1, 6, 8, 9]\n    n = len(arr)\n    print(get_permutation(arr, n))\n"}
{"text": "Minimum increment or decrement required to sort the array ", "java": "import java.util.*;\n\nclass GFG {\n  static int[][] dp = new int[1000][1000];\n\n  static int minimumIncDec(int arr[], int N, int maxE, int minE) {\n    if (N == 0) {\n      return 0;\n    }\n    if (dp[N][maxE] != 0) return dp[N][maxE];\n    int ans = Integer.MAX_VALUE;\n    for (int k = minE; k <= maxE; k++) {\n      int x = minimumIncDec(arr, N - 1, k, minE);\n      ans = Math.min(ans, x + Math.abs(arr[N - 1] - k));\n    }\n    dp[N][maxE] = ans;\n    return dp[N][maxE];\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {5, 4, 3, 2, 1};\n    int N = arr.length;\n    int minE = Arrays.stream(arr).min().getAsInt();\n    int maxE = Arrays.stream(arr).max().getAsInt();\n    System.out.print(minimumIncDec(arr, N, maxE, minE));\n  }\n}\n", "python": "import sys\n\ndp = [[0 for x in range(1000)] for y in range(1000)]\n\n\ndef minimumIncDec(arr, N, maxE, minE):\n    if N == 0:\n        return 0\n    if dp[N][maxE]:\n        return dp[N][maxE]\n    ans = sys.maxsize\n    for k in range(minE, maxE + 1):\n        x = minimumIncDec(arr, N - 1, k, minE)\n        ans = min(ans, x + abs(arr[N - 1] - k))\n    dp[N][maxE] = ans\n    return dp[N][maxE]\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [5, 4, 3, 2, 1]\n    N = len(arr)\n    minE = min(arr)\n    maxE = max(arr)\n    print(minimumIncDec(arr, N, maxE, minE))\n"}
{"text": "Minimum cost to make an Array a permutation of first N natural numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static int make_permutation(int arr[], int n) {\n    Arrays.sort(arr);\n    int ans = 0;\n    for (int i = 0; i < n; i++) ans += Math.abs(i + 1 - arr[i]);\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {5, 3, 8, 1, 1};\n    int n = arr.length;\n    System.out.print(make_permutation(arr, n));\n  }\n}\n", "python": "def make_permutation(arr, n):\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        ans += abs(i + 1 - arr[i])\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [5, 3, 8, 1, 1]\n    n = len(arr)\n    print(make_permutation(arr, n))\n"}
{"text": "Partition the array into two odd length groups with minimized absolute difference between their median ", "java": "import java.util.*;\n\nclass GFG {\n  static int minimiseMedian(int arr[], int n) {\n    Arrays.sort(arr);\n    return Math.abs(arr[n / 2] - arr[(n / 2) - 1]);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {15, 25, 35, 50};\n    int n = arr.length;\n    System.out.println(minimiseMedian(arr, n));\n  }\n}\n", "python": "def minimiseMedian(arr, n):\n    arr.sort()\n    ans = abs(arr[n // 2] - arr[(n // 2) - 1])\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [15, 25, 35, 50]\n    n = len(arr)\n    print(minimiseMedian(arr, n))\n"}
{"text": "Minimize the sum of differences of consecutive elements after removing exactly K elements ", "java": "class GFG {\n  static int findSum(int[] arr, int n, int k) {\n    int ans = arr[n - k - 1] - arr[0];\n    for (int i = 1; i <= k; i++) {\n      ans = Math.min(arr[n - 1 - (k - i)] - arr[i], ans);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 100, 120, 140};\n    int k = 2;\n    int n = arr.length;\n    System.out.println(findSum(arr, n, k));\n  }\n}\n", "python": "def findSum(arr, n, k):\n    ans = arr[n - k - 1] - arr[0]\n    for i in range(1, k + 1):\n        ans = min(arr[n - 1 - (k - i)] - arr[i], ans)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 100, 120, 140]\n    k = 2\n    n = len(arr)\n    print(findSum(arr, n, k))\n"}
{"text": "Minimum elements to be removed from the ends to make the array sorted ", "java": "class GFG {\n  static int findMin(int arr[], int n) {\n    int ans = 1;\n    for (int i = 0; i < n; i++) {\n      int j = i + 1;\n      while (j < n && arr[j] >= arr[j - 1]) j++;\n      ans = Math.max(ans, j - i);\n      i = j - 1;\n    }\n    return n - ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 2, 1};\n    int n = arr.length;\n    System.out.println(findMin(arr, n));\n  }\n}\n", "python": "def findMin(arr, n):\n    ans = 1\n    for i in range(n):\n        j = i + 1\n        while j < n and arr[j] >= arr[j - 1]:\n            j += 1\n        ans = max(ans, j - i)\n        i = j - 1\n    return n - ans\n\n\narr = [3, 2, 1]\nn = len(arr)\nprint(findMin(arr, n))\n"}
{"text": "Number of subsequences of maximum length K containing no repeated elements ", "java": "import java.util.*;\n\nclass GFG {\n  static int countSubSeq(int a[], int n, int k) {\n    Arrays.sort(a);\n    List<Integer> arr = new LinkedList<>();\n    for (int i = 0; i < n; ) {\n      int count = 1, x = a[i];\n      i++;\n      while (i < n && a[i] == x) {\n        count++;\n        i++;\n      }\n      arr.add(count);\n    }\n    int m = arr.size();\n    n = Math.min(m, k);\n    int count = 1;\n    int[][] dp = new int[n + 1][m + 1];\n    for (int i = 0; i <= m; i++) dp[0][i] = 1;\n    for (int i = 1; i <= n; i++) {\n      for (int j = m; j >= 0; j--) {\n        if (j > m - i) dp[i][j] = 0;\n        else {\n          dp[i][j] = dp[i][j + 1] + arr.get(j) * dp[i - 1][j + 1];\n        }\n      }\n      count = count + dp[i][0];\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {2, 2, 3, 3, 5};\n    int n = a.length;\n    int k = 3;\n    System.out.println(countSubSeq(a, n, k));\n  }\n}\n", "python": "def countSubSeq(a, n, k):\n    a.sort(reverse=False)\n    arr = []\n    i = 0\n    while i < n:\n        count = 1\n        x = a[i]\n        i += 1\n        while i < n and a[i] == x:\n            count += 1\n            i += 1\n        arr.append(count)\n    m = len(arr)\n    n = min(m, k)\n    count = 1\n    dp = [[0 for i in range(m + 1)] for j in range(n + 1)]\n    for i in range(m + 1):\n        dp[0][i] = 1\n    for i in range(1, n + 1, 1):\n        j = m\n        while j >= 0:\n            if j > m - i:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i][j + 1] + arr[j] * dp[i - 1][j + 1]\n            j -= 1\n        count = count + dp[i][0]\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [2, 2, 3, 3, 5]\n    n = len(a)\n    k = 3\n    print(countSubSeq(a, n, k))\n"}
{"text": "Maximum sum of minimums of pairs in an array ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int maxSum(int a[], int n) {\n    Arrays.sort(a);\n    int sum = 0;\n    for (int i = 0; i < n - 1; i += 2) {\n      sum += a[i];\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 3, 2, 1, 4, 5};\n    int n = arr.length;\n    System.out.println(maxSum(arr, n));\n  }\n}\n", "python": "def maxSum(a, n):\n    a.sort()\n    sum = 0\n    for i in range(0, n - 1, 2):\n        sum += a[i]\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 3, 2, 1, 4, 5]\n    n = len(arr)\n    print(maxSum(arr, n))\n"}
{"text": "Minimum increment operations to make K elements equal ", "java": "import java.util.Arrays;\n\nclass geeksforgeeks {\n  static int minOperations(int ar[], int k) {\n    Arrays.sort(ar);\n    int opsNeeded = 0;\n    for (int i = 0; i < k; i++) {\n      opsNeeded += ar[k - 1] - ar[i];\n    }\n    int ans = opsNeeded;\n    for (int i = k; i < ar.length; i++) {\n      opsNeeded = opsNeeded - (ar[i - 1] - ar[i - k]);\n      opsNeeded += (k - 1) * (ar[i] - ar[i - 1]);\n      ans = Math.min(ans, opsNeeded);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {3, 1, 9, 100};\n    int n = arr.length;\n    int k = 3;\n    System.out.printf(\" % d \", minOperations(arr, k));\n  }\n}\n", "python": "def minOperations(ar, k):\n    ar = sorted(ar)\n    opsNeeded = 0\n    for i in range(k):\n        opsNeeded += ar[k - 1] - ar[i]\n    ans = opsNeeded\n    for i in range(k, len(ar)):\n        opsNeeded = opsNeeded - (ar[i - 1] - ar[i - k])\n        opsNeeded += (k - 1) * (ar[i] - ar[i - 1])\n        ans = min(ans, opsNeeded)\n    return ans\n\n\narr = [3, 1, 9, 100]\nn = len(arr)\nk = 3\nprint(minOperations(arr, k))\n"}
{"text": "Find Kth element in an array containing odd elements first and then even elements ", "java": "class GFG {\n  static int getNumber(int n, int k) {\n    int[] arr = new int[n];\n    int i = 0;\n    int odd = 1;\n    while (odd <= n) {\n      arr[i++] = odd;\n      odd += 2;\n    }\n    int even = 2;\n    while (even <= n) {\n      arr[i++] = even;\n      even += 2;\n    }\n    return arr[k - 1];\n  }\n\n  public static void main(String[] args) {\n    int n = 8, k = 5;\n    System.out.println(getNumber(n, k));\n  }\n}\n", "python": "def getNumber(n, k):\n    arr = [0] * n\n    i = 0\n    odd = 1\n    while odd <= n:\n        arr[i] = odd\n        i += 1\n        odd += 2\n    even = 2\n    while even <= n:\n        arr[i] = even\n        i += 1\n        even += 2\n    return arr[k - 1]\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 8\n    k = 5\n    print(getNumber(n, k))\n"}
{"text": "Greatest contiguous sub ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static ArrayList<Integer> findSubarray(int a[], int k, int n) {\n    ArrayList<ArrayList<Integer>> vec = new ArrayList<ArrayList<Integer>>();\n    for (int i = 0; i < n - k + 1; i++) {\n      ArrayList<Integer> temp = new ArrayList<Integer>();\n      for (int j = i; j < i + k; j++) {\n        temp.add(a[j]);\n      }\n      vec.add(temp);\n    }\n    Collections.sort(\n        vec,\n        new Comparator<ArrayList<Integer>>() {\n          @Override\n          public int compare(ArrayList<Integer> o1, ArrayList<Integer> o2) {\n            return o1.get(0).compareTo(o2.get(0));\n          }\n        });\n    return vec.get(vec.size() - 1);\n  }\n\n  public static void main(String[] args) {\n    int a[] = {1, 4, 3, 2, 5};\n    int k = 4;\n    int n = a.length;\n    ArrayList<Integer> ans = findSubarray(a, k, n);\n    for (int it : ans) {\n      System.out.print(it + \" \u2581 \");\n    }\n  }\n}\n", "python": "def findSubarray(a, k, n):\n    vec = []\n    for i in range(n - k + 1):\n        temp = []\n        for j in range(i, i + k):\n            temp.append(a[j])\n        vec.append(temp)\n    vec = sorted(vec)\n    return vec[len(vec) - 1]\n\n\na = [1, 4, 3, 2, 5]\nk = 4\nn = len(a)\nans = findSubarray(a, k, n)\nfor it in ans:\n    print(it, end=\" \u2581 \")\n"}
{"text": "Maximum product from array such that frequency sum of all repeating elements in product is less than or equal to 2 * k ", "java": "import java.util.*;\n\nclass GFG {\n  static long maxProd(int arr[], int n, int k) {\n    long product = 1;\n    HashMap<Integer, Integer> s = new HashMap<Integer, Integer>();\n    Arrays.sort(arr);\n    for (int i = 0; i < n; i++) {\n      if (s.containsKey(arr[i]) == false) {\n        product = product * arr[i];\n        s.put(arr[i], 1);\n      } else s.put(arr[i], s.get(arr[i]) + 1);\n    }\n    for (int j = n - 1; j >= 0 && k > 0; j--) {\n      if ((k > (s.get(arr[j]) - 1)) && ((s.get(arr[j]) - 1) > 0)) {\n        product *= Math.pow(arr[j], s.get(arr[j]) - 1);\n        k = k - s.get(arr[j]) + 1;\n        s.put(arr[j], 0);\n      }\n      if (k <= (s.get(arr[j]) - 1) && ((s.get(arr[j]) - 1) > 0)) {\n        product *= Math.pow(arr[j], k);\n        break;\n      }\n    }\n    return product;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {5, 6, 7, 8, 2, 5, 6, 8};\n    int n = arr.length;\n    int k = 2;\n    System.out.println(maxProd(arr, n, k));\n  }\n}\n", "python": "def maxProd(arr, n, k):\n    product = 1\n    s = dict.fromkeys(arr, 0)\n    arr.sort()\n    for i in range(n):\n        if s[arr[i]] == 0:\n            product = product * arr[i]\n        s[arr[i]] = s[arr[i]] + 1\n    j = n - 1\n    while j >= 0 and k > 0:\n        if (k > (s[arr[j]] - 1)) and ((s[arr[j]] - 1) > 0):\n            product *= pow(arr[j], s[arr[j]] - 1)\n            k = k - s[arr[j]] + 1\n            s[arr[j]] = 0\n        if k <= (s[arr[j]] - 1) and ((s[arr[j]] - 1) > 0):\n            product *= pow(arr[j], k)\n            break\n        j -= 1\n    return product\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [5, 6, 7, 8, 2, 5, 6, 8]\n    n = len(arr)\n    k = 2\n    print(maxProd(arr, n, k))\n"}
{"text": "Minimize the sum of the squares of the sum of elements of each group the array is divided into ", "java": "import java.util.*;\n\nclass GFG {\n  static int findAnswer(int n, int[] arr) {\n    Arrays.sort(arr);\n    int sum = 0;\n    for (int i = 0; i < n / 2; ++i) {\n      sum += (arr[i] + arr[n - i - 1]) * (arr[i] + arr[n - i - 1]);\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {53, 28, 143, 5};\n    int n = arr.length;\n    System.out.println(findAnswer(n, arr));\n  }\n}\n", "python": "def findAnswer(n, arr):\n    arr.sort(reverse=False)\n    sum = 0\n    for i in range(int(n / 2)):\n        sum += (arr[i] + arr[n - i - 1]) * (arr[i] + arr[n - i - 1])\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [53, 28, 143, 5]\n    n = len(arr)\n    print(findAnswer(n, arr))\n"}
{"text": "Average of remaining elements after removing K largest and K smallest elements from array ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static double average(int arr[], int n, int k) {\n    double total = 0;\n    if (2 * k >= n) return 0;\n    Arrays.sort(arr);\n    int start = k, end = n - k - 1;\n    for (int i = start; i <= end; i++) total += arr[i];\n    return (total / (n - 2 * k));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 4, 4, 5, 6};\n    int n = arr.length;\n    int k = 2;\n    System.out.println(average(arr, n, k));\n  }\n}\n", "python": "def average(arr, n, k):\n    total = 0\n    if 2 * k >= n:\n        return 0\n    arr.sort()\n    start, end = k, n - k - 1\n    for i in range(start, end + 1):\n        total += arr[i]\n    return total / (n - 2 * k)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 4, 4, 5, 6]\n    n = len(arr)\n    k = 2\n    print(average(arr, n, k))\n"}
{"text": "Minimum Increment / decrement to make array elements equal ", "java": "import java.util.*;\n\nclass GfG {\n  static int minCost(int A[], int n) {\n    int cost = 0;\n    Arrays.sort(A);\n    int K = A[n / 2];\n    for (int i = 0; i < n; ++i) cost += Math.abs(A[i] - K);\n    if (n % 2 == 0) {\n      int tempCost = 0;\n      K = A[(n / 2) - 1];\n      for (int i = 0; i < n; ++i) tempCost += Math.abs(A[i] - K);\n      cost = Math.min(cost, tempCost);\n    }\n    return cost;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {1, 6, 7, 10};\n    int n = A.length;\n    System.out.println(minCost(A, n));\n  }\n}\n", "python": "def minCost(A, n):\n    cost = 0\n    A.sort()\n    K = A[int(n / 2)]\n    for i in range(0, n):\n        cost = cost + abs(A[i] - K)\n    if n % 2 == 0:\n        tempCost = 0\n        K = A[int(n / 2) - 1]\n        for i in range(0, n):\n            tempCost = tempCost + abs(A[i] - K)\n        cost = min(cost, tempCost)\n    return cost\n\n\nA = [1, 6, 7, 10]\nn = len(A)\nprint(minCost(A, n))\n"}
{"text": "Sort first k values in ascending order and remaining n ", "java": "import java.util.*;\n\nclass GFG {\n  static void printOrder(int[] arr, int n, int k) {\n    int len1 = k, len2 = n - k;\n    int[] arr1 = new int[k];\n    int[] arr2 = new int[n - k];\n    for (int i = 0; i < k; i++) arr1[i] = arr[i];\n    for (int i = k; i < n; i++) arr2[i - k] = arr[i];\n    Arrays.sort(arr1, 0, k);\n    Arrays.sort(arr2, k, n - k);\n    for (int i = 0; i < n; i++) {\n      if (i < k) arr[i] = arr1[i];\n      else {\n        arr[i] = arr2[len2 - 1];\n        len2--;\n      }\n    }\n    for (int i = 0; i < n; i++) {\n      System.out.print(arr[i] + \" \u2581 \");\n    }\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {5, 4, 6, 2, 1, 3, 8, 9, -1};\n    int k = 4;\n    int n = arr.length;\n    printOrder(arr, n, k);\n  }\n}\n", "python": "def printOrder(arr, n, k):\n    a = arr[0:k]\n    a.sort()\n    b = arr[k:n]\n    b.sort()\n    b.reverse()\n    return a + b\n\n\narr = [5, 4, 6, 2, 1, 3, 8, 9, -1]\nk = 4\nn = len(arr)\narr = printOrder(arr, n, k)\nfor i in range(n):\n    print(arr[i], end=\" \u2581 \")\n"}
{"text": "Sort a nearly sorted array using STL ", "java": "import java.util.*;\n\npublic class GFG {\n  static void sortK(int[] arr, int n, int k) {\n    Arrays.sort(arr);\n  }\n\n  static void printArray(int[] arr, int size) {\n    for (int i = 0; i < size; i++) System.out.print(arr[i] + \" \u2581 \");\n    System.out.println();\n  }\n\n  public static void main(String[] args) {\n    int k = 3;\n    int[] arr = {2, 6, 3, 12, 56, 8};\n    int n = arr.length;\n    sortK(arr, n, k);\n    System.out.println(\" Following \u2581 is \u2581 sorted \u2581 array \");\n    printArray(arr, n);\n  }\n}\n", "python": "def sortK(arr, n, k):\n    arr.sort()\n\n\ndef printArray(arr, size):\n    for i in range(size):\n        print(arr[i], end=\" \u2581 \")\n    print()\n\n\nk = 3\narr = [2, 6, 3, 12, 56, 8]\nn = len(arr)\nsortK(arr, n, k)\nprint(\" Following \u2581 is \u2581 sorted \u2581 array \")\nprintArray(arr, n)\n"}
{"text": "Sort 3 numbers ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static void main(String[] args) {\n    int a[] = {10, 12, 5};\n    Arrays.sort(a);\n    for (int i = 0; i < 3; i++) System.out.print(a[i] + \" \u2581 \");\n  }\n}\n", "python": "a = [10, 12, 5]\na.sort()\nfor i in range(len(a)):\n    print(a[i], end=\" \u2581 \")\n"}
{"text": "Median after K additional integers ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static void printMedian(int arr[], int n, int K) {\n    Arrays.sort(arr);\n    System.out.print(arr[(n + K) / 2]);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {5, 3, 2, 8};\n    int k = 3;\n    int n = arr.length;\n    printMedian(arr, n, k);\n  }\n}\n", "python": "def printMedian(arr, n, K):\n    arr.sort()\n    print(arr[int((n + K) / 2)])\n\n\narr = [5, 3, 2, 8]\nk = 3\nn = len(arr)\nprintMedian(arr, n, k)\n"}
{"text": "Find the minimum and maximum amount to buy all N candies ", "java": "import java.util.*;\n\nclass GFG {\n  static int findMinimum(int arr[], int n, int k) {\n    int res = 0;\n    for (int i = 0; i < n; i++) {\n      res += arr[i];\n      n = n - k;\n    }\n    return res;\n  }\n\n  static int findMaximum(int arr[], int n, int k) {\n    int res = 0, index = 0;\n    for (int i = n - 1; i >= index; i--) {\n      res += arr[i];\n      index += k;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 2, 1, 4};\n    int n = arr.length;\n    int k = 2;\n    Arrays.sort(arr);\n    System.out.println(findMinimum(arr, n, k) + \" \u2581 \" + findMaximum(arr, n, k));\n  }\n}\n", "python": "from math import ceil\n\n\ndef find(arr, n, k):\n    arr.sort()\n    b = int(ceil(n / k))\n    print(\" minimum \u2581 \", sum(arr[:b]))\n    print(\" maximum \u2581 \", sum(arr[-b:]))\n\n\narr = [3, 2, 1, 4]\nn = len(arr)\nk = 2\nfind(arr, n, k)\n"}
{"text": "Sort an array when two halves are sorted ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void mergeTwoHalf(int[] A, int n) {\n    Arrays.sort(A);\n  }\n\n  public static void main(String[] args) {\n    int[] A = {2, 3, 8, -1, 7, 10};\n    int n = A.length;\n    mergeTwoHalf(A, n);\n    for (int i = 0; i < n; i++) System.out.print(A[i] + \" \u2581 \");\n  }\n}\n", "python": "def mergeTwoHalf(A, n):\n    A.sort()\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [2, 3, 8, -1, 7, 10]\n    n = len(A)\n    mergeTwoHalf(A, n)\n    for i in range(n):\n        print(A[i], end=\" \u2581 \")\n    DEDENT\n"}
{"text": "Choose k array elements such that difference of maximum and minimum is minimized ", "java": "import java.util.*;\n\nclass GFG {\n  static int minDiff(int arr[], int n, int k) {\n    int result = Integer.MAX_VALUE;\n    Arrays.sort(arr);\n    for (int i = 0; i <= n - k; i++) result = Math.min(result, arr[i + k - 1] - arr[i]);\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {10, 100, 300, 200, 1000, 20, 30};\n    int n = arr.length;\n    int k = 3;\n    System.out.println(minDiff(arr, n, k));\n  }\n}\n", "python": "def minDiff(arr, n, k):\n    result = +2147483647\n    arr.sort()\n    for i in range(n - k + 1):\n        result = int(min(result, arr[i + k - 1] - arr[i]))\n    return result\n\n\narr = [10, 100, 300, 200, 1000, 20, 30]\nn = len(arr)\nk = 3\nprint(minDiff(arr, n, k))\n"}
{"text": "Sort even ", "java": "import java.util.*;\n\nclass GFG {\n  static void bitonicGenerator(int arr[], int n) {\n    Vector<Integer> evenArr = new Vector<Integer>();\n    Vector<Integer> oddArr = new Vector<Integer>();\n    for (int i = 0; i < n; i++) {\n      if (i % 2 != 1) {\n        evenArr.add(arr[i]);\n      } else {\n        oddArr.add(arr[i]);\n      }\n    }\n    Collections.sort(evenArr);\n    Collections.sort(oddArr, Collections.reverseOrder());\n    int i = 0;\n    for (int j = 0; j < evenArr.size(); j++) {\n      arr[i++] = evenArr.get(j);\n    }\n    for (int j = 0; j < oddArr.size(); j++) {\n      arr[i++] = oddArr.get(j);\n    }\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};\n    int n = arr.length;\n    bitonicGenerator(arr, n);\n    for (int i = 0; i < n; i++) {\n      System.out.print(arr[i] + \" \u2581 \");\n    }\n  }\n}\n", "python": "def bitonicGenerator(arr, n):\n    i = 1\n    j = n - 1\n    if j % 2 != 0:\n        j = j - 1\n    while i < j:\n        arr[j], arr[i] = arr[i], arr[j]\n        i = i + 2\n        j = j - 2\n    arr_f = []\n    arr_s = []\n    for i in range(int((n + 1) / 2)):\n        arr_f.append(arr[i])\n    i = int((n + 1) / 2)\n    while i < n:\n        arr_s.append(arr[i])\n        i = i + 1\n    arr_f.sort()\n    arr_s.sort(reverse=True)\n    for i in arr_s:\n        arr_f.append(i)\n    return arr_f\n\n\narr = [1, 5, 8, 9, 6, 7, 3, 4, 2, 0]\nn = len(arr)\narr = bitonicGenerator(arr, n)\nprint(arr)\n"}
{"text": "Check whether a given number is even or odd ", "java": "class GFG {\n  public static boolean isEven(int n) {\n    return (n % 2 == 0);\n  }\n\n  public static void main(String[] args) {\n    int n = 101;\n    if (isEven(n) == true) System.out.print(\" Even \");\n    else System.out.print(\" Odd \");\n  }\n}\n", "python": "def isEven(n):\n    return not (n & 1)\n\n\nn = 101\nprint(\" Even \" if isEven(n) else \" Odd \")\n"}
{"text": "Minimize product of first 2 ^ K\u00e2 \u20ac\u201c 1 Natural Numbers by swapping bits for any pair any number of times ", "java": "import java.io.*;\n\nclass GFG {\n  static int minimumPossibleProduct(int K) {\n    int res = 1;\n    int range = (1 << K) - 1;\n    for (int i = 0; i < K; i++) {\n      res *= (range - 1);\n    }\n    res *= range;\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int K = 3;\n    System.out.println(minimumPossibleProduct(K));\n  }\n}\n", "python": "def minimumPossibleProduct(K):\n    res = 1\n    r = (1 << K) - 1\n    for i in range(0, K):\n        res *= r - 1\n    res *= r\n    return res\n\n\nK = 3\nprint(minimumPossibleProduct(K))\n"}
{"text": "Maximum possible value of array elements that can be made based on given capacity conditions ", "java": "class GFG {\n  public static int maxShiftArrayValue(int arr[], int cap[], int N) {\n    int sumVals = 0;\n    for (int i = 0; i < N; i++) {\n      sumVals += arr[i];\n    }\n    int maxCapacity = 0;\n    for (int i = 0; i < N; i++) {\n      maxCapacity = Math.max(cap[i], maxCapacity);\n    }\n    return Math.min(maxCapacity, sumVals);\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {2, 3};\n    int cap[] = {5, 6};\n    int N = arr.length;\n    System.out.println(maxShiftArrayValue(arr, cap, N));\n  }\n}\n", "python": "def maxShiftArrayValue(arr, cap, N):\n    sumVals = 0\n    for i in range(N):\n        sumVals += arr[i]\n    maxCapacity = 0\n    for i in range(N):\n        maxCapacity = max(cap[i], maxCapacity)\n    return min(maxCapacity, sumVals)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 3]\n    cap = [5, 6]\n    N = len(arr)\n    print(maxShiftArrayValue(arr, cap, N))\n"}
{"text": "Average value of set bit count in given Binary string after performing all possible choices of K operations ", "java": "import java.io.*;\n\nclass GFG {\n  static double averageSetBits(int N, int K, int arr[]) {\n    double p = N;\n    double q = 0;\n    for (int i = 0; i < K; i++) {\n      double _p = p, _q = q;\n      p = _p - _p * arr[i] / N + _q * arr[i] / N;\n      q = _q - _q * arr[i] / N + _p * arr[i] / N;\n    }\n    return p;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    int arr[] = {1, 2, 3};\n    int K = arr.length;\n    System.out.println(String.format(\" % .10f \", averageSetBits(N, K, arr)));\n  }\n}\n", "python": "def averageSetBits(N, K, arr):\n    p = N\n    q = 0\n    for i in range(K):\n        _p = p\n        _q = q\n        p = _p - _p * arr[i] / N + _q * arr[i] / N\n        q = _q - _q * arr[i] / N + _p * arr[i] / N\n    return p\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    arr = [1, 2, 3]\n    K = len(arr)\n    print(\" % .2f \" % averageSetBits(N, K, arr))\n"}
{"text": "Find range of values for S in given Array with values satisfying [ arr [ i ] = floor ( ( i * S ) / K ) ] ", "java": "import java.util.*;\n\nclass Codechef {\n  static void findRange(int arr[], int N, int K) {\n    int L = Integer.MIN_VALUE;\n    int R = Integer.MAX_VALUE;\n    for (int i = 0; i < N; i++) {\n      int l = (int) Math.ceil(1.0 * arr[i] * K / (i + 1));\n      int r = (int) Math.ceil((1.0 + arr[i]) * K / (i + 1)) - 1;\n      L = Math.max(L, l);\n      R = Math.min(R, r);\n    }\n    System.out.println(L + \" \u2581 \" + R);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 4, 6, 9, 11};\n    int K = 10;\n    int N = arr.length;\n    findRange(arr, N, K);\n  }\n}\n", "python": "from math import ceil, floor\nimport sys\n\n\ndef findRange(arr, N, K):\n    L = -sys.maxsize - 1\n    R = sys.maxsize\n    for i in range(N):\n        l = ceil(1.0 * arr[i] * K / (i + 1))\n        r = ceil((1.0 + arr[i]) * K / (i + 1) - 1)\n        L = max(L, l)\n        R = min(R, r)\n    print(L, R)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 4, 6, 9, 11]\n    K = 10\n    N = len(arr)\n    findRange(arr, N, K)\n"}
{"text": "Count of distinct N ", "java": "import java.util.*;\n\nclass GFG {\n  static int countArrays(int n, int k) {\n    Vector<Integer>[] divisors = new Vector[k + 1];\n    for (int i = 0; i < divisors.length; i++) divisors[i] = new Vector<Integer>();\n    for (int i = 1; i <= k; i++) {\n      for (int j = 2 * i; j <= k; j += i) {\n        divisors[j].add(i);\n      }\n    }\n    int[][] dp = new int[n + 1][k + 1];\n    for (int j = 1; j <= k; j++) {\n      dp[1][j] = 1;\n    }\n    for (int x = 2; x <= n; x++) {\n      int sum = 0;\n      for (int j = 1; j <= k; j++) {\n        sum += dp[x - 1][j];\n      }\n      for (int y = 1; y <= k; y++) {\n        dp[x][y] = sum;\n        for (int d : divisors[y]) {\n          dp[x][y] = (dp[x][y] - dp[x - 1][d]);\n        }\n      }\n    }\n    int sum = 0;\n    for (int j = 1; j <= k; j++) {\n      sum += dp[n][j];\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int N = 2, K = 3;\n    System.out.print(countArrays(N, K));\n  }\n}\n", "python": "from array import *\nfrom math import *\n\n\ndef countOddIntegers(arr, N):\n    Fact = [0] * N\n    Fact[0] = 1\n    for i in range(1, N):\n        Fact[i] = i * Fact[i - 1]\n    freq = [0] * 10\n    for i in range(len(freq)):\n        freq[i] = 0\n    for i in range(N):\n        freq[arr[i]] = freq[arr[i]] + 1\n    ans = 0\n    for i in range(1, 10, 2):\n        if freq[i] == 0:\n            continue\n        freq[i] = freq[i] - 1\n        for j in range(1, 10, 1):\n            cur_ans = 0\n            if freq[j] == 0:\n                continue\n            freq[j] = freq[j] - 1\n            cur_ans = Fact[N - 2]\n            for k in range(10):\n                cur_ans = cur_ans / Fact[freq[k]]\n            ans += cur_ans\n            freq[j] = freq[j] + 1\n        freq[i] = freq[i] + 1\n    return ceil(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [2, 3, 4, 1, 2, 3]\n    N = len(A)\n    print(countOddIntegers(A, N))\n"}
{"text": "Check if X can be reduced to 0 in exactly T moves by substracting D or 1 from it ", "java": "import java.util.*;\n\nclass GFG {\n  static int possibleReachingSequence(int X, int D, int T) {\n    if (X < T) {\n      System.out.println(\" NO \");\n      return 0;\n    }\n    if (T * D < X) {\n      System.out.println(\" NO \");\n      return 0;\n    }\n    if ((X - T) % (D - 1) == 0) {\n      System.out.println(\" YES \");\n    } else {\n      System.out.println(\" NO \");\n    }\n    return 0;\n  }\n\n  public static void main(String args[]) {\n    int X = 10, D = 3, T = 6;\n    possibleReachingSequence(X, D, T);\n  }\n}\n", "python": "def possibleReachingSequence(X, D, T):\n    if X < T:\n        return \" NO \"\n    if T * D < X:\n        return \" NO \"\n    if (X - T) % (D - 1) == 0:\n        return \" YES \"\n    return \" NO \"\n\n\nX = 10\nD = 3\nT = 6\nprint(possibleReachingSequence(X, D, T))\n"}
{"text": "Maximum number of times Array can be reduced in half when its all elements are even ", "java": "import java.util.*;\n\nclass GFG {\n  static int arrayDivisionByTwo(int arr[], int n) {\n    int cnt = 0;\n    int ans = Integer.MAX_VALUE;\n    for (int i = 0; i < n; i++) {\n      cnt = 0;\n      while (arr[i] % 2 == 0) {\n        arr[i] = arr[i] / 2;\n        cnt++;\n      }\n      ans = Math.min(ans, cnt);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {8, 12, 40};\n    int n = arr.length;\n    System.out.print(arrayDivisionByTwo(arr, n));\n  }\n}\n", "python": "import sys\n\n\ndef arrayDivisionByTwo(arr, n):\n    cnt = 0\n    ans = sys.maxsize\n    for i in range(n):\n        cnt = 0\n        while arr[i] % 2 == 0:\n            arr[i] = arr[i] // 2\n            cnt += 1\n        ans = min(ans, cnt)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [8, 12, 40]\n    n = len(arr)\n    print(arrayDivisionByTwo(arr, n))\n"}
{"text": "Minimize product of two scores possible by at most M reductions ", "java": "import java.io.*;\n\nclass GFG {\n  static int minProductUtil(int R1, int B1, int R2, int B2, int M) {\n    int x = Math.min(R1 - B1, M);\n    M -= x;\n    R1 -= x;\n    if (M > 0) {\n      int y = Math.min(R2 - B2, M);\n      M -= y;\n      R2 -= y;\n    }\n    return R1 * R2;\n  }\n\n  static int minProduct(int R1, int B1, int R2, int B2, int M) {\n    int res1 = minProductUtil(R1, B1, R2, B2, M);\n    int res2 = minProductUtil(R2, B2, R1, B1, M);\n    return Math.min(res1, res2);\n  }\n\n  public static void main(String[] args) {\n    int R1 = 21, B1 = 10, R2 = 13, B2 = 11, M = 3;\n    System.out.print((minProduct(R1, B1, R2, B2, M)));\n  }\n}\n", "python": "def minProductUtil(R1, B1, R2, B2, M):\n    x = min(R1 - B1, M)\n    M -= x\n    R1 -= x\n    if M > 0:\n        y = min(R2 - B2, M)\n        M -= y\n        R2 -= y\n    return R1 * R2\n\n\ndef minProduct(R1, B1, R2, B2, M):\n    res1 = minProductUtil(R1, B1, R2, B2, M)\n    res2 = minProductUtil(R2, B2, R1, B1, M)\n    return min(res1, res2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    R1 = 21\n    B1 = 10\n    R2 = 13\n    B2 = 11\n    M = 3\n    print(minProduct(R1, B1, R2, B2, M))\n"}
{"text": "Maximum GCD of two numbers possible by adding same value to them ", "java": "import java.io.*;\n\nclass GFG {\n  static void maxGcd(int a, int b) {\n    System.out.println(Math.abs(a - b));\n  }\n\n  public static void main(String[] args) {\n    int a = 2231;\n    int b = 343;\n    maxGcd(a, b);\n  }\n}\n", "python": "def maxGcd(a, b):\n    print(abs(a - b))\n\n\na = 2231\nb = 343\nmaxGcd(a, b)\n"}
{"text": "Minimum possible value of D which when added to or subtracted from K repeatedly obtains every array element ", "java": "import java.io.*;\n\nclass GFG {\n  static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n  }\n\n  static int findMaxD(int arr[], int N, int K) {\n    for (int i = 0; i < N; i++) {\n      arr[i] = Math.abs(arr[i] - K);\n    }\n    int D = arr[0];\n    for (int i = 1; i < N; i++) {\n      D = gcd(D, arr[i]);\n    }\n    return D;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 7, 11};\n    int N = arr.length;\n    int K = 3;\n    System.out.print(findMaxD(arr, N, K));\n  }\n}\n", "python": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef findMaxD(arr, N, K):\n    for i in range(0, N):\n        arr[i] = abs(arr[i] - K)\n    D = arr[0]\n    for i in range(1, N):\n        D = gcd(D, arr[i])\n    return D\n\n\narr = [1, 7, 11]\nN = len(arr)\nK = 3\nprint(findMaxD(arr, N, K))\n"}
{"text": "Maximize the number of times a character can be removed from substring 01 from given Binary String ", "java": "import java.io.*;\n\nclass GFG {\n  static int maxOperations(String S, int N) {\n    int X = 0;\n    int Y = 0;\n    for (int i = 0; i < N; i++) {\n      if (S.charAt(i) == '0') break;\n      Y++;\n    }\n    for (int i = N - 1; i >= 0; i--) {\n      if (S.charAt(i) == '1') break;\n      X++;\n    }\n    if (N == X + Y) return 0;\n    return N - (X + Y) - 1;\n  }\n\n  public static void main(String[] args) {\n    String S = \"001111\";\n    int N = S.length();\n    System.out.println(maxOperations(S, N));\n  }\n}\n", "python": "def maxOperations(S, N):\n    X = 0\n    Y = 0\n    for i in range(N):\n        if S[i] == \"0\":\n            break\n        Y += 1\n    i = N - 1\n    while i >= 0:\n        if S[i] == \"1\":\n            break\n        X += 1\n    if N == X + Y:\n        return 0\n    return N - (X + Y) - 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    S = \"001111\"\n    N = len(S)\n    print(maxOperations(S, N))\n"}
{"text": "Maximum sum of array after removing a positive or negative subarray ", "java": "import java.io.*;\n\nclass GFG {\n  static void maxSum(int arr[], int n) {\n    int sum = 0;\n    int max_neg = Integer.MAX_VALUE;\n    int tempsum = 0;\n    int small = Integer.MAX_VALUE;\n    for (int i = 0; i < n; i++) {\n      sum += arr[i];\n      small = Math.min(small, arr[i]);\n      if (arr[i] > 0) {\n        tempsum = 0;\n      } else {\n        tempsum += arr[i];\n      }\n      max_neg = Math.min(max_neg, tempsum);\n    }\n    if (max_neg == 0) {\n      max_neg = small;\n    }\n    System.out.println(sum - max_neg);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {-2, -3, 4, -1, -2, 1, 5, -3};\n    int n = arr.length;\n    maxSum(arr, n);\n  }\n}\n", "python": "import sys\n\n\ndef maxSum(arr, n):\n    sum = 0\n    max_neg = sys.maxsize\n    tempsum = 0\n    small = sys.maxsize\n    for i in range(n):\n        sum += arr[i]\n        small = min(small, arr[i])\n        if arr[i] > 0:\n            tempsum = 0\n        else:\n            tempsum += arr[i]\n        max_neg = min(max_neg, tempsum)\n    if max_neg == 0:\n        max_neg = small\n    print(sum - max_neg)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [-2, -3, 4, -1, -2, 1, 5, -3]\n    n = len(arr)\n    maxSum(arr, n)\n"}
{"text": "Count of pairs of integers up to X and Y that generates equal Quotient and Remainder ", "java": "import java.io.*;\n\nclass GFG {\n  static void countOfPairs(int x, int y) {\n    int count = 0;\n    for (int k = 1; k * k <= x; ++k) {\n      count += Math.max(0, Math.min(y, x / k - 1) - k);\n    }\n    System.out.print(count);\n  }\n\n  public static void main(String[] args) {\n    int x = 4;\n    int y = 5;\n    countOfPairs(x, y);\n  }\n}\n", "python": "from math import sqrt\n\n\ndef countOfPairs(x, y):\n    count = 0\n    for k in range(1, int(sqrt(x)) + 1, 1):\n        count += max(0, min(y, x / k - 1) - k)\n    print(int(count))\n\n\nif __name__ == \" _ _ main _ _ \":\n    x = 4\n    y = 5\n    countOfPairs(x, y)\n"}
{"text": "Find the date after next half year from a given date ", "java": "class GFG {\n  public static void getDate(int d, String m) {\n    int[] days = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    String[] month = {\n      \" January \",\n      \" February \",\n      \" March \",\n      \" April \",\n      \" May \",\n      \" June \",\n      \" July \",\n      \" August \",\n      \" September \",\n      \" October \",\n      \" November \",\n      \" December \"\n    };\n    int cnt = 183;\n    int cur_month = 0;\n    for (int i = 0; i < 12; i++) if (m == month[i]) cur_month = i;\n    int cur_date = d;\n    while (true) {\n      while (cnt > 0 && cur_date <= days[cur_month]) {\n        cnt -= 1;\n        cur_date += 1;\n      }\n      if (cnt == 0) break;\n      cur_month = (cur_month + 1) % 12;\n      cur_date = 1;\n    }\n    System.out.println(cur_date + \" \u2581 \" + month[cur_month]);\n  }\n\n  public static void main(String args[]) {\n    int D = 15;\n    String M = \" January \";\n    getDate(D, M);\n  }\n}\n", "python": "def getDate(d, m):\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    month = [\n        \" January \",\n        \" February \",\n        \" March \",\n        \" April \",\n        \" May \",\n        \" June \",\n        \" July \",\n        \" August \",\n        \" September \",\n        \" October \",\n        \" November \",\n        \" December \",\n    ]\n    cnt = 183\n    cur_month = month.index(m)\n    cur_date = d\n    while 1:\n        while cnt > 0 and cur_date <= days[cur_month]:\n            cnt -= 1\n            cur_date += 1\n        if cnt == 0:\n            break\n        cur_month = (cur_month + 1) % 12\n        cur_date = 1\n    print(cur_date, month[cur_month])\n\n\nD = 15\nM = \" January \"\ngetDate(D, M)\n"}
{"text": "Maximum number made up of distinct digits whose sum is equal to N ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static long largestNumber(int N) {\n    if (N > 45) return -1;\n    int num = 0, digit = 9;\n    while (N > 0 && digit > 0) {\n      if (digit <= N) {\n        num *= 10;\n        num += digit;\n        N -= digit;\n      }\n      digit -= 1;\n    }\n    return num * 10;\n  }\n\n  public static void main(String[] args) {\n    int N = 25;\n    System.out.print(largestNumber(N));\n  }\n}\n", "python": "def largestNumber(N):\n    if N > 45:\n        return -1\n    num = 0\n    digit = 9\n    while N > 0 and digit > 0:\n        if digit <= N:\n            num *= 10\n            num += digit\n            N -= digit\n        digit -= 1\n    return num * 10\n\n\nN = 25\nprint(largestNumber(N))\n"}
{"text": "Minimum sum of medians of all possible K length subsequences of a sorted array ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static void sumOfMedians(int arr[], int N, int K) {\n    int selectMedian = (K + 1) / 2;\n    int totalArrays = N / K;\n    int minSum = 0;\n    int i = selectMedian - 1;\n    while (i < N && totalArrays != 0) {\n      minSum = minSum + arr[i];\n      i = i + selectMedian;\n      totalArrays--;\n    }\n    System.out.println(minSum);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 5, 6};\n    int N = arr.length;\n    int K = 2;\n    sumOfMedians(arr, N, K);\n  }\n}\n", "python": "def sumOfMedians(arr, N, K):\n    selectMedian = (K + 1) // 2\n    totalArrays = N // K\n    minSum = 0\n    i = selectMedian - 1\n    while i < N and totalArrays != 0:\n        minSum = minSum + arr[i]\n        i = i + selectMedian\n        totalArrays -= 1\n    print(minSum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4, 5, 6]\n    N = len(arr)\n    K = 2\n    sumOfMedians(arr, N, K)\n"}
{"text": "Quadratic equation whose roots are K times the roots of given equation ", "java": "import java.util.*;\n\nclass GFG {\n  static void findEquation(int A, int B, int C, int K) {\n    System.out.print(A + \" \u2581 \" + K * B + \" \u2581 \" + K * K * C);\n  }\n\n  public static void main(String[] args) {\n    int A = 1, B = 2, C = 1, K = 2;\n    findEquation(A, B, C, K);\n  }\n}\n", "python": "def findEquation(A, B, C, K):\n    print(A, K * B, K * K * C)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A, B, C, K = 1, 2, 1, 2\n    findEquation(A, B, C, K)\n"}
{"text": "Maximum the value of a given expression for any pair of coordinates on a 2D plane ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static void findMaxValueOfEquation(int arr[][], int K) {\n    PriorityQueue<int[]> pq =\n        new PriorityQueue<>(\n            (a, b) -> {\n              if (a[0] != b[0]) return b[0] - a[0];\n              return b[1] - a[1];\n            });\n    int res = Integer.MIN_VALUE;\n    for (int point[] : arr) {\n      while (!pq.isEmpty() && point[0] - pq.peek()[1] > K) {\n        pq.poll();\n      }\n      if (!pq.isEmpty()) {\n        res = Math.max(res, pq.peek()[0] + point[0] + point[1]);\n      }\n      pq.add(new int[] {point[1] - point[0], point[0]});\n    }\n    System.out.println(res);\n  }\n\n  public static void main(String[] args) {\n    int[][] arr = {{1, 3}, {2, 0}, {5, 10}, {6, -10}};\n    int K = 1;\n    findMaxValueOfEquation(arr, K);\n  }\n}\n", "python": "def findMaxValueOfEquation(arr, K):\n    pq = []\n    res = -(10 ** 8)\n    for point in arr:\n        while len(pq) > 0 and point[0] - pq[-1][1] > K:\n            del pq[-1]\n        if len(pq) > 0:\n            res = max(res, pq[-1][0] + point[0] + point[1])\n        pq.append([point[1] - point[0], point[0]])\n        pq = sorted(pq)\n    print(res)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [[1, 3], [2, 0], [5, 10], [6, -10]]\n    K = 1\n    findMaxValueOfEquation(arr, K)\n"}
{"text": "Count numbers up to C that can be reduced to 0 by adding or subtracting A or B ", "java": "class GFG {\n  static long gcd(long a, long b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n  }\n\n  static void countDistinctNumbers(long A, long B, long C) {\n    long g = gcd(A, B);\n    long count = C / g;\n    System.out.println(count);\n  }\n\n  public static void main(String[] args) {\n    long A = 2, B = 3, C = 5;\n    countDistinctNumbers(A, B, C);\n  }\n}\n", "python": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef countDistinctNumbers(A, B, C):\n    g = gcd(A, B)\n    count = C // g\n    print(count)\n\n\nA = 2\nB = 3\nC = 5\ncountDistinctNumbers(A, B, C)\n"}
{"text": "Distributed C candies among N boys such that difference between maximum and minimum candies received is K ", "java": "class GFG {\n  static void max_min(int N, int C, int K) {\n    int maximum, minimum;\n    if (N == 1) {\n      maximum = minimum = C;\n    } else if (K >= C) {\n      maximum = C;\n      minimum = 0;\n    } else {\n      maximum = K;\n      minimum = 0;\n      int remain_candy = C - K;\n      maximum += remain_candy / N;\n      minimum = remain_candy / N;\n      if (remain_candy % N == N - 1) {\n        minimum++;\n      }\n    }\n    System.out.println(\" Maximum \u2581 = \u2581 \" + maximum);\n    System.out.println(\" Minimum \u2581 = \u2581 \" + minimum);\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    int C = 12;\n    int K = 3;\n    max_min(N, C, K);\n  }\n}\n", "python": "def max_min(N, C, K):\n    maximum = 0\n    minimum = 0\n    if N == 1:\n        maximum = minimum = C\n    elif K >= C:\n        maximum = C\n        minimum = 0\n    else:\n        maximum = K\n        minimum = 0\n        remain_candy = C - K\n        maximum += remain_candy // N\n        minimum = remain_candy // N\n    if remain_candy % N == N - 1:\n        minimum += 1\n    print(\" Maximum \u2581 = \u2581 { } \".format(maximum))\n    print(\" Minimum \u2581 = \u2581 { } \".format(minimum))\n\n\nN = 4\nC = 12\nK = 3\nmax_min(N, C, K)\n"}
{"text": "Number of Binary Search Trees of height H consisting of H + 1 nodes ", "java": "class GFG {\n  static int mod = 1000000007;\n\n  static long power(long x, int y) {\n    long res = 1;\n    x = x % mod;\n    if (x == 0) return 0;\n    while (y > 0) {\n      if ((y & 1) == 1) res = (res * x) % mod;\n      y = y >> 1;\n      x = (x * x) % mod;\n    }\n    return res;\n  }\n\n  static long CountBST(int H) {\n    return power(2, H);\n  }\n\n  public static void main(String[] args) {\n    int H = 2;\n    System.out.print(CountBST(H));\n  }\n}\n", "python": "def power(x, y):\n    mod = 1000000007\n    res = 1\n    x = x % mod\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1:\n            res = (res * x) % mod\n        y = y >> 1\n        x = (x * x) % mod\n    return res\n\n\ndef CountBST(H):\n    return power(2, H)\n\n\nH = 2\nprint(CountBST(H))\n"}
{"text": "Number obtained by reducing sum of digits of 2 N into a single digit ", "java": "import java.util.*;\n\nclass GFG {\n  static int findNumber(int N) {\n    int[] ans = {1, 2, 4, 8, 7, 5};\n    return ans[N % 6];\n  }\n\n  public static void main(String args[]) {\n    int N = 6;\n    System.out.println(findNumber(N));\n  }\n}\n", "python": "def findNumber(N):\n    ans = [1, 2, 4, 8, 7, 5]\n    return ans[N % 6]\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 6\n    print(findNumber(N))\n"}
{"text": "Minimum number of steps required to place all 1 s at a single index ", "java": "import java.util.*;\n\nclass GFG {\n  static void minsteps(int[] A) {\n    int n = A.length;\n    int[] left = new int[n];\n    Arrays.fill(left, 0);\n    int[] right = new int[n];\n    Arrays.fill(right, 0);\n    int[] res = new int[n];\n    Arrays.fill(res, 0);\n    int count = A[0];\n    for (int i = 1; i < n; i++) {\n      left[i] = left[i - 1] + count;\n      count += A[i];\n    }\n    count = A[n - 1];\n    for (int i = n - 2; i >= 0; i--) {\n      right[i] = right[i + 1] + count;\n      count += A[i];\n    }\n    for (int i = 0; i < n; i++) {\n      res[i] = left[i] + right[i];\n      System.out.print(res[i] + \" \u2581 \");\n    }\n    System.out.println();\n  }\n\n  public static void main(String[] args) {\n    int[] A = {1, 0, 1, 0};\n    minsteps(A);\n  }\n}\n", "python": "def minsteps(A):\n    n = len(A)\n    left, right, res = [0] * n, [0] * n, [0] * n\n    count = A[0]\n    for i in range(1, n):\n        left[i] = left[i - 1] + count\n        count += A[i]\n    count = A[n - 1]\n    for i in range(n - 2, -1, -1):\n        right[i] = right[i + 1] + count\n        count += A[i]\n    for i in range(n):\n        res[i] = left[i] + right[i]\n        print(res[i], end=\" \u2581 \")\n    print()\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [1, 0, 1, 0]\n    minsteps(A)\n"}
{"text": "Calculate sum of scores after N days based on given conditions ", "java": "import java.io.*;\n\nclass GFG {\n  static void findScoreSum(int n) {\n    int total = 0;\n    int prev_monday = 0, curr_day = 0;\n    for (int day = 1; day <= n; day++) {\n      if (day % 7 == 1) {\n        prev_monday++;\n        curr_day = prev_monday;\n      }\n      total += curr_day++;\n    }\n    System.out.println(total);\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    findScoreSum(N);\n  }\n}\n", "python": "def findScoreSum(n):\n    total = 0\n    prev_monday, curr_day = 0, 0\n    for day in range(1, n + 1):\n        if day % 7 == 1:\n            prev_monday += 1\n            curr_day = prev_monday\n        total += curr_day\n        curr_day += 1\n    print(total)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    findScoreSum(N)\n"}
{"text": "Calculate sum of scores after N days based on given conditions ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void findScoreSum(int n) {\n    int F = n / 7;\n    int D = n % 7;\n    int fullWeekScore = (49 + 7 * F) * F / 2;\n    int lastNonFullWeekScore = (2 * F + D + 1) * D / 2;\n    System.out.println(fullWeekScore + lastNonFullWeekScore);\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    findScoreSum(N);\n  }\n}\n", "python": "def findScoreSum(n):\n    total = 0\n    prev_monday, curr_day = 0, 0\n    for day in range(1, n + 1):\n        if day % 7 == 1:\n            prev_monday += 1\n            curr_day = prev_monday\n        total += curr_day\n        curr_day += 1\n    print(total)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    findScoreSum(N)\n"}
{"text": "Largest number up to N whose modulus with X is equal to Y modulo X ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static long maximumNum(long X, long Y, long N) {\n    long num = 0;\n    if (N - N % X + Y <= N) {\n      num = N - N % X + Y;\n    } else {\n      num = N - N % X - (X - Y);\n    }\n    return num;\n  }\n\n  public static void main(String[] args) {\n    long X = 10;\n    long Y = 5;\n    long N = 15;\n    System.out.println(maximumNum(X, Y, N));\n  }\n}\n", "python": "def maximumNum(X, Y, N):\n    num = 0\n    if N - N % X + Y <= N:\n        num = N - N % X + Y\n    else:\n        num = N - N % X - (X - Y)\n    return num\n\n\nif __name__ == \" _ _ main _ _ \":\n    X = 10\n    Y = 5\n    N = 15\n    print(maximumNum(X, Y, N))\n"}
{"text": "Value required to be added to N to obtain the sum of first M multiples of K ", "java": "import java.util.*;\n\nclass GFG {\n  static int printNumber(int N, int K, int M) {\n    int sum = K * (M * (M + 1) / 2);\n    return sum - N;\n  }\n\n  public static void main(String[] args) {\n    int N = 17;\n    int K = 3;\n    int M = 4;\n    System.out.print(printNumber(N, K, M));\n  }\n}\n", "python": "def printNumber(N, K, M):\n    sum = K * (M * (M + 1) / 2)\n    return sum - N\n\n\nN = 17\nK = 3\nM = 4\nprint(int(printNumber(N, K, M)))\n"}
{"text": "Count even and odd Bitwise XORs of consecutive numbers in a range [ L , R ] starting from L ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void countEvenOdd(int L, int R) {\n    int range = R - L + 1;\n    int even = (range / 4) * 2;\n    if ((L & 1) != 0 && (range % 4 == 3)) {\n      even++;\n    } else if ((L & 1) == 0 && (range % 4 != 0)) {\n      even++;\n    }\n    System.out.print(\" Even \u2581 = \u2581 \" + even + \" , \u2581 Odd \u2581 = \u2581 \" + (range - even));\n  }\n\n  public static void main(String[] args) {\n    int L = 2, R = 7;\n    countEvenOdd(L, R);\n  }\n}\n", "python": "def countEvenOdd(L, R):\n    range = R - L + 1\n    even = (range // 4) * 2\n    if (L & 1) != 0 and (range % 4 == 3):\n        even += 1\n    elif (L & 1) == 0 and (range % 4 != 0):\n        even += 1\n    print(\" Even \u2581 = \u2581 \", even, \" , \u2581 Odd \u2581 = \u2581 \", (range - even))\n\n\nif __name__ == \" _ _ main _ _ \":\n    L = 2\n    R = 7\n    countEvenOdd(L, R)\n"}
{"text": "Place first N natural numbers at indices not equal to their values in an array ", "java": "import java.util.*;\n\nclass GFG {\n  static void generatepermutation(int N) {\n    Vector<Integer> answer = new Vector<Integer>();\n    answer.add(N);\n    for (int i = 1; i < N; i++) {\n      answer.add(i);\n    }\n    for (int i : answer) System.out.print(i + \" \u2581 \");\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    generatepermutation(N);\n  }\n}\n", "python": "def generatepermutation(N):\n    answer = []\n    answer.append(N)\n    for i in range(1, N):\n        answer.append(i)\n    print(*answer)\n\n\nN = 4\ngeneratepermutation(N)\n"}
{"text": "Maximize element at index K in an array with at most sum M and difference between adjacent elements at most 1 ", "java": "import java.io.*;\n\nclass GFG {\n  static void maxValueAtIndexK(int N, int K, int M) {\n    int S1 = 0, S2 = 0;\n    S1 = K * (K + 1) / 2;\n    S2 = (N - K - 1) * (N - K) / 2;\n    int X = (M + S1 + S2) / N;\n    System.out.println(X);\n  }\n\n  public static void main(String[] args) {\n    int N = 3, K = 1, M = 7;\n    maxValueAtIndexK(N, K, M);\n  }\n}\n", "python": "def maxValueAtIndexK(N, K, M):\n    S1 = 0\n    S2 = 0\n    S1 = K * (K + 1) // 2\n    S2 = (N - K - 1) * (N - K) // 2\n    X = (M + S1 + S2) // N\n    print(X)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    K = 1\n    M = 7\n    maxValueAtIndexK(N, K, M)\n"}
{"text": "Farthest cell from a given cell in a Matrix ", "java": "import java.io.*;\n\nclass GFG {\n  static void farthestCellDistance(int N, int M, int R, int C) {\n    int d1 = N + M - R - C;\n    int d2 = R + C - 2;\n    int d3 = N - R + C - 1;\n    int d4 = M - C + R - 1;\n    int maxDistance = Math.max(d1, Math.max(d2, Math.max(d3, d4)));\n    System.out.println(maxDistance);\n  }\n\n  public static void main(String[] args) {\n    int N = 15, M = 12, R = 1, C = 6;\n    farthestCellDistance(N, M, R, C);\n  }\n}\n", "python": "def farthestCellDistance(N, M, R, C):\n    d1 = N + M - R - C\n    d2 = R + C - 2\n    d3 = N - R + C - 1\n    d4 = M - C + R - 1\n    maxDistance = max(d1, max(d2, max(d3, d4)))\n    print(maxDistance)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 15\n    M = 12\n    R = 1\n    C = 6\n    farthestCellDistance(N, M, R, C)\n"}
{"text": "Minimum steps required to visit all corners of an N * M grid ", "java": "import java.util.*;\n\nclass GFG {\n  static int min_steps_required(int n, int m, int r, int c) {\n    int i, j;\n    int corner_steps_req = Integer.MAX_VALUE;\n    i = 1;\n    j = 1;\n    corner_steps_req = Math.min(corner_steps_req, Math.abs(r - i) + Math.abs(j - c));\n    i = n;\n    j = 1;\n    corner_steps_req = Math.min(corner_steps_req, Math.abs(r - i) + Math.abs(j - c));\n    i = 1;\n    j = m;\n    corner_steps_req = Math.min(corner_steps_req, Math.abs(r - i) + Math.abs(j - c));\n    i = n;\n    j = m;\n    corner_steps_req = Math.min(corner_steps_req, Math.abs(r - i) + Math.abs(j - c));\n    int minimum_steps = Math.min(2 * (n - 1) + m - 1, 2 * (m - 1) + n - 1);\n    return minimum_steps + corner_steps_req;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    int m = 2;\n    int r = 1;\n    int c = 1;\n    System.out.print(min_steps_required(n, m, r, c));\n  }\n}\n", "python": "import sys\n\nINT_MAX = sys.maxsize\n\n\ndef min_steps_required(n, m, r, c):\n    i = 0\n    j = 0\n    corner_steps_req = INT_MAX\n    i = 1\n    j = 1\n    corner_steps_req = min(corner_steps_req, abs(r - i) + abs(j - c))\n    i = n\n    j = 1\n    corner_steps_req = min(corner_steps_req, abs(r - i) + abs(j - c))\n    i = 1\n    j = m\n    corner_steps_req = min(corner_steps_req, abs(r - i) + abs(j - c))\n    i = n\n    j = m\n    corner_steps_req = min(corner_steps_req, abs(r - i) + abs(j - c))\n    minimum_steps = min(2 * (n - 1) + m - 1, 2 * (m - 1) + n - 1)\n    return minimum_steps + corner_steps_req\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    m = 2\n    r = 1\n    c = 1\n    print(min_steps_required(n, m, r, c))\n"}
{"text": "Maximum possible sum of K even multiples of 5 in a given range ", "java": "import java.util.*;\n\nclass GFG {\n  static void maxksum(int L, int R, int K) {\n    int N = (R / 10 - L / 10) + 1;\n    if (K > N) {\n      System.out.print(\" - 1\");\n      return;\n    }\n    R = R / 10;\n    int X = R - K;\n    int sum = 10 * ((R * (R + 1)) / 2 - (X * (X + 1)) / 2);\n    System.out.print(sum);\n  }\n\n  public static void main(String[] args) {\n    int L = 16, R = 60, K = 4;\n    maxksum(L, R, K);\n  }\n}\n", "python": "def maxksum(L, R, K):\n    N = (R // 10 - L // 10) + 1\n    if K > N:\n        print(-1)\n        return\n    R = R // 10\n    X = R - K\n    sum = 10 * ((R * (R + 1)) // 2 - (X * (X + 1)) // 2)\n    print(sum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    L = 16\n    R = 60\n    K = 4\n    maxksum(L, R, K)\n"}
{"text": "Minimum sum of values subtracted from array elements to make all array elements equal ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int minValue(int[] arr, int n) {\n    Arrays.sort(arr);\n    int minimum = arr[0];\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum = sum + (arr[i] - minimum);\n    }\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int[] arr = {1, 2, 3};\n    int N = arr.length;\n    System.out.println(minValue(arr, N));\n  }\n}\n", "python": "def minValue(arr, n):\n    minimum = min(arr)\n    sum = 0\n    for i in range(n):\n        sum = sum + (arr[i] - minimum)\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3]\n    N = len(arr)\n    print(minValue(arr, N))\n"}
{"text": "Smallest positive number made up of non ", "java": "import java.util.*;\n\nclass GFG {\n  static void result(int n) {\n    if (n > 45) {\n      System.out.print(-1);\n      return;\n    }\n    String res = \" \";\n    int digit = 9;\n    while (n > digit) {\n      res = (char) ('0' + digit) + res;\n      n -= digit;\n      digit -= 1;\n    }\n    if (n > 0) {\n      res = (char) ('0' + n) + res;\n    }\n    System.out.print(res);\n  }\n\n  public static void main(String[] args) {\n    int N = 19;\n    result(N);\n  }\n}\n", "python": "def result(n):\n    if n > 45:\n        print(-1, end=\" \")\n        return\n    res = \" \"\n    digit = 9\n    while n > digit:\n        res = str(digit) + res\n        n -= digit\n        digit -= 1\n    if n > 0:\n        res = str(n) + res\n    print(res)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 19\n    result(N)\n"}
{"text": "Count pair of integers having even sum ", "java": "import java.io.*;\n\nclass GFG {\n  public static int countEvenPairs(int N, int M) {\n    int count = 0;\n    int nEven = (int) Math.floor((double) N / 2);\n    int nOdd = (int) Math.ceil((double) N / 2);\n    int mEven = (int) Math.floor((double) M / 2);\n    int mOdd = (int) Math.ceil((double) M / 2);\n    count = nEven * mEven + nOdd * mOdd;\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    int M = 6;\n    System.out.print(countEvenPairs(N, M));\n  }\n}\n", "python": "import math\n\n\ndef countEvenPairs(N, M):\n    count = 0\n    nEven = int(math.floor(N / 2))\n    nOdd = int(math.ceil(N / 2))\n    mEven = int(math.floor(M / 2))\n    mOdd = int(math.ceil(M / 2))\n    count = nEven * mEven + nOdd * mOdd\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    M = 6\n    print(countEvenPairs(N, M))\n"}
{"text": "Find the triplet from given Bitwise XOR and Bitwise AND values of all its pairs ", "java": "class GFG {\n  static void findNumbers(int aXORb, int aANDb, int aXORc, int aANDc, int bXORc, int bANDc) {\n    int a, b, c;\n    int aSUMb;\n    int aSUMc;\n    int bSUMc;\n    aSUMb = aXORb + aANDb * 2;\n    aSUMc = aXORc + aANDc * 2;\n    bSUMc = bXORc + bANDc * 2;\n    a = (aSUMb - bSUMc + aSUMc) / 2;\n    b = aSUMb - a;\n    c = aSUMc - a;\n    System.out.print(\" a \u2581 = \u2581 \" + a);\n    System.out.print(\" , \u2581 b \u2581 = \u2581 \" + b);\n    System.out.print(\" , \u2581 c \u2581 = \u2581 \" + c);\n  }\n\n  public static void main(String[] args) {\n    int aXORb = 30, aANDb = 0, aXORc = 20, aANDc = 10, bXORc = 10, bANDc = 20;\n    findNumbers(aXORb, aANDb, aXORc, aANDc, bXORc, bANDc);\n  }\n}\n", "python": "def findNumbers(aXORb, aANDb, aXORc, aANDc, bXORc, bANDc):\n    a, b, c = 0, 0, 0\n    aSUMb = 0\n    aSUMc = 0\n    bSUMc = 0\n    aSUMb = aXORb + aANDb * 2\n    aSUMc = aXORc + aANDc * 2\n    bSUMc = bXORc + bANDc * 2\n    a = (aSUMb - bSUMc + aSUMc) // 2\n    b = aSUMb - a\n    c = aSUMc - a\n    print(\" a \u2581 = \u2581 \", a, end=\" \")\n    print(\" , \u2581 b \u2581 = \u2581 \", b, end=\" \")\n    print(\" , \u2581 c \u2581 = \u2581 \", c, end=\" \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    aXORb = 30\n    aANDb = 0\n    aXORc = 20\n    aANDc = 10\n    bXORc = 10\n    bANDc = 20\n    findNumbers(aXORb, aANDb, aXORc, aANDc, bXORc, bANDc)\n"}
{"text": "Flip consecutive set bits starting from LSB of a given number ", "java": "class GFG {\n  static int findNumber(int N) {\n    int count = 0;\n    while ((N & 1) == 1) {\n      N = N >> 1;\n      count++;\n    }\n    return N << count;\n  }\n\n  public static void main(String[] args) {\n    int N = 39;\n    System.out.println(findNumber(N));\n  }\n}\n", "python": "def findNumber(N):\n    count = 0\n    while (N & 1) == 1:\n        N = N >> 1\n        count += 1\n    return N << count\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 39\n    print(findNumber(N))\n"}
{"text": "Flip consecutive set bits starting from LSB of a given number ", "java": "import java.util.*;\n\nclass GFG {\n  static int findNumber(int N) {\n    return N & (N + 1);\n  }\n\n  public static void main(String[] args) {\n    int N = 39;\n    System.out.print(findNumber(N));\n  }\n}\n", "python": "def findNumber(N):\n    count = 0\n    while (N & 1) == 1:\n        N = N >> 1\n        count += 1\n    return N << count\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 39\n    print(findNumber(N))\n"}
{"text": "Minimum cost to convert one given string to another using swap , insert or delete operations ", "java": "import java.util.*;\n\nclass GFG {\n  public static void minimumCost(String a, String b) {\n    int fre1[] = new int[256];\n    int fre2[] = new int[256];\n    for (char c : a.toCharArray()) fre1[(int) (c)]++;\n    for (char c : b.toCharArray()) fre2[(int) (c)]++;\n    int mincost = 0;\n    for (int i = 0; i < 256; i++) {\n      mincost += Math.abs(fre1[i] - fre2[i]);\n    }\n    System.out.println(mincost);\n  }\n\n  public static void main(String[] args) {\n    String A = \"1AB + - \", B = \" cc \";\n    minimumCost(A, B);\n  }\n}\n", "python": "def minimumCost(a, b):\n    fre1 = [0] * (256)\n    fre2 = [0] * (256)\n    for c in a:\n        fre1[ord(c)] += 1\n    for c in b:\n        fre2[ord(c)] += 1\n    mincost = 0\n    for i in range(256):\n        mincost += abs(fre1[i] - fre2[i])\n    print(mincost)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = \"1AB + - \"\n    B = \" cc \"\n    minimumCost(A, B)\n"}
{"text": "Maximize array sum by alternating the signs of adjacent elements ", "java": "import java.util.*;\n\nclass GFG {\n  static int findMaxSumByAlternatingSign(int arr[], int N) {\n    int cntNeg = 0;\n    int MaxAltSum = 0;\n    int SmValue = 0;\n    int sum = 0;\n    for (int i = 0; i < N; i++) {\n      if (arr[i] < 0) {\n        cntNeg += 1;\n      }\n      sum += Math.abs(arr[i]);\n      SmValue = Math.min(SmValue, Math.abs(arr[i]));\n    }\n    MaxAltSum = sum;\n    if (cntNeg % 2 == 1) {\n      MaxAltSum -= 2 * SmValue;\n    }\n    return MaxAltSum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 1, -2, -4, 5};\n    int N = arr.length;\n    System.out.print(findMaxSumByAlternatingSign(arr, N));\n  }\n}\n", "python": "def findMaxSumByAlternatingSign(arr, N):\n    cntNeg = 0\n    MaxAltSum = 0\n    SmValue = 0\n    sum = 0\n    for i in range(N):\n        if arr[i] < 0:\n            cntNeg += 1\n        sum += abs(arr[i])\n        SmValue = min(SmValue, abs(arr[i]))\n    MaxAltSum = sum\n    if cntNeg & 1:\n        MaxAltSum -= 2 * SmValue\n    return MaxAltSum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 1, -2, -4, 5]\n    N = len(arr)\n    print(findMaxSumByAlternatingSign(arr, N))\n"}
{"text": "Generate Bitonic Sequence of length N from integers in a given range ", "java": "import java.util.*;\n\nclass GFG {\n  public static void bitonicSequence(int num, int lower, int upper) {\n    if (num > (upper - lower) * 2 + 1) {\n      System.out.println(-1);\n      return;\n    }\n    Deque<Integer> ans = new ArrayDeque<>();\n    for (int i = 0; i < Math.min(upper - lower + 1, num - 1); i++) ans.add(upper - i);\n    for (int i = 0; i < num - ans.size(); i++) ans.addFirst(upper - i - 1);\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int N = 5, L = 3, R = 10;\n    bitonicSequence(N, L, R);\n  }\n}\n", "python": "from collections import deque\n\n\ndef bitonicSequence(num, lower, upper):\n    if num > (upper - lower) * 2 + 1:\n        print(-1)\n        return\n    ans = deque()\n    for i in range(min(upper - lower + 1, num - 1)):\n        ans.append(upper - i)\n    for i in range(num - len(ans)):\n        ans.appendleft(upper - i - 1)\n    print(list(ans))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    L = 3\n    R = 10\n    bitonicSequence(N, L, R)\n"}
{"text": "Count sequences of given length having non ", "java": "import java.io.*;\n\nclass GFG {\n  static long binCoff(long n, long r) {\n    long val = 1;\n    int i;\n    if (r > (n - r)) r = (n - r);\n    for (i = 0; i < r; i++) {\n      val *= (n - i);\n      val /= (i + 1);\n    }\n    return val;\n  }\n\n  static void findWays(int M) {\n    int n = M / 2;\n    long a, b, ans;\n    a = binCoff(2 * n, n);\n    b = a / (n + 1);\n    System.out.print(b);\n  }\n\n  public static void main(String[] args) {\n    int M = 4, X = 5;\n    findWays(M);\n  }\n}\n", "python": "def binCoff(n, r):\n    val = 1\n    if r > (n - r):\n        r = n - r\n    for i in range(0, r):\n        val *= n - i\n        val //= i + 1\n    return val\n\n\ndef findWays(M):\n    n = M // 2\n    a = binCoff(2 * n, n)\n    b = a // (n + 1)\n    print(b)\n\n\nif __name__ == \" _ _ main _ _ \":\n    M = 4\n    X = 5\n    findWays(M)\n"}
{"text": "Count positions in a chessboard that can be visited by the Queen which are not visited by the King ", "java": "import java.io.*;\n\nclass GFG {\n  static int Moves_Calculator(int x, int y, int row, int col) {\n    int total_moves = 0;\n    if ((row - x) > 0 && (col - y) > 0) total_moves += Math.min((row - x), (col - y));\n    if ((y - 1) > 0 && (x - 1) > 0) total_moves += Math.min((y - 1), (x - 1));\n    if ((x - 1) > 0 && (col - y) > 0) total_moves += Math.min((x - 1), (col - y));\n    if ((row - x) > 0 && (y - 1) > 0) total_moves += Math.min((row - x), (y - 1));\n    total_moves += (row - 1) + (col - 1);\n    int king_moves = 0;\n    if (x + 1 <= row) king_moves += 1;\n    if (x - 1 > 0) king_moves += 1;\n    if (y + 1 <= col) king_moves += 1;\n    if (y - 1 > 0) king_moves += 1;\n    if (x + 1 <= row && y + 1 <= col) king_moves += 1;\n    if (x + 1 <= row && y - 1 > 0) king_moves += 1;\n    if (x - 1 > 0 && y - 1 > 0) king_moves += 1;\n    if (x - 1 > 0 && y + 1 <= col) king_moves += 1;\n    return total_moves - king_moves;\n  }\n\n  public static void main(String[] args) {\n    int n = 8, m = 8;\n    int x = 1, y = 1;\n    System.out.println(Moves_Calculator(x, y, m, n));\n  }\n}\n", "python": "def Moves_Calculator(x, y, row, col):\n    total_moves = 0\n    if (row - x) > 0 and (col - y) > 0:\n        total_moves += min((row - x), (col - y))\n    if (y - 1) > 0 and (x - 1) > 0:\n        total_moves += min((y - 1), (x - 1))\n    if (x - 1) > 0 and (col - y) > 0:\n        total_moves += min((x - 1), (col - y))\n    if (row - x) > 0 and (y - 1) > 0:\n        total_moves += min((row - x), (y - 1))\n    total_moves += (row - 1) + (col - 1)\n    king_moves = 0\n    if x + 1 <= m:\n        king_moves += 1\n    if x - 1 > 0:\n        king_moves += 1\n    if y + 1 <= n:\n        king_moves += 1\n    if y - 1 > 0:\n        king_moves += 1\n    if x + 1 <= m and y + 1 <= n:\n        king_moves += 1\n    if x + 1 <= m and y - 1 > 0:\n        king_moves += 1\n    if x - 1 > 0 and y - 1 > 0:\n        king_moves += 1\n    if x - 1 > 0 and y + 1 <= n:\n        king_moves += 1\n    return total_moves - king_moves\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, m = 8, 8\n    x, y = 1, 1\n    print(Moves_Calculator(x, y, m, n))\n"}
{"text": "Nearest smaller number to N having multiplicative inverse under modulo N equal to that number ", "java": "import java.io.*;\n\nclass GFG {\n  static int clstNum(int N) {\n    return (N - 1);\n  }\n\n  public static void main(String[] args) {\n    int N = 11;\n    System.out.println(clstNum(N));\n  }\n}\n", "python": "def clstNum(N):\n    return N - 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 11\n    print(clstNum(N))\n"}
{"text": "Count ways to split array into K non ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int power(int K, int M) {\n    int res = 1;\n    while (M > 0) {\n      if ((M & 1) == 1) {\n        res = (res * K);\n      }\n      M = M >> 1;\n      K = (K * K);\n    }\n    return res;\n  }\n\n  static int cntWays(int arr[], int N, int K) {\n    int cntways = 0;\n    int M = 0;\n    Set<Integer> st = new HashSet<Integer>();\n    for (int i = 0; i < N; i++) {\n      st.add(arr[i]);\n    }\n    M = st.size();\n    cntways = power(K, M);\n    return cntways;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 3};\n    int N = arr.length;\n    int K = 2;\n    System.out.println(cntWays(arr, N, K));\n  }\n}\n", "python": "def power(K, M):\n    res = 1\n    while M > 0:\n        if (M & 1) == 1:\n            res = res * K\n        M = M >> 1\n        K = K * K\n    return res\n\n\ndef cntWays(arr, N, K):\n    cntways = 0\n    M = 0\n    st = set()\n    for i in range(N):\n        st.add(arr[i])\n    M = len(st)\n    cntways = power(K, M)\n    return cntways\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 3]\n    N = len(arr)\n    K = 2\n    print(cntWays(arr, N, K))\n"}
{"text": "Count permutations of all integers upto N that can form an acyclic graph based on given conditions ", "java": "import java.util.*;\n\nclass GFG {\n  static void possibleAcyclicGraph(int N) {\n    System.out.print((int) Math.pow(2, N - 1));\n    return;\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    possibleAcyclicGraph(N);\n  }\n}\n", "python": "def possibleAcyclicGraph(N):\n    print(pow(2, N - 1))\n    return\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    possibleAcyclicGraph(N)\n"}
{"text": "Find the greater number closest to N having at most one non ", "java": "import java.util.*;\n\nclass GFG {\n  static String closestgtNum(String str) {\n    String res = \" \";\n    int n = str.length();\n    if (str.charAt(0) < '9') {\n      res += (char) (str.charAt(0) + 1);\n    } else {\n      res += (char) ('1');\n      res += (char) ('0');\n    }\n    for (int i = 0; i < n - 1; i++) {\n      res += (char) ('0');\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    String str = \"120\";\n    System.out.print(closestgtNum(str));\n  }\n}\n", "python": "import math\n\n\ndef power(X, n):\n    res = 1\n    while n != 0:\n        if n & 1 != 0:\n            res = res * X\n        X = X * X\n        n = n >> 1\n    return res\n\n\ndef closestgtNum(N):\n    n = int(math.log10(N) + 1)\n    P = power(10, n - 1)\n    Y = N % P\n    res = N + (P - Y)\n    return res\n\n\nN = 120\nprint(closestgtNum(N))\n"}
{"text": "Count maximum non ", "java": "import java.util.*;\n\nclass GFG {\n  static int maximumSubarrays(int arr[], int N, int target) {\n    int ans = 0;\n    int availIdx = -1;\n    int cur_sum = 0;\n    HashMap<Integer, Integer> mp = new HashMap<Integer, Integer>();\n    mp.put(0, 1);\n    for (int i = 0; i < N; i++) {\n      cur_sum += arr[i];\n      if (mp.containsKey(cur_sum - target) && mp.get(cur_sum - target) >= availIdx) {\n        ans++;\n        availIdx = i;\n      }\n      mp.put(cur_sum, i);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, -1, 4, 3, 6, 4, 5, 1};\n    int N = arr.length;\n    int target = 6;\n    System.out.print(maximumSubarrays(arr, N, target));\n  }\n}\n", "python": "def maximumSubarrays(arr, N, target):\n    ans = 0\n    availIdx = -1\n    cur_sum = 0\n    mp = {}\n    mp[0] = -1\n    for i in range(N):\n        cur_sum += arr[i]\n        if (cur_sum - target) in mp and mp[cur_sum - target] >= availIdx:\n            ans += 1\n            availIdx = i\n        mp[cur_sum] = i\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, -1, 4, 3, 6, 4, 5, 1]\n    N = len(arr)\n    target = 6\n    print(maximumSubarrays(arr, N, target))\n"}
{"text": "Find the vertex diagonally opposite to the vertex M from an N ", "java": "class GFG {\n  static int getPosition(int N, int M) {\n    if (M > (N / 2)) {\n      return (M - (N / 2));\n    }\n    return (M + (N / 2));\n  }\n\n  public static void main(String[] args) {\n    int N = 8, M = 5;\n    System.out.print(getPosition(N, M));\n  }\n}\n", "python": "def getPosition(N, M):\n    if M > (N // 2):\n        return M - (N // 2)\n    return M + (N // 2)\n\n\nN = 8\nM = 5\nprint(getPosition(N, M))\n"}
{"text": "Maximize count of strings of length 3 that can be formed from N 1 s and M 0 s ", "java": "import java.util.*;\n\nclass GFG {\n  static void number_of_strings(int N, int M) {\n    int ans = 0;\n    while (N > 0 && M > 0) {\n      if (N > M) {\n        if (N >= 2) {\n          N -= 2;\n          --M;\n          ++ans;\n        } else {\n          break;\n        }\n      } else {\n        if (M >= 2) {\n          M -= 2;\n          --N;\n          ++ans;\n        } else {\n          break;\n        }\n      }\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int N = 4, M = 19;\n    number_of_strings(N, M);\n  }\n}\n", "python": "def number_of_strings(N, M):\n    print(min(N, min(M, (N + M) // 3)))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    M = 19\n    number_of_strings(N, M)\n"}
{"text": "Reduce N to 0 or less by given X and Y operations ", "java": "class GFG {\n  static boolean NegEqu(int N, int X, int Y) {\n    while (X > 0 && (N > N / 2 + 10)) {\n      N = N / 2 + 10;\n      X -= 1;\n    }\n    while (Y > 0) {\n      N = N - 10;\n      Y -= 1;\n    }\n    if (N <= 0) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int N = 100;\n    int X = 3;\n    int Y = 4;\n    if (NegEqu(N, X, Y)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "def NegEqu(N, X, Y):\n    while X and N > N // 2 + 10:\n        N = N // 2 + 10\n        X -= 1\n    while Y:\n        N = N - 10\n        Y -= 1\n    if N <= 0:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 100\n    X = 3\n    Y = 4\n    if NegEqu(N, X, Y):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Count all numbers up to N having M as the last digit ", "java": "import java.util.*;\n\nclass GFG {\n  static int getCount(int N, int M) {\n    int total_count = 0;\n    total_count += (N / 10);\n    int x = (N / 10) * 10;\n    if ((N - x) >= M) {\n      total_count = total_count + 1;\n    }\n    return total_count;\n  }\n\n  public static void main(String[] args) {\n    int N = 100, M = 1;\n    System.out.print(getCount(N, M));\n  }\n}\n", "python": "def getCount(N, M):\n    total_count = 0\n    total_count += N // 10\n    x = (N // 10) * 10\n    if (N - x) >= M:\n        total_count = total_count + 1\n    return total_count\n\n\nN = 100\nM = 1\nprint(getCount(N, M))\n"}
{"text": "Count of carry operations on adding two Binary numbers ", "java": "class GFG {\n  static int carryCount(int num1, int num2) {\n    int count = 0;\n    while (num2 != 0) {\n      int carry = num1 & num2;\n      num1 = num1 ^ num2;\n      num2 = carry << 1;\n      count += Integer.bitCount(num2);\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int A = 15, B = 10;\n    System.out.print(carryCount(A, B));\n  }\n}\n", "python": "def carryCount(num1, num2):\n    count = 0\n    while num2 != 0:\n        carry = num1 & num2\n        num1 = num1 ^ num2\n        num2 = carry << 1\n        count += bin(num2).count(\"1\")\n    return count\n\n\nA = 15\nB = 10\nprint(carryCount(A, B))\n"}
{"text": "Count of all possible numbers not exceeding M having suffix N ", "java": "import java.util.*;\n\nclass GFG {\n  static int digitsOf(int num) {\n    return Integer.toString(num).length();\n  }\n\n  static int count(int a, int tn) {\n    int diff = (int) Math.pow(10, digitsOf(a));\n    return ((tn - a) / diff) + 1;\n  }\n\n  public static void main(String[] args) {\n    int n = 25, m = 4500;\n    System.out.println(count(n, m));\n  }\n}\n", "python": "def digitsOf(num):\n    return len(str(num))\n\n\ndef count(a, tn):\n    diff = int(pow(10, digitsOf(a)))\n    return ((tn - a) / diff) + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 25\n    m = 4500\n    print(int(count(n, m)))\n"}
{"text": "Minimum increments by index value required to obtain at least two equal Array elements ", "java": "import java.util.*;\n\nclass GFG {\n  static void update(int arr[], int N) {\n    for (int i = 0; i < N; i++) {\n      arr[i] += (i + 1);\n    }\n  }\n\n  static boolean check(int arr[], int N) {\n    int f = 0;\n    for (int i = 0; i < N; i++) {\n      int count = 0;\n      for (int j = 0; j < N; j++) {\n        if (arr[i] == arr[j]) {\n          count++;\n        }\n      }\n      if (count >= 2) {\n        f = 1;\n        break;\n      }\n    }\n    if (f == 1) return true;\n    else return false;\n  }\n\n  static void incrementCount(int arr[], int N) {\n    int min = 0;\n    while (check(arr, N) != true) {\n      update(arr, N);\n      min++;\n    }\n    System.out.println(min);\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    int arr[] = {12, 8, 4};\n    incrementCount(arr, N);\n  }\n}\n", "python": "def incrementCount(arr, N):\n    mini = arr[0] - arr[1]\n    for i in range(2, N):\n        mini = min(mini, arr[i - 1] - arr[i])\n    print(mini)\n\n\nN = 3\narr = [12, 8, 4]\nincrementCount(arr, N)\n"}
{"text": "Largest number M having bit count of N such that difference between their OR and XOR value is maximized ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxORminusXOR(int N) {\n    int MSB = (int) Math.ceil(Math.log(N));\n    int M = 0;\n    for (int i = 0; i <= MSB; i++) M += (1 << i);\n    return M;\n  }\n\n  public static void main(String[] args) {\n    int N = 10;\n    System.out.print(maxORminusXOR(N));\n  }\n}\n", "python": "import math\n\n\ndef maxORminusXOR(N):\n    MSB = int(math.log2(N))\n    M = 0\n    for i in range(MSB + 1):\n        M += 1 << i\n    return M\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 10\n    print(maxORminusXOR(N))\n"}
{"text": "Largest string obtained in Dictionary order after deleting K characters ", "java": "import java.io.IOException;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\n\npublic class GFG {\n  public static String largestString(int n, int k, String sc) {\n    char[] s = sc.toCharArray();\n    Deque<Character> deq = new ArrayDeque<>();\n    for (int i = 0; i < n; ++i) {\n      while (deq.size() > 0 && deq.getLast() < s[i] && k > 0) {\n        deq.pollLast();\n        k--;\n      }\n      deq.add(s[i]);\n    }\n    String st = \" \";\n    for (char c : deq) st = st + Character.toString(c);\n    return st;\n  }\n\n  public static void main(String[] args) throws IOException {\n    int n = 4;\n    int k = 2;\n    String sc = \" ritz \";\n    String result = largestString(n, k, sc);\n    System.out.println(result);\n  }\n}\n", "python": "from collections import deque\n\n\ndef largestString(n, k, sc):\n    s = [i for i in sc]\n    deq = deque()\n    for i in range(n):\n        while len(deq) > 0 and deq[-1] < s[i] and k > 0:\n            deq.popleft()\n            k -= 1\n        deq.append(s[i])\n    st = \" \"\n    for c in deq:\n        st = st + c\n    return st\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    k = 2\n    sc = \" ritz \"\n    result = largestString(n, k, sc)\n    print(result)\n"}
{"text": "Count total set bits in all numbers from range L to R ", "java": "class GFG {\n  static int countSetBits(int L, int R) {\n    int count = 0;\n    for (int i = L; i <= R; i++) {\n      int n = i;\n      while (n > 0) {\n        count += (n & 1);\n        n = n >> 1;\n      }\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int L = 3, R = 5;\n    System.out.print(\" Total \u2581 set \u2581 Bit \u2581 count \u2581 is \u2581 \" + countSetBits(L, R));\n  }\n}\n", "python": "def getLeftmostBit(n):\n    m = 0\n    while n > 1:\n        n = n >> 1\n        m += 1\n    return m\n\n\ndef getNextLeftmostBit(n, m):\n    temp = 1 << m\n    while n < temp:\n        temp = temp >> 1\n        m -= 1\n    return m\n\n\ndef countSetBit(n):\n    m = getLeftmostBit(n)\n    return _countSetBit(n, m)\n\n\ndef _countSetBit(n, m):\n    if n == 0:\n        return 0\n    m = getNextLeftmostBit(n, m)\n    if n == int(1 << (m + 1)) - 1:\n        return int(m + 1) * (1 << m)\n    n = n - (1 << m)\n    return (n + 1) + countSetBit(n) + m * (1 << (m - 1))\n\n\ndef countSetBits(L, R):\n    return abs(countSetBit(R) - countSetBit(L - 1))\n\n\nif __name__ == \" _ _ main _ _ \":\n    L = 3\n    R = 5\n    print(\" Total \u2581 set \u2581 bit \u2581 count \u2581 is \u2581 \", countSetBits(L, R))\n"}
{"text": "Count total set bits in all numbers from range L to R ", "java": "class GFG {\n  static int countSetBits(int L, int R) {\n    int count = 0;\n    for (int i = L; i <= R; i++) {\n      count += Integer.bitCount(i);\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int L = 3, R = 5;\n    System.out.print(\" Total \u2581 set \u2581 bit \u2581 count \u2581 is \u2581 \" + countSetBits(L, R));\n  }\n}\n", "python": "def getLeftmostBit(n):\n    m = 0\n    while n > 1:\n        n = n >> 1\n        m += 1\n    return m\n\n\ndef getNextLeftmostBit(n, m):\n    temp = 1 << m\n    while n < temp:\n        temp = temp >> 1\n        m -= 1\n    return m\n\n\ndef countSetBit(n):\n    m = getLeftmostBit(n)\n    return _countSetBit(n, m)\n\n\ndef _countSetBit(n, m):\n    if n == 0:\n        return 0\n    m = getNextLeftmostBit(n, m)\n    if n == int(1 << (m + 1)) - 1:\n        return int(m + 1) * (1 << m)\n    n = n - (1 << m)\n    return (n + 1) + countSetBit(n) + m * (1 << (m - 1))\n\n\ndef countSetBits(L, R):\n    return abs(countSetBit(R) - countSetBit(L - 1))\n\n\nif __name__ == \" _ _ main _ _ \":\n    L = 3\n    R = 5\n    print(\" Total \u2581 set \u2581 bit \u2581 count \u2581 is \u2581 \", countSetBits(L, R))\n"}
{"text": "Check if the concatenation of first N natural numbers is divisible by 3 ", "java": "class GFG {\n  static boolean isDivisible(int N) {\n    return (N - 1) % 3 != 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 6;\n    if (isDivisible(N)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isDivisible(N):\n    return (N - 1) % 3 != 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 6\n    if isDivisible(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Perfect Square factors of a Number ", "java": "import java.util.*;\n\nclass GFG {\n  static int noOfFactors(int N) {\n    if (N == 1) return 1;\n    int count = 0;\n    int ans = 1;\n    while (N % 2 == 0) {\n      count++;\n      N = N / 2;\n    }\n    ans *= (count / 2 + 1);\n    for (int i = 3; i * i <= N; i = i + 2) {\n      count = 0;\n      while (N % i == 0) {\n        count++;\n        N = N / i;\n      }\n      ans *= (count / 2 + 1);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 100;\n    System.out.print(noOfFactors(N));\n  }\n}\n", "python": "def noOfFactors(N):\n    if N == 1:\n        return 1\n    count = 0\n    ans = 1\n    while N % 2 == 0:\n        count += 1\n        N = N // 2\n    ans *= count // 2 + 1\n    i = 3\n    while i * i <= N:\n        count = 0\n        while N % i == 0:\n            count += 1\n            N = N // i\n        ans *= count // 2 + 1\n        i += 2\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 100\n    print(noOfFactors(N))\n"}
{"text": "Check if the given string is linear or not ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean is_linear(String s) {\n    int tmp = 0;\n    char first = s.charAt(0);\n    for (int pos = 0; pos < s.length(); pos += tmp) {\n      if (s.charAt(pos) != first) {\n        return false;\n      }\n      tmp++;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    String str = \" aapaxyayziabcde \";\n    if (is_linear(str)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "def is_linear(s):\n    tmp = 0\n    first = s[0]\n    pos = 0\n    while pos < len(s):\n        if s[pos] != first:\n            return False\n        tmp += 1\n        pos += tmp\n    return True\n\n\nif __name__ == \" _ _ main _ _ \":\n    str = \" aapaxyayziabcde \"\n    if is_linear(str):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Number of ways to sum up a total of N from limited denominations ", "java": "import java.util.*;\n\nclass GFG {\n  static int calculateWays(int arr1[], int arr2[], int N) {\n    int A = arr2[0], B = arr2[1];\n    int C = arr2[2], D = arr2[3];\n    int ans = 0;\n    for (int b = 0; b <= B && b * 5 <= (N); b++)\n      for (int c = 0; c <= C && b * 5 + c * 10 <= (N); c++)\n        for (int d = 0; d <= D && b * 5 + c * 10 + d * 20 <= (N); d++)\n          if ((b * 5) + (c * 10) + (d * 20) >= (N - A)) ans++;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 123;\n    int arr1[] = {1, 5, 10, 20};\n    int arr2[] = {6, 4, 3, 5};\n    System.out.print(calculateWays(arr1, arr2, N));\n  }\n}\n", "python": "def calculateWays(arr1, arr2, N):\n    A = arr2[0]\n    B = arr2[1]\n    C = arr2[2]\n    D = arr2[3]\n    ans, b, c, d = 0, 0, 0, 0\n    while b <= B and b * 5 <= (N):\n        c = 0\n        while c <= C and b * 5 + c * 10 <= (N):\n            d = 0\n            while d <= D and b * 5 + c * 10 + d * 20 <= (N):\n                if (b * 5) + (c * 10) + (d * 20) >= (N - A):\n                    ans += 1\n                d += 1\n            c += 1\n        b += 1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 123\n    arr1 = [1, 5, 10, 20]\n    arr2 = [6, 4, 3, 5]\n    print(calculateWays(arr1, arr2, N))\n"}
{"text": "Number of ways to sum up a total of N from limited denominations ", "java": "import java.util.*;\n\nclass GFG {\n  static int[] ways = new int[1010];\n\n  static int calculateWays(int arr1[], int arr2[], int N) {\n    int A = arr2[0], B = arr2[1];\n    int C = arr2[2], D = arr2[3];\n    int ans = 0;\n    for (int b = 0; b <= B && b * 5 <= N; b++) {\n      for (int a = 0; a <= A && a * 1 + b * 5 <= N; a++) {\n        ways[a + b * 5]++;\n      }\n    }\n    for (int c = 0; c <= C && c * 10 <= (N); c++) {\n      for (int d = 0; d <= D && c * 10 + d * 20 <= (N); d++) {\n        ans += ways[N - c * 10 - d * 20];\n      }\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 123;\n    int arr1[] = {1, 5, 10, 20};\n    int arr2[] = {6, 4, 3, 5};\n    System.out.print(calculateWays(arr1, arr2, N));\n  }\n}\n", "python": "def calculateWays(arr1, arr2, N):\n    A = arr2[0]\n    B = arr2[1]\n    C = arr2[2]\n    D = arr2[3]\n    ans, b, c, d = 0, 0, 0, 0\n    while b <= B and b * 5 <= (N):\n        c = 0\n        while c <= C and b * 5 + c * 10 <= (N):\n            d = 0\n            while d <= D and b * 5 + c * 10 + d * 20 <= (N):\n                if (b * 5) + (c * 10) + (d * 20) >= (N - A):\n                    ans += 1\n                d += 1\n            c += 1\n        b += 1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 123\n    arr1 = [1, 5, 10, 20]\n    arr2 = [6, 4, 3, 5]\n    print(calculateWays(arr1, arr2, N))\n"}
{"text": "Count of Missing Numbers in a sorted array ", "java": "class GFG {\n  public static void countMissingNum(int[] a, int N) {\n    int count = a[N - 1] - a[0] + 1 - N;\n    System.out.println(count);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {5, 10, 20, 40};\n    int N = arr.length;\n    countMissingNum(arr, N);\n  }\n}\n", "python": "def countMissingNum(a, N):\n    count = a[N - 1] - a[0] + 1 - N\n    print(count)\n\n\narr = [5, 10, 20, 40]\nN = len(arr)\ncountMissingNum(arr, N)\n"}
{"text": "Convert string to integer without using any in ", "java": "class GFG {\n  public static void convert(String s) {\n    int num = 0;\n    int n = s.length();\n    for (int i = 0; i < n; i++) num = num * 10 + ((int) s.charAt(i) - 48);\n    System.out.print(num);\n  }\n\n  public static void main(String[] args) {\n    String s = \"123\";\n    convert(s);\n  }\n}\n", "python": "def convert(s):\n    num = 0\n    n = len(s)\n    for i in s:\n        num = num * 10 + (ord(i) - 48)\n    print(num)\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \"123\"\n    convert(s)\n"}
{"text": "Sum of first N natural numbers with all powers of 2 added twice ", "java": "import java.util.*;\n\nclass GFG {\n  static double power(int N, int P) {\n    return Math.pow(N, P);\n  }\n\n  public static int log2(int N) {\n    int result = (int) (Math.log(N) / Math.log(2));\n    return result;\n  }\n\n  static double specialSum(int n) {\n    double sum = n * (n + 1) / 2;\n    int a = log2(n);\n    sum = sum + power(2, a + 1) - 1;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(specialSum(n));\n  }\n}\n", "python": "import math\n\n\ndef power(N, P):\n    return math.pow(N, P)\n\n\ndef Log2(N):\n    result = math.log(N) // math.log(2)\n    return result\n\n\ndef specialSum(n):\n    sum = n * (n + 1) // 2\n    a = Log2(n)\n    sum = sum + power(2, a + 1) - 1\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(specialSum(n))\n"}
{"text": "Maximize Profit by trading stocks based on given rate per day ", "java": "class GFG {\n  static int maxProfit(int[] prices, int n) {\n    int profit = 0, currentDay = n - 1;\n    while (currentDay > 0) {\n      int day = currentDay - 1;\n      while (day >= 0 && (prices[currentDay] > prices[day])) {\n        profit += (prices[currentDay] - prices[day]);\n        day--;\n      }\n      currentDay = day;\n    }\n    return profit;\n  }\n\n  public static void main(String[] args) {\n    int prices[] = {2, 3, 5};\n    int N = prices.length;\n    System.out.print(maxProfit(prices, N));\n  }\n}\n", "python": "def maxProfit(prices, n):\n    profit = 0\n    currentDay = n - 1\n    while currentDay > 0:\n        day = currentDay - 1\n        while day >= 0 and (prices[currentDay] > prices[day]):\n            profit += prices[currentDay] - prices[day]\n            day -= 1\n        currentDay = day\n    return profit\n\n\nprices = [2, 3, 5]\nN = len(prices)\nprint(maxProfit(prices, N))\n"}
{"text": "Total number of cells covered in a matrix after D days ", "java": "import java.util.*;\n\nclass GFG {\n  static int solve(int n, int m, int x, int y, int d) {\n    int top = Math.min(d, x - 1);\n    int down = Math.min(d, n - x);\n    int left = Math.min(d, y - 1);\n    int right = Math.min(d, m - y);\n    int quad1 = top * left;\n    int quad2 = left * down;\n    int quad3 = down * right;\n    int quad4 = right * top;\n    int totalsq = quad1 + quad2 + quad3 + quad4;\n    int singleBlocks = top + down + left + right + 1;\n    return totalsq + singleBlocks;\n  }\n\n  public static void main(String[] args) {\n    int n = 10, m = 10;\n    int x = 7, y = 8;\n    int d = 4;\n    d--;\n    System.out.println(solve(n, m, x, y, d));\n  }\n}\n", "python": "def solve(n, m, x, y, d):\n    top = min(d, x - 1)\n    down = min(d, n - x)\n    left = min(d, y - 1)\n    right = min(d, m - y)\n    quad1 = top * left\n    quad2 = left * down\n    quad3 = down * right\n    quad4 = right * top\n    totalsq = quad1 + quad2 + quad3 + quad4\n    singleBlocks = top + down + left + right + 1\n    return totalsq + singleBlocks\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    m = 10\n    x = 7\n    y = 8\n    d = 4\n    d -= 1\n    print(solve(n, m, x, y, d))\n"}
{"text": "Count number of triangles possible for the given sides range ", "java": "\nclass GFG {\n  public static int count_triangles(int a, int b, int c, int d) {\n    int ans = 0;\n    for (int x = a; x <= b; ++x) {\n      int num_greater_than_d = Math.max(d, c + x) - Math.max(d, b + x - 1);\n      ans += num_greater_than_d * (d - c + 1);\n      int r = Math.min(Math.max(c, c + x), d) - c;\n      int l = Math.min(Math.max(c, b + x - 1), d) - c;\n      int x1 = (r * (r + 1)) / 2;\n      int x2 = (l * (l + 1)) / 2;\n      ans += x1 - x2;\n    }\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int a = 2, b = 3, c = 4, d = 5;\n    System.out.println(count_triangles(a, b, c, d));\n  }\n}\n", "python": "def count_triangles(a, b, c, d):\n    ans = 0\n    for x in range(a, b + 1):\n        num_greater_than_d = max(d, c + x) - max(d, b + x - 1)\n        ans = ans + num_greater_than_d * (d - c + 1)\n        r = min(max(c, c + x), d) - c\n        l = min(max(c, b + x - 1), d) - c\n        x1 = int((r * (r + 1)) / 2)\n        x2 = int((l * (l + 1)) / 2)\n        ans = ans + (x1 - x2)\n    return ans\n\n\na = 2\nb = 3\nc = 4\nd = 5\nprint(count_triangles(a, b, c, d), end=\" \")\n"}
{"text": "Maximize the sum of sum of the Array by removing end elements ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxRemainingSum(int arr[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum += arr[i];\n    int i = 0;\n    int j = n - 1;\n    int result = 0;\n    while (i < j) {\n      if (arr[i] < arr[j]) {\n        sum -= arr[i];\n        i++;\n      } else {\n        sum -= arr[j];\n        j--;\n      }\n      result += sum;\n    }\n    return result;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {3, 1, 7, 2, 1};\n    int N = arr.length;\n    System.out.println(maxRemainingSum(arr, N));\n  }\n}\n", "python": "def maxRemainingSum(arr, n):\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    i = 0\n    j = n - 1\n    result = 0\n    while i < j:\n        if arr[i] < arr[j]:\n            sum -= arr[i]\n            i += 1\n        else:\n            sum -= arr[j]\n            j -= 1\n        result += sum\n    return result\n\n\narr = [3, 1, 7, 2, 1]\nN = len(arr)\nprint(maxRemainingSum(arr, N))\n"}
{"text": "Split N powers of 2 into two subsets such that their difference of sum is minimum ", "java": "\nclass GFG {\n  public static void MinDiff(int n) {\n    int val = (int) Math.pow(2, n);\n    int sep = n / 2;\n    int grp1 = 0;\n    int grp2 = 0;\n    grp1 = grp1 + val;\n    for (int i = 1; i < sep; i++) grp1 = grp1 + (int) Math.pow(2, i);\n    for (int i = sep; i < n; i++) grp2 = grp2 + (int) Math.pow(2, i);\n    System.out.println(Math.abs(grp1 - grp2));\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    MinDiff(n);\n  }\n}\n", "python": "def MinDiff(n):\n    val = 2 ** n\n    sep = n // 2\n    grp1 = 0\n    grp2 = 0\n    grp1 = grp1 + val\n    for i in range(1, sep):\n        grp1 = grp1 + 2 ** i\n    for i in range(sep, n):\n        grp2 = grp2 + 2 ** i\n    print(abs(grp1 - grp2))\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    MinDiff(n)\n"}
{"text": "Length of the Smallest Subarray that must be removed in order to Maximise the GCD ", "java": "class GFG {\n  static int GetMinSubarrayLength(int a[], int n) {\n    int ans = Math.max(a[0], a[n - 1]);\n    int lo = 0, hi = n - 1;\n    while (lo < n && a[lo] % ans == 0) lo++;\n    while (hi > lo && a[hi] % ans == 0) hi--;\n    return (hi - lo + 1);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 8, 2, 1, 4};\n    int N = arr.length;\n    int Length = GetMinSubarrayLength(arr, N);\n    System.out.println(Length);\n  }\n}\n", "python": "def GetMinSubarrayLength(a, n):\n    ans = max(a[0], a[n - 1])\n    lo = 0\n    hi = n - 1\n    while lo < n and a[lo] % ans == 0:\n        lo += 1\n    while hi > lo and a[hi] % ans == 0:\n        hi -= 1\n    return hi - lo + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [4, 8, 2, 1, 4]\n    N = len(arr)\n    length = GetMinSubarrayLength(arr, N)\n    print(length)\n"}
{"text": "Find minimum value of the expression by choosing K elements from given array ", "java": "import java.util.*;\n\nclass GFG {\n  static int minimumValue(int arr[], int n, int k) {\n    Arrays.sort(arr);\n    int answer = 0;\n    for (int i = 0; i < k; i++) answer += arr[i] * arr[i];\n    return answer * (2 * k - 2);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 21, 5, 3, 8}, k = 3;\n    int n = arr.length;\n    System.out.print(minimumValue(arr, n, k));\n  }\n}\n", "python": "def minimumValue(arr, n, k):\n    arr.sort()\n    answer = 0\n    for i in range(k):\n        answer += arr[i] * arr[i]\n    return answer * (2 * k - 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [4, 21, 5, 3, 8]\n    k = 3\n    n = len(arr)\n    print(minimumValue(arr, n, k))\n"}
{"text": "Minimum operations to make two numbers equal ", "java": "import java.util.*;\n\nclass GFG {\n  static int minOperations(int n, int m) {\n    int a = 0, k = 1;\n    int p = Math.max(n, m);\n    while (n != m) {\n      float s = (float) (p - n + p - m);\n      float q = (float) ((-1 + Math.sqrt(8 * s + 1)) / 2);\n      if (q - Math.floor(q) == 0) {\n        a = (int) q;\n        n = m;\n      }\n      p = p + 1;\n    }\n    return a;\n  }\n\n  public static void main(String[] args) {\n    int n = 1, m = 3;\n    System.out.print(minOperations(n, m));\n  }\n}\n", "python": "from math import sqrt, floor\n\n\ndef minOperations(n, m):\n    a = 0\n    k = 1\n    p = max(n, m)\n    while n != m:\n        s = float(p - n + p - m)\n        q = (-1 + sqrt(8 * s + 1)) / 2\n        if q - floor(q) == 0:\n            a = q\n            n = m\n        p = p + 1\n    return a\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 1\n    m = 3\n    print(minOperations(n, m))\n"}
{"text": "Minimum length String with Sum of the alphabetical values of the characters equal to N ", "java": "class GFG {\n  static int minLength(int n) {\n    int ans = n / 26;\n    if (n % 26 != 0) ans++;\n    return ans;\n  }\n\n  static String minString(int n) {\n    int ans = n / 26;\n    String res = \" \";\n    while (ans-- != 0) {\n      res = res + \" z \";\n    }\n    if (n % 26 != 0) {\n      res = res + (char) ((n % 26) + 96);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int n = 50;\n    System.out.println(minLength(n));\n    System.out.println(minString(n));\n  }\n}\n", "python": "def minLength(n):\n    ans = n // 26\n    if n % 26 != 0:\n        ans += 1\n    return ans\n\n\ndef minString(n):\n    ans = n // 26\n    res = \" \"\n    while ans:\n        res = res + \" z \"\n        ans -= 1\n    if n % 26 != 0:\n        res = res + chr((n % 26) + 96)\n    return res\n\n\nn = 50\nprint(minLength(n))\nprint(minString(n))\n"}
{"text": "Minimum halls required for class scheduling ", "java": "import java.util.*;\n\nclass GFG {\n  static int MAX = 100001;\n\n  static int minHalls(int lectures[][], int n) {\n    int[] prefix_sum = new int[MAX];\n    for (int i = 0; i < n; i++) {\n      prefix_sum[lectures[i][0]]++;\n      prefix_sum[lectures[i][1] + 1]--;\n    }\n    int ans = prefix_sum[0];\n    for (int i = 1; i < MAX; i++) {\n      prefix_sum[i] += prefix_sum[i - 1];\n      ans = Math.max(ans, prefix_sum[i]);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int lectures[][] = {{0, 5}, {1, 2}, {1, 10}};\n    int n = lectures.length;\n    System.out.println(minHalls(lectures, n));\n  }\n}\n", "python": "MAX = 100001\n\n\ndef minHalls(lectures, n):\n    prefix_sum = [0] * MAX\n    for i in range(n):\n        prefix_sum[lectures[i][0]] += 1\n        prefix_sum[lectures[i][1] + 1] -= 1\n    ans = prefix_sum[0]\n    for i in range(1, MAX):\n        prefix_sum[i] += prefix_sum[i - 1]\n        ans = max(ans, prefix_sum[i])\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    lectures = [[0, 5], [1, 2], [1, 10]]\n    n = len(lectures)\n    print(minHalls(lectures, n))\n"}
{"text": "Find the minimum capacity of the train required to hold the passengers ", "java": "import java.util.*;\n\nclass GFG {\n  static int minCapacity(int enter[], int exit[], int n) {\n    int minCap = 0;\n    int currCap = 0;\n    for (int i = 0; i < n; i++) {\n      currCap = currCap + enter[i] - exit[i];\n      minCap = Math.max(minCap, currCap);\n    }\n    return minCap;\n  }\n\n  public static void main(String[] args) {\n    int enter[] = {3, 5, 2, 0};\n    int exit[] = {0, 2, 4, 4};\n    int n = enter.length;\n    System.out.println(minCapacity(enter, exit, n));\n  }\n}\n", "python": "def minCapacity(enter, exit, n):\n    minCap = 0\n    currCap = 0\n    for i in range(n):\n        currCap = currCap + enter[i] - exit[i]\n        minCap = max(minCap, currCap)\n    return minCap\n\n\nif __name__ == \" _ _ main _ _ \":\n    enter = [3, 5, 2, 0]\n    exit = [0, 2, 4, 4]\n    n = len(enter)\n    print(minCapacity(enter, exit, n))\n"}
{"text": "Find permutation with maximum remainder Sum ", "java": "import java.util.*;\n\nclass GFG {\n  static int[] Findpermutation(int n) {\n    int[] a = new int[n + 1];\n    a[1] = n;\n    for (int i = 2; i <= n; i++) a[i] = i - 1;\n    return a;\n  }\n\n  public static void main(String[] args) {\n    int n = 8;\n    int[] v = Findpermutation(n);\n    for (int i = 1; i <= n; i++) System.out.print(v[i] + \" \u2581 \");\n  }\n}\n", "python": "def Findpermutation(n):\n    a = [0] * (n + 1)\n    a[1] = n\n    for i in range(2, n + 1):\n        a[i] = i - 1\n    return a\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 8\n    v = Findpermutation(n)\n    for i in range(1, n + 1):\n        print(v[i], end=\" \u2581 \")\n    DEDENT\n"}
{"text": "Check if string can be rearranged so that every Odd length Substring is Palindrome ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean IsPossible(String s) {\n    int n = s.length();\n    HashSet<Character> count = new HashSet<>();\n    HashMap<Character, Integer> map = new HashMap<>();\n    for (int i = 0; i < n; i++) {\n      count.add(s.charAt(i));\n      map.put(s.charAt(i), map.get(s.charAt(i)) == null ? 1 : map.get(s.charAt(i)) + 1);\n    }\n    if (count.size() == 1) return true;\n    if (count.size() > 2) return false;\n    String newString = count.toArray().toString();\n    int j = 0;\n    char it = newString.charAt(j);\n    int x = 0, y = 0;\n    x = map.get(it) == null ? 0 : map.get(it);\n    j++;\n    it = newString.charAt(j);\n    y = map.get(it) == null ? 0 : map.get(it);\n    if (Math.abs(x - y) <= 1) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    String s = \" aaaddad \";\n    if (IsPossible(s)) System.out.println(\" YES \");\n    else System.out.println(\" NO \");\n  }\n}\n", "python": "def IsPossible(s):\n    n = len(s)\n    count = set()\n    map = dict.fromkeys(s, 0)\n    for i in range(n):\n        count.add(s[i])\n        map[s[i]] += 1\n    if len(count) == 1:\n        return True\n    if len(count) > 2:\n        return False\n    j = 0\n    it = list(count)[j]\n    x = 0\n    y = 0\n    x = map[it]\n    j += 1\n    it = list(count)[j]\n    y = map[it]\n    if abs(x - y) <= 1:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \" aaaddad \"\n    if IsPossible(s):\n        print(\" YES \")\n    else:\n        print(\" NO \")\n    DEDENT\n"}
{"text": "Minimum element left from the array after performing given operations ", "java": "import java.util.*;\n\nclass GFG {\n  static int getMin(int arr[], int n) {\n    int minVal = Arrays.stream(arr).min().getAsInt();\n    return minVal;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {5, 3, 1, 6, 9};\n    int n = arr.length;\n    System.out.println(getMin(arr, n));\n  }\n}\n", "python": "def getMin(arr, n):\n    minVal = min(arr)\n    return minVal\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [5, 3, 1, 6, 9]\n    n = len(arr)\n    print(getMin(arr, n))\n"}
{"text": "Maximum distance between two unequal elements ", "java": "import java.io.*;\n\nclass GFG {\n  static int maxDistance(int arr[], int n) {\n    if (arr[0] != arr[n - 1]) return (n - 1);\n    int i = n - 1;\n    while (i > 0) {\n      if (arr[i] != arr[0]) break;\n      i--;\n    }\n    int distFirst = (i == 0) ? -1 : i;\n    i = 0;\n    while (i < n - 1) {\n      if (arr[i] != arr[n - 1]) break;\n      i++;\n    }\n    int distLast = (i == n - 1) ? -1 : (n - 1 - i);\n    int maxDist = Math.max(distFirst, distLast);\n    return maxDist;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 4, 1, 2, 1, 4};\n    int n = arr.length;\n    System.out.print(maxDistance(arr, n));\n  }\n}\n", "python": "def maxDistance(arr, n):\n    if arr[0] != arr[n - 1]:\n        return n - 1\n    i = n - 1\n    while i > 0:\n        if arr[i] != arr[0]:\n            break\n        i -= 1\n    distFirst = -1 if (i == 0) else i\n    i = 0\n    while i < n - 1:\n        if arr[i] != arr[n - 1]:\n            break\n        i += 1\n    distLast = -1 if (i == n - 1) else (n - 1 - i)\n    maxDist = max(distFirst, distLast)\n    return maxDist\n\n\narr = [4, 4, 1, 2, 1, 4]\nn = len(arr)\nprint(maxDistance(arr, n))\n"}
{"text": "Maximum money that can be withdrawn in two steps ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxCoins(int X, int Y) {\n    if (X < Y) {\n      swap(X, Y);\n    }\n    int coins = X;\n    X--;\n    coins += Math.max(X, Y);\n    return coins;\n  }\n\n  static void swap(int X, int Y) {\n    int temp = X;\n    X = Y;\n    Y = temp;\n  }\n\n  public static void main(String[] args) {\n    int X = 7, Y = 5;\n    System.out.println(maxCoins(X, Y));\n  }\n}\n", "python": "def maxCoins(X, Y):\n    if X < Y:\n        X, Y = Y, X\n    coins = X\n    X -= 1\n    coins += max(X, Y)\n    return coins\n\n\nif __name__ == \" _ _ main _ _ \":\n    X = 7\n    Y = 5\n    print(maxCoins(X, Y))\n"}
{"text": "Minimum possible final health of the last monster in a game ", "java": "import java.util.*;\n\nclass GFG {\n  static int gcd(int a, int b) {\n    if (a == 0) return b;\n    return gcd(b % a, a);\n  }\n\n  static int solve(int health[], int n) {\n    int currentgcd = gcd(health[0], health[1]);\n    for (int i = 2; i < n; ++i) {\n      currentgcd = gcd(currentgcd, health[i]);\n    }\n    return currentgcd;\n  }\n\n  public static void main(String args[]) {\n    int health[] = {4, 6, 8, 12};\n    int n = health.length;\n    System.out.println(solve(health, n));\n  }\n}\n", "python": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef solve(health, n):\n    currentgcd = gcd(health[0], health[1])\n    for i in range(2, n):\n        currentgcd = gcd(currentgcd, health[i])\n    return currentgcd\n\n\nhealth = [4, 6, 8, 12]\nn = len(health)\nprint(solve(health, n))\n"}
{"text": "Count the number of currency notes needed ", "java": "class GFG {\n  static int bankNotes(int A, int B, int S, int N) {\n    int numerator = S - (B * N);\n    int denominator = A - B;\n    if (numerator % denominator == 0) return (numerator / denominator);\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int A = 1, B = 2, S = 7, N = 5;\n    System.out.print(bankNotes(A, B, S, N));\n  }\n}\n", "python": "def bankNotes(A, B, S, N):\n    numerator = S - (B * N)\n    denominator = A - B\n    if numerator % denominator == 0:\n        return numerator // denominator\n    return -1\n\n\nA, B, S, N = 1, 2, 7, 5\nprint(bankNotes(A, B, S, N))\n"}
{"text": "Find the minimum number of steps to reach M from N ", "java": "class CFG {\n  static int Minsteps(int n, int m) {\n    int ans = 0;\n    while (m > n) {\n      if (m % 2 != 0) {\n        m++;\n        ans++;\n      }\n      m /= 2;\n      ans++;\n    }\n    return ans + n - m;\n  }\n\n  public static void main(String[] args) {\n    int n = 4, m = 6;\n    System.out.println(Minsteps(n, m));\n  }\n}\n", "python": "def Minsteps(n, m):\n    ans = 0\n    while m > n:\n        if m & 1:\n            m += 1\n            ans += 1\n        m //= 2\n        ans += 1\n    return ans + n - m\n\n\nn = 4\nm = 6\nprint(Minsteps(n, m))\n"}
{"text": "Find the number of jumps to reach X in the number line from zero ", "java": "class GFG {\n  static int getsum(int x) {\n    return (x * (x + 1)) / 2;\n  }\n\n  static int countJumps(int n) {\n    n = Math.abs(n);\n    int ans = 0;\n    while (getsum(ans) < n || ((getsum(ans) - n) & 1) > 0) ans++;\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int n = 9;\n    System.out.println(countJumps(n));\n  }\n}\n", "python": "def getsum(x):\n    return int((x * (x + 1)) / 2)\n\n\ndef countJumps(n):\n    n = abs(n)\n    ans = 0\n    while getsum(ans) < n or (getsum(ans) - n) & 1:\n        ans += 1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 9\n    print(countJumps(n))\n"}
{"text": "Minimum elements to be removed such that sum of adjacent elements is always odd ", "java": "class GFG {\n  static int min_elimination(int n, int[] arr) {\n    int count = 0;\n    int prev_val = arr[0];\n    for (int i = 1; i < n; i++) {\n      int curr_val = arr[i];\n      if (curr_val % 2 == prev_val % 2) count++;\n      prev_val = curr_val;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = new int[] {1, 2, 3, 7, 9};\n    int n = arr.length;\n    System.out.println(min_elimination(n, arr));\n  }\n}\n", "python": "def min_elimination(n, arr):\n    count = 0\n    prev_val = arr[0]\n    for i in range(1, n):\n        curr_val = arr[i]\n        if curr_val % 2 == prev_val % 2:\n            count = count + 1\n        prev_val = curr_val\n    return count\n\n\narr = [1, 2, 3, 7, 9]\nn = len(arr)\nprint(min_elimination(n, arr))\n"}
{"text": "Count all possible N digit numbers that satisfy the given condition ", "java": "class GFG {\n  static String getCount(int N) {\n    if (N % 2 == 1) return \"0\";\n    String result = \"9\";\n    for (int i = 1; i <= N / 2 - 1; i++) result += \"0\";\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    System.out.println(getCount(N));\n  }\n}\n", "python": "def getCount(N):\n    if N % 2 == 1:\n        return \"0\"\n    result = \"9\"\n    for i in range(1, N // 2):\n        result = result + \"0\"\n    return result\n\n\nN = 4\nprint(getCount(N))\n"}
{"text": "Maximum number of teams that can be formed with given persons ", "java": "class GFG {\n  static boolean canFormTeam(int n, int m) {\n    if (n >= 1 && m >= 2) return true;\n    if (m >= 1 && n >= 2) return true;\n    return false;\n  }\n\n  static int maxTeams(int n, int m) {\n    int count = 0;\n    while (canFormTeam(n, m)) {\n      if (n > m) {\n        n -= 2;\n        m -= 1;\n      } else {\n        m -= 2;\n        n -= 1;\n      }\n      count++;\n    }\n    return count;\n  }\n\n  public static void main(String args[]) {\n    int n = 4, m = 5;\n    System.out.println(maxTeams(n, m));\n  }\n}\n", "python": "def canFormTeam(n, m):\n    if n >= 1 and m >= 2:\n        return True\n    if m >= 1 and n >= 2:\n        return True\n    return False\n\n\ndef maxTeams(n, m):\n    count = 0\n    while canFormTeam(n, m):\n        if n > m:\n            n -= 2\n            m -= 1\n        else:\n            m -= 2\n            n -= 1\n        count += 1\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    m = 5\n    print(maxTeams(n, m))\n"}
{"text": "Check if elements of an array can be arranged satisfying the given condition ", "java": "import java.util.Arrays;\nimport java.util.HashMap;\n\nclass GfG {\n  static String canReorder(int A[], int n) {\n    HashMap<Integer, Integer> m = new HashMap<>();\n    for (int i = 0; i < n; i++) {\n      if (m.containsKey(A[i])) m.put(A[i], m.get(A[i]) + 1);\n      else m.put(A[i], 1);\n    }\n    Arrays.sort(A);\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n      if (m.get(A[i]) == 0) continue;\n      if (m.containsKey(2 * A[i])) {\n        count += 2;\n        m.put(A[i], m.get(A[i]) - 1);\n        m.put(2 * A[i], m.get(2 * A[i]) - 1);\n      }\n    }\n    if (count == n) return \" true \";\n    else return \" false \";\n  }\n\n  public static void main(String[] args) {\n    int A[] = {4, -2, 2, -4};\n    int n = A.length;\n    System.out.println(canReorder(A, n));\n  }\n}\n", "python": "import collections\n\n\ndef canReorder(A):\n    count = collections.Counter(A)\n    for x in sorted(A, key=abs):\n        if count[x] == 0:\n            continue\n        if count[2 * x] == 0:\n            return False\n        count[x] -= 1\n        count[2 * x] -= 1\n    return True\n\n\nA = [4, -2, 2, -4]\nprint(canReorder(A))\n"}
{"text": "Smallest sum contiguous subarray ", "java": "import java.io.*;\n\nclass GFG {\n  static int smallestSumSubarr(int arr[], int n) {\n    for (int i = 0; i < n; i++) arr[i] = -arr[i];\n    int sum_here = arr[0], max_sum = arr[0];\n    for (int i = 1; i < n; i++) {\n      sum_here = Math.max(sum_here + arr[i], arr[i]);\n      max_sum = Math.max(max_sum, sum_here);\n    }\n    return (-1) * max_sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, -4, 2, -3, -1, 7, -5};\n    int n = arr.length;\n    System.out.print(\" Smallest \u2581 sum : \u2581 \" + smallestSumSubarr(arr, n));\n  }\n}\n", "python": "import sys\n\n\ndef smallestSumSubarr(arr, n):\n    min_ending_here = sys.maxsize\n    min_so_far = sys.maxsize\n    for i in range(n):\n        if min_ending_here > 0:\n            min_ending_here = arr[i]\n        else:\n            min_ending_here += arr[i]\n        min_so_far = min(min_so_far, min_ending_here)\n    return min_so_far\n\n\narr = [3, -4, 2, -3, -1, 7, -5]\nn = len(arr)\nprint \" Smallest \u2581 sum : \u2581 \", smallestSumSubarr(arr, n)\n"}
{"text": "Maximum product subset of an array ", "java": "class GFG {\n  static int maxProductSubset(int a[], int n) {\n    if (n == 1) {\n      return a[0];\n    }\n    int max_neg = Integer.MIN_VALUE;\n    int count_neg = 0, count_zero = 0;\n    int prod = 1;\n    for (int i = 0; i < n; i++) {\n      if (a[i] == 0) {\n        count_zero++;\n        continue;\n      }\n      if (a[i] < 0) {\n        count_neg++;\n        max_neg = Math.max(max_neg, a[i]);\n      }\n      prod = prod * a[i];\n    }\n    if (count_zero == n) {\n      return 0;\n    }\n    if (count_neg % 2 == 1) {\n      if (count_neg == 1 && count_zero > 0 && count_zero + count_neg == n) {\n        return 0;\n      }\n      prod = prod / max_neg;\n    }\n    return prod;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {-1, -1, -2, 4, 3};\n    int n = a.length;\n    System.out.println(maxProductSubset(a, n));\n  }\n}\n", "python": "def maxProductSubset(a, n):\n    if n == 1:\n        return a[0]\n    max_neg = -999999999999\n    count_neg = 0\n    count_zero = 0\n    prod = 1\n    for i in range(n):\n        if a[i] == 0:\n            count_zero += 1\n            continue\n        if a[i] < 0:\n            count_neg += 1\n            max_neg = max(max_neg, a[i])\n        prod = prod * a[i]\n    if count_zero == n:\n        return 0\n    if count_neg & 1:\n        if count_neg == 1 and count_zero > 0 and count_zero + count_neg == n:\n            return 0\n        prod = int(prod / max_neg)\n    return prod\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [-1, -1, -2, 4, 3]\n    n = len(a)\n    print(maxProductSubset(a, n))\n"}
{"text": "Smallest number with sum of digits as N and divisible by 10 ^ N ", "java": "import java.io.*;\n\nclass GFG {\n  static void digitsNum(int N) {\n    if (N == 0) System.out.println(\"0\");\n    if (N % 9 != 0) System.out.print((N % 9));\n    for (int i = 1; i <= (N / 9); ++i) System.out.print(\"9\");\n    for (int i = 1; i <= N; ++i) System.out.print(\"0\");\n    System.out.print(\" \");\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.print(\" The \u2581 number \u2581 is \u2581 : \u2581 \");\n    digitsNum(N);\n  }\n}\n", "python": "import math\n\n\ndef digitsNum(N):\n    if N == 0:\n        print(\"0\", end=\" \")\n    if N % 9 != 0:\n        print(N % 9, end=\" \")\n    for i in range(1, int(N / 9) + 1):\n        print(\"9\", end=\" \")\n    for i in range(1, N + 1):\n        print(\"0\", end=\" \")\n    print()\n\n\nN = 5\nprint(\" The \u2581 number \u2581 is \u2581 : \u2581 \", end=\" \")\ndigitsNum(N)\n"}
{"text": "Partition into two subarrays of lengths k and ( N ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxDifference(int arr[], int N, int k) {\n    int M, S = 0, S1 = 0, max_difference = 0;\n    for (int i = 0; i < N; i++) S += arr[i];\n    int temp;\n    for (int i = 0; i < N; i++) {\n      for (int j = i + 1; j < N; j++) {\n        if (arr[i] < arr[j]) {\n          temp = arr[i];\n          arr[i] = arr[j];\n          arr[j] = temp;\n        }\n      }\n    }\n    M = Math.max(k, N - k);\n    for (int i = 0; i < M; i++) S1 += arr[i];\n    max_difference = S1 - (S - S1);\n    return max_difference;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {8, 4, 5, 2, 10};\n    int N = arr.length;\n    int k = 2;\n    System.out.println(maxDifference(arr, N, k));\n  }\n}\n", "python": "def maxDifference(arr, N, k):\n    S = 0\n    S1 = 0\n    max_difference = 0\n    for i in range(N):\n        S += arr[i]\n    arr.sort(reverse=True)\n    M = max(k, N - k)\n    for i in range(M):\n        S1 += arr[i]\n    max_difference = S1 - (S - S1)\n    return max_difference\n\n\narr = [8, 4, 5, 2, 10]\nN = len(arr)\nk = 2\nprint(maxDifference(arr, N, k))\n"}
{"text": "Minimum cost for acquiring all coins with k extra coins allowed with every coin ", "java": "import java.io.*;\nimport java.util.Arrays;\n\npublic class GFG {\n  static void preprocess(int[] coin, int n) {\n    Arrays.sort(coin);\n    for (int i = 1; i <= n - 1; i++) coin[i] += coin[i - 1];\n  }\n\n  static int minCost(int[] coin, int n, int k) {\n    int coins_needed = (int) Math.ceil(1.0 * n / (k + 1));\n    return coin[coins_needed - 1];\n  }\n\n  public static void main(String[] args) {\n    int[] coin = {8, 5, 3, 10, 2, 1, 15, 25};\n    int n = coin.length;\n    preprocess(coin, n);\n    int k = 3;\n    System.out.println(minCost(coin, n, k));\n    k = 7;\n    System.out.println(minCost(coin, n, k));\n  }\n}\n", "python": "import math\n\n\ndef minCost(coin, n, k):\n    coin.sort()\n    coins_needed = math.ceil(1.0 * n // (k + 1))\n    ans = 0\n    for i in range(coins_needed - 1 + 1):\n        ans += coin[i]\n    return ans\n\n\ncoin = [8, 5, 3, 10, 2, 1, 15, 25]\nn = len(coin)\nk = 3\nprint(minCost(coin, n, k))\n"}
{"text": "Minimum cost to reduce A and B to 0 using square root or divide by 2 ", "java": "import java.io.*;\n\nclass GFG {\n  static int getMinOperations(int A, int B, int prevA, int prevB, int dp[][]) {\n    if (A == prevA && B == prevB) {\n      return Integer.MAX_VALUE;\n    }\n    if (A == 0 && B == 0) {\n      return 0;\n    }\n    if (dp[A][B] != -1) {\n      return dp[A][B];\n    }\n    int ans1 = getMinOperations(A / 2, B, A, B, dp);\n    if (ans1 != Integer.MAX_VALUE) {\n      ans1 += 1;\n    }\n    int ans2 = getMinOperations(A, B / 2, A, B, dp);\n    if (ans2 != Integer.MAX_VALUE) {\n      ans2 += 1;\n    }\n    int ans3 = getMinOperations((int) Math.sqrt(A * B), (int) Math.sqrt(A * B), A, B, dp);\n    if (ans3 != Integer.MAX_VALUE) {\n      ans3 += 2;\n    }\n    return dp[A][B] = Math.min(ans1, Math.min(ans2, ans3));\n  }\n\n  public static void main(String[] args) {\n    int A = 53, B = 16;\n    int mx = Math.max(A, B);\n    int dp[][] = new int[mx + 1][mx + 1];\n    for (int i = 0; i <= mx; i++) {\n      for (int j = 0; j <= mx; j++) dp[i][j] = -1;\n    }\n    System.out.println(getMinOperations(A, B, -1, -1, dp));\n  }\n}\n", "python": "import math as Math\n\n\ndef getMinOperations(A, B, prevA, prevB, dp):\n    if A == prevA and B == prevB:\n        return 10 ** 9\n    if A == 0 and B == 0:\n        return 0\n    if dp[A][B] != -1:\n        return dp[A][B]\n    ans1 = getMinOperations(A // 2, B, A, B, dp)\n    if ans1 != 10 ** 9:\n        ans1 += 1\n    ans2 = getMinOperations(A, B // 2, A, B, dp)\n    if ans2 != 10 ** 9:\n        ans2 += 1\n    ans3 = getMinOperations(\n        Math.floor(Math.sqrt(A * B)), Math.floor(Math.sqrt(A * B)), A, B, dp\n    )\n    if ans3 != 10 ** 9:\n        ans3 += 2\n    dp[A][B] = min(ans1, min(ans2, ans3))\n    return dp[A][B]\n\n\nA = 53\nB = 16\nmx = max(A, B)\ndp = [[-1 for i in range(mx + 1)] for i in range(mx + 1)]\nprint(getMinOperations(A, B, -1, -1, dp))\n"}
{"text": "Count of binary arrays of size N with sum of product of adjacent pairs equal to K ", "java": "import java.util.*;\n\nclass GFG {\n  static int combinationsPossible(int N, int idx, int prev, int val, int K, int[][][] dp) {\n    if (val > K) {\n      return 0;\n    }\n    if (dp[val][idx][prev] != -1) {\n      return dp[val][idx][prev];\n    }\n    if (idx == N - 1) {\n      if (val == K) {\n        return 1;\n      }\n      return 0;\n    }\n    int ans = 0;\n    if (prev == 1) {\n      ans += combinationsPossible(N, idx + 1, 1, val + 1, K, dp);\n      ans += combinationsPossible(N, idx + 1, 0, val, K, dp);\n    } else {\n      ans += combinationsPossible(N, idx + 1, 1, val, K, dp);\n      ans += combinationsPossible(N, idx + 1, 0, val, K, dp);\n    }\n    dp[val][idx][prev] = ans;\n    return dp[val][idx][prev];\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    int K = 3;\n    int[][][] dp = new int[K + 1][N + 1][2];\n    for (int i = 0; i < K + 1; i++) {\n      for (int j = 0; j < N + 1; j++) {\n        for (int k = 0; k < 2; k++) dp[i][j][k] = -1;\n      }\n    }\n    System.out.print(\n        combinationsPossible(N, 0, 0, 0, K, dp) + combinationsPossible(N, 0, 1, 0, K, dp));\n  }\n}\n", "python": "def combinationsPossible(N, idx, prev, val, K, dp):\n    if val > K:\n        return 0\n    if dp[val][idx][prev] != -1:\n        return dp[val][idx][prev]\n    if idx == N - 1:\n        if val == K:\n            return 1\n        return 0\n    ans = 0\n    if prev == 1:\n        ans += combinationsPossible(N, idx + 1, 1, val + 1, K, dp)\n        ans += combinationsPossible(N, idx + 1, 0, val, K, dp)\n    else:\n        ans += combinationsPossible(N, idx + 1, 1, val, K, dp)\n        ans += combinationsPossible(N, idx + 1, 0, val, K, dp)\n    dp[val][idx][prev] = ans\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    K = 3\n    dp = [[[-1 for i in range(2)] for j in range(N + 1)] for k in range(K + 1)]\n    print(\n        combinationsPossible(N, 0, 0, 0, K, dp)\n        + combinationsPossible(N, 0, 1, 0, K, dp)\n    )\n"}
{"text": "Domino and Tromino tiling problem ", "java": "import java.util.Arrays;\n\nclass GFG {\n  public static long MOD = 1000000007l;\n\n  public static long numTilings(int N) {\n    if (N < 3) {\n      return N;\n    }\n    long[][] dp = new long[N + 1][3];\n    for (long[] row : dp) {\n      Arrays.fill(row, 0);\n    }\n    dp[0][0] = dp[1][0] = 1;\n    dp[1][1] = dp[1][2] = 1;\n    for (int i = 2; i <= N; i++) {\n      dp[i][0] = (dp[i - 1][0] + dp[i - 2][0] + dp[i - 2][1] + dp[i - 2][2]) % MOD;\n      dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % MOD;\n      dp[i][2] = (dp[i - 1][0] + dp[i - 1][1]) % MOD;\n    }\n    return dp[N][0];\n  }\n\n  public static void main(String args[]) {\n    int N = 3;\n    System.out.println(numTilings(N));\n  }\n}\n", "python": "MOD = 1e9 + 7\n\n\ndef numTilings(N):\n    if N < 3:\n        return N\n    dp = [[0] * 3 for i in range(N + 1)]\n    dp[0][0] = dp[1][0] = 1\n    dp[1][1] = dp[1][2] = 1\n    for i in range(2, N + 1):\n        dp[i][0] = (dp[i - 1][0] + dp[i - 2][0] + dp[i - 2][1] + dp[i - 2][2]) % MOD\n        dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % MOD\n        dp[i][2] = (dp[i - 1][0] + dp[i - 1][1]) % MOD\n    return int(dp[N][0])\n\n\nN = 3\nprint(numTilings(N))\n"}
{"text": "Maximum jumps to reach end of Array with condition that index i can make arr [ i ] jumps ", "java": "import java.io.*;\n\nclass GFG {\n  static void findMaxJumps(int arr[], int N) {\n    int dp[] = new int[N];\n    int ans = 0;\n    for (int i = N - 1; i >= 0; i--) {\n      dp[i] = arr[i];\n      int j = i + arr[i];\n      if (j < N) {\n        dp[i] = dp[i] + dp[j];\n      }\n      ans = Math.max(ans, dp[i]);\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 3, 5, 7, 9};\n    int N = arr.length;\n    findMaxJumps(arr, N);\n  }\n}\n", "python": "def findMaxJumps(arr, N):\n    dp = [0 for i in range(N)]\n    ans = 0\n    i = N - 1\n    while i >= 0:\n        dp[i] = arr[i]\n        j = i + arr[i]\n        if j < N:\n            dp[i] = dp[i] + dp[j]\n        ans = max(ans, dp[i])\n        i -= 1\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 3, 5, 7, 9]\n    N = len(arr)\n    findMaxJumps(arr, N)\n"}
{"text": "Total count of sorted numbers upto N digits in range [ L , R ] ( Magnificent necklace combinatorics problem ) ", "java": "import java.util.*;\n\nclass GFG {\n  static int Count(int N, int L, int R) {\n    int[][] dp = new int[N][R - L + 1];\n    int ans = 0;\n    for (int i = 0; i < N; i++) {\n      dp[i][0] = 1;\n    }\n    for (int i = 1; i < dp[0].length; i++) {\n      dp[0][i] = dp[0][i - 1] + 1;\n    }\n    ans = dp[0][R - L];\n    for (int i = 1; i < N; i++) {\n      for (int j = 1; j < dp[0].length; j++) {\n        dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n      }\n      ans += dp[i][R - L];\n    }\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int N = 3;\n    int L = 6;\n    int R = 9;\n    System.out.println(Count(N, L, R));\n  }\n}\n", "python": "def Count(N, L, R):\n    dp = [[0 for i in range(R - L + 1)] for i in range(N)]\n    ans = 0\n    for i in range(N):\n        dp[i][0] = 1\n    for i in range(1, len(dp[0])):\n        dp[0][i] = dp[0][i - 1] + 1\n    ans = dp[0][R - L]\n    for i in range(1, N):\n        for j in range(1, len(dp[0])):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        ans += dp[i][R - L]\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    L = 6\n    R = 9\n    print(Count(N, L, R))\n"}
{"text": "Count ways to reach the Nth station ", "java": "class GFG {\n  static int numberOfWays(int N) {\n    int[][] DP = new int[N + 1][5];\n    for (int i = 0; i < N + 1; i++) {\n      for (int j = 0; j < 5; j++) {\n        DP[i][j] = 0;\n      }\n    }\n    DP[1][1] = 1;\n    DP[1][2] = 1;\n    DP[1][3] = 1;\n    DP[1][4] = 1;\n    for (int i = 2; i <= N; i++) {\n      if (i - 1 > 0 && DP[i - 1][1] > 0) DP[i][1] = DP[i - 1][4];\n      if (i - 2 > 0 && DP[i - 2][2] > 0) DP[i][2] = DP[i - 2][4];\n      if (i - 3 > 0 && DP[i - 3][3] > 0) DP[i][3] = DP[i - 3][4];\n      DP[i][4] = (DP[i][1] + DP[i][2] + DP[i][3]);\n    }\n    return DP[N][4];\n  }\n\n  public static void main(String[] args) {\n    int N = 15;\n    System.out.println(numberOfWays(N));\n  }\n}\n", "python": "def numberOfWays(N):\n    DP = [[0 for i in range(5)] for i in range(N + 1)]\n    DP[1][1] = 1\n    DP[1][2] = 1\n    DP[1][3] = 1\n    DP[1][4] = 1\n    for i in range(2, N + 1):\n        if i - 1 > 0 and DP[i - 1][1] > 0:\n            DP[i][1] = DP[i - 1][4]\n        if i - 2 > 0 and DP[i - 2][2] > 0:\n            DP[i][2] = DP[i - 2][4]\n        if i - 3 > 0 and DP[i - 3][3] > 0:\n            DP[i][3] = DP[i - 3][4]\n        DP[i][4] = DP[i][1] + DP[i][2] + DP[i][3]\n    return DP[N][4]\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 15\n    print(numberOfWays(N))\n"}
{"text": "Number of M ", "java": "import java.util.*;\n\nclass GFG {\n  static int countSortedArrays(int start, int m, int size, int n) {\n    if (size == m) return 1;\n    if (start > n) return 0;\n    int notTaken = 0, taken = 0;\n    taken = countSortedArrays(start, m, size + 1, n);\n    notTaken = countSortedArrays(start + 1, m, size, n);\n    return taken + notTaken;\n  }\n\n  public static void main(String[] args) {\n    int n = 2, m = 3;\n    System.out.println(countSortedArrays(1, m, 0, n));\n  }\n}\n", "python": "def countSortedArrays(start, m, size, n):\n    if size == m:\n        return 1\n    if start > n:\n        return 0\n    notTaken, taken = 0, 0\n    taken = countSortedArrays(start, m, size + 1, n)\n    notTaken = countSortedArrays(start + 1, m, size, n)\n    return taken + notTaken\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, m = 2, 3\n    print(countSortedArrays(1, m, 0, n))\n"}
{"text": "Maximum subarray sum possible after removing at most one subarray ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static void maximumSum(int arr[], int n) {\n    long[] preSum = new long[n];\n    long sum = 0;\n    long maxSum = 0;\n    for (int i = 0; i < n; i++) {\n      sum = Math.max(arr[i], sum + arr[i]);\n      maxSum = Math.max(maxSum, sum);\n      preSum[i] = maxSum;\n    }\n    sum = 0;\n    maxSum = 0;\n    long[] postSum = new long[n + 1];\n    for (int i = n - 1; i >= 0; i--) {\n      sum = Math.max(arr[i], sum + arr[i]);\n      maxSum = Math.max(maxSum, sum);\n      postSum[i] = maxSum;\n    }\n    long ans = 0;\n    for (int i = 0; i < n; i++) {\n      ans = Math.max(ans, preSum[i] + postSum[i + 1]);\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {7, 6, -1, -4, -5, 7, 1};\n    maximumSum(arr, arr.length);\n  }\n}\n", "python": "def maximumSum(arr, n):\n    preSum = [0] * n\n    sum = 0\n    maxSum = 0\n    for i in range(n):\n        sum = max(arr[i], sum + arr[i])\n        maxSum = max(maxSum, sum)\n        preSum[i] = maxSum\n    sum = 0\n    maxSum = 0\n    postSum = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        sum = max(arr[i], sum + arr[i])\n        maxSum = max(maxSum, sum)\n        postSum[i] = maxSum\n    ans = 0\n    for i in range(n):\n        ans = max(ans, preSum[i] + postSum[i + 1])\n    print(ans)\n\n\narr = [7, 6, -1, -4, -5, 7, 1]\nN = len(arr)\nmaximumSum(arr, N)\n"}
{"text": "Length of longest increasing subsequence in a string ", "java": "import java.util.*;\n\nclass GFG {\n  static int mn = -2147483648;\n\n  static int lisOtimised(String s) {\n    int[] dp = new int[30];\n    Arrays.fill(dp, 0);\n    int N = s.length();\n    int lis = mn;\n    for (int i = 0; i < N; i++) {\n      int val = (int) s.charAt(i) - 97;\n      int curr = 0;\n      for (int j = 0; j < val; j++) {\n        curr = Math.max(curr, dp[j]);\n      }\n      curr++;\n      lis = Math.max(lis, curr);\n      dp[val] = Math.max(dp[val], curr);\n    }\n    return lis;\n  }\n\n  public static void main(String[] args) {\n    String s = \" fdryutiaghfse \";\n    System.out.print(lisOtimised(s));\n  }\n}\n", "python": "def lisOtimised(s):\n    dp = [0] * 30\n    N = len(s)\n    lis = -(10 ** 9)\n    for i in range(N):\n        val = ord(s[i]) - ord(\" a \")\n        curr = 0\n        for j in range(val):\n            curr = max(curr, dp[j])\n        curr += 1\n        lis = max(lis, curr)\n        dp[val] = max(dp[val], curr)\n    return lis\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \" fdryutiaghfse \"\n    print(lisOtimised(s))\n"}
{"text": "Maximize sum possible from an array by jumps of length i + K * arr [ i ] from any ith index ", "java": "import java.util.*;\n\nclass GFG {\n  static void maxSum(int arr[], int N, int K) {\n    int[] dp = new int[N + 2];\n    Arrays.fill(dp, 0);\n    int maxval = 0;\n    for (int i = N - 1; i >= 0; i--) {\n      if ((i + K * arr[i]) >= N) {\n        dp[i] = arr[i];\n      } else {\n        dp[i] = dp[i + K * arr[i]] + arr[i];\n      }\n      maxval = Math.max(maxval, dp[i]);\n    }\n    System.out.print(maxval);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 1, 3, 1, 2};\n    int N = arr.length;\n    int K = 3;\n    maxSum(arr, N, K);\n  }\n}\n", "python": "def maxSum(arr, N, K):\n    dp = [0 for i in range(N + 2)]\n    maxval = 0\n    i = N - 1\n    while i >= 0:\n        if (i + K * arr[i]) >= N:\n            dp[i] = arr[i]\n        else:\n            dp[i] = dp[i + K * arr[i]] + arr[i]\n        maxval = max(maxval, dp[i])\n        i -= 1\n    print(maxval)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 1, 3, 1, 2]\n    N = len(arr)\n    K = 3\n    maxSum(arr, N, K)\n"}
{"text": "Count ways to tile an N ", "java": "class GFG {\n  static void countWaysToTileBoard(int N) {\n    int dp[] = new int[N + 1];\n    dp[0] = 1;\n    dp[1] = 2;\n    for (int i = 2; i <= N; i++) {\n      dp[i] = (2 * dp[i - 1] + dp[i - 2]);\n    }\n    System.out.print(dp[N]);\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    countWaysToTileBoard(N);\n  }\n}\n", "python": "def countWaysToTileBoard(N):\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    dp[1] = 2\n    for i in range(2, N + 1):\n        dp[i] = 2 * dp[i - 1] + dp[i - 2]\n    print(dp[N])\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    countWaysToTileBoard(N)\n"}
{"text": "Subsequences generated by including characters or ASCII value of characters of given string ", "java": "class GFG {\n  static void FindSub(String str, String res, int i) {\n    if (i == str.length()) {\n      if (res.length() > 0) {\n        System.out.print(res + \" \u2581 \");\n      }\n      return;\n    }\n    char ch = str.charAt(i);\n    FindSub(str, res, i + 1);\n    FindSub(str, res + ch, i + 1);\n    FindSub(str, res + (int) ch, i + 1);\n    ;\n  }\n\n  public static void main(String[] args) {\n    String str = \" ab \";\n    String res = \" \";\n    int N = str.length();\n    FindSub(str, res, 0);\n  }\n}\n", "python": "def FindSub(string, res, i):\n    if i == len(string):\n        if len(res) > 0:\n            print(res, end=\" \u2581 \")\n        return\n    ch = string[i]\n    FindSub(string, res, i + 1)\n    FindSub(string, res + ch, i + 1)\n    FindSub(string, res + str(ord(ch)), i + 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    string = \" ab \"\n    res = \" \"\n    N = len(string)\n    FindSub(string, res, 0)\n"}
{"text": "Minimize given flips required to reduce N to 0 ", "java": "class GFG {\n  public static int MinOp(int N) {\n    if (N <= 1) return N;\n    int bit = (int) (Math.log(N) / Math.log(2)) + 1;\n    return ((1 << bit) - 1) - MinOp(N - (1 << (bit - 1)));\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    System.out.println(MinOp(N));\n  }\n}\n", "python": "import math\n\n\ndef MinOp(N):\n    if N <= 1:\n        return N\n    bit = (int)(math.log(N) / math.log(2)) + 1\n    return ((1 << bit) - 1) - MinOp(N - (1 << (bit - 1)))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    print(MinOp(N))\n"}
{"text": "Count unique paths with given sum in an N ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int mod = (int) 1e9 + 7;\n\n  static int findTotalPath(int X, int n, ArrayList<Integer> dp) {\n    if (X == 0) {\n      return 1;\n    }\n    int ans = 0;\n    if (dp.get(X) != -1) {\n      return dp.get(X);\n    }\n    for (int i = 1; i <= Math.min(X, n); ++i) {\n      ans += findTotalPath(X - i, n, dp) % mod;\n      ans %= mod;\n    }\n    dp.set(X, ans);\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 3, X = 2;\n    ArrayList<Integer> dp = new ArrayList<Integer>(Collections.nCopies(X + 1, -1));\n    System.out.print(findTotalPath(X, n, dp));\n  }\n}\n", "python": "mod = int(1e9 + 7)\n\n\ndef findTotalPath(X, n, dp):\n    if X == 0:\n        return 1\n    ans = 0\n    if dp[X] != -1:\n        return dp[X]\n    for i in range(1, min(X, n) + 1):\n        ans = ans + findTotalPath(X - i, n, dp) % mod\n        ans %= mod\n    dp[X] = ans\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    X = 2\n    dp = [-1] * (X + 1)\n    print(findTotalPath(X, n, dp))\n"}
{"text": "Maximum possible sum of non ", "java": "import java.io.*;\n\nclass GFG {\n  public static int maxSum(int a[], int n, int k) {\n    if (n <= 0) return 0;\n    int option = maxSum(a, n - 1, k);\n    if (k >= a[n - 1]) option = Math.max(option, a[n - 1] + maxSum(a, n - 2, k - a[n - 1]));\n    return option;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {50, 10, 20, 30, 40};\n    int N = arr.length;\n    int K = 100;\n    System.out.println(maxSum(arr, N, K));\n  }\n}\n", "python": "def maxSum(a, n, k):\n    if n <= 0:\n        return 0\n    option = maxSum(a, n - 1, k)\n    if k >= a[n - 1]:\n        option = max(option, a[n - 1] + maxSum(a, n - 2, k - a[n - 1]))\n    return option\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [50, 10, 20, 30, 40]\n    N = len(arr)\n    K = 100\n    print(maxSum(arr, N, K))\n"}
{"text": "Count possible binary strings of length N without P consecutive 0 s and Q consecutive 1 s ", "java": "class GFG {\n  static boolean checkStr(String str, int P, int Q) {\n    int N = str.length();\n    char prev = str.charAt(0);\n    int cnt = 0;\n    for (int i = 0; i < N; i++) {\n      if (str.charAt(i) == prev) {\n        cnt++;\n      } else {\n        if (prev == '1' && cnt >= Q) {\n          return false;\n        }\n        if (prev == '0' && cnt >= P) {\n          return false;\n        }\n        cnt = 1;\n      }\n      prev = str.charAt(i);\n    }\n    if (prev == '1' && cnt >= Q) {\n      return false;\n    }\n    if (prev == '0' && cnt >= P) {\n      return false;\n    }\n    return true;\n  }\n\n  static int cntBinStr(String str, int N, int P, int Q) {\n    int len = str.length();\n    if (len == N) {\n      if (checkStr(str, P, Q)) return 1;\n      return 0;\n    }\n    int X = cntBinStr(str + '0', N, P, Q);\n    int Y = cntBinStr(str + '1', N, P, Q);\n    return X + Y;\n  }\n\n  public static void main(String[] args) {\n    int N = 5, P = 2, Q = 3;\n    System.out.println(cntBinStr(\" \", N, P, Q));\n  }\n}\n", "python": "def checkStr(str, P, Q):\n    N = len(str)\n    prev = str[0]\n    cnt = 0\n    for i in range(N):\n        if str[i] == prev:\n            cnt += 1\n        else:\n            if prev == \"1\" and cnt >= Q:\n                return False\n            if prev == \"0\" and cnt >= P:\n                return False\n            cnt = 1\n        prev = str[i]\n    if prev == \"1\" and cnt >= Q:\n        return False\n    if prev == \"0\" and cnt >= P:\n        return False\n    return True\n\n\ndef cntBinStr(str, N, P, Q):\n    lenn = len(str)\n    if lenn == N:\n        if checkStr(str, P, Q):\n            return 1\n        return 0\n    X = cntBinStr(str + \"0\", N, P, Q)\n    Y = cntBinStr(str + \"1\", N, P, Q)\n    return X + Y\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    P = 2\n    Q = 3\n    print(cntBinStr(\" \", N, P, Q))\n"}
{"text": "Count possible permutations of given array satisfying the given conditions ", "java": "import java.io.*;\n\nclass GFG {\n  static int binCoff(int N, int R) {\n    int res = 1;\n    if (R > (N - R)) {\n      R = (N - R);\n    }\n    for (int i = 0; i < R; i++) {\n      res *= (N - i);\n      res /= (i + 1);\n    }\n    return res;\n  }\n\n  static int cntPermutation(int N) {\n    int cntPerm;\n    int C_2N_N = binCoff(2 * N, N);\n    cntPerm = C_2N_N / (N + 1);\n    return cntPerm;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4};\n    int N = arr.length;\n    System.out.println(cntPermutation(N / 2));\n  }\n}\n", "python": "def binCoff(N, R):\n    res = 1\n    if R > (N - R):\n        R = N - R\n    for i in range(R):\n        res *= N - i\n        res //= i + 1\n    return res\n\n\ndef cntPermutation(N):\n    C_2N_N = binCoff(2 * N, N)\n    cntPerm = C_2N_N // (N + 1)\n    return cntPerm\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4]\n    N = len(arr)\n    print(cntPermutation(N // 2))\n"}
{"text": "Number of ways to cut a stick of length N into in even length at most K units long pieces ", "java": "import java.util.*;\n\nclass GFG {\n  static int solve(int n, int k, int mod, int dp[]) {\n    if (n < 0) return 0;\n    if (n == 0) return 1;\n    if (dp[n] != -1) return dp[n];\n    int cnt = 0;\n    for (int i = 2; i <= k; i += 2) {\n      cnt = (cnt % mod + solve(n - i, k, mod, dp) % mod) % mod;\n    }\n    dp[n] = cnt;\n    return cnt;\n  }\n\n  public static void main(String[] args) {\n    int mod = (int) (1e9 + 7);\n    int n = 4, k = 2;\n    int[] dp = new int[n + 1];\n    for (int i = 0; i < n + 1; i++) dp[i] = -1;\n    int ans = solve(n, k, mod, dp);\n    System.out.println(ans);\n  }\n}\n", "python": "def solve(n, k, mod, dp):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if dp[n] != -1:\n        return dp[n]\n    cnt = 0\n    for i in range(2, k + 1, 2):\n        cnt = (cnt % mod + solve(n - i, k, mod, dp) % mod) % mod\n    dp[n] = cnt\n    return int(cnt)\n\n\nif __name__ == \" _ _ main _ _ \":\n    mod = 1e9 + 7\n    n = 4\n    k = 2\n    dp = [-1] * (n + 1)\n    ans = solve(n, k, mod, dp)\n    print(ans)\n"}
{"text": "Maximum profit by buying and selling a stock at most twice ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxProfit(int price[], int n) {\n    int buy1, profit1, buy2, profit2;\n    buy1 = buy2 = Integer.MAX_VALUE;\n    profit1 = profit2 = 0;\n    for (int i = 0; i < n; i++) {\n      buy1 = Math.min(buy1, price[i]);\n      profit1 = Math.max(profit1, price[i] - buy1);\n      buy2 = Math.min(buy2, price[i] - profit1);\n      profit2 = Math.max(profit2, price[i] - buy2);\n    }\n    return profit2;\n  }\n\n  public static void main(String[] args) {\n    int price[] = {2, 30, 15, 10, 8, 25, 80};\n    int n = price.length;\n    System.out.print(\" Maximum \u2581 Profit \u2581 = \u2581 \" + maxProfit(price, n));\n  }\n}\n", "python": "import sys\n\n\ndef maxProfit(price, n):\n    buy1, buy2 = sys.maxsize, sys.maxsize\n    profit1, profit2 = 0, 0\n    for i in range(n):\n        buy1 = min(buy1, price[i])\n        profit1 = max(profit1, price[i] - buy1)\n        buy2 = min(buy2, price[i] - profit1)\n        profit2 = max(profit2, price[i] - buy2)\n    return profit2\n\n\nprice = [2, 30, 15, 10, 8, 25, 80]\nn = len(price)\nprint(\" Maximum \u2581 Profit \u2581 = \u2581 \", maxProfit(price, n))\n"}
{"text": "Maximum score of deleting an element from an Array based on given condition ", "java": "import java.util.*;\n\nclass GFG {\n  static int findMaximumScore(int[] a, int n) {\n    @SuppressWarnings(\" unchecked \")\n    HashMap<Integer, Integer> freq = new HashMap();\n    for (int i = 0; i < n; i++) {\n      if (freq.containsKey(a[i])) {\n        freq.put(a[i], freq.get(a[i]) + 1);\n      } else {\n        freq.put(a[i], 1);\n      }\n    }\n    int[] dp = new int[Arrays.stream(a).max().getAsInt() + 1];\n    dp[0] = 0;\n    dp[1] = freq.get(1);\n    for (int i = 2; i < dp.length; i++) dp[i] = Math.max(dp[i - 1], dp[i - 2] + freq.get(i) * i);\n    return dp[dp.length - 1];\n  }\n\n  public static void main(String[] args) {\n    int n;\n    n = 3;\n    int[] a = {1, 2, 3};\n    System.out.print(findMaximumScore(a, n));\n  }\n}\n", "python": "from collections import defaultdict\n\n\ndef findMaximumScore(a, n):\n    freq = defaultdict(int)\n    for i in range(n):\n        freq[a[i]] += 1\n    dp = [0] * (max(a) + 1)\n    dp[0] = 0\n    dp[1] = freq[1]\n    for i in range(2, len(dp)):\n        dp[i] = max(dp[i - 1], dp[i - 2] + freq[i] * i)\n    return dp[-1]\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    a = [1, 2, 3]\n    print(findMaximumScore(a, n))\n"}
{"text": "Maximize the numbers of splits in an Array having sum divisible by 3 ", "java": "import java.util.*;\n\nclass GFG {\n  static int calculate_maximum_splits(int arr[], int N) {\n    int pre[] = {0, -1, -1};\n    int[] dp = new int[N];\n    Arrays.fill(dp, 0);\n    int C = 0;\n    for (int i = 0; i < N; i++) {\n      C = C + arr[i];\n      C = C % 3;\n      if (pre[C] == -1) {\n        if (1 <= i) dp[i] = dp[i - 1];\n      } else {\n        dp[i] = Math.max(dp[i - 1], dp[pre[C]] + 1);\n      }\n      pre[C] = i;\n    }\n    return dp[N - 1];\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 36, 1, 9, 2, 0, 1, 8, 1};\n    int N = arr.length;\n    System.out.println(calculate_maximum_splits(arr, N));\n  }\n}\n", "python": "def calculate_maximum_splits(arr, N):\n    pre = [0, -1, -1]\n    dp = [0 for i in range(N)]\n    C = 0\n    for i in range(N):\n        C = C + arr[i]\n        C = C % 3\n        if pre[C] == -1:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = max(dp[i - 1], dp[pre[C]] + 1)\n        pre[C] = i\n    return dp[N - 1]\n\n\narr = [2, 36, 1, 9, 2, 0, 1, 8, 1]\nN = len(arr)\nprint(calculate_maximum_splits(arr, N))\n"}
{"text": "Minimum count of numbers required from given array to represent S ", "java": "import java.util.*;\n\nclass GFG {\n  static int printAllSubsetsRec(int arr[], int n, ArrayList<Integer> v, int sum) {\n    if (sum == 0) {\n      return (int) v.size();\n    }\n    if (sum < 0) return Integer.MAX_VALUE;\n    if (n == 0) return Integer.MAX_VALUE;\n    int x = printAllSubsetsRec(arr, n - 1, v, sum);\n    v.add(arr[n - 1]);\n    int y = printAllSubsetsRec(arr, n, v, sum - arr[n - 1]);\n    v.remove(v.size() - 1);\n    return Math.min(x, y);\n  }\n\n  static int printAllSubsets(int arr[], int n, int sum) {\n    ArrayList<Integer> v = new ArrayList<>();\n    return printAllSubsetsRec(arr, n, v, sum);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 1, 4, 3, 5, 6};\n    int sum = 6;\n    int n = arr.length;\n    System.out.println(printAllSubsets(arr, n, sum));\n  }\n}\n", "python": "import sys\n\n\ndef printAllSubsetsRec(arr, n, v, Sum):\n    if Sum == 0:\n        return len(v)\n    if Sum < 0:\n        return sys.maxsize\n    if n == 0:\n        return sys.maxsize\n    x = printAllSubsetsRec(arr, n - 1, v, Sum)\n    v.append(arr[n - 1])\n    y = printAllSubsetsRec(arr, n, v, Sum - arr[n - 1])\n    v.pop(len(v) - 1)\n    return min(x, y)\n\n\ndef printAllSubsets(arr, n, Sum):\n    v = []\n    return printAllSubsetsRec(arr, n, v, Sum)\n\n\narr = [2, 1, 4, 3, 5, 6]\nSum = 6\nn = len(arr)\nprint(printAllSubsets(arr, n, Sum))\n"}
{"text": "Minimum count of numbers required from given array to represent S ", "java": "import java.util.*;\n\nclass GFG {\n  static int Count(int S[], int m, int n) {\n    int[][] table = new int[m + 1][n + 1];\n    for (int i = 1; i <= n; i++) {\n      table[0][i] = Integer.MAX_VALUE - 1;\n    }\n    for (int i = 1; i <= m; i++) {\n      for (int j = 1; j <= n; j++) {\n        if (S[i - 1] > j) {\n          table[i][j] = table[i - 1][j];\n        } else {\n          table[i][j] = Math.min(table[i - 1][j], table[i][j - S[i - 1]] + 1);\n        }\n      }\n    }\n    return table[m][n];\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {9, 6, 5, 1};\n    int m = arr.length;\n    System.out.print(Count(arr, m, 11));\n  }\n}\n", "python": "import sys\n\n\ndef printAllSubsetsRec(arr, n, v, Sum):\n    if Sum == 0:\n        return len(v)\n    if Sum < 0:\n        return sys.maxsize\n    if n == 0:\n        return sys.maxsize\n    x = printAllSubsetsRec(arr, n - 1, v, Sum)\n    v.append(arr[n - 1])\n    y = printAllSubsetsRec(arr, n, v, Sum - arr[n - 1])\n    v.pop(len(v) - 1)\n    return min(x, y)\n\n\ndef printAllSubsets(arr, n, Sum):\n    v = []\n    return printAllSubsetsRec(arr, n, v, Sum)\n\n\narr = [2, 1, 4, 3, 5, 6]\nSum = 6\nn = len(arr)\nprint(printAllSubsets(arr, n, Sum))\n"}
{"text": "Count of possible permutations of a number represented as a sum of 2 ' s , \u2581 4' s and 6 's only ", "java": "import java.util.*;\n\nclass GFG {\n  static int count(int n) {\n    if (n == 2) return 1;\n    else if (n == 4) return 2;\n    else if (n == 6) return 4;\n    int table[] = new int[n + 1];\n    int i;\n    for (i = 0; i < n + 1; i++) table[i] = 0;\n    table[0] = 0;\n    table[2] = 1;\n    table[4] = 2;\n    table[6] = 4;\n    for (i = 8; i <= n; i = i + 2) {\n      table[i] = table[i - 2] + table[i - 4] + table[i - 6];\n    }\n    return table[n];\n  }\n\n  public static void main(String args[]) {\n    int n = 8;\n    System.out.print(count(n));\n  }\n}\n", "python": "def count(n):\n    if n == 2:\n        return 1\n    elif n == 4:\n        return 2\n    elif n == 6:\n        return 4\n    table = [0] * (n + 1)\n    for i in range(n + 1):\n        table[i] = 0\n    table[0] = 0\n    table[2] = 1\n    table[4] = 2\n    table[6] = 4\n    for i in range(8, n + 1, 2):\n        table[i] = table[i - 2] + table[i - 4] + table[i - 6]\n    return table[n]\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 8\n    print(count(n))\n"}
{"text": "Count numbers in a range with digit sum divisible by K having first and last digit different ", "java": "import java.util.*;\n\nclass GFG {\n  static int K;\n  static int N;\n  static Vector<Integer> v = new Vector<>();\n  static int[][][][][] dp = new int[20][1000][10][2][2];\n\n  static void init(int x) {\n    for (int i = 0; i < 20; i++)\n      for (int j = 0; j < 1000; j++)\n        for (int k = 0; k < 10; k++)\n          for (int l = 0; l < 2; l++) for (int m = 0; m < 2; m++) dp[i][j][k][l][m] = -1;\n    v.clear();\n    while (x > 0) {\n      v.add(x % 10);\n      x /= 10;\n    }\n    Collections.reverse(v);\n    N = v.size();\n  }\n\n  static int fun(int pos, int sum, int st, int check, int f) {\n    if (pos == N) {\n      return (sum == 0 && check == 1) ? 1 : 0;\n    }\n    if (dp[pos][sum][st][check][f] != -1) return dp[pos][sum][st][check][f];\n    int lmt = 9;\n    if (f == 0) lmt = v.get(pos);\n    int ans = 0;\n    for (int digit = 0; digit <= lmt; digit++) {\n      int nf = f;\n      int new_sum = (sum + digit) % K;\n      int new_check = check;\n      int new_st = st;\n      if (f == 0 && digit < lmt) nf = 1;\n      if (check == 0 && digit != 0) {\n        new_st = digit;\n        new_check = 1;\n      }\n      if (pos == N - 1 && new_st == digit) continue;\n      ans += fun(pos + 1, new_sum, new_st, new_check, nf);\n    }\n    return dp[pos][sum][st][check][f] = ans;\n  }\n\n  static void findCount(int L, int R, int K) {\n    init(R);\n    int r_ans = fun(0, 0, 0, 0, 0);\n    init(L - 1);\n    int l_ans = fun(0, 0, 0, 0, 0);\n    System.out.print(r_ans - l_ans);\n  }\n\n  public static void main(String[] args) {\n    int L = 10;\n    int R = 20;\n    K = 2;\n    findCount(L, R, K);\n  }\n}\n", "python": "K = 0\nN = 0\nv = []\ndp = [\n    [\n        [[[-1 for i in range(2)] for j in range(2)] for k in range(10)]\n        for l in range(1000)\n    ]\n    for m in range(20)\n]\n\n\ndef init(x):\n    global K\n    global N\n    global v\n    v = []\n    while x > 0:\n        v.append(x % 10)\n        x //= 10\n    v = v[::-1]\n    N = len(v)\n\n\ndef fun(pos, sum, st, check, f):\n    global N\n    global v\n    if pos == N:\n        return sum == 0 and check == 1\n    if dp[pos][sum][st][check][f] != -1:\n        return dp[pos][sum][st][check][f]\n    lmt = 9\n    if f == False:\n        lmt = v[pos]\n    ans = 0\n    for digit in range(lmt + 1):\n        nf = f\n        new_sum = (sum + digit) % K\n        new_check = check\n        new_st = st\n        if f == 0 and digit < lmt:\n            nf = 1\n        if check == 0 and digit != 0:\n            new_st = digit\n            new_check = 1\n        if pos == N - 1 and new_st == digit:\n            continue\n        ans += fun(pos + 1, new_sum, new_st, new_check, nf)\n        dp[pos][sum][st][check][f] = ans\n    return ans\n\n\ndef findCount(L, R, K):\n    init(R)\n    r_ans = fun(0, 0, 0, 0, 0)\n    init(L - 1)\n    r_ans = 0\n    l_ans = fun(0, 0, 0, 0, 0)\n    print(l_ans - r_ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    L = 10\n    R = 20\n    K = 2\n    findCount(L, R, K)\n"}
{"text": "Maximum sum subsequence with values differing by at least 2 ", "java": "import java.util.*;\n\nclass GFG {\n  public static int get_max_sum(int arr[], int n) {\n    HashMap<Integer, Integer> freq = new HashMap<Integer, Integer>();\n    for (int i = 0; i < n; i++) {\n      if (freq.containsKey(arr[i])) {\n        int x = freq.get(arr[i]);\n        freq.replace(arr[i], x + 1);\n      } else freq.put(arr[i], 1);\n    }\n    int[] dp = new int[100001];\n    for (int i = 0; i < 100001; i++) dp[i] = 0;\n    dp[0] = 0;\n    if (freq.containsKey(0)) dp[1] = freq.get(0);\n    else dp[1] = 0;\n    for (int i = 2; i <= 100000; i++) {\n      int temp = (freq.containsKey(i)) ? freq.get(i) : 0;\n      dp[i] = Math.max(dp[i - 1], dp[i - 2] + i * temp);\n    }\n    return dp[100000];\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    int arr[] = {2, 2, 3};\n    System.out.println(get_max_sum(arr, N));\n  }\n}\n", "python": "from collections import defaultdict\n\n\ndef get_max_sum(arr, n):\n    freq = defaultdict(lambda: 0)\n    for i in range(n):\n        freq[arr[i]] += 1\n    dp = [0] * 100001\n    dp[0] = 0\n    dp[1] = freq[0]\n    for i in range(2, 100000 + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + i * freq[i])\n    return dp[100000]\n\n\nN = 3\narr = [2, 2, 3]\nprint(get_max_sum(arr, N))\n"}
{"text": "Minimum flips required to keep all 1 s together in a Binary string ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int minFlip(String a) {\n    int n = a.length();\n    int dp[][] = new int[n + 1][2];\n    if (a.charAt(0) == '1') {\n      dp[0][0] = 1;\n    } else dp[0][0] = 0;\n    if (a.charAt(0) == '0') dp[0][1] = 1;\n    else dp[0][1] = 0;\n    for (int i = 1; i < n; i++) {\n      if (a.charAt(i) == '1') {\n        dp[i][0] = dp[i - 1][0] + 1;\n      } else dp[i][0] = dp[i - 1][0];\n      if (a.charAt(i) == '0') {\n        dp[i][1] = Math.min(dp[i - 1][0], dp[i - 1][1]) + 1;\n      } else dp[i][1] = Math.min(dp[i - 1][0], dp[i - 1][1]);\n    }\n    int answer = Integer.MAX_VALUE;\n    for (int i = 0; i < n; i++) {\n      answer = Math.min(answer, dp[i][1] + dp[n - 1][0] - dp[i][0]);\n    }\n    return Math.min(answer, dp[n - 1][0]);\n  }\n\n  public static void main(String[] args) {\n    String s = \"1100111000101\";\n    System.out.println(minFlip(s));\n  }\n}\n", "python": "def minFlip(a):\n    n = len(a)\n    dp = [[0, 0] for i in range(n)]\n    dp[0][0] = int(a[0] == \"1\")\n    dp[0][1] = int(a[0] == \"0\")\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + int(a[i] == \"1\")\n        dp[i][1] = min(dp[i - 1]) + int(a[i] == \"0\")\n    answer = 10 ** 18\n    for i in range(n):\n        answer = min(answer, dp[i][1] + dp[n - 1][0] - dp[i][0])\n    return min(answer, dp[n - 1][0])\n\n\ns = \"1100111000101\"\nprint(minFlip(s))\n"}
{"text": "Maximize product of digit sum of consecutive pairs in a subsequence of length K ", "java": "import java.util.*;\n\nclass GFG {\n  static int MAX = 100;\n  static int dp[][][] = new int[1000][MAX][MAX];\n\n  static int productDigitSum(int x, int y) {\n    int sumx = 0;\n    while (x > 0) {\n      sumx += (x % 10);\n      x /= 10;\n    }\n    int sumy = 0;\n    while (y > 0) {\n      sumy += (y % 10);\n      y /= 10;\n    }\n    return (sumx * sumy);\n  }\n\n  static int solve(int arr[], int i, int len, int prev, int n, int k) {\n    if (len == k) return 0;\n    if (i == n) return Integer.MIN_VALUE;\n    if (dp[i][len][prev] != 0) return dp[i][len][prev];\n    int inc = 0, exc = 0;\n    if ((len & 1) != 0) {\n      inc = (productDigitSum(arr[prev], arr[i]) + solve(arr, i + 1, len + 1, 0, n, k));\n    } else {\n      inc = solve(arr, i + 1, len + 1, i, n, k);\n    }\n    exc = solve(arr, i + 1, len, prev, n, k);\n    return dp[i][len][prev] = Math.max(inc, exc);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {10, 5, 9, 101, 24, 2, 20, 14};\n    int n = arr.length;\n    int k = 6;\n    System.out.print(solve(arr, 0, 0, 0, n, k));\n  }\n}\n", "python": "import sys\n\nMAX = 100\ndp = []\nfor i in range(1000):\n    temp1 = []\n    for j in range(MAX):\n        temp2 = []\n        for k in range(MAX):\n            temp2.append(0)\n        temp1.append(temp2)\n    dp.append(temp1)\n\n\ndef productDigitSum(x, y):\n    sumx = 0\n    while x:\n        sumx += x % 10\n        x = x // 10\n    sumy = 0\n    while y:\n        sumy += y % 10\n        y = y // 10\n    return sumx * sumy\n\n\ndef solve(arr, i, len, prev, n, k):\n    if len == k:\n        return 0\n    if i == n:\n        return -sys.maxsize - 1\n    if dp[i][len][prev]:\n        return dp[i][len][prev]\n    if len & 1:\n        inc = productDigitSum(arr[prev], arr[i]) + solve(arr, i + 1, len + 1, i, n, k)\n    else:\n        inc = solve(arr, i + 1, len + 1, i, n, k)\n    exc = solve(arr, i + 1, len, prev, n, k)\n    dp[i][len][prev] = max(inc, exc)\n    return dp[i][len][prev]\n\n\narr = [10, 5, 9, 101, 24, 2, 20, 14]\nn = len(arr)\nk = 6\nprint(solve(arr, 0, 0, 0, n, k))\n"}
{"text": "Maximum score possible after performing given operations on an Array ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxScore(int l, int r, int prefix_sum[], int num) {\n    if (l > r) return 0;\n    int current_sum = prefix_sum[r] - (l - 1 >= 0 ? prefix_sum[l - 1] : 0);\n    if (num % 2 == 0) current_sum *= -1;\n    return current_sum\n        + Math.max(\n            maxScore(l + 1, r, prefix_sum, num + 1), maxScore(l, r - 1, prefix_sum, num + 1));\n  }\n\n  static int findMaxScore(int a[], int n) {\n    int prefix_sum[] = new int[n];\n    prefix_sum[0] = a[0];\n    for (int i = 1; i < n; i++) {\n      prefix_sum[i] = prefix_sum[i - 1] + a[i];\n    }\n    return maxScore(0, n - 1, prefix_sum, 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    int A[] = {1, 2, 3, 4, 2, 6};\n    System.out.print(findMaxScore(A, n));\n  }\n}\n", "python": "dp = [[[-1 for x in range(100)] for y in range(100)] for z in range(100)]\n\n\ndef MaximumScoreDP(l, r, prefix_sum, num):\n    if l > r:\n        return 0\n    if dp[l][r][num] != -1:\n        return dp[l][r][num]\n    current_sum = prefix_sum[r]\n    if l - 1 >= 0:\n        current_sum -= prefix_sum[l - 1]\n    if num % 2 == 0:\n        current_sum *= -1\n    dp[l][r][num] = current_sum + max(\n        MaximumScoreDP(l + 1, r, prefix_sum, num + 1),\n        MaximumScoreDP(l, r - 1, prefix_sum, num + 1),\n    )\n    return dp[l][r][num]\n\n\ndef findMaxScore(a, n):\n    prefix_sum = [0] * n\n    prefix_sum[0] = a[0]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i]\n    global dp\n    return MaximumScoreDP(0, n - 1, prefix_sum, 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 6\n    A = [1, 2, 3, 4, 2, 6]\n    print(findMaxScore(A, n))\n"}
{"text": "Find minimum number of steps to reach the end of String ", "java": "class GFG {\n  static final int INT_MAX = Integer.MAX_VALUE;\n\n  static int minSteps(String str, int n, int k) {\n    if (str.charAt(n - 1) == '0') return -1;\n    if (n == 1) return 0;\n    if (n < 4) return 1;\n    int dp[] = new int[n];\n    dp[n - 1] = 0;\n    dp[n - 2] = 1;\n    dp[n - 3] = 1;\n    for (int i = n - 4; i >= 0; i--) {\n      if (str.charAt(i) == '0') continue;\n      int steps = INT_MAX;\n      if (i + k < n && str.charAt(i + k) == '1') steps = Math.min(steps, dp[i + k]);\n      if (str.charAt(i + 1) == '1') steps = Math.min(steps, dp[i + 1]);\n      if (str.charAt(i + 2) == '1') steps = Math.min(steps, dp[i + 2]);\n      dp[i] = (steps == INT_MAX) ? steps : 1 + steps;\n    }\n    if (dp[0] == INT_MAX) return -1;\n    return dp[0];\n  }\n\n  public static void main(String[] args) {\n    String str = \"101000011\";\n    int n = str.length();\n    int k = 5;\n    System.out.println(minSteps(str, n, k));\n  }\n}\n", "python": "import sys\n\nINT_MAX = sys.maxsize\n\n\ndef minSteps(string, n, k):\n    if string[n - 1] == \"0\":\n        return -1\n    if n == 1:\n        return 0\n    if n < 4:\n        return 1\n    dp = [0] * n\n    dp[n - 1] = 0\n    dp[n - 2] = 1\n    dp[n - 3] = 1\n    for i in range(n - 4, -1, -1):\n        if string[i] == \"0\":\n            continue\n        steps = INT_MAX\n        if i + k < n and string[i + k] == \"1\":\n            steps = min(steps, dp[i + k])\n        if string[i + 1] == \"1\":\n            steps = min(steps, dp[i + 1])\n        if string[i + 2] == \"1\":\n            steps = min(steps, dp[i + 2])\n        dp[i] = steps if (steps == INT_MAX) else (1 + steps)\n    if dp[0] == INT_MAX:\n        return -1\n    return dp[0]\n\n\nif __name__ == \" _ _ main _ _ \":\n    string = \"101000011\"\n    n = len(string)\n    k = 5\n    print(minSteps(string, n, k))\n"}
{"text": "Number of sub ", "java": "class GFG {\n  static final int N = 100;\n  static int dp[][] = new int[N][3];\n  static int v[][] = new int[N][3];\n\n  static int findCnt(String s, int i, int r) {\n    if (i == s.length()) {\n      if (r == 0) return 1;\n      else return 0;\n    }\n    if (v[i][r] == 1) return dp[i][r];\n    v[i][r] = 1;\n    dp[i][r] = findCnt(s, i + 1, (r * 2 + (s.charAt(i) - '0')) % 3) + findCnt(s, i + 1, r);\n    return dp[i][r];\n  }\n\n  public static void main(String[] args) {\n    String s = \"11\";\n    System.out.print(findCnt(s, 0, 0) - 1);\n  }\n}\n", "python": "import numpy as np\n\nN = 10000\n\n\ndef count_required_sequence(n, arr):\n    total_required_subsequence = 0\n    total_n_required_subsequence = 0\n    dp = np.zeros((N, 2))\n    for i in range(n):\n        turn_required = 0\n        for j in range(-1, 2, 1):\n            turn_required += dp[arr[i] + j][0]\n        required_end_i = total_required_subsequence + turn_required\n        n_required_end_i = 1 + total_n_required_subsequence - turn_required\n        total_required_subsequence += required_end_i\n        total_n_required_subsequence += n_required_end_i\n        dp[arr[i]][1] += required_end_i\n        dp[arr[i]][0] += n_required_end_i\n    return total_required_subsequence\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 6, 2, 1, 9]\n    n = len(arr)\n    print(count_required_sequence(n, arr))\n"}
{"text": "Minimum cost to merge all elements of List ", "java": "class GFG {\n  static final int N = 401;\n  static int[][] dp = new int[N][N];\n  static boolean[][] v = new boolean[N][N];\n\n  static int minMergeCost(int i, int j, int[] arr) {\n    if (i == j) return 0;\n    if (v[i][j]) return dp[i][j];\n    v[i][j] = true;\n    int x = dp[i][j];\n    x = Integer.MAX_VALUE;\n    int tot = 0;\n    for (int k = i; k <= j; k++) tot += arr[k];\n    for (int k = i + 1; k <= j; k++) {\n      x = Math.min(x, tot + minMergeCost(i, k - 1, arr) + minMergeCost(k, j, arr));\n    }\n    return x;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 3, 7};\n    int n = arr.length;\n    System.out.print(minMergeCost(0, n - 1, arr));\n  }\n}\n", "python": "import sys\n\nN = 401\ndp = [[0 for i in range(N)] for j in range(N)]\nv = [[False for i in range(N)] for j in range(N)]\n\n\ndef minMergeCost(i, j, arr):\n    if i == j:\n        return 0\n    if v[i][j]:\n        return dp[i][j]\n    v[i][j] = True\n    x = dp[i][j]\n    x = sys.maxsize\n    tot = 0\n    for k in range(i, j + 1):\n        tot += arr[k]\n    for k in range(i + 1, j + 1):\n        x = min(x, tot + minMergeCost(i, k - 1, arr) + minMergeCost(k, j, arr))\n    return x\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 3, 7]\n    n = len(arr)\n    print(minMergeCost(0, n - 1, arr))\n"}
{"text": "Expected number of moves to reach the end of a board ", "java": "class GFG {\n  static int maxSize = 50;\n  static double dp[] = new double[maxSize];\n  static int v[] = new int[maxSize];\n\n  static double expectedSteps(int x) {\n    if (x == 0) return 0;\n    if (x <= 5) return 6;\n    if (v[x] == 1) return dp[x];\n    v[x] = 1;\n    dp[x] =\n        1\n            + (expectedSteps(x - 1)\n                    + expectedSteps(x - 2)\n                    + expectedSteps(x - 3)\n                    + expectedSteps(x - 4)\n                    + expectedSteps(x - 5)\n                    + expectedSteps(x - 6))\n                / 6;\n    return dp[x];\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(expectedSteps(n - 1));\n  }\n}\n", "python": "maxSize = 50\ndp = [0] * maxSize\nv = [0] * maxSize\n\n\ndef expectedSteps(x):\n    if x == 0:\n        return 0\n    if x <= 5:\n        return 6\n    if v[x]:\n        return dp[x]\n    v[x] = 1\n    dp[x] = (\n        1\n        + (\n            expectedSteps(x - 1)\n            + expectedSteps(x - 2)\n            + expectedSteps(x - 3)\n            + expectedSteps(x - 4)\n            + expectedSteps(x - 5)\n            + expectedSteps(x - 6)\n        )\n        / 6\n    )\n    return dp[x]\n\n\nn = 10\nprint(round(expectedSteps(n - 1), 5))\n"}
{"text": "Number of subsequences in a given binary string divisible by 2 ", "java": "class GFG {\n  static int countSubSeq(String str, int len) {\n    int ans = 0;\n    int mul = 1;\n    for (int i = 0; i < len; i++) {\n      if (str.charAt(i) == '0') ans += mul;\n      mul *= 2;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    String str = \"10010\";\n    int len = str.length();\n    System.out.print(countSubSeq(str, len));\n  }\n}\n", "python": "def countSubSeq(strr, lenn):\n    ans = 0\n    mul = 1\n    for i in range(lenn):\n        if strr[i] == \"0\":\n            ans += mul\n        mul *= 2\n    return ans\n\n\nstrr = \"10010\"\nlenn = len(strr)\nprint(countSubSeq(strr, lenn))\n"}
{"text": "Maximum possible GCD after replacing at most one element in the given array ", "java": "class GFG {\n  static int MaxGCD(int a[], int n) {\n    int[] Prefix = new int[n + 2];\n    int[] Suffix = new int[n + 2];\n    Prefix[1] = a[0];\n    for (int i = 2; i <= n; i += 1) {\n      Prefix[i] = __gcd(Prefix[i - 1], a[i - 1]);\n    }\n    Suffix[n] = a[n - 1];\n    for (int i = n - 1; i >= 1; i -= 1) {\n      Suffix[i] = __gcd(Suffix[i + 1], a[i - 1]);\n    }\n    int ans = Math.max(Suffix[2], Prefix[n - 1]);\n    for (int i = 2; i < n; i += 1) {\n      ans = Math.max(ans, __gcd(Prefix[i - 1], Suffix[i + 1]));\n    }\n    return ans;\n  }\n\n  static int __gcd(int a, int b) {\n    return b == 0 ? a : __gcd(b, a % b);\n  }\n\n  public static void main(String[] args) {\n    int a[] = {6, 7, 8};\n    int n = a.length;\n    System.out.println(MaxGCD(a, n));\n  }\n}\n", "python": "from math import gcd as __gcd\n\n\ndef MaxGCD(a, n):\n    Prefix = [0] * (n + 2)\n    Suffix = [0] * (n + 2)\n    Prefix[1] = a[0]\n    for i in range(2, n + 1):\n        Prefix[i] = __gcd(Prefix[i - 1], a[i - 1])\n    Suffix[n] = a[n - 1]\n    for i in range(n - 1, 0, -1):\n        Suffix[i] = __gcd(Suffix[i + 1], a[i - 1])\n    ans = max(Suffix[2], Prefix[n - 1])\n    for i in range(2, n):\n        ans = max(ans, __gcd(Prefix[i - 1], Suffix[i + 1]))\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [6, 7, 8]\n    n = len(a)\n    print(MaxGCD(a, n))\n"}
{"text": "Sum of products of all possible K size subsets of the given array ", "java": "import java.util.*;\n\nclass GFG {\n  static int sumOfProduct(int arr[], int n, int k) {\n    int dp[][] = new int[n + 1][n + 1];\n    for (int i = 0; i <= n; i++) for (int j = 0; j <= n; j++) dp[i][j] = 0;\n    int cur_sum = 0;\n    for (int i = 1; i <= n; i++) {\n      dp[1][i] = arr[i - 1];\n      cur_sum += arr[i - 1];\n    }\n    for (int i = 2; i <= k; i++) {\n      int temp_sum = 0;\n      for (int j = 1; j <= n; j++) {\n        cur_sum -= dp[i - 1][j];\n        dp[i][j] = arr[j - 1] * cur_sum;\n        temp_sum += dp[i][j];\n      }\n      cur_sum = temp_sum;\n    }\n    return cur_sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4};\n    int n = arr.length;\n    int k = 2;\n    System.out.print(sumOfProduct(arr, n, k));\n  }\n}\n", "python": "def sumOfProduct(arr, n, k):\n    dp = [[0 for x in range(n + 1)] for y in range(n + 1)]\n    cur_sum = 0\n    for i in range(1, n + 1):\n        dp[1][i] = arr[i - 1]\n        cur_sum += arr[i - 1]\n    for i in range(2, k + 1):\n        temp_sum = 0\n        for j in range(1, n + 1):\n            cur_sum -= dp[i - 1][j]\n            dp[i][j] = arr[j - 1] * cur_sum\n            temp_sum += dp[i][j]\n        cur_sum = temp_sum\n    return cur_sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4]\n    n = len(arr)\n    k = 2\n    print(sumOfProduct(arr, n, k))\n"}
{"text": "Number of subsets with a given AND value ", "java": "class GFG {\n  static int maxN = 20;\n  static int maxM = 64;\n  static int[][] dp1 = new int[maxN][maxM];\n  static boolean[][] v1 = new boolean[maxN][maxM];\n\n  static int findCnt(int[] arr, int i, int curr, int n, int m) {\n    if (i == n) {\n      return (curr == m ? 1 : 0);\n    }\n    if (v1[i][curr]) return dp1[i][curr];\n    v1[i][curr] = true;\n    dp1[i][curr] = findCnt(arr, i + 1, curr, n, m) + findCnt(arr, i + 1, (curr & arr[i]), n, m);\n    return dp1[i][curr];\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {0, 0, 0};\n    int n = arr.length;\n    int m = 0;\n    System.out.println(findCnt(arr, 0, ((1 << 6) - 1), n, m));\n  }\n}\n", "python": "import numpy as np\n\nmaxN = 20\nmaxM = 64\ndp1 = np.zeros((maxN, maxM))\nv1 = np.zeros((maxN, maxM))\n\n\ndef findCnt(arr, i, curr, n, m):\n    if i == n:\n        return curr == m\n    if v1[i][curr]:\n        return dp1[i][curr]\n    v1[i][curr] = 1\n    dp1[i][curr] = findCnt(arr, i + 1, curr, n, m) + findCnt(\n        arr, i + 1, (curr & arr[i]), n, m\n    )\n    return dp1[i][curr]\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [0, 0, 0]\n    n = len(arr)\n    m = 0\n    print(findCnt(arr, 0, ((1 << 6) - 1), n, m))\n"}
{"text": "Count of subsets not containing adjacent elements ", "java": "import java.util.*;\n\nclass GFG {\n  static int cntSubsets(int[] arr, int n) {\n    int max = (int) Math.pow(2, n);\n    int result = 0;\n    for (int i = 0; i < max; i++) {\n      int counter = i;\n      if ((counter & (counter >> 1)) > 0) continue;\n      result++;\n    }\n    return result;\n  }\n\n  public static void main(String[] arg) {\n    int arr[] = {3, 5, 7};\n    int n = arr.length;\n    System.out.println(cntSubsets(arr, n));\n  }\n}\n", "python": "def cntSubsets(arr, n):\n    max = pow(2, n)\n    result = 0\n    for i in range(max):\n        counter = i\n        if counter & (counter >> 1):\n            continue\n        result += 1\n    return result\n\n\narr = [3, 5, 7]\nn = len(arr)\nprint(cntSubsets(arr, n))\n"}
{"text": "Count of subsets not containing adjacent elements ", "java": "import java.util.*;\n\nclass GFG {\n  static int cntSubsets(int[] arr, int n) {\n    int[] a = new int[n];\n    int[] b = new int[n];\n    a[0] = b[0] = 1;\n    for (int i = 1; i < n; i++) {\n      a[i] = a[i - 1] + b[i - 1];\n      b[i] = a[i - 1];\n    }\n    int result = a[n - 1] + b[n - 1];\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 5, 7};\n    int n = arr.length;\n    System.out.println(cntSubsets(arr, n));\n  }\n}\n", "python": "def cntSubsets(arr, n):\n    max = pow(2, n)\n    result = 0\n    for i in range(max):\n        counter = i\n        if counter & (counter >> 1):\n            continue\n        result += 1\n    return result\n\n\narr = [3, 5, 7]\nn = len(arr)\nprint(cntSubsets(arr, n))\n"}
{"text": "Maximum sum in an array such that every element has exactly one adjacent element to it ", "java": "import java.io.*;\n\nclass GFG {\n  static int arrSize = 51;\n  static int dp[] = new int[arrSize];\n  static boolean v[] = new boolean[arrSize];\n\n  static int sumMax(int i, int arr[], int n) {\n    if (i >= n - 1) return 0;\n    if (v[i]) return dp[i];\n    v[i] = true;\n    dp[i] = Math.max(arr[i] + arr[i + 1] + sumMax(i + 3, arr, n), sumMax(i + 1, arr, n));\n    return dp[i];\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 1, 1, 1};\n    int n = arr.length;\n    System.out.println(sumMax(0, arr, n));\n  }\n}\n", "python": "arrSize = 51\ndp = [0 for i in range(arrSize)]\nv = [False for i in range(arrSize)]\n\n\ndef sumMax(i, arr, n):\n    if i >= n - 1:\n        return 0\n    if v[i]:\n        return dp[i]\n    v[i] = True\n    dp[i] = max(arr[i] + arr[i + 1] + sumMax(i + 3, arr, n), sumMax(i + 1, arr, n))\n    return dp[i]\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 1, 1, 1]\n    n = len(arr)\n    print(sumMax(0, arr, n))\n"}
{"text": "Maximum sum such that no two elements are adjacent ", "java": "class GFG {\n  static int maxLen = 10;\n  static int dp[] = new int[maxLen];\n  static boolean v[] = new boolean[maxLen];\n\n  static int maxSum(int arr[], int i, int n) {\n    if (i >= n) return 0;\n    if (v[i]) return dp[i];\n    v[i] = true;\n    dp[i] = Math.max(maxSum(arr, i + 1, n), arr[i] + maxSum(arr, i + 2, n));\n    return dp[i];\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {12, 9, 7, 33};\n    int n = arr.length;\n    System.out.println(maxSum(arr, 0, n));\n  }\n}\n", "python": "maxLen = 10\ndp = [0 for i in range(maxLen)]\nv = [0 for i in range(maxLen)]\n\n\ndef maxSum(arr, i, n):\n    if i >= n:\n        return 0\n    if v[i]:\n        return dp[i]\n    v[i] = 1\n    dp[i] = max(maxSum(arr, i + 1, n), arr[i] + maxSum(arr, i + 2, n))\n    return dp[i]\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [12, 9, 7, 33]\n    n = len(arr)\n    print(maxSum(arr, 0, n))\n"}
{"text": "Maximize the subarray sum after multiplying all elements of any subarray with X ", "java": "class GFG {\n  static int N = 5;\n\n  static int func(int idx, int cur, int a[], int dp[][], int n, int x) {\n    if (idx == n) {\n      return 0;\n    }\n    if (dp[idx][cur] != -1) {\n      return dp[idx][cur];\n    }\n    int ans = 0;\n    if (cur == 0) {\n      ans = Math.max(ans, a[idx] + func(idx + 1, 0, a, dp, n, x));\n      ans = Math.max(ans, x * a[idx] + func(idx + 1, 1, a, dp, n, x));\n    } else if (cur == 1) {\n      ans = Math.max(ans, x * a[idx] + func(idx + 1, 1, a, dp, n, x));\n      ans = Math.max(ans, a[idx] + func(idx + 1, 2, a, dp, n, x));\n    }\n    {\n      ans = Math.max(ans, a[idx] + func(idx + 1, 2, a, dp, n, x));\n    }\n    return dp[idx][cur] = ans;\n  }\n\n  static int getMaximumSum(int a[], int n, int x) {\n    int dp[][] = new int[n][3];\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < 3; j++) {\n        dp[i][j] = -1;\n      }\n    }\n    int maxi = 0;\n    for (int i = 0; i < n; i++) {\n      maxi = Math.max(maxi, func(i, 0, a, dp, n, x));\n    }\n    return maxi;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {-3, 8, -2, 1, -6};\n    int n = a.length;\n    int x = -1;\n    System.out.println(getMaximumSum(a, n, x));\n  }\n}\n", "python": "N = 5\n\n\ndef func(idx, cur, a, dp, n, x):\n    if idx == n:\n        return 0\n    if dp[idx][cur] != -1:\n        return dp[idx][cur]\n    ans = 0\n    if cur == 0:\n        ans = max(ans, a[idx] + func(idx + 1, 0, a, dp, n, x))\n        ans = max(ans, x * a[idx] + func(idx + 1, 1, a, dp, n, x))\n    elif cur == 1:\n        ans = max(ans, x * a[idx] + func(idx + 1, 1, a, dp, n, x))\n        ans = max(ans, a[idx] + func(idx + 1, 2, a, dp, n, x))\n    else:\n        ans = max(ans, a[idx] + func(idx + 1, 2, a, dp, n, x))\n    dp[idx][cur] = ans\n    return dp[idx][cur]\n\n\ndef getMaximumSum(a, n, x):\n    dp = [[-1 for i in range(3)] for j in range(n)]\n    maxi = 0\n    for i in range(0, n):\n        maxi = max(maxi, func(i, 0, a, dp, n, x))\n    return maxi\n\n\na = [-3, 8, -2, 1, -6]\nn = len(a)\nx = -1\nprint(getMaximumSum(a, n, x))\n"}
{"text": "Find the sum of the diagonal elements of the given N X N spiral matrix ", "java": "class GFG {\n  static int findSum(int n) {\n    int[] dp = new int[n + 1];\n    dp[1] = 1;\n    dp[0] = 0;\n    for (int i = 2; i <= n; i++) {\n      dp[i] = (4 * (i * i)) - 6 * (i - 1) + dp[i - 2];\n    }\n    return dp[n];\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(findSum(n));\n  }\n}\n", "python": "def findSum(n):\n    dp = [0 for i in range(n + 1)]\n    dp[1] = 1\n    dp[0] = 0\n    for i in range(2, n + 1, 1):\n        dp[i] = (4 * (i * i)) - 6 * (i - 1) + dp[i - 2]\n    return dp[n]\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(findSum(n))\n"}
{"text": "Number of ways of scoring R runs in B balls with at most W wickets ", "java": "class GFG {\n  static int mod = 1000000007;\n  static int RUNMAX = 300;\n  static int BALLMAX = 50;\n  static int WICKETMAX = 10;\n\n  static int CountWays(int r, int b, int l, int R, int B, int W, int[][][] dp) {\n    if (l > W) return 0;\n    if (r > R) return 0;\n    if (b == B && r == R) return 1;\n    if (b == B) return 0;\n    if (dp[r][b][l] != -1) return dp[r][b][l];\n    int ans = 0;\n    ans += CountWays(r, b + 1, l, R, B, W, dp);\n    ans = ans % mod;\n    ans += CountWays(r + 1, b + 1, l, R, B, W, dp);\n    ans = ans % mod;\n    ans += CountWays(r + 2, b + 1, l, R, B, W, dp);\n    ans = ans % mod;\n    ans += CountWays(r + 3, b + 1, l, R, B, W, dp);\n    ans = ans % mod;\n    ans += CountWays(r + 4, b + 1, l, R, B, W, dp);\n    ans = ans % mod;\n    ans += CountWays(r + 6, b + 1, l, R, B, W, dp);\n    ans = ans % mod;\n    ans += CountWays(r, b + 1, l + 1, R, B, W, dp);\n    ans = ans % mod;\n    return dp[r][b][l] = ans;\n  }\n\n  public static void main(String[] args) {\n    int R = 40, B = 10, W = 4;\n    int[][][] dp = new int[RUNMAX][BALLMAX][WICKETMAX];\n    for (int i = 0; i < RUNMAX; i++)\n      for (int j = 0; j < BALLMAX; j++) for (int k = 0; k < WICKETMAX; k++) dp[i][j][k] = -1;\n    System.out.println(CountWays(0, 0, 0, R, B, W, dp));\n  }\n}\n", "python": "mod = 1000000007\nRUNMAX = 300\nBALLMAX = 50\nWICKETMAX = 10\n\n\ndef CountWays(r, b, l, R, B, W, dp):\n    if l > W:\n        return 0\n    if r > R:\n        return 0\n    if b == B and r == R:\n        return 1\n    if b == B:\n        return 0\n    if dp[r][b][l] != -1:\n        return dp[r][b][l]\n    ans = 0\n    ans += CountWays(r, b + 1, l, R, B, W, dp)\n    ans = ans % mod\n    ans += CountWays(r + 1, b + 1, l, R, B, W, dp)\n    ans = ans % mod\n    ans += CountWays(r + 2, b + 1, l, R, B, W, dp)\n    ans = ans % mod\n    ans += CountWays(r + 3, b + 1, l, R, B, W, dp)\n    ans = ans % mod\n    ans += CountWays(r + 4, b + 1, l, R, B, W, dp)\n    ans = ans % mod\n    ans += CountWays(r + 6, b + 1, l, R, B, W, dp)\n    ans = ans % mod\n    ans += CountWays(r, b + 1, l + 1, R, B, W, dp)\n    ans = ans % mod\n    dp[r][b][l] = ans\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    R = 40\n    B = 10\n    W = 40\n    dp = [\n        [[-1 for k in range(WICKETMAX)] for j in range(BALLMAX)] for i in range(RUNMAX)\n    ]\n    print(CountWays(0, 0, 0, R, B, W, dp))\n"}
{"text": "Count the number of ways to traverse a Matrix ", "java": "import java.io.*;\n\nclass GFG {\n  static int factorial(int n) {\n    int res = 1, i;\n    for (i = 2; i <= n; i++) res *= i;\n    return res;\n  }\n\n  static int countWays(int m, int n) {\n    m = m - 1;\n    n = n - 1;\n    return factorial(m + n) / (factorial(m) * factorial(n));\n  }\n\n  public static void main(String[] args) {\n    int m = 5;\n    int n = 5;\n    int result = countWays(m, n);\n    System.out.println(result);\n  }\n}\n", "python": "def countPaths(m, n):\n    if m == 1 or n == 1:\n        return 1\n    return countPaths(m - 1, n) + countPaths(m, n - 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    m = 5\n    print(countPaths(n, m))\n"}
{"text": "Minimum cost to reach the top of the floor by climbing stairs ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int minimumCost(int cost[], int n) {\n    int dp[] = new int[n];\n    if (n == 1) return cost[0];\n    dp[0] = cost[0];\n    dp[1] = cost[1];\n    for (int i = 2; i < n; i++) {\n      dp[i] = Math.min(dp[i - 1], dp[i - 2]) + cost[i];\n    }\n    return Math.min(dp[n - 2], dp[n - 1]);\n  }\n\n  public static void main(String args[]) {\n    int a[] = {16, 19, 10, 12, 18};\n    int n = a.length;\n    System.out.print(minimumCost(a, n));\n  }\n}\n", "python": "def minimumCost(cost, n):\n    dp = [None] * n\n    if n == 1:\n        return cost[0]\n    dp[0] = cost[0]\n    dp[1] = cost[1]\n    for i in range(2, n):\n        dp[i] = min(dp[i - 1], dp[i - 2]) + cost[i]\n    return min(dp[n - 2], dp[n - 1])\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [16, 19, 10, 12, 18]\n    n = len(a)\n    print(minimumCost(a, n))\n"}
{"text": "Minimum cost to reach the top of the floor by climbing stairs ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int minimumCost(int cost[], int n) {\n    int dp1 = 0, dp2 = 0;\n    for (int i = 0; i < n; i++) {\n      int dp0 = cost[i] + Math.min(dp1, dp2);\n      dp2 = dp1;\n      dp1 = dp0;\n    }\n    return Math.min(dp1, dp2);\n  }\n\n  public static void main(String args[]) {\n    int a[] = {2, 5, 3, 1, 7, 3, 4};\n    int n = a.length;\n    System.out.print(minimumCost(a, n));\n  }\n}\n", "python": "def minimumCost(cost, n):\n    dp = [None] * n\n    if n == 1:\n        return cost[0]\n    dp[0] = cost[0]\n    dp[1] = cost[1]\n    for i in range(2, n):\n        dp[i] = min(dp[i - 1], dp[i - 2]) + cost[i]\n    return min(dp[n - 2], dp[n - 1])\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [16, 19, 10, 12, 18]\n    n = len(a)\n    print(minimumCost(a, n))\n"}
{"text": "Number of different cyclic paths of length N in a tetrahedron ", "java": "import java.io.*;\n\nclass GFG {\n  static int countPaths(int n) {\n    int zB = 1;\n    int zADC = 0;\n    for (int i = 1; i <= n; i++) {\n      int nzB = zADC * 3;\n      int nzADC = (zADC * 2 + zB);\n      zB = nzB;\n      zADC = nzADC;\n    }\n    return zB;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(countPaths(n));\n  }\n}\n", "python": "def countPaths(n):\n    zB = 1\n    zADC = 0\n    for i in range(1, n + 1):\n        nzB = zADC * 3\n        nzADC = zADC * 2 + zB\n        zB = nzB\n        zADC = nzADC\n    return zB\n\n\nn = 3\nprint(countPaths(n))\n"}
{"text": "Sum of product of r and rth Binomial Coefficient ( r * nCr ) ", "java": "class GFG {\n  static int MAX = 100;\n\n  static void binomialCoeff(int n, int C[]) {\n    for (int i = 1; i <= n; i++) {\n      for (int j = Math.min(i, n); j > 0; j--) C[j] = C[j] + C[j - 1];\n    }\n  }\n\n  static int summation(int n) {\n    int C[] = new int[MAX];\n    for (int i = 0; i < MAX; i++) C[i] = 0;\n    binomialCoeff(n, C);\n    int sum = 0;\n    for (int i = 0; i <= n; i++) sum += (i * C[i]);\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int n = 2;\n    System.out.println(summation(n));\n  }\n}\n", "python": "def summation(n):\n    return n << (n - 1)\n\n\nn = 2\nprint(summation(n))\n"}
{"text": "Maximum average sum partition of an array ", "java": "import java.util.*;\n\nclass GFG {\n  static double largestSumOfAverages(int[] A, int K) {\n    int n = A.length;\n    double[] pre_sum = new double[n + 1];\n    pre_sum[0] = 0;\n    for (int i = 0; i < n; i++) pre_sum[i + 1] = pre_sum[i] + A[i];\n    double[] dp = new double[n];\n    double sum = 0;\n    for (int i = 0; i < n; i++) dp[i] = (pre_sum[n] - pre_sum[i]) / (n - i);\n    for (int k = 0; k < K - 1; k++)\n      for (int i = 0; i < n; i++)\n        for (int j = i + 1; j < n; j++)\n          dp[i] = Math.max(dp[i], (pre_sum[j] - pre_sum[i]) / (j - i) + dp[j]);\n    return dp[0];\n  }\n\n  public static void main(String[] args) {\n    int[] A = {9, 1, 2, 3, 9};\n    System.out.println(largestSumOfAverages(A, K));\n  }\n}\n", "python": "MAX = 1000\nmemo = [[0.0 for i in range(MAX)] for i in range(MAX)]\n\n\ndef score(n, A, k):\n    if memo[n][k] > 0:\n        return memo[n][k]\n    sum = 0\n    i = n - 1\n    while i > 0:\n        sum += A[i]\n        memo[n][k] = max(memo[n][k], score(i, A, k - 1) + int(sum / (n - i)))\n        i -= 1\n    return memo[n][k]\n\n\ndef largestSumOfAverages(A, K):\n    n = len(A)\n    sum = 0\n    for i in range(n):\n        sum += A[i]\n        memo[i + 1][1] = int(sum / (i + 1))\n    return score(n, A, K)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [9, 1, 2, 3, 9]\n    K = 3\n    print(largestSumOfAverages(A, K))\n"}
{"text": "Probability of reaching a point with 2 or 3 steps at a time ", "java": "import java.io.*;\n\nclass GFG {\n  static float find_prob(int N, float P) {\n    double dp[] = new double[N + 1];\n    dp[0] = 1;\n    dp[1] = 0;\n    dp[2] = P;\n    dp[3] = 1 - P;\n    for (int i = 4; i <= N; ++i) dp[i] = (P) * dp[i - 2] + (1 - P) * dp[i - 3];\n    return ((float) (dp[N]));\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    float p = 0.2f;\n    System.out.printf(\" % .2f \", find_prob(n, p));\n  }\n}\n", "python": "def find_prob(N, P):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 0\n    dp[2] = P\n    dp[3] = 1 - P\n    for i in range(4, N + 1):\n        dp[i] = (P) * dp[i - 2] + (1 - P) * dp[i - 3]\n    return dp[N]\n\n\nn = 5\np = 0.2\nprint(round(find_prob(n, p), 2))\n"}
{"text": "Delannoy Number ", "java": "import java.io.*;\n\nclass GFG {\n  static int dealnnoy(int n, int m) {\n    int dp[][] = new int[m + 1][n + 1];\n    for (int i = 0; i <= m; i++) dp[i][0] = 1;\n    for (int i = 0; i < m; i++) dp[0][i] = 1;\n    for (int i = 1; i <= m; i++)\n      for (int j = 1; j <= n; j++) dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i][j - 1];\n    return dp[m][n];\n  }\n\n  public static void main(String args[]) {\n    int n = 3, m = 4;\n    System.out.println(dealnnoy(n, m));\n  }\n}\n", "python": "def dealnnoy(n, m):\n    if m == 0 or n == 0:\n        return 1\n    return dealnnoy(m - 1, n) + dealnnoy(m - 1, n - 1) + dealnnoy(m, n - 1)\n\n\nn = 3\nm = 4\nprint(dealnnoy(n, m))\n"}
{"text": "Maximum value with the choice of either dividing or considering as it is ", "java": "import java.io.*;\n\nclass GFG {\n  static int maxDP(int n) {\n    int res[] = new int[n + 1];\n    res[0] = 0;\n    res[1] = 1;\n    for (int i = 2; i <= n; i++)\n      res[i] = Math.max(i, (res[i / 2] + res[i / 3] + res[i / 4] + res[i / 5]));\n    return res[n];\n  }\n\n  public static void main(String[] args) {\n    int n = 60;\n    System.out.println(\" MaxSum \u2581 = \u2581 \" + maxDP(n));\n  }\n}\n", "python": "def maxDP(n):\n    res = list()\n    res.append(0)\n    res.append(1)\n    i = 2\n    while i < n + 1:\n        res.append(\n            max(\n                i,\n                (res[int(i / 2)] + res[int(i / 3)] + res[int(i / 4)] + res[int(i / 5)]),\n            )\n        )\n        i = i + 1\n    return res[n]\n\n\nn = 60\nprint(\" MaxSum \u2581 = \", maxDP(n))\n"}
{"text": "Maximum difference of zeros and ones in binary string ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static final int MAX = 100;\n\n  static boolean allones(String s, int n) {\n    int co = 0;\n    for (int i = 0; i < s.length(); i++) if (s.charAt(i) == '1') co += 1;\n    return (co == n);\n  }\n\n  static int findlength(int arr[], String s, int n, int ind, int st, int dp[][]) {\n    if (ind >= n) return 0;\n    if (dp[ind][st] != -1) return dp[ind][st];\n    if (st == 0)\n      return dp[ind][st] =\n          Math.max(\n              arr[ind] + findlength(arr, s, n, ind + 1, 1, dp),\n              findlength(arr, s, n, ind + 1, 0, dp));\n    else return dp[ind][st] = Math.max(arr[ind] + findlength(arr, s, n, ind + 1, 1, dp), 0);\n  }\n\n  static int maxLen(String s, int n) {\n    if (allones(s, n)) return -1;\n    int arr[] = new int[MAX];\n    for (int i = 0; i < n; i++) arr[i] = (s.charAt(i) == '0' ? 1 : -1);\n    int dp[][] = new int[MAX][3];\n    for (int[] row : dp) Arrays.fill(row, -1);\n    return findlength(arr, s, n, 0, 0, dp);\n  }\n\n  public static void main(String[] args) {\n    String s = \"11000010001\";\n    int n = 11;\n    System.out.println(maxLen(s, n));\n  }\n}\n", "python": "def findLength(string, n):\n    current_sum = 0\n    max_sum = 0\n    for i in range(n):\n        current_sum += 1 if string[i] == \"0\" else -1\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0\n\n\ns = \"11000010001\"\nn = 11\nprint(findLength(s, n))\n"}
{"text": "Minimum jumps to reach last building in a matrix ", "java": "class GFG {\n  static boolean isSafe(int x, int y) {\n    return (x < 4 && y < 3);\n  }\n\n  static int minJump(int height[][], int x, int y) {\n    if (x == 4 - 1 && y == 3 - 1) return 0;\n    int diag = Integer.MAX_VALUE;\n    if (isSafe(x + 1, y + 1))\n      diag = minJump(height, x + 1, y + 1) + Math.abs(height[x][y] - height[x + 1][y + 1]);\n    int down = Integer.MAX_VALUE;\n    if (isSafe(x + 1, y))\n      down = minJump(height, x + 1, y) + Math.abs(height[x][y] - height[x + 1][y]);\n    int right = Integer.MAX_VALUE;\n    if (isSafe(x, y + 1))\n      right = minJump(height, x, y + 1) + Math.abs(height[x][y] - height[x][y + 1]);\n    return Math.min(down, Math.min(right, diag));\n  }\n\n  public static void main(String[] args) {\n    int height[][] = {{5, 4, 2}, {9, 2, 1}, {2, 5, 9}, {1, 3, 11}};\n    System.out.println(minJump(height, 0, 0));\n  }\n}\n", "python": "R = 4\nC = 3\n\n\ndef isSafe(x, y):\n    return x < R and y < C\n\n\ndef minJump(height, x, y):\n    if x == R - 1 and y == C - 1:\n        return 0\n    diag = 10 ** 9\n    if isSafe(x + 1, y + 1):\n        diag = minJump(height, x + 1, y + 1) + abs(height[x][y] - height[x + 1][y + 1])\n    down = 10 ** 9\n    if isSafe(x + 1, y):\n        down = minJump(height, x + 1, y) + abs(height[x][y] - height[x + 1][y])\n    right = 10 ** 9\n    if isSafe(x, y + 1):\n        right = minJump(height, x, y + 1) + abs(height[x][y] - height[x][y + 1])\n    return min([down, right, diag])\n\n\nheight = [[5, 4, 2], [9, 2, 1], [2, 5, 9], [1, 3, 11]]\nprint(minJump(height, 0, 0))\n"}
{"text": "Count ways to build street under given constraints ", "java": "public class GFG {\n  static long countWays(int n) {\n    long dp[][] = new long[2][n + 1];\n    dp[0][1] = 1;\n    dp[1][1] = 2;\n    for (int i = 2; i <= n; i++) {\n      dp[0][i] = dp[0][i - 1] + dp[1][i - 1];\n      dp[1][i] = dp[0][i - 1] * 2 + dp[1][i - 1];\n    }\n    return dp[0][n] + dp[1][n];\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.print(\n        \" Total \u2581 no \u2581 of \u2581 ways \u2581 with \u2581 n \u2581 = \u2581 \" + n + \" \u2581 are : \u2581 \" + countWays(n));\n  }\n}\n", "python": "def countWays(n):\n    dp = [[0] * (n + 1) for i in range(2)]\n    dp[0][1] = 1\n    dp[1][1] = 2\n    for i in range(2, n + 1):\n        dp[0][i] = dp[0][i - 1] + dp[1][i - 1]\n        dp[1][i] = dp[0][i - 1] * 2 + dp[1][i - 1]\n    return dp[0][n] + dp[1][n]\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(\" Total \u2581 no \u2581 of \u2581 ways \u2581 with \u2581 n \u2581 = \", n, \" are : \", countWays(n))\n"}
{"text": "Count ways to build street under given constraints ", "java": "import java.io.*;\n\nclass GFG {\n  static int countways(int n) {\n    int[] A = new int[n + 1];\n    A[0] = 1;\n    A[1] = 3;\n    A[2] = 7;\n    for (int i = 2; i <= n; i++) {\n      A[i] = 2 * A[i - 1] + A[i - 2];\n    }\n    return A[n];\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(countways(5));\n  }\n}\n", "python": "def countWays(n):\n    dp = [[0] * (n + 1) for i in range(2)]\n    dp[0][1] = 1\n    dp[1][1] = 2\n    for i in range(2, n + 1):\n        dp[0][i] = dp[0][i - 1] + dp[1][i - 1]\n        dp[1][i] = dp[0][i - 1] * 2 + dp[1][i - 1]\n    return dp[0][n] + dp[1][n]\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(\" Total \u2581 no \u2581 of \u2581 ways \u2581 with \u2581 n \u2581 = \", n, \" are : \", countWays(n))\n"}
{"text": "Maximum games played by winner ", "java": "class Max_game_winner {\n  static int maxGameByWinner(int N) {\n    int[] dp = new int[N];\n    dp[0] = 1;\n    dp[1] = 2;\n    int i = 2;\n    do {\n      dp[i] = dp[i - 1] + dp[i - 2];\n    } while (dp[i++] <= N);\n    return (i - 2);\n  }\n\n  public static void main(String args[]) {\n    int N = 10;\n    System.out.println(maxGameByWinner(N));\n  }\n}\n", "python": "def maxGameByWinner(N):\n    dp = [0 for i in range(N)]\n    dp[0] = 1\n    dp[1] = 2\n    i = 1\n    while dp[i] <= N:\n        i = i + 1\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return i - 1\n\n\nN = 10\nprint(maxGameByWinner(N))\n"}
{"text": "n ", "java": "class GFG {\n  static final int max = 100000;\n\n  static int baseconversion(int arr[], int num, int base) {\n    int i = 0, rem, j;\n    if (num == 0) {\n      return 0;\n    }\n    while (num > 0) {\n      rem = num % base;\n      arr[i++] = rem;\n      num /= base;\n    }\n    return i;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = new int[max];\n    int n = 10;\n    int size = baseconversion(arr, n - 1, 6);\n    if (size == 0) System.out.print(size);\n    for (int i = size - 1; i >= 0; i--) {\n      System.out.print(arr[i]);\n    }\n  }\n}\n", "python": "def ans(n):\n    if n < 6:\n        return n\n    return n % 6 + 10 * (ans(n // 6)) - 1\n\n\ndef getSpecialNumber(N):\n    return ans(N)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 17\n    answer = getSpecialNumber(N)\n    print(answer)\n"}
{"text": "Minimum sum subsequence such that at least one of every four consecutive elements is picked ", "java": "import java.io.*;\n\nclass GFG {\n  static int minSum(int[] arr, int n) {\n    int[] dp = new int[n];\n    if (n == 1) return arr[0];\n    if (n == 2) return Math.min(arr[0], arr[1]);\n    if (n == 3) return Math.min(arr[0], Math.min(arr[1], arr[2]));\n    if (n == 4) return Math.min(Math.min(arr[0], arr[1]), Math.min(arr[2], arr[3]));\n    dp[0] = arr[0];\n    dp[1] = arr[1];\n    dp[2] = arr[2];\n    dp[3] = arr[3];\n    for (int i = 4; i < n; i++)\n      dp[i] = arr[i] + Math.min(Math.min(dp[i - 1], dp[i - 2]), Math.min(dp[i - 3], dp[i - 4]));\n    return Math.min(Math.min(dp[n - 1], dp[n - 2]), Math.min(dp[n - 4], dp[n - 3]));\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 3, 4, 5, 6, 1};\n    int n = arr.length;\n    System.out.println(minSum(arr, n));\n  }\n}\n", "python": "def minSum(ar, n):\n    if n <= 4:\n        return min(ar)\n    sum = [0 for i in range(n)]\n    sum[0] = ar[0]\n    sum[1] = ar[1]\n    sum[2] = ar[2]\n    sum[3] = ar[3]\n    for i in range(4, n):\n        sum[i] = ar[i] + min(sum[i - 4 : i])\n    return min(sum[n - 4 : n])\n\n\nar = [2, 4, 1, 5, 2, 3, 6, 1, 2, 4]\nn = len(ar)\nprint(\" Minimum \u2581 sum \u2581 = \u2581 \", minSum(ar, n))\n"}
{"text": "Maximum subsequence sum such that no three are consecutive ", "java": "import java.io.*;\n\nclass GFG {\n  static int maxSumWO3Consec(int arr[], int n) {\n    int sum[] = new int[n];\n    if (n >= 1) sum[0] = arr[0];\n    if (n >= 2) sum[1] = arr[0] + arr[1];\n    if (n > 2) sum[2] = Math.max(sum[1], Math.max(arr[1] + arr[2], arr[0] + arr[2]));\n    for (int i = 3; i < n; i++)\n      sum[i] =\n          Math.max(Math.max(sum[i - 1], sum[i - 2] + arr[i]), arr[i] + arr[i - 1] + sum[i - 3]);\n    return sum[n - 1];\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {100, 1000, 100, 1000, 1};\n    int n = arr.length;\n    System.out.println(maxSumWO3Consec(arr, n));\n  }\n}\n", "python": "arr = [100, 1000, 100, 1000, 1]\nsum = [-1] * 10000\n\n\ndef maxSumWO3Consec(n):\n    if sum[n] != -1:\n        return sum[n]\n    if n == 0:\n        sum[n] = 0\n        return sum[n]\n    if n == 1:\n        sum[n] = arr[0]\n        return sum[n]\n    if n == 2:\n        sum[n] = arr[1] + arr[0]\n        return sum[n]\n    sum[n] = max(\n        max(maxSumWO3Consec(n - 1), maxSumWO3Consec(n - 2) + arr[n]),\n        arr[n] + arr[n - 1] + maxSumWO3Consec(n - 3),\n    )\n    return sum[n]\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = len(arr)\n    print(maxSumWO3Consec(n))\n"}
{"text": "Maximum sum of pairs with specific difference ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int maxSumPairWithDifferenceLessThanK(int arr[], int N, int K) {\n    Arrays.sort(arr);\n    int dp[] = new int[N];\n    dp[0] = 0;\n    for (int i = 1; i < N; i++) {\n      dp[i] = dp[i - 1];\n      if (arr[i] - arr[i - 1] < K) {\n        if (i >= 2) dp[i] = Math.max(dp[i], dp[i - 2] + arr[i] + arr[i - 1]);\n        else dp[i] = Math.max(dp[i], arr[i] + arr[i - 1]);\n      }\n    }\n    return dp[N - 1];\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 5, 10, 15, 17, 12, 9};\n    int N = arr.length;\n    int K = 4;\n    System.out.println(maxSumPairWithDifferenceLessThanK(arr, N, K));\n  }\n}\n", "python": "def maxSumPairWithDifferenceLessThanK(arr, N, k):\n    maxSum = 0\n    arr.sort()\n    i = N - 1\n    while i > 0:\n        if arr[i] - arr[i - 1] < k:\n            maxSum += arr[i]\n            maxSum += arr[i - 1]\n            i -= 1\n        i -= 1\n    return maxSum\n\n\narr = [3, 5, 10, 15, 17, 12, 9]\nN = len(arr)\nK = 4\nprint(maxSumPairWithDifferenceLessThanK(arr, N, K))\n"}
{"text": "Lucas Numbers ", "java": "class GFG {\n  public static int lucas(int n) {\n    if (n == 0) return 2;\n    if (n == 1) return 1;\n    return lucas(n - 1) + lucas(n - 2);\n  }\n\n  public static void main(String args[]) {\n    int n = 9;\n    System.out.println(lucas(n));\n  }\n}\n", "python": "def lucas(n):\n    a = 2\n    b = 1\n    if n == 0:\n        return a\n    for i in range(2, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return b\n\n\nn = 9\nprint(lucas(n))\n"}
{"text": "Count all increasing subsequences ", "java": "import java.io.*;\n\nclass GFG {\n  static int countSub(int arr[], int n) {\n    int count[] = new int[10];\n    for (int i = 0; i < n; i++) {\n      for (int j = arr[i] - 1; j >= 0; j--) count[arr[i]] += count[j];\n      count[arr[i]]++;\n    }\n    int result = 0;\n    for (int i = 0; i < 10; i++) result += count[i];\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 2, 4, 5, 4};\n    int n = arr.length;\n    System.out.println(countSub(arr, n));\n  }\n}\n", "python": "def countSub(arr, n):\n    count = [0 for i in range(10)]\n    for i in range(n):\n        for j in range(arr[i] - 1, -1, -1):\n            count[arr[i]] += count[j]\n        count[arr[i]] += 1\n    result = 0\n    for i in range(10):\n        result += count[i]\n    return result\n\n\narr = [3, 2, 4, 5, 4]\nn = len(arr)\nprint(countSub(arr, n))\n"}
{"text": "Find minimum sum such that one of every three consecutive elements is taken ", "java": "import java.io.*;\n\nclass GFG {\n  static int minimum(int a, int b, int c) {\n    return Math.min(Math.min(a, b), c);\n  }\n\n  static int findMinSum(int arr[], int n) {\n    int sum[] = new int[n];\n    sum[0] = arr[0];\n    sum[1] = arr[1];\n    sum[2] = arr[2];\n    for (int i = 3; i < n; i++) sum[i] = arr[i] + minimum(sum[i - 3], sum[i - 2], sum[i - 1]);\n    return minimum(sum[n - 1], sum[n - 2], sum[n - 3]);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 20, 2, 10, 1};\n    int n = arr.length;\n    System.out.println(\" Min \u2581 Sum \u2581 is \u2581 \" + findMinSum(arr, n));\n  }\n}\n", "python": "def minimum(a, b, c):\n    return min(min(a, b), c)\n\n\ndef findMinSum(arr, n):\n    sum = []\n    sum.append(arr[0])\n    sum.append(arr[1])\n    sum.append(arr[2])\n    for i in range(3, n):\n        sum.append(arr[i] + minimum(sum[i - 3], sum[i - 2], sum[i - 1]))\n    return minimum(sum[n - 1], sum[n - 2], sum[n - 3])\n\n\narr = [1, 2, 3, 20, 2, 10, 1]\nn = len(arr)\nprint(\" Min \u2581 Sum \u2581 is \u2581 \", findMinSum(arr, n))\n"}
{"text": "Count number of ways to cover a distance ", "java": "import java.io.*;\n\nclass GFG {\n  static int printCountRec(int dist) {\n    if (dist < 0) return 0;\n    if (dist == 0) return 1;\n    return printCountRec(dist - 1) + printCountRec(dist - 2) + printCountRec(dist - 3);\n  }\n\n  public static void main(String[] args) {\n    int dist = 4;\n    System.out.println(printCountRec(dist));\n  }\n}\n", "python": "def printCountDP(dist):\n    count = [0] * (dist + 1)\n    count[0] = 1\n    if dist >= 1:\n        count[1] = 1\n    if dist >= 2:\n        count[2] = 2\n    for i in range(3, dist + 1):\n        count[i] = count[i - 1] + count[i - 2] + count[i - 3]\n    return count[dist]\n\n\ndist = 4\nprint(printCountDP(dist))\n"}
{"text": "Count number of ways to cover a distance ", "java": "import java.util.*;\n\nclass GFG {\n  static int printCountDP(int dist) {\n    int[] ways = new int[3];\n    int n = dist;\n    ways[0] = 1;\n    ways[1] = 1;\n    ways[2] = 2;\n    for (int i = 3; i <= n; i++)\n      ways[i % 3] = ways[(i - 1) % 3] + ways[(i - 2) % 3] + ways[(i - 3) % 3];\n    return ways[n % 3];\n  }\n\n  public static void main(String arg[]) {\n    int dist = 4;\n    System.out.print(printCountDP(dist));\n  }\n}\n", "python": "def printCountDP(dist):\n    count = [0] * (dist + 1)\n    count[0] = 1\n    if dist >= 1:\n        count[1] = 1\n    if dist >= 2:\n        count[2] = 2\n    for i in range(3, dist + 1):\n        count[i] = count[i - 1] + count[i - 2] + count[i - 3]\n    return count[dist]\n\n\ndist = 4\nprint(printCountDP(dist))\n"}
{"text": "Optimal Strategy for a Game ", "java": "import java.io.*;\n\nclass GFG {\n  static int optimalStrategyOfGame(int arr[], int n) {\n    int table[][] = new int[n][n];\n    int gap, i, j, x, y, z;\n    for (gap = 0; gap < n; ++gap) {\n      for (i = 0, j = gap; j < n; ++i, ++j) {\n        x = ((i + 2) <= j) ? table[i + 2][j] : 0;\n        y = ((i + 1) <= (j - 1)) ? table[i + 1][j - 1] : 0;\n        z = (i <= (j - 2)) ? table[i][j - 2] : 0;\n        table[i][j] = Math.max(arr[i] + Math.min(x, y), arr[j] + Math.min(y, z));\n      }\n    }\n    return table[0][n - 1];\n  }\n\n  public static void main(String[] args) {\n    int arr1[] = {8, 15, 3, 7};\n    int n = arr1.length;\n    System.out.println(\" \" + optimalStrategyOfGame(arr1, n));\n    int arr2[] = {2, 2, 2, 2};\n    n = arr2.length;\n    System.out.println(\" \" + optimalStrategyOfGame(arr2, n));\n    int arr3[] = {20, 30, 2, 2, 2, 10};\n    n = arr3.length;\n    System.out.println(\" \" + optimalStrategyOfGame(arr3, n));\n  }\n}\n", "python": "def oSRec(arr, i, j, Sum):\n    if j == i + 1:\n        return max(arr[i], arr[j])\n    return max(\n        (Sum - oSRec(arr, i + 1, j, Sum - arr[i])),\n        (Sum - oSRec(arr, i, j - 1, Sum - arr[j])),\n    )\n\n\ndef optimalStrategyOfGame(arr, n):\n    Sum = 0\n    Sum = sum(arr)\n    return oSRec(arr, 0, n - 1, Sum)\n\n\narr1 = [8, 15, 3, 7]\nn = len(arr1)\nprint(optimalStrategyOfGame(arr1, n))\narr2 = [2, 2, 2, 2]\nn = len(arr2)\nprint(optimalStrategyOfGame(arr2, n))\narr3 = [20, 30, 2, 2, 2, 10]\nn = len(arr3)\nprint(optimalStrategyOfGame(arr3, n))\n"}
{"text": "Minimum number of operations required to make an array non ", "java": "import java.io.*;\n\nclass GFG {\n  static int countMinSteps(int arr[], int N) {\n    int val = 0;\n    int mx = Integer.MIN_VALUE;\n    for (int i = 0; i < N; i++) {\n      int curr = arr[i];\n      mx = Math.max(mx, curr);\n      val = Math.max(val, mx - curr);\n    }\n    long res = 0;\n    while ((1 << res) - 1 < val) {\n      ++res;\n    }\n    return (int) res;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 7, 6, 5};\n    int N = arr.length;\n    System.out.println(countMinSteps(arr, N));\n  }\n}\n", "python": "def countMinSteps(arr, N):\n    val = 0\n    mx = -(10 ** 9)\n    for i in range(N):\n        curr = arr[i]\n        mx = max(mx, curr)\n        val = max(val, mx - curr)\n    res = 0\n    while (1 << res) - 1 < val:\n        res += 1\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 7, 6, 5]\n    N = len(arr)\n    print(countMinSteps(arr, N))\n"}
{"text": "Nth term of Ruler Function Series ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int setBits(long n) {\n    int count = 0;\n    while (n > 0) {\n      n = n & (n - 1);\n      count++;\n    }\n    return count;\n  }\n\n  static void findNthTerm(int N) {\n    int x = setBits(N ^ (N - 1));\n    System.out.println(x);\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    findNthTerm(N);\n  }\n}\n", "python": "def setBits(n):\n    count = 0\n    while n > 0:\n        n = n & (n - 1)\n        count += 1\n    return count\n\n\ndef findNthTerm(N):\n    x = setBits(N ^ (N - 1))\n    print(x)\n\n\nN = 8\nfindNthTerm(N)\n"}
{"text": "Quadratic equation whose roots are reciprocal to the roots of given equation ", "java": "class GFG {\n  static void findEquation(int A, int B, int C) {\n    System.out.print(\" ( \" + C + \" ) \" + \" x ^ 2 \u2581 + ( \" + B + \" ) x \u2581 + \u2581 ( \" + A + \" ) \u2581 = \u2581 0\");\n  }\n\n  public static void main(String args[]) {\n    int A = 1, B = -5, C = 6;\n    findEquation(A, B, C);\n  }\n}\n", "python": "def findEquation(A, B, C):\n    print(\n        \" ( \"\n        + str(C)\n        + \" ) \"\n        + \" x ^ 2 \u2581 + ( \"\n        + str(B)\n        + \" ) x \u2581 + \u2581 ( \"\n        + str(A)\n        + \" ) \u2581 = \u2581 0\"\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = 1\n    B = -5\n    C = 6\n    findEquation(A, B, C)\n"}
{"text": "Minimize subtraction followed by increments of adjacent elements required to make all array elements equal ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int findMinMoves(int[] arr, int N) {\n    int sum = 0;\n    for (int i = 0; i < N; i++) sum += arr[i];\n    if (sum % N != 0) return -1;\n    int avg = sum / N;\n    int total = 0;\n    int needCount = 0;\n    for (int i = 0; i < N; i++) {\n      needCount += (arr[i] - avg);\n      total = Math.max(Math.max(Math.abs(needCount), arr[i] - avg), total);\n    }\n    return total;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 0, 5};\n    int N = arr.length;\n    System.out.println(findMinMoves(arr, N));\n  }\n}\n", "python": "def findMinMoves(arr, N):\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    if sum % N != 0:\n        return -1\n    avg = sum // N\n    total = 0\n    needCount = 0\n    for i in range(N):\n        needCount += arr[i] - avg\n        total = max(max(abs(needCount), arr[i] - avg), total)\n    return total\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 0, 5]\n    N = len(arr)\n    print(findMinMoves(arr, N))\n"}
{"text": "Sum of products of all possible Subarrays ", "java": "import java.io.*;\n\nclass GFG {\n  static void sumOfSubarrayProd(int arr[], int n) {\n    int ans = 0;\n    int res = 0;\n    for (int i = n - 1; i >= 0; i--) {\n      int incr = arr[i] * (1 + res);\n      ans += incr;\n      res = incr;\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3};\n    int N = arr.length;\n    sumOfSubarrayProd(arr, N);\n  }\n}\n", "python": "def sumOfSubarrayProd(arr, n):\n    ans = 0\n    res = 0\n    i = n - 1\n    while i >= 0:\n        incr = arr[i] * (1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3]\n    N = len(arr)\n    sumOfSubarrayProd(arr, N)\n"}
{"text": "Program to insert dashes between two adjacent odd digits in given Number ", "java": "class GFG {\n  static boolean checkOdd(char ch) {\n    return ((ch - '0') & 1) != 0 ? true : false;\n  }\n\n  static String Insert_dash(String num_str) {\n    StringBuilder result_str = new StringBuilder(num_str);\n    for (int x = 0; x < num_str.length() - 1; x++) {\n      if (checkOdd(num_str.charAt(x)) && checkOdd(num_str.charAt(x + 1))) {\n        result_str.insert(x + 1, \" - \");\n        num_str = result_str.toString();\n        x++;\n      }\n    }\n    return result_str.toString();\n  }\n\n  public static void main(String[] args) {\n    String str = \"1745389\";\n    System.out.println(Insert_dash(str));\n  }\n}\n", "python": "def checkOdd(ch):\n    return (ord(ch) - 48) & 1\n\n\ndef Insert_dash(num_str):\n    result_str = num_str\n    x = 0\n    while x < len(num_str) - 1:\n        if checkOdd(num_str[x]) and checkOdd(num_str[x + 1]):\n            result_str = result_str[: x + 1] + \" - \" + result_str[x + 1 :]\n            num_str = result_str\n            x += 1\n        x += 1\n    return result_str\n\n\nstr = \"1745389\"\nprint(Insert_dash(str))\n"}
{"text": "Remove leading zeros from a Number given as a string ", "java": "import java.util.regex.*;\n\nclass GFG {\n  public static void removeLeadingZeros(String str) {\n    String regex = \" ^ 0 + ( ? ! $ ) \";\n    str = str.replaceAll(regex, \" \");\n    System.out.println(str);\n  }\n\n  public static void main(String args[]) {\n    String str = \"0001234\";\n    removeLeadingZeros(str);\n  }\n}\n", "python": "import re\n\n\ndef removeLeadingZeros(str):\n    regex = \" ^ 0 + ( ? ! $ ) \"\n    str = re.sub(regex, \" \", str)\n    print(str)\n\n\nstr = \"0001234\"\nremoveLeadingZeros(str)\n"}
{"text": "Maximum inversions in a sequence of 1 to N after performing given operations at most K times ", "java": "import java.util.*;\n\nclass GFG {\n  static void maximum_inversion(int n, int k) {\n    int answer = 0;\n    k = Math.min(k, n / 2);\n    int left = 1;\n    int right = n;\n    while (k != 0) {\n      k--;\n      answer += 2 * (right - left) - 1;\n      left++;\n      right--;\n    }\n    System.out.println(answer);\n  }\n\n  public static void main(String s[]) {\n    int N = 5;\n    int K = 3;\n    maximum_inversion(N, K);\n    N = 4;\n    K = 1;\n    maximum_inversion(N, K);\n  }\n}\n", "python": "def maximum_inversion(n, k):\n    answer = 0\n    k = min(k, n // 2)\n    left = 1\n    right = n\n    while k > 0:\n        k -= 1\n        answer += 2 * (right - left) - 1\n        left += 1\n        right -= 1\n    print(answer)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    K = 3\n    maximum_inversion(N, K)\n    N = 4\n    K = 1\n    maximum_inversion(N, K)\n"}
{"text": "Find initial sequence that produces a given Array by cyclic increments upto index P ", "java": "import java.util.*;\n\nclass GFG {\n  static void findArray(int[] a, int n, int P) {\n    int mi = Arrays.stream(a).min().getAsInt();\n    int ctr = 0;\n    mi = Math.max(0, mi - 1);\n    for (int i = 0; i < n; i++) {\n      a[i] -= mi;\n      ctr += mi;\n    }\n    int i = P - 1;\n    int start = -1;\n    while (true) {\n      if (a[i] == 0) {\n        start = i;\n        break;\n      }\n      a[i] -= 1;\n      ctr += 1;\n      i = (i - 1 + n) % n;\n    }\n    a[start] = ctr;\n    for (i = 0; i < n; i++) {\n      System.out.print(a[i] + \" , \u2581 \");\n    }\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    int P = 2;\n    int arr[] = {3, 2, 0, 2, 7};\n    findArray(arr, N, P);\n  }\n}\n", "python": "def findArray(a, n, P):\n    mi = min(a)\n    ctr = 0\n    mi = max(0, mi - 1)\n    for i in range(n):\n        a[i] -= mi\n        ctr += mi\n    i = P - 1\n    start = -1\n    while 1:\n        if a[i] == 0:\n            start = i\n            break\n        a[i] -= 1\n        ctr += 1\n        i = (i - 1 + n) % n\n    a[start] = ctr\n    print(*a, sep=\" , \u2581 \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    P = 2\n    arr = [3, 2, 0, 2, 7]\n    findArray(arr, N, P)\n"}
{"text": "Find the Nth Hogben Numbers ", "java": "import java.util.*;\n\nclass GFG {\n  public static int HogbenNumber(int a) {\n    int p = (int) (Math.pow(a, 2) - a + 1);\n    return p;\n  }\n\n  public static void main(String args[]) {\n    int N = 10;\n    System.out.print(HogbenNumber(N));\n  }\n}\n", "python": "def HogbenNumber(a):\n    p = pow(a, 2) - a + 1\n    return p\n\n\nN = 10\nprint(HogbenNumber(N))\n"}
{"text": "Subsequence pair from given Array having all unique and all same elements respectively ", "java": "import java.util.*;\n\nclass GFG {\n  static void maximumSubsequence(int arr[], int N) {\n    HashMap<Integer, Integer> M = new HashMap<Integer, Integer>();\n    for (int i = 0; i < N; i++) {\n      if (M.containsKey(arr[i])) {\n        M.put(arr[i], M.get(arr[i]) + 1);\n      } else {\n        M.put(arr[i], 1);\n      }\n    }\n    int distinct_size = M.size();\n    int maxFreq = 1;\n    for (Map.Entry<Integer, Integer> it : M.entrySet()) {\n      maxFreq = Math.max(maxFreq, it.getValue());\n    }\n    System.out.print(\n        Math.max(Math.min(distinct_size, maxFreq - 1), Math.min(distinct_size - 1, maxFreq)));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 4, 4, 4, 4, 5};\n    int N = arr.length;\n    maximumSubsequence(arr, N);\n  }\n}\n", "python": "def maximumSubsequence(arr, N):\n    M = {i: 0 for i in range(100)}\n    for i in range(N):\n        M[arr[i]] += 1\n    distinct_size = len(M)\n    maxFreq = 1\n    for value in M.values():\n        maxFreq = max(maxFreq, value)\n    print(max(min(distinct_size, maxFreq - 1), min(distinct_size - 1, maxFreq)))\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4, 4, 4, 4, 5]\n    N = len(arr)\n    maximumSubsequence(arr, N)\n"}
{"text": "Minimum characters required to make a password strong ", "java": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass GFG {\n  static int countCharacters(String password) {\n    int count = 0;\n    Pattern digit = Pattern.compile(\" ( \\\\ d ) \");\n    Pattern upper = Pattern.compile(\" ( [ A - Z ] ) \");\n    Pattern lower = Pattern.compile(\" ( [ a - z ] ) \");\n    Pattern spChar = Pattern.compile(\" ( \\\\ W ) \");\n    Matcher Digit = digit.matcher(password);\n    Matcher Upper = upper.matcher(password);\n    Matcher Lower = lower.matcher(password);\n    Matcher Special = spChar.matcher(password);\n    if (!Digit.find()) {\n      count++;\n    }\n    if (!Upper.find()) {\n      count++;\n    }\n    if (!Lower.find()) {\n      count++;\n    }\n    if (!Special.find()) {\n      count++;\n    }\n    if ((count + password.length()) < 8) {\n      count = count + 8 - (count + password.length());\n    }\n    return count;\n  }\n\n  public static void main(String args[]) {\n    String password1 = \" Geeksforgeeks \";\n    System.out.println(countCharacters(password1));\n    String password2 = \" Geeks1\";\n    System.out.println(countCharacters(password2));\n  }\n}\n", "python": "import re\n\n\ndef countCharacters(password):\n    count = 0\n    digit = re.compile(\" ( \\\\d ) \")\n    upper = re.compile(\" ( [ A - Z ] ) \")\n    lower = re.compile(\" ( [ a - z ] ) \")\n    spChar = re.compile(\" ( \\\\W ) \")\n    if not re.search(digit, password):\n        count += 1\n    if not re.search(upper, password):\n        count += 1\n    if not re.search(lower, password):\n        count += 1\n    if not re.search(spChar, password):\n        count += 1\n    if (count + len(password)) < 8:\n        count = count + 8 - (count + len(password))\n    return count\n\n\npassword1 = \" Geeksforgeeks \"\nprint(countCharacters(password1))\npassword2 = \" Geeks1\"\nprint(countCharacters(password2))\n"}
{"text": "Maximize the sum of differences of consecutive elements after removing exactly K elements ", "java": "class GFG {\n  static int findSum(int[] arr, int n, int k) {\n    if (k <= n - 2) return (arr[n - 1] - arr[0]);\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4};\n    int n = arr.length;\n    int k = 1;\n    System.out.println(findSum(arr, n, k));\n  }\n}\n", "python": "def findSum(arr, n, k):\n    if k <= n - 2:\n        return arr[n - 1] - arr[0]\n    return 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4]\n    n = len(arr)\n    k = 1\n    print(findSum(arr, n, k))\n"}
{"text": "Sum of the digits of square of the given number which has only 1 's as its digits ", "java": "class GFG {\n  static long squareDigitSum(String s) {\n    long lengthN = s.length();\n    long result = (lengthN / 9) * 81 + (long) Math.pow((lengthN % 9), 2);\n    return result;\n  }\n\n  public static void main(String[] args) {\n    String s = \"1111\";\n    System.out.println(squareDigitSum(s));\n  }\n}\n", "python": "def squareDigitSum(num):\n    lengthN = len(num)\n    result = (lengthN // 9) * 81 + (lengthN % 9) ** 2\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = \"1111\"\n    print(squareDigitSum(N))\n"}
{"text": "Count number of distinct substrings of a given length ", "java": "import java.util.*;\n\nclass GFG {\n  static int x = 26;\n  static int mod = 3001;\n\n  static void CntSubstr(char[] s, int l) {\n    int hash = 0;\n    for (int i = 0; i < l; i++) {\n      hash = (hash * x + (s[i] - 97)) % mod;\n    }\n    int pow_l = 1;\n    for (int i = 0; i < l - 1; i++) {\n      pow_l = (pow_l * x) % mod;\n    }\n    HashSet<Integer> result = new HashSet<Integer>();\n    result.add(hash);\n    for (int i = l; i < s.length; i++) {\n      hash = ((hash - pow_l * (s[i - l] - 97) + 2 * mod) * x + (s[i] - 97)) % mod;\n      result.add(hash);\n    }\n    System.out.println(result.size());\n  }\n\n  public static void main(String[] args) {\n    String s = \" abcba \";\n    int l = 2;\n    CntSubstr(s.toCharArray(), l);\n  }\n}\n", "python": "x = 26\nmod = 3001\n\n\ndef CntSubstr(s, l):\n    hash = 0\n    for i in range(l):\n        hash = (hash * x + (ord(s[i]) - 97)) % mod\n    pow_l = 1\n    for i in range(l - 1):\n        pow_l = (pow_l * x) % mod\n    result = set()\n    result.add(hash)\n    for i in range(l, len(s)):\n        hash = (\n            (hash - pow_l * (ord(s[i - l]) - 97) + 2 * mod) * x + (ord(s[i]) - 97)\n        ) % mod\n        result.add(hash)\n    print(len(result))\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \" abcba \"\n    l = 2\n    CntSubstr(s, l)\n"}
{"text": "Sum of integers upto N with given unit digit ( Set 2 ) ", "java": "import java.io.*;\n\nclass GFG {\n  static long getSum(long n, int d) {\n    if (n < d) return 0;\n    while (n % 10 != d) n--;\n    long k = n / 10;\n    return (k + 1) * d + (k * 10 + 10 * k * k) / 2;\n  }\n\n  public static void main(String[] args) {\n    long n = 30;\n    int d = 3;\n    System.out.println(getSum(n, d));\n  }\n}\n", "python": "def getSum(n, d):\n    if n < d:\n        return 0\n    while n % 10 != d:\n        n -= 1\n    k = n // 10\n    return (k + 1) * d + (k * 10 + 10 * k * k) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 30\n    d = 3\n    print(getSum(n, d))\n"}
{"text": "Minimum characters to be replaced to remove the given substring ", "java": "import java.io.*;\n\nclass GFG {\n  static int replace(String A, String B) {\n    int n = A.length(), m = B.length();\n    int count = 0, i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < m; j++) {\n        if (i + j >= n) break;\n        else if (A.charAt(i + j) != B.charAt(j)) break;\n      }\n      if (j == m) {\n        count++;\n        i += m - 1;\n      }\n    }\n    return count;\n  }\n\n  public static void main(String args[]) {\n    String str1 = \" aaaaaaaa \";\n    String str2 = \" aaa \";\n    System.out.println(replace(str1, str2));\n  }\n}\n", "python": "def replace(A, B):\n    n, m = len(A), len(B)\n    count, i = 0, 0\n    while i < n:\n        j = 0\n        while j < m:\n            if i + j >= n or A[i + j] != B[j]:\n                break\n            j += 1\n        if j == m:\n            count += 1\n            i += m - 1\n        i += 1\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    str1 = \" aaaaaaaa \"\n    str2 = \" aaa \"\n    print(replace(str1, str2))\n"}
{"text": "Find any permutation of Binary String of given size not present in Array ", "java": "import java.io.*;\n\nclass GFG {\n  static String findString(String arr[], int N) {\n    String ans = \" \";\n    for (int i = 0; i < N; i++) {\n      ans += arr[i].charAt(i) == '0' ? '1' : '0';\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    String arr[] = {\"111\", \"011\", \"001\"};\n    int N = arr.length;\n    System.out.println(findString(arr, N));\n  }\n}\n", "python": "def findString(arr, N):\n    ans = \" \"\n    for i in range(N):\n        ans += \"1\" if arr[i][i] == \"0\" else \"0\"\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [\"111\", \"011\", \"001\"]\n    N = len(arr)\n    print(findString(arr, N))\n"}
{"text": "Count of palindromic strings of size upto N consisting of first K alphabets occurring at most twice ", "java": "import java.io.*;\n\nclass GFG {\n  static int lengthNPalindrome(int N, int K) {\n    int half = N / 2;\n    if (N % 2 == 1) {\n      half += 1;\n    }\n    int ans = 1;\n    for (int i = 1; i <= half; i++) {\n      ans *= K;\n      K--;\n    }\n    return ans;\n  }\n\n  static int palindromicStrings(int N, int K) {\n    if (N == 1) {\n      return K;\n    }\n    if (N == 2) {\n      return 2 * K;\n    }\n    int ans = 0;\n    ans += (2 * K);\n    for (int i = 3; i <= N; i++) {\n      ans += lengthNPalindrome(i, K);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 4, K = 3;\n    System.out.println(palindromicStrings(N, K));\n  }\n}\n", "python": "def lengthNPalindrome(N, K):\n    half = N // 2\n    if N & 1:\n        half += 1\n    ans = 1\n    for i in range(1, half + 1):\n        ans *= K\n        K -= 1\n    return ans\n\n\ndef palindromicStrings(N, K):\n    if N == 1:\n        return K\n    if N == 2:\n        return 2 * K\n    ans = 0\n    ans += 2 * K\n    for i in range(3, N + 1):\n        ans += lengthNPalindrome(i, K)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    K = 3\n    print(palindromicStrings(N, K))\n"}
{"text": "Find character at Kth index by appending S1 ( M ) times and S2 ( M + 1 ) times ", "java": "import java.io.*;\n\nclass GFG {\n  static char KthCharacter(String s, String t, long k) {\n    long f = 1;\n    long ss = 2;\n    String tmp = \" \";\n    int len = tmp.length();\n    while (len < k) {\n      long tf = f;\n      long ts = ss;\n      while (tf-- != 0) {\n        tmp += s;\n      }\n      while (ts-- != 0) {\n        tmp += t;\n      }\n      f += 2;\n      ss += 2;\n      len = tmp.length();\n    }\n    char output = tmp.charAt((int) k - 1);\n    return output;\n  }\n\n  public static void main(String[] args) {\n    String S1 = \" a \", S2 = \" bc \";\n    int k = 4;\n    char ans = KthCharacter(S1, S2, k);\n    System.out.println(ans);\n  }\n}\n", "python": "def KthCharacter(s, t, k):\n    f = 1\n    ss = 2\n    tmp = \" \"\n    lenn = len(tmp)\n    while lenn < k:\n        tf = f\n        ts = ss\n        while tf != 0:\n            tf -= 1\n            tmp += s\n        while ts != 0:\n            ts -= 1\n            tmp += t\n        f += 2\n        ss += 2\n        lenn = len(tmp)\n    output = tmp[k - 1]\n    return output\n\n\nS1 = \" a \"\nS2 = \" bc \"\nk = 4\nans = KthCharacter(S1, S2, k)\nprint(ans)\n"}
{"text": "Count of ways to rearrange N digits and M alphabets keeping all alphabets together ", "java": "import java.util.*;\n\nclass GFG {\n  static int fact(int n) {\n    int ans = 1;\n    for (int i = 2; i <= n; i++) ans = ans * i;\n    return ans;\n  }\n\n  static int findComb(int N, int M) {\n    int x = fact(N + 1);\n    int y = fact(M);\n    return (x * y);\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    int M = 2;\n    System.out.print(findComb(N, M));\n  }\n}\n", "python": "import math\n\n\ndef fact(a):\n    return math.factorial(a)\n\n\ndef findComb(N, M):\n    x = fact(N + 1)\n    y = fact(M)\n    return x * y\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    M = 2\n    print(findComb(N, M))\n"}
{"text": "Minimize hamming distance in Binary String by setting only one K size substring bits ", "java": "public class GFG {\n  static int minimumHammingDistance(String S, int K) {\n    int n = S.length();\n    int[] pref = new int[n];\n    pref[0] = S.charAt(0) - '0';\n    for (int i = 1; i < n; i++) pref[i] = pref[i - 1] + (S.charAt(i) - '0');\n    int cnt = pref[n - 1];\n    int ans = cnt;\n    for (int i = 0; i < n - K; i++) {\n      int value = pref[i + K - 1] - (i - 1 >= 0 ? pref[i - 1] : 0);\n      ans = Math.min(ans, cnt - value + (K - value));\n    }\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    String s = \"101\";\n    int K = 2;\n    System.out.println(minimumHammingDistance(s, K));\n  }\n}\n", "python": "def minimumHammingDistance(S, K):\n    n = len(S)\n    pref = [0] * n\n    pref[0] = ord(S[0]) - ord(\"0\")\n    for i in range(1, n):\n        pref[i] = pref[i - 1] + (ord(S[i]) - ord(\"0\"))\n    cnt = pref[n - 1]\n    ans = cnt\n    for i in range(n - K):\n        value = pref[i + K - 1] - (pref[i - 1] if (i - 1) >= 0 else 0)\n        ans = min(ans, cnt - value + (K - value))\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \"101\"\n    K = 2\n    print(minimumHammingDistance(s, K))\n"}
{"text": "Check if String formed by first and last X characters of a String is a Palindrome ", "java": "import java.io.*;\n\nclass GFG {\n  public static void isEqualSubstring(String str, int x) {\n    int n = str.length();\n    int i = 0;\n    while (i < n && i < x) {\n      if (str.charAt(i) != str.charAt(n - i - 1)) {\n        System.out.println(\" false \");\n        return;\n      }\n      i++;\n    }\n    System.out.println(\" true \");\n  }\n\n  public static void main(String[] args) {\n    String str = \" GeeksforGeeks \";\n    int x = 3;\n    isEqualSubstring(str, x);\n  }\n}\n", "python": "def isEqualSubstring(string, x):\n    n = len(string)\n    i = 0\n    while i < n and i < x:\n        if string[i] != string[n - i - 1]:\n            print(\" false \")\n            return\n        i += 1\n    print(\" true \")\n    return\n\n\nif __name__ == \" _ _ main _ _ \":\n    string = \" GeeksforGeeks \"\n    x = 3\n    isEqualSubstring(string, x)\n"}
{"text": "Minimum number of replacement done of substring \"01\" with \"110\" to remove it completely ", "java": "import java.io.*;\n\nclass GFG {\n  public static void minimumOperations(String S, int N) {\n    int ans = 0;\n    int cntOne = 0;\n    for (int i = N - 1; i >= 0; i--) {\n      if (S.charAt(i) == '0') {\n        ans += cntOne;\n        cntOne *= 2;\n      } else cntOne++;\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    String S = \"001\";\n    int N = S.length();\n    minimumOperations(S, N);\n  }\n}\n", "python": "def minimumOperations(S, N):\n    ans = 0\n    cntOne = 0\n    i = N - 1\n    while i >= 0:\n        if S[i] == \"0\":\n            ans += cntOne\n            cntOne *= 2\n        else:\n            cntOne += 1\n        i -= 1\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    S = \"001\"\n    N = len(S)\n    minimumOperations(S, N)\n"}
{"text": "Check if all prefixes of a number is divisible by remaining count of digits ", "java": "import java.io.*;\n\nclass GFG {\n  public static boolean prefixDivisble(int n) {\n    int i = 1;\n    while (n > 0) {\n      if (n % i != 0) return false;\n      n = n / 10;\n      i++;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int n = 52248;\n    if (prefixDivisble(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def prefixDivisble(n):\n    i = 1\n    while n > 0:\n        if n % i != 0:\n            return False\n        n = n // 10\n        i += 1\n    return True\n\n\nn = 52248\nif prefixDivisble(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Generate a random Binary String of length N ", "java": "class GFG {\n  static int findRandom() {\n    int num = (1 + (int) (Math.random() * 100)) % 2;\n    return num;\n  }\n\n  static void generateBinaryString(int N) {\n    String S = \" \";\n    for (int i = 0; i < N; i++) {\n      int x = findRandom();\n      S = S + String.valueOf(x);\n    }\n    System.out.println(S);\n  }\n\n  public static void main(String[] args) {\n    int N = 7;\n    generateBinaryString(N);\n  }\n}\n", "python": "import random\n\n\ndef findRandom():\n    num = random.randint(0, 1)\n    return num\n\n\ndef generateBinaryString(N):\n    S = \" \"\n    for i in range(N):\n        x = findRandom()\n        S += str(x)\n    print(S)\n\n\nN = 7\ngenerateBinaryString(N)\n"}
{"text": "Count alphanumeric palindromes of length N ", "java": "import java.util.*;\n\nclass GFG {\n  static int power(int x, int y, int p) {\n    int res = 1;\n    x = x % p;\n    if (x == 0) return 0;\n    while (y > 0) {\n      if ((y & 1) == 1) res = (res * x) % p;\n      y = y >> 1;\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    int flag, k, m = 0;\n    if ((N == 1) || (N == 2)) System.out.print(62);\n    else m = 1000000000 + 7;\n    if (N % 2 == 0) {\n      k = N / 2;\n      flag = 1;\n    } else {\n      k = (N - 1) / 2;\n      flag = 0;\n    }\n    if (flag != 0) {\n      int a = power(62, k, m);\n      System.out.print(a);\n    } else {\n      int a = power(62, (k + 1), m);\n      System.out.print(a);\n    }\n  }\n}\n", "python": "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if (y & 1) == 1:\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\n\nN = 3\nif (N == 1) or (N == 2):\n    print(62)\nelse:\n    m = (10 ** 9) + 7\n    if N % 2 == 0:\n        k = N // 2\n        flag = True\n    else:\n        k = (N - 1) // 2\n        flag = False\n    if flag:\n        a = power(62, k, m)\n        print(a)\n    else:\n        a = power(62, (k + 1), m)\n        print(a)\n    DEDENT\n"}
{"text": "Count ways to place all the characters of two given strings alternately ", "java": "import java.io.*;\n\nclass GFG {\n  static int fact(int n) {\n    int res = 1;\n    for (int i = 1; i <= n; i++) {\n      res = res * i;\n    }\n    return res;\n  }\n\n  static int distinctWays(String str1, String str2) {\n    int n = str1.length();\n    int m = str2.length();\n    if (n == m) {\n      return 2 * fact(n) * fact(m);\n    }\n    return fact(n) * fact(m);\n  }\n\n  public static void main(String[] args) {\n    String str1 = \" aegh \";\n    String str2 = \" rsw \";\n    System.out.print(distinctWays(str1, str2));\n  }\n}\n", "python": "def fact(n):\n    res = 1\n    for i in range(1, n + 1):\n        res = res * i\n    return res\n\n\ndef distinctWays(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    if n == m:\n        return 2 * fact(n) * fact(m)\n    return fact(n) * fact(m)\n\n\nstr1 = \" aegh \"\nstr2 = \" rsw \"\nprint(distinctWays(str1, str2))\n"}
{"text": "Count of substrings of a Binary string containing only 1 s ", "java": "class GFG {\n  static int countOfSubstringWithOnlyOnes(String s) {\n    int res = 0, count = 0;\n    for (int i = 0; i < s.length(); i++) {\n      count = s.charAt(i) == '1' ? count + 1 : 0;\n      res = (res + count);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    String s = \"0110111\";\n    System.out.println(countOfSubstringWithOnlyOnes(s));\n  }\n}\n", "python": "def countOfSubstringWithOnlyOnes(s):\n    count = 0\n    res = 0\n    for i in range(0, len(s)):\n        if s[i] == \"1\":\n            count = count + 1\n        else:\n            count = 0\n        res = res + count\n    return res\n\n\ns = \"0110111\"\nprint(countOfSubstringWithOnlyOnes(s))\n"}
{"text": "Count of Distinct strings possible by inserting K characters in the original string ", "java": "class GFG {\n  static final long mod = 1000000007;\n\n  static long binExp(long base, long power) {\n    long x = 1;\n    while (power != 0) {\n      if (power % 2 == 1) x = ((x % mod) * (base % mod)) % mod;\n      base = ((base % mod) * (base % mod)) % mod;\n      power = power / 2;\n    }\n    return x;\n  }\n\n  static long fact(long num) {\n    long result = 1;\n    for (long i = 1; i <= num; ++i) {\n      result = ((result % mod) * (i % mod)) % mod;\n    }\n    return result;\n  }\n\n  static long calculate_nCi(long N, long i) {\n    long nfact = fact(N);\n    long ifact = fact(i);\n    long dfact = fact(N - i);\n    long inv_ifact = binExp(ifact, mod - 2);\n    long inv_dfact = binExp(dfact, mod - 2);\n    long denm = ((inv_ifact % mod) * (inv_dfact % mod)) % mod;\n    long answer = ((nfact % mod) * (denm % mod)) % mod;\n    return answer;\n  }\n\n  static void countSubstring(long N, long s, long k) {\n    long allWays = binExp(26, N);\n    long noWays = 0;\n    for (long i = 0; i < s; ++i) {\n      long nCi = calculate_nCi(N, i);\n      long remaining = binExp(25, N - i);\n      long multiply = ((nCi % mod) * (remaining % mod)) % mod;\n      noWays = ((noWays % mod) + (multiply % mod)) % mod;\n    }\n    long answer = ((allWays % mod) - (noWays % mod)) % mod;\n    if (answer < 0) answer += mod;\n    System.out.println(answer);\n  }\n\n  public static void main(String[] args) {\n    String str = \" abc \";\n    long k = 2;\n    long s = str.length();\n    long N = s + k;\n    countSubstring(N, s, k);\n  }\n}\n", "python": "mod = 1000000007\n\n\ndef binExp(base, power):\n    x = 1\n    while power:\n        if power % 2 == 1:\n            x = ((x % mod) * (base % mod)) % mod\n        base = ((base % mod) * (base % mod)) % mod\n        power = power // 2\n    return x\n\n\ndef fact(num):\n    result = 1\n    for i in range(1, num + 1):\n        result = ((result % mod) * (i % mod)) % mod\n    return result\n\n\ndef calculate_nCi(N, i):\n    nfact = fact(N)\n    ifact = fact(i)\n    dfact = fact(N - i)\n    inv_ifact = binExp(ifact, mod - 2)\n    inv_dfact = binExp(dfact, mod - 2)\n    denm = ((inv_ifact % mod) * (inv_dfact % mod)) % mod\n    answer = ((nfact % mod) * (denm % mod)) % mod\n    return answer\n\n\ndef countSubstring(N, s, k):\n    allWays = binExp(26, N)\n    noWays = 0\n    for i in range(s):\n        nCi = calculate_nCi(N, i)\n        remaining = binExp(25, N - i)\n        multiply = ((nCi % mod) * (remaining % mod)) % mod\n        noWays = ((noWays % mod) + (multiply % mod)) % mod\n    answer = ((allWays % mod) - (noWays % mod)) % mod\n    if answer < 0:\n        answer += mod\n    print(answer)\n\n\nif __name__ == \" _ _ main _ _ \":\n    st = \" abc \"\n    k = 2\n    s = len(st)\n    N = s + k\n    countSubstring(N, s, k)\n"}
{"text": "Minimum replacements in a string to make adjacent characters unequal ", "java": "import java.util.*;\n\nclass GFG {\n  static void count_minimum(String s) {\n    int n = s.length();\n    int ans = 0;\n    int i = 0;\n    while (i < n) {\n      int j = i;\n      while (j < n && s.charAt(j) == s.charAt(i)) {\n        j++;\n      }\n      int diff = j - i;\n      ans += diff / 2;\n      i = j;\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    String str = \" caaab \";\n    count_minimum(str);\n  }\n}\n", "python": "def count_minimum(s):\n    n = len(s)\n    ans = 0\n    i = 0\n    while i < n:\n        j = i\n        while j < n and (s[j] == s[i]):\n            j += 1\n        diff = j - i\n        ans += diff // 2\n        i = j\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    str = \" caaab \"\n    count_minimum(str)\n"}
{"text": "Minimum cost to convert given string to consist of only vowels ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int min_cost(String st) {\n    String vow = \" aeiou \";\n    int cost = 0;\n    for (int i = 0; i < st.length(); i++) {\n      ArrayList<Integer> costs = new ArrayList<>();\n      for (int j = 0; j < 5; j++) costs.add(Math.abs(st.charAt(i) - vow.charAt(j)));\n      int minx = Integer.MAX_VALUE;\n      for (int x : costs) {\n        if (x < minx) {\n          minx = x;\n        }\n      }\n      cost += minx;\n    }\n    return cost;\n  }\n\n  public static void main(String[] args) {\n    String str = \" abcde \";\n    System.out.println(min_cost(str));\n  }\n}\n", "python": "def min_cost(st):\n    vow = \" aeiou \"\n    cost = 0\n    for i in range(len(st)):\n        costs = []\n        for j in range(5):\n            costs.append(abs(ord(st[i]) - ord(vow[j])))\n        cost += min(costs)\n    return cost\n\n\nstr = \" abcde \"\nprint(min_cost(str))\n"}
{"text": "Check given string is oddly palindrome or not ", "java": "class GFG {\n  public static boolean isPalindrome(String str) {\n    int l = 0;\n    int h = str.length() - 1;\n    while (h > l) {\n      if (str.charAt(l) != str.charAt(h)) {\n        return false;\n      }\n      l++;\n      h--;\n    }\n    return true;\n  }\n\n  public static String makeOddString(String str) {\n    String odd = \" \";\n    for (int i = 1; i < str.length(); i += 2) {\n      odd += str.charAt(i);\n    }\n    return odd;\n  }\n\n  public static void checkOddlyPalindrome(String str) {\n    String odd = makeOddString(str);\n    if (isPalindrome(odd)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n\n  public static void main(String[] args) {\n    String str = \" ddwfefwde \";\n    checkOddlyPalindrome(str);\n  }\n}\n", "python": "def isOddStringPalindrome(str, n):\n    oddStringSize = n // 2\n    lengthOdd = True if (oddStringSize % 2 == 1) else False\n    s = []\n    i = 1\n    c = 0\n    while i < n and c < oddStringSize // 2:\n        s.append(str[i])\n        i += 2\n        c += 1\n    if lengthOdd:\n        i = i + 2\n    while i < n and len(s) > 0:\n        if s[len(s) - 1] == str[i]:\n            s.pop()\n        else:\n            break\n        i = i + 2\n    if len(s) == 0:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 10\n    s = \" aeafacafae \"\n    if isOddStringPalindrome(s, N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Count of binary strings of given length consisting of at least one 1 ", "java": "import java.util.*;\n\nclass GFG {\n  static long count_Strings(long n) {\n    int x = 1;\n    for (int i = 1; i < n; i++) {\n      x = (1 << x);\n    }\n    return x - 1;\n  }\n\n  public static void main(String[] args) {\n    long n = 3;\n    System.out.print(count_Strings(n));\n  }\n}\n", "python": "def count_Strings(n):\n    x = 1\n    for i in range(1, n):\n        x = 1 << x\n    return x - 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(count_Strings(n))\n"}
{"text": "Count of N size strings consisting of at least one vowel and one consonant ", "java": "class GFG {\n  static int mod = (int) (1e9 + 7);\n\n  static int expo(int base, int exponent) {\n    int ans = 1;\n    while (exponent != 0) {\n      if ((exponent & 1) == 1) {\n        ans = ans * base;\n        ans = ans % mod;\n      }\n      base = base * base;\n      base %= mod;\n      exponent >>= 1;\n    }\n    return ans % mod;\n  }\n\n  static int findCount(int N) {\n    int ans = (expo(26, N) - expo(5, N) - expo(21, N)) % mod;\n    ans += mod;\n    ans %= mod;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    System.out.print(findCount(N));\n  }\n}\n", "python": "mod = 1e9 + 7\n\n\ndef expo(base, exponent):\n    ans = 1\n    while exponent != 0:\n        if (exponent & 1) == 1:\n            ans = ans * base\n            ans = ans % mod\n        base = base * base\n        base %= mod\n        exponent >>= 1\n    return ans % mod\n\n\ndef findCount(N):\n    ans = (expo(26, N) - expo(5, N) - expo(21, N)) % mod\n    ans += mod\n    ans %= mod\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    print(int(findCount(N)))\n"}
{"text": "Minimum characters to be deleted from the beginning of two strings to make them equal ", "java": "import java.util.*;\n\nclass GFG {\n  static int minDel(String s1, String s2) {\n    int i = s1.length();\n    int j = s2.length();\n    while (i > 0 && j > 0) {\n      if (s1.charAt(i - 1) != s2.charAt(j - 1)) {\n        break;\n      }\n      i--;\n      j--;\n    }\n    return i + j;\n  }\n\n  public static void main(String args[]) {\n    String s1 = \" geeksforgeeks \", s2 = \" peeks \";\n    System.out.print(minDel(s1, s2));\n  }\n}\n", "python": "def minDel(s1, s2):\n    i = len(s1)\n    j = len(s2)\n    while i > 0 and j > 0:\n        if s1[i - 1] != s2[j - 1]:\n            break\n        i -= 1\n        j -= 1\n    return i + j\n\n\nif __name__ == \" _ _ main _ _ \":\n    s1 = \" geeksforgeeks \"\n    s2 = \" peeks \"\n    print(minDel(s1, s2))\n"}
{"text": "Minimum characters to be deleted from the end to make given two strings equal ", "java": "class GFG {\n  static int minDel(String s1, String s2) {\n    int i = 0;\n    while (i < Math.min(s1.length(), s2.length())) {\n      if (s1.charAt(i) != s2.charAt(i)) {\n        break;\n      }\n      i++;\n    }\n    int ans = ((s1.length() - i) + (s2.length() - i));\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    String s1 = \" geeks \";\n    String s2 = \" geeksfor \";\n    System.out.println(minDel(s1, s2));\n  }\n}\n", "python": "def minDel(s1, s2):\n    i = 0\n    while i < min(len(s1), len(s2)):\n        if s1[i] != s2[i]:\n            break\n        i += 1\n    ans = (len(s1) - i) + (len(s2) - i)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    s1 = \" geeks \"\n    s2 = \" geeksfor \"\n    print(minDel(s1, s2))\n"}
{"text": "Check if a number ends with another number or not ", "java": "class GFG {\n  public static boolean checkSuffix(int A, int B) {\n    String s1 = String.valueOf(A);\n    String s2 = String.valueOf(B);\n    int n1 = s1.length();\n    int n2 = s2.length();\n    if (n1 < n2) {\n      return false;\n    }\n    for (int i = 0; i < n2; i++) {\n      if (s1.charAt(n1 - i - 1) != s2.charAt(n2 - i - 1)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int A = 12345, B = 45;\n    boolean result = checkSuffix(A, B);\n    if (result) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef checkSuffix(A, B):\n    digit_B = int(math.log10(B)) + 1\n    A -= B\n    return A % int(math.pow(10, digit_B))\n\n\nA = 12345\nB = 45\nresult = checkSuffix(A, B)\nif result == 0:\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Check if a number ends with another number or not ", "java": "import java.util.*;\n\nclass GFG {\n  static void checkSuffix(int A, int B) {\n    String s1 = String.valueOf(A);\n    String s2 = String.valueOf(B);\n    boolean result;\n    result = s1.endsWith(s2);\n    if (result) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n\n  public static void main(String[] args) {\n    int A = 12345, B = 45;\n    checkSuffix(A, B);\n  }\n}\n", "python": "import math\n\n\ndef checkSuffix(A, B):\n    digit_B = int(math.log10(B)) + 1\n    A -= B\n    return A % int(math.pow(10, digit_B))\n\n\nA = 12345\nB = 45\nresult = checkSuffix(A, B)\nif result == 0:\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Perfect Cube String ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isPerfectCubeString(String str) {\n    int sum = 0;\n    for (int i = 0; i < str.length(); i++) sum += (int) str.charAt(i);\n    double cr = Math.round(Math.cbrt(sum));\n    return (cr * cr * cr == sum);\n  }\n\n  public static void main(String[] args) {\n    String str = \" ll \";\n    if (isPerfectCubeString(str)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "from math import ceil\n\n\ndef isPerfectCubeString(str1):\n    sum = 0\n    for i in range(len(str1)):\n        sum += ord(str1[i])\n    cr = ceil((sum) ** (1 / 3))\n    return cr * cr * cr == sum\n\n\nstr1 = \" ll \"\nif isPerfectCubeString(str1):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Number of sub ", "java": "class GFG {\n  static int countSubStr(String str, int len) {\n    int ans = 0;\n    for (int i = 0; i < len; i++) {\n      if (str.charAt(i) == '0') ans += (i + 1);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    String str = \"10010\";\n    int len = str.length();\n    System.out.println(countSubStr(str, len));\n  }\n}\n", "python": "import numpy as np\n\nN = 10000\n\n\ndef count_required_sequence(n, arr):\n    total_required_subsequence = 0\n    total_n_required_subsequence = 0\n    dp = np.zeros((N, 2))\n    for i in range(n):\n        turn_required = 0\n        for j in range(-1, 2, 1):\n            turn_required += dp[arr[i] + j][0]\n        required_end_i = total_required_subsequence + turn_required\n        n_required_end_i = 1 + total_n_required_subsequence - turn_required\n        total_required_subsequence += required_end_i\n        total_n_required_subsequence += n_required_end_i\n        dp[arr[i]][1] += required_end_i\n        dp[arr[i]][0] += n_required_end_i\n    return total_required_subsequence\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 6, 2, 1, 9]\n    n = len(arr)\n    print(count_required_sequence(n, arr))\n"}
{"text": "Check the divisibility of Hexadecimal numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static char[] CHARS = \"0123456789ABCDEF \".toCharArray();\n  static int DIGITS = 16;\n\n  static boolean isDivisible(String s, int m) {\n    Map<Character, Integer> mp = new HashMap<>();\n    for (int i = 0; i < DIGITS; i++) {\n      mp.put(CHARS[i], i);\n    }\n    int r = 0;\n    for (int i = 0; i < s.length(); i++) {\n      r = (r * 16 + mp.get(s.charAt(i))) % m;\n    }\n    if (r == 0) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    String s = \"10\";\n    int m = 3;\n    if (isDivisible(s, m)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "CHARS = \"0123456789ABCDEF \"\nDIGITS = 16\n\n\ndef isDivisible(s, m):\n    mp = dict.fromkeys(CHARS, 0)\n    for i in range(DIGITS):\n        mp[CHARS[i]] = i\n    r = 0\n    for i in range(len(s)):\n        r = (r * 16 + mp[s[i]]) % m\n    if not r:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \"10\"\n    m = 3\n    if isDivisible(s, m):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Maximum number of splits of a binary number ", "java": "class GFG {\n  static int cntSplits(String s) {\n    if (s.charAt(s.length() - 1) == '1') return -1;\n    int ans = 0;\n    for (int i = 0; i < s.length(); i++) ans += (s.charAt(i) == '0') ? 1 : 0;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    String s = \"10010\";\n    System.out.println(cntSplits(s));\n  }\n}\n", "python": "def cntSplits(s):\n    if s[len(s) - 1] == \"1\":\n        return -1\n    ans = 0\n    for i in range(len(s)):\n        ans += s[i] == \"0\"\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \"10010\"\n    print(cntSplits(s))\n"}
{"text": "Modify the string such that every character gets replaced with the next character in the keyboard ", "java": "import java.util.*;\n\nclass GFG {\n  static String CHARS = \" qwertyuiopasdfghjklzxcvbnm \";\n  static int MAX = 26;\n\n  static String getString(char[] str, int n) {\n    Map<Character, Character> uMap = new HashMap<>();\n    for (int i = 0; i < MAX; i++) {\n      uMap.put(CHARS.charAt(i), CHARS.charAt((i + 1) % MAX));\n    }\n    for (int i = 0; i < n; i++) {\n      str[i] = uMap.get(str[i]);\n    }\n    return String.valueOf(str);\n  }\n\n  public static void main(String[] args) {\n    String str = \" geeks \";\n    int n = str.length();\n    System.out.println(getString(str.toCharArray(), n));\n  }\n}\n", "python": "CHARS = \" qwertyuiopasdfghjklzxcvbnm \"\nMAX = 26\n\n\ndef getString(string, n):\n    string = list(string)\n    uMap = {}\n    for i in range(MAX):\n        uMap[CHARS[i]] = CHARS[(i + 1) % MAX]\n    for i in range(n):\n        string[i] = uMap[string[i]]\n    return \" \".join(string)\n\n\nif __name__ == \" _ _ main _ _ \":\n    string = \" geeks \"\n    n = len(string)\n    print(getString(string, n))\n"}
{"text": "Count of matchsticks required to represent the given number ", "java": "import java.util.*;\n\nclass GFG {\n  static int sticks[] = {6, 2, 5, 5, 4, 5, 6, 3, 7, 6};\n\n  static int countSticks(String str, int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n      cnt += (sticks[str.charAt(i) - '0']);\n    }\n    return cnt;\n  }\n\n  public static void main(String[] args) {\n    String str = \"56\";\n    int n = str.length();\n    System.out.println(countSticks(str, n));\n  }\n}\n", "python": "sticks = [6, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n\n\ndef countSticks(string, n):\n    cnt = 0\n    for i in range(n):\n        cnt += sticks[ord(string[i]) - ord(\"0\")]\n    return cnt\n\n\nif __name__ == \" _ _ main _ _ \":\n    string = \"56\"\n    n = len(string)\n    print(countSticks(string, n))\n"}
{"text": "Modulo of a large Binary String ", "java": "import java.util.*;\n\nclass GFG {\n  static int getMod(String str, int n, int k) {\n    int pwrTwo[] = new int[n];\n    pwrTwo[0] = 1 % k;\n    for (int i = 1; i < n; i++) {\n      pwrTwo[i] = pwrTwo[i - 1] * (2 % k);\n      pwrTwo[i] %= k;\n    }\n    int res = 0;\n    int i = 0, j = n - 1;\n    while (i < n) {\n      if (str.charAt(j) == '1') {\n        res += (pwrTwo[i]);\n        res %= k;\n      }\n      i++;\n      j--;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    String str = \"1101\";\n    int n = str.length();\n    int k = 45;\n    System.out.print(getMod(str, n, k));\n  }\n}\n", "python": "def getMod(_str, n, k):\n    pwrTwo = [0] * n\n    pwrTwo[0] = 1 % k\n    for i in range(1, n):\n        pwrTwo[i] = pwrTwo[i - 1] * (2 % k)\n        pwrTwo[i] %= k\n    res = 0\n    i = 0\n    j = n - 1\n    while i < n:\n        if _str[j] == \"1\":\n            res += pwrTwo[i]\n            res %= k\n        i += 1\n        j -= 1\n    return res\n\n\n_str = \"1101\"\nn = len(_str)\nk = 45\nprint(getMod(_str, n, k))\n"}
{"text": "Count number of binary strings such that there is no substring of length greater than or equal to 3 with all 1 's ", "java": "class GFG {\n  static final int MOD = 1000000007;\n\n  static long countStrings(int N) {\n    int i, j;\n    int dp[][] = new int[N + 1][3];\n    for (i = 0; i < N + 1; i++) {\n      for (j = 9; j < 3; j++) {\n        dp[i][j] = 0;\n      }\n    }\n    dp[1][0] = 1;\n    dp[1][1] = 1;\n    dp[1][2] = 0;\n    for (i = 2; i <= N; i++) {\n      dp[i][0] = (dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2]) % MOD;\n      dp[i][1] = dp[i - 1][0] % MOD;\n      dp[i][2] = dp[i - 1][1] % MOD;\n    }\n    int ans = (dp[N][0] + dp[N][1] + dp[N][2]) % MOD;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    System.out.println(countStrings(N));\n  }\n}\n", "python": "MOD = 1000000007\n\n\ndef countStrings(N):\n    dp = [[0] * 3 for i in range(N + 1)]\n    dp[1][0] = 1\n    dp[1][1] = 1\n    dp[1][2] = 0\n    for i in range(2, N + 1):\n        dp[i][0] = (dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2]) % MOD\n        dp[i][1] = dp[i - 1][0] % MOD\n        dp[i][2] = dp[i - 1][1] % MOD\n    ans = (dp[N][0] + dp[N][1] + dp[N][2]) % MOD\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    print(countStrings(N))\n"}
{"text": "Generate all possible strings such that char at index i is either str1 [ i ] or str2 [ i ] ", "java": "class GFG {\n  public static void generateStr(String a, String b, String s, int count, int len) {\n    if (count == len) {\n      System.out.println(s);\n      return;\n    }\n    generateStr(a.substring(1), b.substring(1), s + a.charAt(0), count + 1, len);\n    generateStr(a.substring(1), b.substring(1), s + b.charAt(0), count + 1, len);\n  }\n\n  public static void main(String[] args) {\n    String a = \" abc \", b = \" def \";\n    int n = a.length();\n    generateStr(a, b, \" \", 0, n);\n  }\n}\n", "python": "def generateStr(a, b, s, count, len):\n    if count == len:\n        print(s)\n        return\n    generateStr(a[1:], b[1:], s + a[0], count + 1, len)\n    generateStr(a[1:], b[1:], s + b[0], count + 1, len)\n\n\na = \" abc \"\nb = \" def \"\nn = len(a)\ngenerateStr(a, b, \" \", 0, n)\n"}
{"text": "Count of substrings which contains a given character K times ", "java": "class GFG {\n  static int countSubString(String s, char c, int k) {\n    int leftCount = 0, rightCount = 0;\n    int left = 0, right = 0;\n    int freq = 0;\n    int result = 0, len = s.length();\n    while (s.charAt(left) != c && left < len) {\n      left++;\n      leftCount++;\n    }\n    right = left + 1;\n    while (freq != (k - 1) && (right - 1) < len) {\n      if (s.charAt(right) == c) {\n        freq++;\n      }\n      right++;\n    }\n    while (left < len && (right - 1) < len) {\n      while (s.charAt(left) != c && left < len) {\n        left++;\n        leftCount++;\n      }\n      while (right < len && s.charAt(right) != c) {\n        if (s.charAt(right) == c) {\n          freq++;\n        }\n        right++;\n        rightCount++;\n      }\n      result = result + (leftCount + 1) * (rightCount + 1);\n      freq = k - 1;\n      leftCount = 0;\n      rightCount = 0;\n      left++;\n      right++;\n    }\n    return result;\n  }\n\n  public static void main(String args[]) {\n    String s = \"3123231\";\n    char c = '3';\n    int k = 2;\n    System.out.println(countSubString(s, c, k));\n  }\n}\n", "python": "def countSubString(s, c, k):\n    leftCount = 0\n    rightCount = 0\n    left = 0\n    right = 0\n    freq = 0\n    result = 0\n    Len = len(s)\n    while s[left] != c and left < Len:\n        left += 1\n        leftCount += 1\n    right = left + 1\n    while freq != (k - 1) and (right - 1) < Len:\n        if s[right] == c:\n            freq += 1\n        right += 1\n    while left < Len and (right - 1) < Len:\n        while s[left] != c and left < Len:\n            left += 1\n            leftCount += 1\n        while right < Len and s[right] != c:\n            if s[right] == c:\n                freq += 1\n            right += 1\n            rightCount += 1\n        result = result + (leftCount + 1) * (rightCount + 1)\n        freq = k - 1\n        leftCount = 0\n        rightCount = 0\n        left += 1\n        right += 1\n    return result\n\n\ns = \"3123231\"\nc = \"3\"\nk = 2\nprint(countSubString(s, c, k))\n"}
{"text": "Find if it is possible to make a binary string which contanins given number of \"0\" , \"1\" , \"01\" and \"10\" as sub sequences ", "java": "class sol {\n  static boolean isPossible(int l, int m, int x, int y) {\n    if (l * m == x + y) return true;\n    return false;\n  }\n\n  public static void main(String args[]) {\n    int l = 3, m = 2, x = 4, y = 2;\n    if (isPossible(l, m, x, y)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def isPossible(l, m, x, y):\n    if l * m == x + y:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    l = 3\n    m = 2\n    x = 4\n    y = 2\n    if isPossible(l, m, x, y):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Check if a string contains two non overlapping sub ", "java": "class GFG {\n  static boolean isValid(String s) {\n    if ((s.indexOf(\" geek \") != -1) && (s.indexOf(\" keeg \", s.indexOf(\" geek \") + 4) != -1))\n      return true;\n    return false;\n  }\n\n  public static void main(String args[]) {\n    String s = \" geekeekeeg \";\n    if (isValid(s)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isValid(s):\n    p = \" \"\n    p = s.find(\" geek \")\n    if s.find(\" keeg \", p + 4):\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \" geekeekeeg \"\n    if isValid(s):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Distinct state codes that appear in a string as contiguous sub ", "java": "import java.util.*;\n\nclass GFG {\n  static int countDistinctCode(String str) {\n    Set<String> codes = new HashSet<>();\n    for (int i = 0; i < str.length() - 1; i++) codes.add(str.substring(i, i + 2));\n    return codes.size();\n  }\n\n  public static void main(String[] args) {\n    String str = \" UPUP \";\n    System.out.println(countDistinctCode(str));\n  }\n}\n", "python": "def countDistinctCode(string):\n    codes = set()\n    for i in range(0, len(string) - 1):\n        codes.add(string[i : i + 2])\n    return len(codes)\n\n\nif __name__ == \" _ _ main _ _ \":\n    string = \" UPUP \"\n    print(countDistinctCode(string))\n"}
{"text": "Check whether two strings are equivalent or not according to given condition ", "java": "class GfG {\n  static String leastLexiString(String s) {\n    if (s.length() == 1) return s;\n    String x = leastLexiString(s.substring(0, s.length() / 2));\n    String y = leastLexiString(s.substring(s.length() / 2));\n    return String.valueOf((x + y).compareTo(y + x));\n  }\n\n  static boolean areEquivalent(String a, String b) {\n    return !(leastLexiString(a).equals(leastLexiString(b)));\n  }\n\n  public static void main(String[] args) {\n    String a = \" aaba \";\n    String b = \" abaa \";\n    if (areEquivalent(a, b)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n    a = \" aabb \";\n    b = \" abab \";\n    if (areEquivalent(a, b)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def leastLexiString(s):\n    if len(s) & 1 != 0:\n        return s\n    x = leastLexiString(s[0 : int(len(s) / 2)])\n    y = leastLexiString(s[int(len(s) / 2) : len(s)])\n    return min(x + y, y + x)\n\n\ndef areEquivalent(a, b):\n    return leastLexiString(a) == leastLexiString(b)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = \" aaba \"\n    b = \" abaa \"\n    if areEquivalent(a, b):\n        print(\" YES \")\n    else:\n        print(\" NO \")\n    a = \" aabb \"\n    b = \" abab \"\n    if areEquivalent(a, b):\n        print(\" YES \")\n    else:\n        print(\" NO \")\n    DEDENT\n"}
{"text": "Minimum moves to reach from i to j in a cyclic string ", "java": "class GFG {\n  static int getSteps(String str, int i, int j, int n) {\n    int k = i + 1;\n    int steps = 0;\n    char ch = str.charAt(i);\n    while (k <= j) {\n      if (str.charAt(k) != ch) {\n        steps++;\n        ch = str.charAt(k);\n      }\n      k++;\n    }\n    return steps;\n  }\n\n  static int getMinSteps(String str, int i, int j, int n) {\n    if (j < i) {\n      int temp = i;\n      i = j;\n      j = temp;\n    }\n    int stepsToRight = getSteps(str, i, j, n);\n    int stepsToLeft = getSteps(str, 0, i, n) + getSteps(str, j, n - 1, n);\n    if (str.charAt(0) != str.charAt(n - 1)) stepsToLeft++;\n    return Math.min(stepsToLeft, stepsToRight);\n  }\n\n  public static void main(String[] args) {\n    String str = \" SSNSS \";\n    int n = str.length();\n    int i = 0, j = 3;\n    System.out.println(getMinSteps(str, i, j, n));\n  }\n}\n", "python": "def getSteps(str, i, j, n):\n    k = i + 1\n    steps = 0\n    ch = str[i]\n    while k <= j:\n        if str[k] != ch:\n            steps = steps + 1\n            ch = str[k]\n        k = k + 1\n    return steps\n\n\ndef getMinSteps(str, i, j, n):\n    if j < i:\n        temp = i\n        i = j\n        j = temp\n    stepsToRight = getSteps(str, i, j, n)\n    stepsToLeft = getSteps(str, 0, i, n) + getSteps(str, j, n - 1, n)\n    if str[0] != str[n - 1]:\n        stepsToLeft = stepsToLeft + 1\n    return min(stepsToLeft, stepsToRight)\n\n\nstr = \" SSNSS \"\nn = len(str)\ni = 0\nj = 3\nprint(getMinSteps(str, i, j, n))\n"}
{"text": "Count changes in Led Lights to display digits one by one ", "java": "import java.io.*;\n\nclass GFG {\n  static int countOnOff(String n) {\n    int Led[] = {6, 2, 5, 5, 4, 5, 6, 3, 7, 5};\n    int len = n.length();\n    int sum = Led[n.charAt(0) - '0'];\n    for (int i = 1; i < len; i++) {\n      sum = sum + Math.abs(Led[n.charAt(i) - '0'] - Led[n.charAt(i - 1) - '0']);\n    }\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    String n = \"082\";\n    System.out.println(countOnOff(n));\n  }\n}\n", "python": "def countOnOff(n):\n    Led = [6, 2, 5, 5, 4, 5, 6, 3, 7, 5]\n    leng = len(n)\n    sum = Led[int(n[0]) - int(\"0\")]\n    for i in range(1, leng):\n        sum = sum + abs(Led[int(n[i]) - int(\"0\")] - Led[int(n[i - 1]) - int(\"0\")])\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = \"082\"\n    print(countOnOff(n))\n"}
{"text": "Maximum Consecutive Zeroes in Concatenated Binary String ", "java": "class GFG {\n  static int max_length_substring(String st, int n, int k) {\n    int max_len = 0;\n    int len = 0;\n    for (int i = 0; i < n; ++i) {\n      if (st.charAt(i) == '0') len++;\n      else len = 0;\n      max_len = Math.max(max_len, len);\n    }\n    if (max_len == n) return n * k;\n    int pref = 0, suff = 0;\n    for (int i = 0; st.charAt(i) == '0'; ++i, ++pref)\n      ;\n    for (int i = n - 1; st.charAt(i) == '0'; --i, ++suff)\n      ;\n    if (k > 1) max_len = Math.max(max_len, pref + suff);\n    return max_len;\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    int k = 3;\n    String st = \"110010\";\n    int ans = max_length_substring(st, n, k);\n    System.out.println(ans);\n  }\n}\n", "python": "def max_length_substring(st, n, k):\n    max_len = 0\n    len = 0\n    for i in range(0, n):\n        if st[i] == \"0\":\n            len = len + 1\n        else:\n            len = 0\n        max_len = max(max_len, len)\n    if max_len == n:\n        return n * k\n    pref = 0\n    suff = 0\n    i = 0\n    while st[i] == \"0\":\n        i = i + 1\n        pref = pref + 1\n    i = n - 1\n    while st[i] == \"0\":\n        i = i - 1\n        suff = suff + 1\n    if k > 1:\n        max_len = max(max_len, pref + suff)\n    return max_len\n\n\nn = 6\nk = 3\nst = \"110010\"\nans = max_length_substring(st, n, k)\nprint(ans)\n"}
{"text": "Check if it is possible to create a palindrome string from given N ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static boolean isPalindrome(String s) {\n    String s1 = \" \";\n    int N = s.length();\n    for (int i = N - 1; i >= 0; i--) s1 += s.charAt(i);\n    if (s.equals(s1)) return true;\n    return false;\n  }\n\n  static boolean createString(int N) {\n    String str = \" \";\n    String s = \" \" + N;\n    String letters = \" abcdefghij \";\n    int sum = 0;\n    String substr = \" \";\n    for (int i = 0; i < s.length(); i++) {\n      int digit = s.charAt(i) - '0';\n      substr += letters.charAt(digit);\n      sum += digit;\n    }\n    while (str.length() <= sum) {\n      str += substr;\n    }\n    str = str.substring(0, sum);\n    return isPalindrome(str);\n  }\n\n  public static void main(String args[]) {\n    int N = 61;\n    boolean flag = createString(N);\n    if (flag) System.out.println(\" YES \");\n    else System.out.println(\" NO \");\n  }\n}\n", "python": "def isPalindrome(s):\n    s1 = \" \"\n    N = len(s)\n    i = N - 1\n    while i >= 0:\n        s1 += s[i]\n        i = i - 1\n    if s == s1:\n        return True\n    return False\n\n\ndef createString(N):\n    s2 = \" \"\n    s = str(N)\n    letters = \" abcdefghij \"\n    sum = 0\n    substr = \" \"\n    for i in range(0, len(s)):\n        digit = int(s[i])\n        substr += letters[digit]\n        sum += digit\n    while len(s2) <= sum:\n        s2 += substr\n    s2 = s2[:sum]\n    return isPalindrome(s2)\n\n\nN = 61\nflag = createString(N)\nif flag:\n    print(\" YES \")\nelse:\n    print(\" NO \")\n"}
{"text": "Program to find the product of ASCII values of characters in a string ", "java": "class GFG {\n  static long productAscii(String str) {\n    long prod = 1;\n    for (int i = 0; i < str.length(); i++) {\n      prod *= str.charAt(i);\n    }\n    return prod;\n  }\n\n  public static void main(String[] args) {\n    String str = \" GfG \";\n    System.out.println(productAscii(str));\n  }\n}\n", "python": "def productAscii(str):\n    prod = 1\n    for i in range(0, len(str)):\n        prod = prod * ord(str[i])\n    return prod\n\n\nif __name__ == \" _ _ main _ _ \":\n    str = \" GfG \"\n    print(productAscii(str))\n"}
{"text": "Remove duplicates from a string in O ( 1 ) extra space ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static char[] removeDuplicatesFromString(String string) {\n    int[] table = new int[256];\n    char[] chars = string.toCharArray();\n    int endIndex = 0;\n    for (int i = 0; i < chars.length; i++) {\n      if (table[chars[i]] == 0) {\n        table[chars[i]] = -1;\n        chars[endIndex++] = chars[i];\n      }\n    }\n    return Arrays.copyOfRange(chars, 0, endIndex);\n  }\n\n  public static void main(String[] args) {\n    String str = \" geeksforgeeks \";\n    System.out.println(removeDuplicatesFromString(str));\n  }\n}\n", "python": "def removeDuplicatesFromString(str2):\n    counter = 0\n    i = 0\n    size = len(str2)\n    str1 = list(str2)\n    x = 0\n    length = 0\n    while i < size:\n        x = ord(str1[i]) - 97\n        if (counter & (1 << x)) == 0:\n            str1[length] = chr(97 + x)\n            counter = counter | (1 << x)\n            length += 1\n        i += 1\n    str2 = \" \".join(str1)\n    return str2[0:length]\n\n\nstr1 = \" geeksforgeeks \"\nprint(removeDuplicatesFromString(str1))\n"}
{"text": "Average of ASCII values of characters of a given string ", "java": "import java.io.*;\n\nclass GFG {\n  public static int averageValue(String s) {\n    int sum_char = 0;\n    for (int i = 0; i < s.length(); i++) {\n      sum_char += (int) s.charAt(i);\n    }\n    return sum_char / s.length();\n  }\n\n  public static void main(String[] args) {\n    String s = \" GeeksforGeeks \";\n    System.out.println(averageValue(s));\n  }\n}\n", "python": "def averageValue(s):\n    sum_char = 0\n    for i in range(len(s)):\n        sum_char += ord(s[i])\n    return sum_char // len(s)\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \" GeeksforGeeks \"\n    print(averageValue(s))\n"}
{"text": "Number of Counterclockwise shifts to make a string palindrome ", "java": "class GFG {\n  static boolean isPalindrome(String str, int l, int r) {\n    while (l < r) {\n      if (str.charAt(l) != str.charAt(r)) return false;\n      l++;\n      r--;\n    }\n    return true;\n  }\n\n  static int CyclicShifts(String str) {\n    int n = str.length();\n    int left = 0;\n    int right = n - 1;\n    str = str + str;\n    int cnt = 0;\n    while (right < 2 * n - 1) {\n      if (isPalindrome(str, left, right)) break;\n      cnt++;\n      left++;\n      right++;\n    }\n    return cnt;\n  }\n\n  public static void main(String[] args) {\n    String str = \" bccbbaab \";\n    System.out.println(CyclicShifts(str));\n  }\n}\n", "python": "def isPalindrome(str, l, r):\n    while l < r:\n        if str[l] != str[r]:\n            return False\n        l += 1\n        r -= 1\n    return True\n\n\ndef CyclicShifts(str):\n    n = len(str)\n    left = 0\n    right = n - 1\n    str = str + str\n    cnt = 0\n    while right < 2 * n - 1:\n        if isPalindrome(str, left, right):\n            break\n        cnt += 1\n        left += 1\n        right += 1\n    return cnt\n\n\nif __name__ == \" _ _ main _ _ \":\n    str = \" bccbbaab \"\n    print(CyclicShifts(str))\n"}
{"text": "Longest Common Prefix Matching ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static String commonPrefixUtil(String str1, String str2) {\n    String result = \" \";\n    int n1 = str1.length(), n2 = str2.length();\n    for (int i = 0, j = 0; i <= n1 - 1 && j <= n2 - 1; i++, j++) {\n      if (str1.charAt(i) != str2.charAt(j)) {\n        break;\n      }\n      result += str1.charAt(i);\n    }\n    return (result);\n  }\n\n  static void commonPrefix(String arr[], int n) {\n    Arrays.sort(arr);\n    System.out.println(commonPrefixUtil(arr[0], arr[n - 1]));\n  }\n\n  public static void main(String[] args) {\n    String arr[] = {\" geeksforgeeks \", \" geeks \", \" geek \", \" geezer \"};\n    int n = arr.length;\n    commonPrefix(arr, n);\n  }\n}\n", "python": "def commonPrefixUtil(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    result = \" \"\n    j = 0\n    i = 0\n    while i <= n1 - 1 and j <= n2 - 1:\n        if str1[i] != str2[j]:\n            break\n        result += str1[i]\n        i += 1\n        j += 1\n    return result\n\n\ndef commonPrefix(arr, n):\n    arr.sort(reverse=False)\n    print(commonPrefixUtil(arr[0], arr[n - 1]))\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [\" geeksforgeeks \", \" geeks \", \" geek \", \" geezer \"]\n    n = len(arr)\n    commonPrefix(arr, n)\n"}
{"text": "Check if a binary string contains all permutations of length k ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static boolean hasAllcodes(String s, int k) {\n    Set<String> us = new HashSet<String>();\n    for (int i = 0; i + k <= s.length(); i++) {\n      us.add(s.substring(i, i + k));\n    }\n    return (us.size() == (1 << k));\n  }\n\n  public static void main(String[] args) {\n    String s = \"00110110\";\n    int k = 2;\n    if (hasAllcodes(s, k)) {\n      System.out.println(\" YES \");\n    } else {\n      System.out.println(\" NO \");\n    }\n  }\n}\n", "python": "def hasAllcodes(s, k):\n    us = set()\n    for i in range(len(s) + 1):\n        us.add(s[i:k])\n    return len(us) == 1 << k\n\n\ns = \"00110110\"\nk = 2\nif hasAllcodes:\n    print(\" YES \")\nelse:\n    print(\" NO \")\n"}
{"text": "Lexicographical Maximum substring of string ", "java": "class GFG {\n  static String LexicographicalMaxString(String str) {\n    String mx = \" \";\n    for (int i = 0; i < str.length(); ++i) {\n      if (mx.compareTo(str.substring(i)) <= 0) {\n        mx = str.substring(i);\n      }\n    }\n    return mx;\n  }\n\n  public static void main(String[] args) {\n    String str = \" ababaa \";\n    System.out.println(LexicographicalMaxString(str));\n  }\n}\n", "python": "def LexicographicalMaxString(str):\n    mx = \" \"\n    for i in range(len(str)):\n        mx = max(mx, str[i:])\n    return mx\n\n\nif __name__ == \" _ _ main _ _ \":\n    str = \" ababaa \"\n    print(LexicographicalMaxString(str))\n"}
{"text": "Removing elements between the two zeros ", "java": "import java.util.*;\n\npublic class GFG {\n  static String findstring(String s) {\n    int n = s.length();\n    for (int i = 1; i < n - 1; i++) {\n      if ((s.charAt(i - 1) == '0' && s.charAt(i + 1) == '0')) {\n        s = s.substring(0, i) + s.substring(i + 1);\n        i--;\n        if (i > 0 && s.charAt(i - 1) == '0') i--;\n        n = s.length();\n      }\n    }\n    return s;\n  }\n\n  public static void main(String[] args) {\n    String s = \"100100\";\n    System.out.println(findstring(s));\n  }\n}\n", "python": "def findstring(s):\n    n = len(s)\n    s = list(s)\n    i = 1\n    while i < n - 1:\n        if s[i - 1] == \"0\" and s[i + 1] == \"0\":\n            s.pop(i)\n            i -= 1\n            if i > 0 and s[i - 1] == \"0\":\n                i -= 1\n            n = len(s)\n        i += 1\n    return \" \".join(s)\n\n\nif __name__ == \" _ _ main _ _ \":\n    print(findstring(\"100100\"))\n"}
{"text": "Perfect Square String ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isPerfectSquareString(String str) {\n    int sum = 0;\n    int len = str.length();\n    for (int i = 0; i < len; i++) sum += (int) str.charAt(i);\n    long squareRoot = (long) Math.sqrt(sum);\n    return ((squareRoot - Math.floor(squareRoot)) == 0);\n  }\n\n  public static void main(String[] args) {\n    String str = \" d \";\n    if (isPerfectSquareString(str)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "import math\n\n\ndef isPerfectSquareString(str):\n    sum = 0\n    l = len(str)\n    for i in range(l):\n        sum = sum + ord(str[i])\n    squareRoot = math.sqrt(sum)\n    return (squareRoot - math.floor(squareRoot)) == 0\n\n\nstr = \" d \"\nif isPerfectSquareString(str):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Number of strings of length N with no palindromic sub string ", "java": "import java.io.*;\n\nclass GFG {\n  static int numofstring(int n, int m) {\n    if (n == 1) return m;\n    if (n == 2) return m * (m - 1);\n    return m * (m - 1) * (int) Math.pow(m - 2, n - 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 2, m = 3;\n    System.out.println(numofstring(n, m));\n  }\n}\n", "python": "def numofstring(n, m):\n    if n == 1:\n        return m\n    if n == 2:\n        return m * (m - 1)\n    return m * (m - 1) * pow(m - 2, n - 2)\n\n\nn = 2\nm = 3\nprint(numofstring(n, m))\n"}
{"text": "Find if a string starts and ends with another given string ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isCornerPresent(String str, String corner) {\n    int n = str.length();\n    int cl = corner.length();\n    if (n < cl) return false;\n    return (str.substring(0, cl).equals(corner) && str.substring(n - cl, n).equals(corner));\n  }\n\n  public static void main(String[] args) {\n    String str = \" geeksforgeeks \";\n    String corner = \" geeks \";\n    if (isCornerPresent(str, corner)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isCornerPresent(str, corner):\n    n = len(str)\n    cl = len(corner)\n    if n < cl:\n        return False\n    return (str[:cl] == corner) and (str[n - cl :] == corner)\n\n\nstr = \" geeksforgeeks \"\ncorner = \" geeks \"\nif isCornerPresent(str, corner):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Maximum segment value after putting k breakpoints in a number ", "java": "class GFG {\n  static int findMaxSegment(String s, int k) {\n    int seg_len = s.length() - k;\n    int res = 0;\n    for (int i = 0; i < seg_len; i++) res = res * 10 + (s.charAt(i) - '0');\n    int seg_len_pow = (int) Math.pow(10, seg_len - 1);\n    int curr_val = res;\n    for (int i = 1; i <= (s.length() - seg_len); i++) {\n      curr_val = curr_val - (s.charAt(i - 1) - '0') * seg_len_pow;\n      curr_val = curr_val * 10 + (s.charAt(i + seg_len - 1) - '0');\n      res = Math.max(res, curr_val);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    String s = \"8754\";\n    int k = 2;\n    System.out.print(\" Maximum \u2581 number \u2581 = \u2581 \" + findMaxSegment(s, k));\n  }\n}\n", "python": "def findMaxSegment(s, k):\n    seg_len = len(s) - k\n    res = 0\n    for i in range(seg_len):\n        res = res * 10 + (ord(s[i]) - ord(\"0\"))\n    seg_len_pow = pow(10, seg_len - 1)\n    curr_val = res\n    for i in range(1, len(s) - seg_len):\n        curr_val = curr_val - (ord(s[i - 1]) - ord(\"0\")) * seg_len_pow\n        curr_val = curr_val * 10 + (ord(s[i + seg_len - 1]) - ord(\"0\"))\n        res = max(res, curr_val)\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \"8754\"\n    k = 2\n    print(\" Maximum \u2581 number \u2581 = \u2581 \", findMaxSegment(s, k))\n"}
{"text": "Create a new string by alternately combining the characters of two halves of the string in reverse ", "java": "import java.io.*;\n\nclass GFG {\n  public static void solve(String s) {\n    int l = s.length();\n    int x = l / 2;\n    int y = l;\n    String p = \" \";\n    while (x > 0 && y > l / 2) {\n      char ch = s.charAt(x - 1);\n      p += ch;\n      x--;\n      ch = s.charAt(y - 1);\n      p += ch;\n      y--;\n    }\n    if (y > l / 2) {\n      char ch = s.charAt(x - 1);\n      p += ch;\n      y--;\n    }\n    System.out.println(p);\n  }\n\n  public static void main(String args[]) {\n    String s = \" sunshine \";\n    solve(s);\n  }\n}\n", "python": "def solve(s):\n    l = len(s)\n    x = l // 2\n    y = l\n    p = \" \"\n    while x > 0 and y > l / 2:\n        p = p + s[x - 1]\n        x = x - 1\n        p = p + s[y - 1]\n        y = y - 1\n    if y > l // 2:\n        p = p + s[y - 1]\n        y = y - 1\n    print(p)\n\n\ns = \" sunshine \"\nsolve(s)\n"}
{"text": "Count number of equal pairs in a string ", "java": "import java.io.*;\n\nclass GFG {\n  static int MAX = 256;\n\n  static int countPairs(String s) {\n    int cnt[] = new int[MAX];\n    for (int i = 0; i < s.length(); i++) cnt[s.charAt(i)]++;\n    int ans = 0;\n    for (int i = 0; i < MAX; i++) ans += cnt[i] * cnt[i];\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    String s = \" geeksforgeeks \";\n    System.out.println(countPairs(s));\n  }\n}\n", "python": "MAX = 256\n\n\ndef countPairs(s):\n    cnt = [0 for i in range(0, MAX)]\n    for i in range(len(s)):\n        cnt[ord(s[i]) - 97] += 1\n    ans = 0\n    for i in range(0, MAX):\n        ans += cnt[i] * cnt[i]\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \" geeksforgeeks \"\n    print(countPairs(s))\n"}
{"text": "Find the size of largest subset of anagram words ", "java": "import java.util.*;\n\nclass GFG {\n  static int largestAnagramSet(String arr[], int n) {\n    int maxSize = 0;\n    HashMap<String, Integer> count = new HashMap<>();\n    for (int i = 0; i < n; ++i) {\n      char temp[] = arr[i].toCharArray();\n      Arrays.sort(temp);\n      arr[i] = new String(temp);\n      if (count.containsKey(arr[i])) {\n        count.put(arr[i], count.get(arr[i]) + 1);\n      } else {\n        count.put(arr[i], 1);\n      }\n      maxSize = Math.max(maxSize, count.get(arr[i]));\n    }\n    return maxSize;\n  }\n\n  public static void main(String[] args) {\n    String arr[] = {\" ant \", \" magenta \", \" magnate \", \" tan \", \" gnamate \"};\n    int n = arr.length;\n    System.out.println(largestAnagramSet(arr, n));\n    String arr1[] = {\" cars \", \" bikes \", \" arcs \", \" steer \"};\n    n = arr1.length;\n    System.out.println(largestAnagramSet(arr1, n));\n  }\n}\n", "python": "def largestAnagramSet(arr, n):\n    maxSize = 0\n    count = {}\n    for i in range(n):\n        arr[i] = \" \".join(sorted(arr[i]))\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n        maxSize = max(maxSize, count[arr[i]])\n    return maxSize\n\n\narr = [\" ant \", \" magenta \", \" magnate \", \" tan \", \" gnamate \"]\nn = len(arr)\nprint(largestAnagramSet(arr, n))\narr1 = [\" cars \", \" bikes \", \" arcs \", \" steer \"]\nn = len(arr1)\nprint(largestAnagramSet(arr1, n))\n"}
{"text": "Fibonacci Word ", "java": "import java.util.*;\n\nclass Eulerian {\n  public static String fibWord(int n) {\n    String Sn_1 = \"0\";\n    String Sn = \"01\";\n    String tmp;\n    for (int i = 2; i <= n; i++) {\n      tmp = Sn;\n      Sn += Sn_1;\n      Sn_1 = tmp;\n    }\n    return Sn;\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    System.out.print(fibWord(n));\n  }\n}\n", "python": "def fibWord(n):\n    Sn_1 = \"0\"\n    Sn = \"01\"\n    tmp = \" \"\n    for i in range(2, n + 1):\n        tmp = Sn\n        Sn += Sn_1\n        Sn_1 = tmp\n    return Sn\n\n\nn = 6\nprint(fibWord(n))\n"}
{"text": "Change string to a new character set ", "java": "class GFG {\n  static char[] alphabets = \" abcdefghijklmnopqrstuvwxyz \".toCharArray();\n\n  static String conversion(String charSet, char[] str1) {\n    String s2 = \" \";\n    for (char i : str1) s2 += alphabets[charSet.indexOf(i)];\n    return s2;\n  }\n\n  public static void main(String[] args) {\n    String charSet = \" qwertyuiopasdfghjklzxcvbnm \";\n    String str1 = \" egrt \";\n    System.out.print(conversion(charSet, str1.toCharArray()));\n  }\n}\n", "python": "def conversion(charSet, str1):\n    s2 = \" \"\n    for i in str1:\n        s2 += alphabets[charSet.index(i)]\n    return s2\n\n\nif __name__ == \" _ _ main _ _ \":\n    alphabets = \" abcdefghijklmnopqrstuvwxyz \"\n    charSet = \" qwertyuiopasdfghjklzxcvbnm \"\n    str1 = \" egrt \"\n    print(conversion(charSet, str1))\n"}
{"text": "Program to find remainder when large number is divided by 11 ", "java": "import java.io.*;\n\nclass GFG {\n  static int remainder(String str) {\n    int len = str.length();\n    int num, rem = 0;\n    for (int i = 0; i < len; i++) {\n      num = rem * 10 + (str.charAt(i) - '0');\n      rem = num % 11;\n    }\n    return rem;\n  }\n\n  public static void main(String args[]) {\n    String str = \"3435346456547566345436457867978\";\n    System.out.println(remainder(str));\n  }\n}\n", "python": "def remainder(st):\n    ln = len(st)\n    rem = 0\n    for i in range(0, ln):\n        num = rem * 10 + (int)(st[i])\n        rem = num % 11\n    return rem\n\n\nst = \"3435346456547566345436457867978\"\nprint(remainder(st))\n"}
{"text": "Generate permutations with only adjacent swaps allowed ", "java": "class GFG {\n  static void findPermutations(char str[], int index, int n) {\n    if (index >= n || (index + 1) >= n) {\n      System.out.println(str);\n      return;\n    }\n    findPermutations(str, index + 1, n);\n    swap(str, index);\n    findPermutations(str, index + 2, n);\n    swap(str, index);\n  }\n\n  static void swap(char arr[], int index) {\n    char temp = arr[index];\n    arr[index] = arr[index + 1];\n    arr[index + 1] = temp;\n  }\n\n  public static void main(String[] args) {\n    char str[] = \"12345\".toCharArray();\n    int n = str.length;\n    findPermutations(str, 0, n);\n  }\n}\n", "python": "def findPermutations(string, index, n):\n    if index >= n or (index + 1) >= n:\n        print(\" \".join(string))\n        return\n    findPermutations(string, index + 1, n)\n    string[index], string[index + 1] = string[index + 1], string[index]\n    findPermutations(string, index + 2, n)\n    string[index], string[index + 1] = string[index + 1], string[index]\n\n\nif __name__ == \" _ _ main _ _ \":\n    string = list(\"12345\")\n    n = len(string)\n    findPermutations(string, 0, n)\n"}
{"text": "Check if an encoding represents a unique binary string ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isUnique(int[] a, int n, int k) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum += a[i];\n    sum += n - 1;\n    return (sum == k);\n  }\n\n  public static void main(String[] args) {\n    int[] a = {3, 3, 3};\n    int n = a.length;\n    int k = 12;\n    if (isUnique(a, n, k)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isUnique(a, n, k):\n    sum = 0\n    for i in range(0, n, 1):\n        sum += a[i]\n    sum += n - 1\n    return sum == k\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [3, 3, 3]\n    n = len(a)\n    k = 12\n    if isUnique(a, n, k):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Count of substrings of a binary string containing K ones ", "java": "import java.io.*;\n\npublic class GFG {\n  static int countOfSubstringWithKOnes(String s, int K) {\n    int N = s.length();\n    int res = 0;\n    int countOfOne = 0;\n    int[] freq = new int[N + 1];\n    freq[0] = 1;\n    for (int i = 0; i < N; i++) {\n      countOfOne += (s.charAt(i) - '0');\n      if (countOfOne >= K) {\n        res += freq[countOfOne - K];\n      }\n      freq[countOfOne]++;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    String s = \"10010\";\n    int K = 1;\n    System.out.println(countOfSubstringWithKOnes(s, K));\n  }\n}\n", "python": "def countOfSubstringWithKOnes(s, K):\n    N = len(s)\n    res = 0\n    countOfOne = 0\n    freq = [0 for i in range(N + 1)]\n    freq[0] = 1\n    for i in range(0, N, 1):\n        countOfOne += ord(s[i]) - ord(\"0\")\n        if countOfOne >= K:\n            res += freq[countOfOne - K]\n        freq[countOfOne] += 1\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \"10010\"\n    K = 1\n    print(countOfSubstringWithKOnes(s, K))\n"}
{"text": "Make a string from another by deletion and rearrangement of characters ", "java": "class StringfromCharacters {\n  static final int MAX_CHAR = 256;\n\n  static boolean isPossible(String s1, String s2) {\n    int count[] = new int[MAX_CHAR];\n    for (int i = 0; i < s2.length(); i++) count[(int) s2.charAt(i)]++;\n    for (int i = 0; i < s1.length(); i++) {\n      if (count[(int) s1.charAt(i)] == 0) return false;\n      count[(int) s1.charAt(i)]--;\n    }\n    return true;\n  }\n\n  public static void main(String args[]) {\n    String s1 = \" GeeksforGeeks \", s2 = \" rteksfoGrdsskGeggehes \";\n    if (isPossible(s1, s2)) System.out.println(\" Possible \");\n    else System.out.println(\" Not \u2581 Possible \");\n  }\n}\n", "python": "MAX_CHAR = 256\n\n\ndef isPossible(s1, s2):\n    count = [0] * MAX_CHAR\n    for i in range(len(s2)):\n        count[ord(s2[i])] += 1\n    for i in range(len(s1)):\n        if count[ord(s1[i])] == 0:\n            return False\n        count[ord(s1[i])] -= 1\n    return True\n\n\nif __name__ == \" _ _ main _ _ \":\n    s1 = \" GeeksforGeeks \"\n    s2 = \" rteksfoGrdsskGeggehes \"\n    if isPossible(s1, s2):\n        print(\" Possible \")\n    else:\n        print(\" Not \u2581 Possible \")\n    DEDENT\n"}
{"text": "Recursive solution to count substrings with same first and last characters ", "java": "class GFG {\n  static int countSubstrs(String str, int i, int j, int n) {\n    if (n == 1) return 1;\n    if (n <= 0) return 0;\n    int res =\n        countSubstrs(str, i + 1, j, n - 1)\n            + countSubstrs(str, i, j - 1, n - 1)\n            - countSubstrs(str, i + 1, j - 1, n - 2);\n    if (str.charAt(i) == str.charAt(j)) res++;\n    return res;\n  }\n\n  public static void main(String[] args) {\n    String str = \" abcab \";\n    int n = str.length();\n    System.out.print(countSubstrs(str, 0, n - 1, n));\n  }\n}\n", "python": "def countSubstrs(str, i, j, n):\n    if n == 1:\n        return 1\n    if n <= 0:\n        return 0\n    res = (\n        countSubstrs(str, i + 1, j, n - 1)\n        + countSubstrs(str, i, j - 1, n - 1)\n        - countSubstrs(str, i + 1, j - 1, n - 2)\n    )\n    if str[i] == str[j]:\n        res += 1\n    return res\n\n\nstr = \" abcab \"\nn = len(str)\nprint(countSubstrs(str, 0, n - 1, n))\n"}
{"text": "To check divisibility of any large number by 999 ", "java": "class Test {\n  static boolean isDivisible999(String num) {\n    int n = num.length();\n    if (n == 0 && num.charAt(0) == '0') return true;\n    if (n % 3 == 1) num = \"00\" + num;\n    if (n % 3 == 2) num = \"0\" + num;\n    int gSum = 0;\n    for (int i = 0; i < n; i++) {\n      int group = 0;\n      group += (num.charAt(i++) - '0') * 100;\n      group += (num.charAt(i++) - '0') * 10;\n      group += num.charAt(i) - '0';\n      gSum += group;\n    }\n    if (gSum > 1000) {\n      num = Integer.toString(gSum);\n      n = num.length();\n      gSum = isDivisible999(num) ? 1 : 0;\n    }\n    return (gSum == 999);\n  }\n\n  public static void main(String args[]) {\n    String num = \"1998\";\n    System.out.println(isDivisible999(num) ? \" Divisible \" : \" Not \u2581 divisible \");\n  }\n}\n", "python": "def isDivisible999(num):\n    n = len(num)\n    if n == 0 or num[0] == \"0\":\n        return true\n    if (n % 3) == 1:\n        num = \"00\" + num\n    if (n % 3) == 2:\n        num = \"0\" + num\n    gSum = 0\n    for i in range(0, n, 3):\n        group = 0\n        group += (ord(num[i]) - 48) * 100\n        group += (ord(num[i + 1]) - 48) * 10\n        group += ord(num[i + 2]) - 48\n        gSum += group\n    if gSum > 1000:\n        num = str(gSum)\n        n = len(num)\n        gSum = isDivisible999(num)\n    return gSum == 999\n\n\nif __name__ == \" _ _ main _ _ \":\n    num = \"1998\"\n    n = len(num)\n    if isDivisible999(num):\n        print(\" Divisible \")\n    else:\n        print(\" Not \u2581 divisible \")\n    DEDENT\n"}
{"text": "URLify a given string ( Replace spaces is % 20 ) ", "java": "class GFG {\n  public static void main(String[] args) {\n    String str = \" Mr \u2581 John \u2581 Smith \u2581 \";\n    str = str.trim();\n    str = str.replaceAll(\" \\\\ s \", \" % 20\");\n    System.out.println(str);\n  }\n}\n", "python": "s = \" Mr \u2581 John \u2581 Smith \u2581 \"\ns = s.strip()\ns = s.replace(\" \u2581 \", \" % 20\")\nprint(s)\n"}
{"text": "Toggle case of a string using Bitwise Operators ", "java": "public class Test {\n  static int x = 32;\n\n  static String toggleCase(char[] a) {\n    for (int i = 0; i < a.length; i++) {\n      a[i] ^= 32;\n    }\n    return new String(a);\n  }\n\n  public static void main(String[] args) {\n    String str = \" CheRrY \";\n    System.out.print(\" Toggle \u2581 case : \u2581 \");\n    str = toggleCase(str.toCharArray());\n    System.out.println(str);\n    System.out.print(\" Original \u2581 string : \u2581 \");\n    str = toggleCase(str.toCharArray());\n    System.out.println(str);\n  }\n}\n", "python": "x = 32\n\n\ndef toggleCase(a):\n    for i in range(len(a)):\n        a = a[:i] + chr(ord(a[i]) ^ 32) + a[i + 1 :]\n    return a\n\n\nstr = \" CheRrY \"\nprint(\" Toggle \u2581 case : \u2581 \", end=\" \")\nstr = toggleCase(str)\nprint(str)\nprint(\" Original \u2581 string : \u2581 \", end=\" \")\nstr = toggleCase(str)\nprint(str)\n"}
{"text": "Reverse string without using any temporary variable ", "java": "import java.util.*;\n\nclass GFG {\n  static String reversingString(char[] str, int start, int end) {\n    while (start < end) {\n      str[start] ^= str[end];\n      str[end] ^= str[start];\n      str[start] ^= str[end];\n      ++start;\n      --end;\n    }\n    return String.valueOf(str);\n  }\n\n  public static void main(String[] args) {\n    String s = \" GeeksforGeeks \";\n    System.out.println(reversingString(s.toCharArray(), 0, 12));\n  }\n}\n", "python": "str = \" geeksforgeeks \"\nstr = \" \".join(reversed(str))\nprint(str)\n"}
{"text": "Count substrings with same first and last characters ", "java": "public class GFG {\n  static boolean checkEquality(String s) {\n    return (s.charAt(0) == s.charAt(s.length() - 1));\n  }\n\n  static int countSubstringWithEqualEnds(String s) {\n    int result = 0;\n    int n = s.length();\n    for (int i = 0; i < n; i++)\n      for (int len = 1; len <= n - i; len++) if (checkEquality(s.substring(i, i + len))) result++;\n    return result;\n  }\n\n  public static void main(String args[]) {\n    String s = \" abcab \";\n    System.out.println(countSubstringWithEqualEnds(s));\n  }\n}\n", "python": "MAX_CHAR = 26\n\n\ndef countSubstringWithEqualEnds(s):\n    result = 0\n    n = len(s)\n    count = [0] * MAX_CHAR\n    for i in range(n):\n        count[ord(s[i]) - ord(\" a \")] += 1\n    for i in range(MAX_CHAR):\n        result += count[i] * (count[i] + 1) / 2\n    return result\n\n\ns = \" abcab \"\nprint(countSubstringWithEqualEnds(s))\n"}
{"text": "Count substrings with same first and last characters ", "java": "public class GFG {\n  static int countSubstringWithEqualEnds(String s) {\n    int result = 0;\n    int n = s.length();\n    for (int i = 0; i < n; i++)\n      for (int j = i; j < n; j++) if (s.charAt(i) == s.charAt(j)) result++;\n    return result;\n  }\n\n  public static void main(String args[]) {\n    String s = \" abcab \";\n    System.out.println(countSubstringWithEqualEnds(s));\n  }\n}\n", "python": "MAX_CHAR = 26\n\n\ndef countSubstringWithEqualEnds(s):\n    result = 0\n    n = len(s)\n    count = [0] * MAX_CHAR\n    for i in range(n):\n        count[ord(s[i]) - ord(\" a \")] += 1\n    for i in range(MAX_CHAR):\n        result += count[i] * (count[i] + 1) / 2\n    return result\n\n\ns = \" abcab \"\nprint(countSubstringWithEqualEnds(s))\n"}
{"text": "Sum of two large numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static String findSum(String str1, String str2) {\n    if (str1.length() > str2.length()) {\n      String t = str1;\n      str1 = str2;\n      str2 = t;\n    }\n    String str = \" \";\n    int n1 = str1.length(), n2 = str2.length();\n    str1 = new StringBuilder(str1).reverse().toString();\n    str2 = new StringBuilder(str2).reverse().toString();\n    int carry = 0;\n    for (int i = 0; i < n1; i++) {\n      int sum = ((int) (str1.charAt(i) - '0') + (int) (str2.charAt(i) - '0') + carry);\n      str += (char) (sum % 10 + '0');\n      carry = sum / 10;\n    }\n    for (int i = n1; i < n2; i++) {\n      int sum = ((int) (str2.charAt(i) - '0') + carry);\n      str += (char) (sum % 10 + '0');\n      carry = sum / 10;\n    }\n    if (carry > 0) str += (char) (carry + '0');\n    str = new StringBuilder(str).reverse().toString();\n    return str;\n  }\n\n  public static void main(String[] args) {\n    String str1 = \"12\";\n    String str2 = \"198111\";\n    System.out.println(findSum(str1, str2));\n  }\n}\n", "python": "def findSum(str1, str2):\n    if len(str1) > len(str2):\n        t = str1\n        str1 = str2\n        str2 = t\n    str = \" \"\n    n1 = len(str1)\n    n2 = len(str2)\n    str1 = str1[::-1]\n    str2 = str2[::-1]\n    carry = 0\n    for i in range(n1):\n        sum = (ord(str1[i]) - 48) + ((ord(str2[i]) - 48) + carry)\n        str += chr(sum % 10 + 48)\n        carry = int(sum / 10)\n    for i in range(n1, n2):\n        sum = (ord(str2[i]) - 48) + carry\n        str += chr(sum % 10 + 48)\n        carry = (int)(sum / 10)\n    if carry:\n        str += chr(carry + 48)\n    str = str[::-1]\n    return str\n\n\nstr1 = \"12\"\nstr2 = \"198111\"\nprint(findSum(str1, str2))\n"}
{"text": "Sum of two large numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static String findSum(String str1, String str2) {\n    if (str1.length() > str2.length()) {\n      String t = str1;\n      str1 = str2;\n      str2 = t;\n    }\n    String str = \" \";\n    int n1 = str1.length(), n2 = str2.length();\n    int diff = n2 - n1;\n    int carry = 0;\n    for (int i = n1 - 1; i >= 0; i--) {\n      int sum = ((int) (str1.charAt(i) - '0') + (int) (str2.charAt(i + diff) - '0') + carry);\n      str += (char) (sum % 10 + '0');\n      carry = sum / 10;\n    }\n    for (int i = n2 - n1 - 1; i >= 0; i--) {\n      int sum = ((int) (str2.charAt(i) - '0') + carry);\n      str += (char) (sum % 10 + '0');\n      carry = sum / 10;\n    }\n    if (carry > 0) str += (char) (carry + '0');\n    return new StringBuilder(str).reverse().toString();\n  }\n\n  public static void main(String[] args) {\n    String str1 = \"12\";\n    String str2 = \"198111\";\n    System.out.println(findSum(str1, str2));\n  }\n}\n", "python": "def findSum(str1, str2):\n    if len(str1) > len(str2):\n        t = str1\n        str1 = str2\n        str2 = t\n    str = \" \"\n    n1 = len(str1)\n    n2 = len(str2)\n    str1 = str1[::-1]\n    str2 = str2[::-1]\n    carry = 0\n    for i in range(n1):\n        sum = (ord(str1[i]) - 48) + ((ord(str2[i]) - 48) + carry)\n        str += chr(sum % 10 + 48)\n        carry = int(sum / 10)\n    for i in range(n1, n2):\n        sum = (ord(str2[i]) - 48) + carry\n        str += chr(sum % 10 + 48)\n        carry = (int)(sum / 10)\n    if carry:\n        str += chr(carry + 48)\n    str = str[::-1]\n    return str\n\n\nstr1 = \"12\"\nstr2 = \"198111\"\nprint(findSum(str1, str2))\n"}
{"text": "Maximum and minimum sums from two numbers with digit replacements ", "java": "class GFG {\n  static int replaceDig(int x, int from, int to) {\n    int result = 0;\n    int multiply = 1;\n    while (x > 0) {\n      int reminder = x % 10;\n      if (reminder == from) result = result + to * multiply;\n      else result = result + reminder * multiply;\n      multiply *= 10;\n      x = x / 10;\n    }\n    return result;\n  }\n\n  static void calculateMinMaxSum(int x1, int x2) {\n    int minSum = replaceDig(x1, 6, 5) + replaceDig(x2, 6, 5);\n    int maxSum = replaceDig(x1, 5, 6) + replaceDig(x2, 5, 6);\n    System.out.print(\" Minimum \u2581 sum \u2581 = \u2581 \" + minSum);\n    System.out.print(\" Maximum sum = \" + maxSum);\n  }\n\n  public static void main(String[] args) {\n    int x1 = 5466, x2 = 4555;\n    calculateMinMaxSum(x1, x2);\n  }\n}\n", "python": "def replaceDig(x, from1, to):\n    result = 0\n    multiply = 1\n    while x > 0:\n        reminder = x % 10\n        if reminder == from1:\n            result = result + to * multiply\n        else:\n            result = result + reminder * multiply\n        multiply *= 10\n        x = int(x / 10)\n    return result\n\n\ndef calculateMinMaxSum(x1, x2):\n    minSum = replaceDig(x1, 6, 5) + replaceDig(x2, 6, 5)\n    maxSum = replaceDig(x1, 5, 6) + replaceDig(x2, 5, 6)\n    print(\" Minimum \u2581 sum \u2581 = \", minSum)\n    print(\" Maximum \u2581 sum \u2581 = \", maxSum, end=\" \u2581 \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    x1 = 5466\n    x2 = 4555\n    calculateMinMaxSum(x1, x2)\n"}
{"text": "Number of flips to make binary string alternate ", "java": "class GFG {\n  public static char flip(char ch) {\n    return (ch == '0') ? '1' : '0';\n  }\n\n  public static int getFlipWithStartingCharcter(String str, char expected) {\n    int flipCount = 0;\n    for (int i = 0; i < str.length(); i++) {\n      if (str.charAt(i) != expected) flipCount++;\n      expected = flip(expected);\n    }\n    return flipCount;\n  }\n\n  public static int minFlipToMakeStringAlternate(String str) {\n    return Math.min(getFlipWithStartingCharcter(str, '0'), getFlipWithStartingCharcter(str, '1'));\n  }\n\n  public static void main(String args[]) {\n    String str = \"0001010111\";\n    System.out.println(minFlipToMakeStringAlternate(str));\n  }\n}\n", "python": "def flip(ch):\n    return \"1\" if (ch == \"0\") else \"0\"\n\n\ndef getFlipWithStartingCharcter(str, expected):\n    flipCount = 0\n    for i in range(len(str)):\n        if str[i] != expected:\n            flipCount += 1\n        expected = flip(expected)\n    return flipCount\n\n\ndef minFlipToMakeStringAlternate(str):\n    return min(\n        getFlipWithStartingCharcter(str, \"0\"), getFlipWithStartingCharcter(str, \"1\")\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    str = \"0001010111\"\n    print(minFlipToMakeStringAlternate(str))\n"}
{"text": "Remainder with 7 for large numbers ", "java": "class GFG {\n  static int remainderWith7(String num) {\n    int series[] = {1, 3, 2, -1, -3, -2};\n    int series_index = 0;\n    int result = 0;\n    for (int i = num.length() - 1; i >= 0; i--) {\n      int digit = num.charAt(i) - '0';\n      result += digit * series[series_index];\n      series_index = (series_index + 1) % 6;\n      result %= 7;\n    }\n    if (result < 0) result = (result + 7) % 7;\n    return result;\n  }\n\n  public static void main(String[] args) {\n    String str = \"12345\";\n    System.out.print(\" Remainder \u2581 with \u2581 7 \u2581 is \u2581 \" + remainderWith7(str));\n  }\n}\n", "python": "def remainderWith7(num):\n    series = [1, 3, 2, -1, -3, -2]\n    series_index = 0\n    result = 0\n    for i in range((len(num) - 1), -1, -1):\n        digit = ord(num[i]) - 48\n        result += digit * series[series_index]\n        series_index = (series_index + 1) % 6\n        result %= 7\n    if result < 0:\n        result = (result + 7) % 7\n    return result\n\n\nstr = \"12345\"\nprint(\" Remainder \u2581 with \u2581 7 \u2581 is \", remainderWith7(str))\n"}
{"text": "Check if a string can become empty by recursively deleting a given sub ", "java": "class GFG {\n  static boolean canBecomeEmpty(String str, String sub_str) {\n    while (str.length() > 0) {\n      int idx = str.indexOf(sub_str);\n      if (idx == -1) {\n        break;\n      }\n      str = str.replaceFirst(sub_str, \" \");\n    }\n    return (str.length() == 0);\n  }\n\n  public static void main(String[] args) {\n    String str = \" GEEGEEKSKS \", sub_str = \" GEEKS \";\n    if (canBecomeEmpty(str, sub_str)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "def canBecomeEmpty(string, sub_str):\n    while len(string) > 0:\n        idx = string.find(sub_str)\n        if idx == -1:\n            break\n        string = string.replace(sub_str, \" \", 1)\n    return len(string) == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    string = \" GEEGEEKSKS \"\n    sub_str = \" GEEKS \"\n    if canBecomeEmpty(string, sub_str):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Perfect reversible string ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isReversible(String str) {\n    int i = 0, j = str.length() - 1;\n    while (i < j) {\n      if (str.charAt(i) != str.charAt(j)) return false;\n      i++;\n      j--;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    String str = \" aba \";\n    if (isReversible(str)) System.out.print(\" YES \");\n    else System.out.print(\" NO \");\n  }\n}\n", "python": "def isReversible(str):\n    i = 0\n    j = len(str) - 1\n    while i < j:\n        if str[i] != str[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\n\nstr = \" aba \"\nif isReversible(str):\n    print(\" YES \")\nelse:\n    print(\" NO \")\n"}
{"text": "Converting Decimal Number lying between 1 to 3999 to Roman Numerals ", "java": "class GFG {\n  static String intToRoman(int num) {\n    String m[] = {\" \", \" M \", \" MM \", \" MMM \"};\n    String c[] = {\" \", \" C \", \" CC \", \" CCC \", \" CD \", \" D \", \" DC \", \" DCC \", \" DCCC \", \" CM \"};\n    String x[] = {\" \", \" X \", \" XX \", \" XXX \", \" XL \", \" L \", \" LX \", \" LXX \", \" LXXX \", \" XC \"};\n    String i[] = {\" \", \" I \", \" II \", \" III \", \" IV \", \" V \", \" VI \", \" VII \", \" VIII \", \" IX \"};\n    String thousands = m[num / 1000];\n    String hundereds = c[(num % 1000) / 100];\n    String tens = x[(num % 100) / 10];\n    String ones = i[num % 10];\n    String ans = thousands + hundereds + tens + ones;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int number = 3549;\n    System.out.println(intToRoman(number));\n  }\n}\n", "python": "def intToRoman(num):\n    m = [\" \", \" M \", \" MM \", \" MMM \"]\n    c = [\n        \" \",\n        \" C \",\n        \" CC \",\n        \" CCC \",\n        \" CD \",\n        \" D \",\n        \" DC \",\n        \" DCC \",\n        \" DCCC \",\n        \" CM \u2581 \",\n    ]\n    x = [\" \", \" X \", \" XX \", \" XXX \", \" XL \", \" L \", \" LX \", \" LXX \", \" LXXX \", \" XC \"]\n    i = [\" \", \" I \", \" II \", \" III \", \" IV \", \" V \", \" VI \", \" VII \", \" VIII \", \" IX \"]\n    thousands = m[num // 1000]\n    hundereds = c[(num % 1000) // 100]\n    tens = x[(num % 100) // 10]\n    ones = i[num % 10]\n    ans = thousands + hundereds + tens + ones\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    number = 3549\n    print(intToRoman(number))\n"}
{"text": "Longest Common Prefix using Word by Word Matching ", "java": "class GFG {\n  static String commonPrefixUtil(String str1, String str2) {\n    String result = \" \";\n    int n1 = str1.length(), n2 = str2.length();\n    for (int i = 0, j = 0; i <= n1 - 1 && j <= n2 - 1; i++, j++) {\n      if (str1.charAt(i) != str2.charAt(j)) {\n        break;\n      }\n      result += str1.charAt(i);\n    }\n    return (result);\n  }\n\n  static String commonPrefix(String arr[], int n) {\n    String prefix = arr[0];\n    for (int i = 1; i <= n - 1; i++) {\n      prefix = commonPrefixUtil(prefix, arr[i]);\n    }\n    return (prefix);\n  }\n\n  public static void main(String[] args) {\n    String arr[] = {\" geeksforgeeks \", \" geeks \", \" geek \", \" geezer \"};\n    int n = arr.length;\n    String ans = commonPrefix(arr, n);\n    if (ans.length() > 0) {\n      System.out.printf(\" The \u2581 longest \u2581 common \u2581 prefix \u2581 is \u2581 - \u2581 % s \", ans);\n    } else {\n      System.out.printf(\" There \u2581 is \u2581 no \u2581 common \u2581 prefix \");\n    }\n  }\n}\n", "python": "def commonPrefixUtil(str1, str2):\n    result = \" \"\n    n1 = len(str1)\n    n2 = len(str2)\n    i = 0\n    j = 0\n    while i <= n1 - 1 and j <= n2 - 1:\n        if str1[i] != str2[j]:\n            break\n        result += str1[i]\n        i += 1\n        j += 1\n    return result\n\n\ndef commonPrefix(arr, n):\n    prefix = arr[0]\n    for i in range(1, n):\n        prefix = commonPrefixUtil(prefix, arr[i])\n    return prefix\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [\" geeksforgeeks \", \" geeks \", \" geek \", \" geezer \"]\n    n = len(arr)\n    ans = commonPrefix(arr, n)\n    if len(ans):\n        print(\" The \u2581 longest \u2581 common \u2581 prefix \u2581 is \u2581 - \", ans)\n    else:\n        print(\" There \u2581 is \u2581 no \u2581 common \u2581 prefix \")\n    DEDENT\n"}
{"text": "Check if characters of a given string can be rearranged to form a palindrome ", "java": "import java.io.*;\nimport java.math.*;\nimport java.util.*;\n\nclass GFG {\n  static int NO_OF_CHARS = 256;\n\n  static boolean canFormPalindrome(String str) {\n    int count[] = new int[NO_OF_CHARS];\n    Arrays.fill(count, 0);\n    for (int i = 0; i < str.length(); i++) count[(int) (str.charAt(i))]++;\n    int odd = 0;\n    for (int i = 0; i < NO_OF_CHARS; i++) {\n      if ((count[i] & 1) == 1) odd++;\n      if (odd > 1) return false;\n    }\n    return true;\n  }\n\n  public static void main(String args[]) {\n    if (canFormPalindrome(\" geeksforgeeks \")) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n    if (canFormPalindrome(\" geeksogeeks \")) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def canFormPalindrome(s):\n    bitvector = 0\n    for str in s:\n        bitvector ^= 1 << ord(str)\n    return bitvector == 0 or bitvector & (bitvector - 1) == 0\n\n\nif canFormPalindrome(\" geeksforgeeks \"):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Generate n ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static ArrayList<String> generateGray(int n) {\n    if (n <= 0) {\n      ArrayList<String> temp =\n          new ArrayList<String>() {\n            {\n              add(\"0\");\n            }\n          };\n      return temp;\n    }\n    if (n == 1) {\n      ArrayList<String> temp =\n          new ArrayList<String>() {\n            {\n              add(\"0\");\n              add(\"1\");\n            }\n          };\n      return temp;\n    }\n    ArrayList<String> recAns = generateGray(n - 1);\n    ArrayList<String> mainAns = new ArrayList<String>();\n    for (int i = 0; i < recAns.size(); i++) {\n      String s = recAns.get(i);\n      mainAns.add(\"0\" + s);\n    }\n    for (int i = recAns.size() - 1; i >= 0; i--) {\n      String s = recAns.get(i);\n      mainAns.add(\"1\" + s);\n    }\n    return mainAns;\n  }\n\n  static void generateGrayarr(int n) {\n    ArrayList<String> arr = new ArrayList<String>();\n    arr = generateGray(n);\n    for (int i = 0; i < arr.size(); i++) {\n      System.out.println(arr.get(i));\n    }\n  }\n\n  public static void main(String[] args) {\n    generateGrayarr(3);\n  }\n}\n", "python": "def generateGray(n):\n    if n <= 0:\n        return [\"0\"]\n    if n == 1:\n        return [\"0\", \"1\"]\n    recAns = generateGray(n - 1)\n    mainAns = []\n    for i in range(len(recAns)):\n        s = recAns[i]\n        mainAns.append(\"0\" + s)\n    for i in range(len(recAns) - 1, -1, -1):\n        s = recAns[i]\n        mainAns.append(\"1\" + s)\n    return mainAns\n\n\ndef generateGrayarr(n):\n    arr = generateGray(n)\n    print(*arr, sep=\" \")\n\n\ngenerateGrayarr(3)\n"}
{"text": "Find remainder when a number A raised to N factorial is divided by P ", "java": "import java.util.*;\n\nclass GFG {\n  static int fact(int n) {\n    int ans = 1;\n    for (int i = 2; i <= n; i++) ans *= i;\n    return ans;\n  }\n\n  static int remainder(int n, int a, int p) {\n    int len = fact(n);\n    int ans = 1;\n    for (int i = 1; i <= len; i++) ans = (ans * a) % p;\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int A = 2, N = 1, P = 2;\n    System.out.println(remainder(N, A, P));\n  }\n}\n", "python": "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\n\ndef remainder(n, a, p):\n    ans = a % p\n    for i in range(1, n + 1):\n        ans = power(ans, i, p)\n    return ans\n\n\nA = 2\nN = 1\nP = 2\nprint(remainder(N, A, P))\n"}
{"text": "Count of groups among N people having only one leader in each group ", "java": "import java.util.*;\n\nclass GFG {\n  static long mod = 1000000007;\n\n  static int exponentMod(int A, int B) {\n    if (A == 0) return 0;\n    if (B == 0) return 1;\n    long y;\n    if (B % 2 == 0) {\n      y = exponentMod(A, B / 2);\n      y = (y * y) % mod;\n    } else {\n      y = A % mod;\n      y = (y * exponentMod(A, B - 1) % mod) % mod;\n    }\n    return (int) ((y + mod) % mod);\n  }\n\n  static void countWays(int N) {\n    long select = exponentMod(2, N - 1);\n    long ways = ((N % mod) * (select % mod));\n    ways %= mod;\n    System.out.print(ways);\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    countWays(N);\n  }\n}\n", "python": "mod = 1000000007\n\n\ndef exponentMod(A, B):\n    if A == 0:\n        return 0\n    if B == 0:\n        return 1\n    y = 0\n    if B % 2 == 0:\n        y = exponentMod(A, B // 2)\n        y = (y * y) % mod\n    else:\n        y = A % mod\n        y = (y * exponentMod(A, B - 1) % mod) % mod\n    return (y + mod) % mod\n\n\ndef countWays(N):\n    select = exponentMod(2, N - 1)\n    ways = (N % mod) * (select % mod)\n    ways %= mod\n    print(ways)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    countWays(N)\n"}
{"text": "Expected number of moves to reach the end of a board ", "java": "class GFG {\n  static final int maxSize = 50;\n\n  static double[][] matrix_product(double[][] a, double[][] b) {\n    double[][] c = new double[7][7];\n    for (int i = 0; i < 7; i++)\n      for (int j = 0; j < 7; j++) for (int k = 0; k < 7; k++) c[i][j] += a[i][k] * b[k][j];\n    return c;\n  }\n\n  static double[][] mul_expo(double[][] mul, int p) {\n    double[][] s = {\n      {1, 0, 0, 0, 0, 0, 0},\n      {0, 1, 0, 0, 0, 0, 0},\n      {0, 0, 1, 0, 0, 0, 0},\n      {0, 0, 0, 1, 0, 0, 0},\n      {0, 0, 0, 0, 1, 0, 0},\n      {0, 0, 0, 0, 0, 1, 0},\n      {0, 0, 0, 0, 0, 0, 1}\n    };\n    while (p != 1) {\n      if (p % 2 == 1) s = matrix_product(s, mul);\n      mul = matrix_product(mul, mul);\n      p /= 2;\n    }\n    return matrix_product(mul, s);\n  }\n\n  static double expectedSteps(int x) {\n    if (x == 0) return 0;\n    if (x <= 6) return 6;\n    double[][] mul = {\n      {(double) 7 / 6, 1, 0, 0, 0, 0, 0},\n      {0, 0, 1, 0, 0, 0, 0},\n      {0, 0, 0, 1, 0, 0, 0},\n      {0, 0, 0, 0, 1, 0, 0},\n      {0, 0, 0, 0, 0, 1, 0},\n      {0, 0, 0, 0, 0, 0, 1},\n      {(double) -1 / 6, 0, 0, 0, 0, 0, 0}\n    };\n    mul = mul_expo(mul, x - 6);\n    return (mul[0][0] + mul[1][0] + mul[2][0] + mul[3][0] + mul[4][0] + mul[5][0]) * 6;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.printf(\" % .5f \", expectedSteps(n - 1));\n  }\n}\n", "python": "maxSize = 50\ndp = [0] * maxSize\nv = [0] * maxSize\n\n\ndef expectedSteps(x):\n    if x == 0:\n        return 0\n    if x <= 5:\n        return 6\n    if v[x]:\n        return dp[x]\n    v[x] = 1\n    dp[x] = (\n        1\n        + (\n            expectedSteps(x - 1)\n            + expectedSteps(x - 2)\n            + expectedSteps(x - 3)\n            + expectedSteps(x - 4)\n            + expectedSteps(x - 5)\n            + expectedSteps(x - 6)\n        )\n        / 6\n    )\n    return dp[x]\n\n\nn = 10\nprint(round(expectedSteps(n - 1), 5))\n"}
{"text": "Sum of i * countDigits ( i ) ^ 2 for all i in range [ L , R ] ", "java": "class GFG {\n  static final int MOD = 1000000007;\n\n  static int rangeSum(int l, int r) {\n    int a = 1, b = 9, res = 0;\n    for (int i = 1; i <= 10; i++) {\n      int L = Math.max(l, a);\n      int R = Math.min(r, b);\n      if (L <= R) {\n        int sum = (L + R) * (R - L + 1) / 2;\n        res += (i * i) * (sum % MOD);\n        res %= MOD;\n      }\n      a = a * 10;\n      b = b * 10 + 9;\n    }\n    return res;\n  }\n\n  public static void main(String args[]) {\n    int l = 98, r = 102;\n    System.out.print(rangeSum(l, r));\n  }\n}\n", "python": "MOD = 1000000007\n\n\ndef rangeSum(l, r):\n    a = 1\n    b = 9\n    res = 0\n    for i in range(1, 11):\n        L = max(l, a)\n        R = min(r, b)\n        if L <= R:\n            sum = (L + R) * (R - L + 1) // 2\n            res += (i * i) * (sum % MOD)\n            res %= MOD\n        a *= 10\n        b = b * 10 + 9\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    l = 98\n    r = 102\n    print(rangeSum(l, r))\n"}
{"text": "Find the only repeating element in a sorted array of size n ", "java": "class Test {\n  static int findRepeatingElement(int arr[], int low, int high) {\n    if (low > high) return -1;\n    int mid = (low + high) / 2;\n    if (arr[mid] != mid + 1) {\n      if (mid > 0 && arr[mid] == arr[mid - 1]) return mid;\n      return findRepeatingElement(arr, low, mid - 1);\n    }\n    return findRepeatingElement(arr, mid + 1, high);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 3, 4, 5};\n    int index = findRepeatingElement(arr, 0, arr.length - 1);\n    if (index != -1) System.out.println(arr[index]);\n  }\n}\n", "python": "def findRepeatingElement(arr, low, high):\n    if low > high:\n        return -1\n    mid = (low + high) / 2\n    if arr[mid] != mid + 1:\n        if mid > 0 and arr[mid] == arr[mid - 1]:\n            return mid\n        return findRepeatingElement(arr, low, mid - 1)\n    return findRepeatingElement(arr, mid + 1, high)\n\n\narr = [1, 2, 3, 3, 4, 5]\nn = len(arr)\nindex = findRepeatingElement(arr, 0, n - 1)\nif index is not -1:\n    print arr[index]\n"}
{"text": "Program to calculate Surface Area of Ellipsoid ", "java": "import java.util.*;\n\nclass GFG {\n  static void findArea(double a, double b, double c) {\n    double area =\n        4\n            * 3.141592653\n            * Math.pow(\n                (Math.pow(a * b, 1.6) + Math.pow(a * c, 1.6) + Math.pow(b * c, 1.6)) / 3, 1 / 1.6);\n    System.out.print(String.format(\" % .2f \", area));\n  }\n\n  public static void main(String[] args) {\n    double A = 11, B = 12, C = 13;\n    findArea(A, B, C);\n  }\n}\n", "python": "from math import pow\n\n\ndef findArea(a, b, c):\n    area = (\n        4\n        * 3.141592653\n        * pow((pow(a * b, 1.6) + pow(a * c, 1.6) + pow(b * c, 1.6)) / 3, 1 / 1.6)\n    )\n    print(\" { : . 2f } \".format(round(area, 2)))\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = 11\n    B = 12\n    C = 13\n    findArea(A, B, C)\n"}
{"text": "Descartes ' Circle Theorem with implementation ", "java": "import java.io.*;\n\nclass GFG {\n  static double findRadius(double r1, double r2, double r3) {\n    double r4 =\n        (r1 * r2 * r3)\n            / (r1 * r2 + r2 * r3 + r1 * r3 + 2.0 * Math.sqrt(r1 * r2 * r3 * (r1 + r2 + r3)));\n    return r4;\n  }\n\n  public static void main(String[] args) {\n    double r1 = 1;\n    double r2 = 1;\n    double r3 = 1;\n    double r4 = findRadius(r1, r2, r3);\n    System.out.println(\" The \u2581 radius \u2581 of \u2581 fourth \u2581 circle : \u2581 \" + r4);\n  }\n}\n", "python": "from math import sqrt\n\n\ndef findRadius(r1, r2, r3):\n    r4 = (r1 * r2 * r3) / (\n        r1 * r2 + r2 * r3 + r1 * r3 + 2.0 * sqrt(r1 * r2 * r3 * (r1 + r2 + r3))\n    )\n    return r4\n\n\nif __name__ == \" _ _ main _ _ \":\n    r1 = 1\n    r2 = 1\n    r3 = 1\n    r4 = findRadius(r1, r2, r3)\n    print(\" The \u2581 radius \u2581 of \u2581 fourth \u2581 circle : \", r4)\n"}
{"text": "Make N pairs from Array as ( X , Y ) coordinate point that are enclosed inside a minimum area rectangle ", "java": "import java.io.*;\nimport java.util.Arrays;\n\nclass GFG {\n  public static int minimumRectangleArea(int A[], int N) {\n    int ans;\n    Arrays.sort(A);\n    ans = (A[N - 1] - A[0]) * (A[2 * N - 1] - A[N]);\n    for (int i = 1; i < N; i++) ans = Math.min(ans, (A[2 * N - 1] - A[0]) * (A[i + N - 1] - A[i]));\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {2, 4, 1, 5, 3, 6, 7, 8};\n    int N = A.length;\n    N = (int) N / 2;\n    System.out.println(minimumRectangleArea(A, N));\n  }\n}\n", "python": "def minimumRectangleArea(A, N):\n    ans = 0\n    A.sort()\n    ans = (A[N - 1] - A[0]) * (A[2 * N - 1] - A[N])\n    for i in range(1, N, 1):\n        ans = min(ans, (A[2 * N - 1] - A[0]) * (A[i + N - 1] - A[i]))\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [2, 4, 1, 5, 3, 6, 7, 8]\n    N = len(A)\n    N //= 2\n    print(minimumRectangleArea(A, N))\n"}
{"text": "Program to find the length of Latus Rectum of a Hyperbola ", "java": "import java.io.*;\n\nclass GFG {\n  static double lengthOfLatusRectum(double A, double B) {\n    double major = 2.0 * A;\n    double minor = 2.0 * B;\n    double latus_rectum = (minor * minor) / major;\n    return latus_rectum;\n  }\n\n  public static void main(String[] args) {\n    double A = 3.0, B = 2.0;\n    System.out.println(lengthOfLatusRectum(A, B));\n  }\n}\n", "python": "def lengthOfLatusRectum(A, B):\n    major = 2.0 * A\n    minor = 2.0 * B\n    latus_rectum = (minor * minor) / major\n    return latus_rectum\n\n\nA = 3.0\nB = 2.0\nprint(round(lengthOfLatusRectum(A, B), 5))\n"}
{"text": "Ratio of area of two nested polygons formed by connecting midpoints of sides of a regular N ", "java": "import java.io.*;\n\nclass GFG {\n  static void AreaFactor(int n) {\n    double pi = 3.14159265;\n    double areaf = 1 / (Math.cos(pi / n) * Math.cos(pi / n));\n    System.out.format(\" % .6f \", areaf);\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    AreaFactor(n);\n  }\n}\n", "python": "import math\n\n\ndef AreaFactor(n):\n    pi = 3.14159265\n    areaf = 1 / (math.cos(pi / n) * math.cos(pi / n))\n    print(\" % .6f \" % areaf)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    AreaFactor(n)\n"}
{"text": "Find the length of Kth N ", "java": "import java.util.*;\n\nclass GFG {\n  static final double PI = 3.14159265;\n\n  static double findInteriorAngle(int n) {\n    return ((n - 2) * PI) / n;\n  }\n\n  static double calculateSideLength(double L, int N, int K) {\n    double angle = findInteriorAngle(N);\n    double length = L * Math.pow(Math.sin(angle / 2), (K - 1));\n    return length;\n  }\n\n  public static void main(String[] args) {\n    double L = 21;\n    int N = 5, K = 7;\n    System.out.print(calculateSideLength(L, N, K));\n  }\n}\n", "python": "import math\n\nPI = 3.14159265\n\n\ndef findInteriorAngle(n):\n    return (n - 2) * PI / n\n\n\ndef calculateSideLength(L, N, K):\n    angle = findInteriorAngle(N)\n    length = L * pow(math.sin(angle / 2), (K - 1))\n    return length\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    L = 21\n    K = 7\n    print(calculateSideLength(L, N, K))\n"}
{"text": "Angle between a Pair of Lines ", "java": "import java.util.*;\n\nclass GFG {\n  static double PI = 3.14159265;\n\n  static void findAngle(double M1, double M2) {\n    double angle = Math.abs((M2 - M1) / (1 + M1 * M2));\n    double ret = Math.atan(angle);\n    double val = (ret * 180) / PI;\n    System.out.println(val);\n  }\n\n  public static void main(String[] args) {\n    double M1 = 1.75, M2 = 0.27;\n    findAngle(M1, M2);\n  }\n}\n", "python": "from math import atan\n\n\ndef findAngle(M1, M2):\n    PI = 3.14159265\n    angle = abs((M2 - M1) / (1 + M1 * M2))\n    ret = atan(angle)\n    val = (ret * 180) / PI\n    print(round(val, 4))\n\n\nif __name__ == \" _ _ main _ _ \":\n    M1 = 1.75\n    M2 = 0.27\n    findAngle(M1, M2)\n"}
{"text": "Angle of intersection of two circles having their centers D distance apart ", "java": "import java.io.*;\n\nclass GFG {\n  static float angle(float R1, float R2, float D) {\n    float ans = (R1 * R1 + R2 * R2 - D * D) / (2 * R1 * R2);\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    float R1 = 3, R2 = 4;\n    float D = 5;\n    System.out.println(angle(R1, R2, D));\n  }\n}\n", "python": "def angle(R1, R2, D):\n    ans = (R1 * R1 + R2 * R2 - D * D) / (2 * R1 * R2)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    R1 = 3\n    R2 = 4\n    D = 5\n    print(angle(R1, R2, D))\n"}
{"text": "Minimum area of the triangle formed by any tangent to an ellipse with the coordinate axes ", "java": "class GFG {\n  static void minimumTriangleArea(int a, int b) {\n    int area = a * b;\n    System.out.println(area);\n  }\n\n  public static void main(String[] args) {\n    int a = 1, b = 2;\n    minimumTriangleArea(a, b);\n  }\n}\n", "python": "def minimumTriangleArea(a, b):\n    area = a * b\n    print(area)\n\n\na = 1\nb = 2\nminimumTriangleArea(a, b)\n"}
{"text": "Find interior angles for each side of a given Cyclic Quadrilateral ", "java": "class GFG {\n  static void findAngles(double a, double b, double c, double d) {\n    double numerator = a * a + d * d - b * b - c * c;\n    double denominator = 2 * (a * b + c * d);\n    double x = numerator / denominator;\n    System.out.println(\n        \" A : \u2581 \" + Math.round(((Math.acos(x) * 180) / 3.141592) * 100.0) / 100.0 + \" \u2581 degrees \");\n    numerator = a * a + b * b - c * c - d * d;\n    x = numerator / denominator;\n    System.out.println(\n        \" B : \u2581 \" + Math.round(((Math.acos(x) * 180) / 3.141592) * 100.0) / 100.0 + \" \u2581 degrees \");\n    numerator = c * c + b * b - a * a - d * d;\n    x = numerator / denominator;\n    System.out.println(\n        \" C : \u2581 \" + Math.round(((Math.acos(x) * 180) / 3.141592) * 100.0) / 100.0 + \" \u2581 degrees \");\n    numerator = d * d + c * c - a * a - b * b;\n    x = numerator / denominator;\n    System.out.println(\n        \" D : \u2581 \" + Math.round(((Math.acos(x) * 180) / 3.141592) * 100.0) / 100.0 + \" \u2581 degrees \");\n  }\n\n  public static void main(String[] args) {\n    double A = 10, B = 15, C = 20, D = 25;\n    findAngles(A, B, C, D);\n  }\n}\n", "python": "import math\n\n\ndef findAngles(a, b, c, d):\n    numerator = a * a + d * d - b * b - c * c\n    denominator = 2 * (a * b + c * d)\n    x = numerator / denominator\n    print(\" A : \u2581 \", \" % .2f \" % ((math.acos(x) * 180) / 3.141592), \" \u2581 degrees \")\n    numerator = a * a + b * b - c * c - d * d\n    x = numerator / denominator\n    print(\" B : \u2581 \", \" % .2f \" % ((math.acos(x) * 180) / 3.141592), \" \u2581 degrees \")\n    numerator = c * c + b * b - a * a - d * d\n    x = numerator / denominator\n    print(\" C : \u2581 \", \" % .2f \" % ((math.acos(x) * 180) / 3.141592), \" \u2581 degrees \")\n    numerator = d * d + c * c - a * a - b * b\n    x = numerator / denominator\n    print(\" D : \u2581 \", \" % .2f \" % ((math.acos(x) * 180) / 3.141592), \" \u2581 degrees \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = 10\n    B = 15\n    C = 20\n    D = 25\n    findAngles(A, B, C, D)\n"}
{"text": "Number of smaller circles that can be inscribed in a larger circle ", "java": "import java.util.*;\n\nclass GFG {\n  static int countInscribed(int R1, int R2) {\n    if (R2 > R1) return 0;\n    double angle;\n    double ratio;\n    int number_of_circles = 0;\n    ratio = R2 / (double) (R1 - R2);\n    if (R1 < 2 * R2) {\n      number_of_circles = 1;\n    } else {\n      angle = Math.abs(Math.asin(ratio) * 180) / 3.14159265;\n      number_of_circles = (int) (360 / (2 * Math.floor(angle)));\n    }\n    return number_of_circles;\n  }\n\n  public static void main(String args[]) {\n    int R1 = 3;\n    int R2 = 1;\n    System.out.println(countInscribed(R1, R2));\n  }\n}\n", "python": "import math\n\n\ndef countInscribed(R1, R2):\n    if R2 > R1:\n        return 0\n    angle = 0\n    ratio = 0\n    number_of_circles = 0\n    ratio = R2 / (R1 - R2)\n    if R1 < 2 * R2:\n        number_of_circles = 1\n    else:\n        angle = abs(math.asin(ratio) * 180) / 3.14159265\n        number_of_circles = 360 / (2 * math.floor(angle))\n    return number_of_circles\n\n\nif __name__ == \" _ _ main _ _ \":\n    R1 = 3\n    R2 = 1\n    print(int(countInscribed(R1, R2)))\n"}
{"text": "Number of largest circles that can be inscribed in a rectangle ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int totalCircles(int L, int B) {\n    if (L > B) {\n      int temp = L;\n      L = B;\n      B = temp;\n    }\n    return B / L;\n  }\n\n  public static void main(String[] args) {\n    int L = 3;\n    int B = 8;\n    System.out.print(totalCircles(L, B));\n  }\n}\n", "python": "def totalCircles(L, B):\n    if L > B:\n        temp = L\n        L = B\n        B = temp\n    return B // L\n\n\nL = 3\nB = 8\nprint(totalCircles(L, B))\n"}
{"text": "Program to calculate length of diagonal of a square ", "java": "import java.util.*;\n\nclass GFG {\n  static double findDiagonal(double s) {\n    return (double) Math.sqrt(2) * s;\n  }\n\n  public static void main(String[] args) {\n    double S = 10;\n    System.out.print(findDiagonal(S));\n  }\n}\n", "python": "import math\n\n\ndef findDiagonal(s):\n    return math.sqrt(2) * s\n\n\nif __name__ == \" _ _ main _ _ \":\n    S = 10\n    print(findDiagonal(S))\n"}
{"text": "Radius of a circle having area equal to the sum of area of the circles having given radii ", "java": "import java.util.*;\n\nclass GFG {\n  static double findRadius(double r1, double r2) {\n    double a1, a2, a3, r3;\n    a1 = 3.14 * r1 * r1;\n    a2 = 3.14 * r2 * r2;\n    a3 = a1 + a2;\n    r3 = Math.sqrt(a3 / 3.14);\n    return r3;\n  }\n\n  public static void main(String[] args) {\n    double r1 = 8, r2 = 6;\n    System.out.println((int) findRadius(r1, r2));\n  }\n}\n", "python": "def findRadius(r1, r2):\n    a1, a2, a3, r3 = 0, 0, 0, 0\n    a1 = 3.14 * r1 * r1\n    a2 = 3.14 * r2 * r2\n    a3 = a1 + a2\n    r3 = (a3 / 3.14) ** (1 / 2)\n    return r3\n\n\nif __name__ == \" _ _ main _ _ \":\n    r1 = 8\n    r2 = 6\n    print(int(findRadius(r1, r2)))\n"}
{"text": "Count rectangles generated in a given rectangle by lines drawn parallel to X and Y axis from a given set of points ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int cntRect(int points[][], int N, int rectangle[][]) {\n    HashSet<Integer> cntHor = new HashSet<>();\n    HashSet<Integer> cntVer = new HashSet<>();\n    cntHor.add(0);\n    cntVer.add(0);\n    cntHor.add(rectangle[3][0]);\n    cntVer.add(rectangle[3][1]);\n    for (int i = 0; i < N; i++) {\n      cntHor.add(points[i][0]);\n      cntVer.add(points[i][1]);\n    }\n    return (cntHor.size() - 1) * (cntVer.size() - 1);\n  }\n\n  public static void main(String args[]) {\n    int rectangle[][] = {{0, 0}, {0, 5}, {5, 0}, {5, 5}};\n    int points[][] = {{1, 2}, {3, 4}};\n    int N = points.length;\n    System.out.println(cntRect(points, N, rectangle));\n  }\n}\n", "python": "def cntRect(points, N, rectangle):\n    cntHor = set([])\n    cntVer = set([])\n    cntHor.add(0)\n    cntVer.add(0)\n    cntHor.add(rectangle[3][0])\n    cntVer.add(rectangle[3][1])\n    for i in range(N):\n        cntHor.add(points[i][0])\n        cntVer.add(points[i][1])\n    return (len(cntHor) - 1) * (len(cntVer) - 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    rectangle = [[0, 0], [0, 5], [5, 0], [5, 5]]\n    points = [[1, 2], [3, 4]]\n    N = len(points)\n    print(cntRect(points, N, rectangle))\n"}
{"text": "Program to calculate area of a parallelogram ", "java": "import java.io.*;\n\nclass GFG {\n  static double Area_Parallelogram1(int a, int b, int theta) {\n    double area = (Math.abs(Math.tan(Math.toRadians(theta))) / 2) * Math.abs(a * a - b * b);\n    return area;\n  }\n\n  static double Area_Parallelogram2(int a, int b, int gamma) {\n    double area = (Math.abs(Math.sin(Math.toRadians(gamma)))) * Math.abs(a * b);\n    return area;\n  }\n\n  static double Area_Parallelogram3(int d1, int d2, int theta) {\n    double area = (Math.abs(Math.sin(Math.toRadians(theta))) / 2) * Math.abs(d1 * d2);\n    return area;\n  }\n\n  public static void main(String[] args) {\n    int d1 = 3;\n    int d2 = 5;\n    int theta = 90;\n    double area = Area_Parallelogram3(d1, d2, theta);\n    System.out.format(\" % .2f \", area);\n  }\n}\n", "python": "import math\n\n\ndef Area_Parallelogram1(a, b, theta):\n    area = (abs(math.tan(math.radians(theta))) / 2) * abs(a ** 2 - b ** 2)\n    return area\n\n\ndef Area_Parallelogram2(a, b, gamma):\n    area = (abs(math.sin(math.radians(gamma)))) * abs(a * b)\n    return area\n\n\ndef Area_Parallelogram3(d1, d2, theta):\n    area = (abs(math.sin(math.radians(theta))) / 2) * abs(d1 * d2)\n    return area\n\n\nd1 = 3\nd2 = 5\ntheta = 90\narea = Area_Parallelogram3(d1, d2, theta)\nprint(round(area, 2))\n"}
{"text": "Count squares of size K inscribed in a square of size N ", "java": "import java.util.*;\n\nclass GFG {\n  static int No_of_squares(int N, int K) {\n    int no_of_squares = 0;\n    no_of_squares = (N - K + 1) * (N - K + 1);\n    return no_of_squares;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    int K = 3;\n    System.out.print(No_of_squares(N, K));\n  }\n}\n", "python": "def No_of_squares(N, K):\n    no_of_squares = 0\n    no_of_squares = (N - K + 1) * (N - K + 1)\n    return no_of_squares\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    K = 3\n    print(No_of_squares(N, K))\n"}
{"text": "Count cubes of size K inscribed in a cube of size N ", "java": "class GFG {\n  static int No_of_cubes(int N, int K) {\n    int No = 0;\n    No = (N - K + 1);\n    No = (int) Math.pow(No, 3);\n    return No;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    int K = 2;\n    System.out.print(No_of_cubes(N, K));\n  }\n}\n", "python": "def No_of_cubes(N, K):\n    No = 0\n    No = N - K + 1\n    No = pow(No, 3)\n    return No\n\n\nN = 5\nK = 2\nprint(No_of_cubes(N, K))\n"}
{"text": "Find the area of rhombus from given Angle and Side length ", "java": "class GFG {\n  static final double RADIAN = 0.01745329252;\n\n  static double Area_of_Rhombus(int a, int theta) {\n    double area = (a * a) * Math.sin((RADIAN * theta));\n    return area;\n  }\n\n  public static void main(String[] args) {\n    int a = 4;\n    int theta = 60;\n    double ans = Area_of_Rhombus(a, theta);\n    System.out.printf(\" % .2f \", ans);\n  }\n}\n", "python": "import math\n\n\ndef Area_of_Rhombus(a, theta):\n    area = (a ** 2) * math.sin(math.radians(theta))\n    return area\n\n\na = 4\ntheta = 60\nans = Area_of_Rhombus(a, theta)\nprint(round(ans, 2))\n"}
{"text": "Length of diagonal of a parallelogram using adjacent sides and angle between them ", "java": "class GFG {\n  static double Length_Diagonal(int a, int b, double theta) {\n    double diagonal =\n        Math.sqrt(\n            (Math.pow(a, 2) + Math.pow(b, 2)) - 2 * a * b * Math.cos(theta * (Math.PI / 180)));\n    return diagonal;\n  }\n\n  public static void main(String[] args) {\n    int a = 3;\n    int b = 5;\n    double theta = 45;\n    double ans = Length_Diagonal(a, b, theta);\n    System.out.printf(\" % .2f \", ans);\n  }\n}\n", "python": "import math\n\n\ndef Length_Diagonal(a, b, theta):\n    diagonal = math.sqrt(\n        ((a ** 2) + (b ** 2)) - 2 * a * b * math.cos(math.radians(theta))\n    )\n    return diagonal\n\n\na = 3\nb = 5\ntheta = 45\nans = Length_Diagonal(a, b, theta)\nprint(round(ans, 2))\n"}
{"text": "Maximum number of tiles required to cover the floor of given size using 2 x1 size tiles ", "java": "import java.util.*;\n\nclass GFG {\n  static void maximumTiles(int n, int m) {\n    System.out.println((m * n) / 2);\n  }\n\n  public static void main(String[] args) {\n    int M = 3;\n    int N = 4;\n    maximumTiles(N, M);\n  }\n}\n", "python": "def maximumTiles(n, m):\n    print(int((m * n) / 2))\n\n\nif __name__ == \" _ _ main _ _ \":\n    M = 3\n    N = 4\n    maximumTiles(N, M)\n"}
{"text": "Length of a Diagonal of a Parallelogram using the length of Sides and the other Diagonal ", "java": "class GFG {\n  static float Length_Diagonal(int a, int b, int d) {\n    float diagonal = (float) Math.sqrt(2 * ((a * a) + (b * b)) - (d * d));\n    return diagonal;\n  }\n\n  public static void main(String[] args) {\n    int A = 10;\n    int B = 30;\n    int D = 20;\n    float ans = Length_Diagonal(A, B, D);\n    System.out.printf(\" % .1f \", ans);\n  }\n}\n", "python": "import math\n\n\ndef Length_Diagonal(a, b, d):\n    diagonal = math.sqrt(2 * ((a ** 2) + (b ** 2)) - (d ** 2))\n    return diagonal\n\n\nA = 10\nB = 30\nD = 20\nans = Length_Diagonal(A, B, D)\nprint(round(ans, 2))\n"}
{"text": "Length of Diagonals of a Cyclic Quadrilateral using the length of Sides . ", "java": "import java.util.*;\n\nclass GFG {\n  static Vector<Float> Diagonals(int a, int b, int c, int d) {\n    Vector<Float> ans = new Vector<Float>();\n    ans.add((float) Math.sqrt(((a * c) + (b * d)) * ((a * d) + (b * c)) / ((a * b) + (c * d))));\n    ans.add((float) Math.sqrt(((a * c) + (b * d)) * ((a * b) + (c * d)) / ((a * d) + (b * c))));\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int A = 10;\n    int B = 15;\n    int C = 20;\n    int D = 25;\n    Vector<Float> ans = Diagonals(A, B, C, D);\n    System.out.printf(\" % .2f \u2581 % .2f \", (ans.get(0)) + .01, ans.get(1) + .01);\n  }\n}\n", "python": "import math\n\n\ndef Diagonals(a, b, c, d):\n    p = math.sqrt(((a * c) + (b * d)) * ((a * d) + (b * c)) / ((a * b) + (c * d)))\n    q = math.sqrt(((a * c) + (b * d)) * ((a * b) + (c * d)) / ((a * d) + (b * c)))\n    return [p, q]\n\n\nA = 10\nB = 15\nC = 20\nD = 25\nans = Diagonals(A, B, C, D)\nprint(round(ans[0], 2), round(ans[1], 2))\n"}
{"text": "Coplanarity of Two Lines in 3D Geometry ", "java": "import java.io.*;\n\nclass GFG {\n  static int det(int[][] d) {\n    int Sum = d[0][0] * ((d[1][1] * d[2][2]) - (d[2][1] * d[1][2]));\n    Sum -= d[0][1] * ((d[1][0] * d[2][2]) - (d[1][2] * d[2][0]));\n    Sum += d[0][2] * ((d[0][1] * d[1][2]) - (d[0][2] * d[1][1]));\n    return Sum;\n  }\n\n  public static void main(String[] args) {\n    int x1 = -3, y1 = 1, z1 = 5;\n    int a1 = -3, b1 = 1, c1 = 5;\n    int x2 = -1, y2 = 2, z2 = 5;\n    int a2 = -1, b2 = 2, c2 = 5;\n    int[][] det_list = {{x2 - x1, y2 - y1, z2 - z1}, {a1, b1, c1}, {a2, b2, c2}};\n    if (det(det_list) == 0) System.out.print(\" Lines \u2581 are \u2581 coplanar \");\n    else System.out.print(\" Lines \u2581 are \u2581 non \u2581 coplanar \");\n  }\n}\n", "python": "def det(d):\n    Sum = d[0][0] * ((d[1][1] * d[2][2]) - (d[2][1] * d[1][2]))\n    Sum -= d[0][1] * ((d[1][0] * d[2][2]) - (d[1][2] * d[2][0]))\n    Sum += d[0][2] * ((d[0][1] * d[1][2]) - (d[0][2] * d[1][1]))\n    return Sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    x1, y1, z1 = -3, 1, 5\n    a1, b1, c1 = -3, 1, 5\n    x2, y2, z2 = -1, 2, 5\n    a2, b2, c2 = -1, 2, 5\n    det_list = [[x2 - x1, y2 - y1, z2 - z1], [a1, b1, c1], [a2, b2, c2]]\n    if det(det_list) == 0:\n        print(\" Lines \u2581 are \u2581 coplanar \")\n    else:\n        print(\" Lines \u2581 are \u2581 non \u2581 coplanar \")\n    DEDENT\n"}
{"text": "Distance between Incenter and Circumcenter of a triangle using Inradius and Circumradius ", "java": "import java.util.*;\n\nclass GFG {\n  static double distance(int r, int R) {\n    double d = Math.sqrt(Math.pow(R, 2) - (2 * r * R));\n    return d;\n  }\n\n  public static void main(String[] args) {\n    int r = 2;\n    int R = 5;\n    System.out.println(Math.round(distance(r, R) * 100.0) / 100.0);\n  }\n}\n", "python": "import math\n\n\ndef distance(r, R):\n    d = math.sqrt((R ** 2) - (2 * r * R))\n    return d\n\n\nr = 2\nR = 5\nprint(round(distance(r, R), 2))\n"}
{"text": "Find the angle of Rotational Symmetry of an N ", "java": "import java.io.*;\n\nclass GFG {\n  static double minAnglRot(int N) {\n    double res;\n    res = 360 / (double) N;\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    System.out.println(\" Angle \u2581 of \u2581 Rotational \u2581 Symmetry : \u2581 \" + minAnglRot(N));\n  }\n}\n", "python": "def minAnglRot(N):\n    res = 360 // N\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    print(\" Angle \u2581 of \u2581 Rotational \u2581 Symmetry : \u2581 \", minAnglRot(N))\n"}
{"text": "Area of a Triangle from the given lengths of medians ", "java": "class GFG {\n  static double Area_of_Triangle(int a, int b, int c) {\n    int s = (a + b + c) / 2;\n    int x = s * (s - a);\n    x = x * (s - b);\n    x = x * (s - c);\n    double area = (4 / (double) 3) * Math.sqrt(x);\n    return area;\n  }\n\n  public static void main(String[] args) {\n    int a = 9;\n    int b = 12;\n    int c = 15;\n    double ans = Area_of_Triangle(a, b, c);\n    System.out.println(ans);\n  }\n}\n", "python": "import math\n\n\ndef Area_of_Triangle(a, b, c):\n    s = (a + b + c) // 2\n    x = s * (s - a)\n    x = x * (s - b)\n    x = x * (s - c)\n    area = (4 / 3) * math.sqrt(x)\n    return area\n\n\na = 9\nb = 12\nc = 15\nans = Area_of_Triangle(a, b, c)\nprint(round(ans, 2))\n"}
{"text": "Find the equation of plane which passes through two points and parallel to a given axis ", "java": "import java.util.*;\n\nclass GFG {\n  static void findEquation(int x1, int y1, int z1, int x2, int y2, int z2, int d, int e, int f) {\n    double a = x2 - x1;\n    double b = y2 - y1;\n    double c = z2 - z1;\n    int A = (int) (b * f - c * e);\n    int B = (int) (a * f - c * d);\n    int C = (int) (a * e - b * d);\n    int D = -(int) (A * d - B * e + C * f);\n    System.out.println(A + \" x \u2581 + \u2581 \" + B + \" y \u2581 + \u2581 \" + C + \" z \u2581 + \u2581 \" + D + \" = \u2581 0 \u2581 \");\n  }\n\n  public static void main(String[] args) {\n    int x1 = 2, y1 = 3, z1 = 5;\n    int x2 = 6, y2 = 7, z2 = 8;\n    int a = 11, b = 23, c = 10;\n    findEquation(x1, y1, z1, x2, y2, z2, a, b, c);\n  }\n}\n", "python": "def findEquation(x1, y1, z1, x2, y2, z2, d, e, f):\n    a = x2 - x1\n    b = y2 - y1\n    c = z2 - z1\n    A = b * f - c * e\n    B = a * f - c * d\n    C = a * e - b * d\n    D = -(A * d - B * e + C * f)\n    print(A, \" x \u2581 + \u2581 \", B, \" y \u2581 + \u2581 \", C, \" z \u2581 + \u2581 \", D, \" = \u2581 0\")\n\n\nif __name__ == \" _ _ main _ _ \":\n    x1 = 2\n    y1 = 3\n    z1 = 5\n    x2 = 6\n    y2 = 7\n    z2 = 8\n    a = 11\n    b = 23\n    c = 10\n    findEquation(x1, y1, z1, x2, y2, z2, a, b, c)\n"}
{"text": "Find the length of the median of a Triangle if length of sides are given ", "java": "import java.util.*;\n\nclass GFG {\n  public static float median(int a, int b, int c) {\n    float n = (float) (Math.sqrt(2 * b * b + 2 * c * c - a * a) / 2);\n    return n;\n  }\n\n  public static void main(String[] args) {\n    int a, b, c;\n    a = 4;\n    b = 3;\n    c = 5;\n    float ans = median(a, b, c);\n    System.out.println(String.format(\" % .2f \", ans));\n  }\n}\n", "python": "import math\n\n\ndef median(a, b, c):\n    n = (1 / 2) * math.sqrt(2 * (b ** 2) + 2 * (c ** 2) - a ** 2)\n    return n\n\n\na = 4\nb = 3\nc = 5\nans = median(a, b, c)\nprint(round(ans, 2))\n"}
{"text": "Number of quadrilateral formed with N distinct points on circumference of Circle ", "java": "class GFG {\n  static int nCr(int n, int r) {\n    return (fact(n) / (fact(r) * fact(n - r)));\n  }\n\n  static int fact(int n) {\n    int res = 1;\n    for (int i = 2; i < n + 1; i++) res = res * i;\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(nCr(n, 4));\n  }\n}\n", "python": "def nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(int(nCr(n, 4)))\n"}
{"text": "Length of remaining two sides of a Triangle from a given side and its adjacent angles ", "java": "import java.util.*;\n\nclass GFG {\n  static void findSide(double a, double B, double C) {\n    double A = 180 - C - B;\n    double radA = (Math.PI * (A / 180));\n    double radB = (Math.PI * (B / 180));\n    double radC = (Math.PI * (C / 180));\n    double b = (a / Math.sin(radA) * Math.sin(radB));\n    double c = (a / Math.sin(radA) * Math.sin(radC));\n    System.out.printf(\" % .15f \", b);\n    System.out.printf(\" \u2581 % .15f \", c);\n  }\n\n  public static void main(String[] args) {\n    int a = 12, B = 60, C = 30;\n    findSide(a, B, C);\n  }\n}\n", "python": "import math\n\n\ndef findSide(a, B, C):\n    A = 180 - C - B\n    radA = math.pi * (A / 180)\n    radB = math.pi * (B / 180)\n    radC = math.pi * (C / 180)\n    b = a / math.sin(radA) * math.sin(radB)\n    c = a / math.sin(radA) * math.sin(radC)\n    return b, c\n\n\na = 12\nB = 60\nC = 30\nb, c = findSide(a, B, C)\nprint(b, c)\n"}
{"text": "Minimum side of square embedded in Regular polygon with N sides ", "java": "class GFG {\n  static double pi = Math.acos(-1.0);\n\n  static double nGon(int N) {\n    double proAngleVar;\n    if (N % 4 == 0) {\n      proAngleVar = pi * (180.0 / N) / 180;\n    } else {\n      proAngleVar = pi * (180.0 / (2 * N)) / 180;\n    }\n    double negX = 1.0e+99, posX = -1.0e+99, negY = 1.0e+99, posY = -1.0e+99;\n    for (int j = 0; j < N; ++j) {\n      double px = Math.cos(2 * pi * j / N + proAngleVar);\n      double py = Math.sin(2 * pi * j / N + proAngleVar);\n      negX = Math.min(negX, px);\n      posX = Math.max(posX, px);\n      negY = Math.min(negY, py);\n      posY = Math.max(posY, py);\n    }\n    double opt2 = Math.max(posX - negX, posY - negY);\n    return (double) opt2 / Math.sin(pi / N) / 2;\n  }\n\n  public static void main(String[] args) {\n    int N = 10;\n    System.out.printf(\" % .5f \", nGon(N));\n  }\n}\n", "python": "import math\n\npi = math.acos(-1.0)\n\n\ndef nGon(N):\n    proAngleVar = 0\n    if N % 4 == 0:\n        proAngleVar = pi * (180.0 / N) / 180\n    else:\n        proAngleVar = pi * (180.0 / (2 * N)) / 180\n    negX = 1.0e99\n    posX = -1.0e99\n    negY = 1.0e99\n    posY = -1.0e99\n    for j in range(N):\n        px = math.cos(2 * pi * j / N + proAngleVar)\n        py = math.sin(2 * pi * j / N + proAngleVar)\n        negX = min(negX, px)\n        posX = max(posX, px)\n        negY = min(negY, py)\n        posY = max(posY, py)\n    opt2 = max(posX - negX, posY - negY)\n    return opt2 / math.sin(pi / N) / 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 10\n    print(\" % .5f \" % nGon(N))\n"}
{"text": "Heptacontagon Number ", "java": "class GFG {\n  static int heptacontagonNum(int n) {\n    return (68 * n * n - 66 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    System.out.println(\"3rd \u2581 heptacontagon \u2581 Number \u2581 is \u2581 = \u2581 \" + heptacontagonNum(N));\n  }\n}\n", "python": "def heptacontagonNum(n):\n    return (68 * n * n - 66 * n) // 2\n\n\nN = 3\nprint(\"3rd \u2581 heptacontagon \u2581 Number \u2581 is \u2581 = \", heptacontagonNum(N))\n"}
{"text": "Program to check if N is a Icositetragonal number ", "java": "class GFG {\n  static boolean isicositetragonal(int N) {\n    float n = (float) ((10 + Math.sqrt(44 * N + 100)) / 22);\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int i = 24;\n    if (isicositetragonal(i)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isicositetragonal(N):\n    n = (10 + math.sqrt(44 * N + 100)) / 22\n    return (n - int(n)) == 0\n\n\ni = 24\nif isicositetragonal(i):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to check if N is a Tridecagonal Number or not ", "java": "class GFG {\n  static boolean isTridecagon(int N) {\n    float n = (float) ((9 + Math.sqrt(88 * N + 81)) / 22);\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int i = 13;\n    if (isTridecagon(i)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isTridecagon(N):\n    n = (9 + math.sqrt(88 * N + 81)) / 22\n    return (n - int(n)) == 0\n\n\ni = 13\nif isTridecagon(i):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to check if N is a Icosihenagonal number ", "java": "class GFG {\n  static boolean isicosihenagonal(int N) {\n    float n = (float) ((17 + Math.sqrt(152 * N + 289)) / 38);\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int i = 21;\n    if (isicosihenagonal(i)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isicosihenagonal(N):\n    n = (17 + math.sqrt(152 * N + 289)) / 38\n    return (n - int(n)) == 0\n\n\ni = 21\nif isicosihenagonal(i):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to check if N is a Icositrigonal number ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isicositrigonal(int N) {\n    float n = (float) (19 + Math.sqrt(168 * N + 361)) / 42;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String args[]) {\n    int i = 23;\n    if (isicositrigonal(i)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isicositrigonal(N):\n    n = (19 + math.sqrt(168 * N + 361)) / 42\n    return (n - int(n)) == 0\n\n\ni = 23\nif isicositrigonal(i):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Number of lines from given N points not parallel to X or Y axis ", "java": "import java.util.*;\n\nclass GFG {\n  static int NotParallel(int p[][], int n) {\n    HashMap<Integer, Integer> x_axis = new HashMap<Integer, Integer>();\n    HashMap<Integer, Integer> y_axis = new HashMap<Integer, Integer>();\n    for (int i = 0; i < n; i++) {\n      if (x_axis.containsKey(p[i][0])) x_axis.put(p[i][0], x_axis.get(p[i][0]) + 1);\n      else x_axis.put(p[i][0], 1);\n      if (y_axis.containsKey(p[i][1])) y_axis.put(p[i][1], y_axis.get(p[i][1]) + 1);\n      else y_axis.put(p[i][1], 1);\n    }\n    int total = (n * (n - 1)) / 2;\n    for (Map.Entry<Integer, Integer> i : x_axis.entrySet()) {\n      int c = i.getValue();\n      total -= (c * (c - 1)) / 2;\n    }\n    for (Map.Entry<Integer, Integer> i : y_axis.entrySet()) {\n      int c = i.getValue();\n      total -= (c * (c - 1)) / 2;\n    }\n    return total;\n  }\n\n  public static void main(String[] args) {\n    int p[][] = {{1, 2}, {1, 5}, {1, 15}, {2, 10}};\n    int n = p.length;\n    System.out.print(NotParallel(p, n));\n  }\n}\n", "python": "def NotParallel(p, n):\n    x_axis = {}\n    y_axis = {}\n    for i in range(n):\n        if p[i][0] not in x_axis:\n            x_axis[p[i][0]] = 0\n        x_axis[p[i][0]] += 1\n        if p[i][1] not in y_axis:\n            y_axis[p[i][1]] = 0\n        y_axis[p[i][1]] += 1\n    total = (n * (n - 1)) // 2\n    for i in x_axis:\n        c = x_axis[i]\n        total -= (c * (c - 1)) // 2\n    for i in y_axis:\n        c = y_axis[i]\n        total -= (c * (c - 1)) // 2\n    return total\n\n\nif __name__ == \" _ _ main _ _ \":\n    p = [[1, 2], [1, 5], [1, 15], [2, 10]]\n    n = len(p)\n    print(NotParallel(p, n))\n"}
{"text": "Minimum number of blocks required to form Hollow Rectangular Prism ", "java": "import java.util.*;\n\nclass GFG {\n  static void disp(int row_no, int block) {\n    System.out.print(row_no * block);\n  }\n\n  static int row(int ht, int h) {\n    return ht / h;\n  }\n\n  static void calculate(int l, int w, int h, int a, int ht) {\n    int no_block = (4 * a) / l;\n    int row_no;\n    if (h < w) row_no = row(ht, w);\n    else row_no = row(ht, h);\n    disp(row_no, no_block);\n  }\n\n  public static void main(String[] args) {\n    int l = 50, w = 20, h = 35;\n    int a = 700;\n    int ht = 140;\n    calculate(l, w, h, a, ht);\n  }\n}\n", "python": "def disp(row_no, block):\n    print(row_no * block)\n\n\ndef row(ht, h):\n    return ht // h\n\n\ndef calculate(l, w, h, a, ht):\n    no_block = (4 * a) // l\n    if h < w:\n        row_no = row(ht, w)\n    else:\n        row_no = row(ht, h)\n    disp(row_no, no_block)\n\n\nif __name__ == \" _ _ main _ _ \":\n    l = 50\n    w = 20\n    h = 35\n    a = 700\n    ht = 140\n    calculate(l, w, h, a, ht)\n"}
{"text": "Maximum area of rectangle inscribed in an equilateral triangle ", "java": "class GFG {\n  static double solve(int s) {\n    double area = (1.732 * Math.pow(s, 2)) / 8;\n    return area;\n  }\n\n  public static void main(String[] args) {\n    int n = 14;\n    System.out.println(solve(n));\n  }\n}\n", "python": "def solve(s):\n    area = (1.732 * s ** 2) / 8\n    return area\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 14\n    print(solve(n))\n"}
{"text": "Area of largest semicircle that can be drawn inside a square ", "java": "class GFG {\n  static float find_Area(float a) {\n    float R = a * (float) (2.0 - Math.sqrt(2));\n    float area = (float) ((3.14 * R * R) / 2.0);\n    return area;\n  }\n\n  public static void main(String[] args) {\n    float a = 4;\n    System.out.println(\" \u2581 Area \u2581 of \u2581 semicircle \u2581 = \u2581 \" + find_Area(a));\n  }\n}\n", "python": "from math import sqrt\n\n\ndef find_Area(a):\n    R = a * (2.0 - sqrt(2))\n    area = 3.14 * R * R / 2.0\n    return area\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 4\n    print(\" Area \u2581 of \u2581 semicircle \u2581 = \", find_Area(a))\n"}
{"text": "Program to find X , Y and Z intercepts of a plane ", "java": "import java.util.*;\n\nclass solution {\n  static double[] XandYandZintercept(double A, double B, double C, double D) {\n    double[] rslt = new double[3];\n    double x = -D / A;\n    double y = -D / B;\n    double z = -D / C;\n    rslt[0] = x;\n    rslt[1] = y;\n    rslt[2] = z;\n    return rslt;\n  }\n\n  static void equation_plane(int[] p, int[] q, int[] r) {\n    int x1 = p[0];\n    int y1 = p[1];\n    int z1 = p[2];\n    int x2 = q[0];\n    int y2 = q[1];\n    int z2 = q[2];\n    int x3 = r[0];\n    int y3 = r[1];\n    int z3 = r[2];\n    int a1 = x2 - x1;\n    int b1 = y2 - y1;\n    int c1 = z2 - z1;\n    int a2 = x3 - x1;\n    int b2 = y3 - y1;\n    int c2 = z3 - z1;\n    int A = b1 * c2 - b2 * c1;\n    int B = a2 * c1 - a1 * c2;\n    int C = a1 * b2 - b1 * a2;\n    int D = (-A * x1 - B * y1 - C * z1);\n    double[] rslt = XandYandZintercept(A, B, C, D);\n    for (int i = 0; i < 3; i++) {\n      System.out.printf(rslt[i] + \" \u2581 \");\n    }\n  }\n\n  public static void main(String args[]) {\n    int x1 = -1;\n    int y1 = 2;\n    int z1 = 1;\n    int x2 = 0;\n    int y2 = -3;\n    int z2 = 2;\n    int x3 = 1;\n    int y3 = 1;\n    int z3 = -4;\n    int[] p = {x1, y1, z1};\n    int[] q = {x2, y2, z2};\n    int[] r = {x3, y3, z3};\n    equation_plane(p, q, r);\n  }\n}\n", "python": "def XandYandZintercept(A, B, C, D):\n    x = -D / A\n    y = -D / B\n    z = -D / C\n    return [x, y, z]\n\n\ndef equation_plane(p, q, r):\n    x1 = p[0]\n    y1 = p[1]\n    z1 = p[2]\n    x2 = q[0]\n    y2 = q[1]\n    z2 = q[2]\n    x3 = r[0]\n    y3 = r[1]\n    z3 = r[2]\n    a1 = x2 - x1\n    b1 = y2 - y1\n    c1 = z2 - z1\n    a2 = x3 - x1\n    b2 = y3 - y1\n    c2 = z3 - z1\n    A = b1 * c2 - b2 * c1\n    B = a2 * c1 - a1 * c2\n    C = a1 * b2 - b1 * a2\n    D = -A * x1 - B * y1 - C * z1\n    print(XandYandZintercept(A, B, C, D))\n\n\nx1 = -1\ny1 = 2\nz1 = 1\nx2 = 0\ny2 = -3\nz2 = 2\nx3 = 1\ny3 = 1\nz3 = -4\nequation_plane((x1, y1, z1), (x2, y2, z2), (x3, y3, z3))\n"}
{"text": "Find the integer points ( x , y ) with Manhattan distance atleast N ", "java": "import java.util.*;\n\nclass GFG {\n  static class pair {\n    int first, second;\n\n    public pair(int first, int second) {\n      this.first = first;\n      this.second = second;\n    }\n  }\n\n  static Vector<pair> FindPoints(int n) {\n    Vector<pair> v = new Vector<pair>();\n    v.add(new pair(0, 0));\n    v.add(new pair(0, n));\n    v.add(new pair(n, 0));\n    v.add(new pair(n, n));\n    if (n % 2 == 0) v.add(new pair(n / 2, n / 2));\n    return v;\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    Vector<pair> v = FindPoints(N);\n    for (pair i : v) {\n      System.out.print(\" ( \" + i.first + \" , \u2581 \" + i.second + \" ) \u2581 \");\n    }\n  }\n}\n", "python": "def FindPoints(n):\n    v = []\n    v.append([0, 0])\n    v.append([0, n])\n    v.append([n, 0])\n    v.append([n, n])\n    if n % 2 == 0:\n        v.append([n // 2, n // 2])\n    return v\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    v = FindPoints(N)\n    for element in v:\n        print(\" ( \", element[0], \" , \", element[1], \" ) \", end=\" \u2581 \")\n    DEDENT\n"}
{"text": "Find if the glass will be empty or not when the rate of drinking is given ", "java": "class GFG {\n  static double pie = 3.1415926535897;\n\n  static double findsolution(double d, double h, double m, double n) {\n    double k = (4 * m) / (pie * d * d);\n    if (n > k) return -1;\n    double ans = (h / (k - n));\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    double d = 1, h = 1, m = 1, n = 1;\n    System.out.printf(\" % .5f \", findsolution(d, h, m, n));\n  }\n}\n", "python": "pie = 3.1415926535897\n\n\ndef findsolution(d, h, m, n):\n    k = (4 * m) / (pie * d * d)\n    if n > k:\n        return -1\n    ans = h / (k - n)\n    return round(ans, 5)\n\n\nd = 1\nh = 1\nm = 1\nn = 1\nprint(findsolution(d, h, m, n))\n"}
{"text": "Sum of internal angles of a Polygon ", "java": "class GFG {\n  static int sumOfInternalAngles(int n) {\n    if (n < 3) return 0;\n    return ((n - 2) * 180);\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.print(sumOfInternalAngles(n));\n  }\n}\n", "python": "def sumOfInternalAngles(n):\n    if n < 3:\n        return 0\n    return (n - 2) * 180\n\n\nn = 5\nprint(sumOfInternalAngles(n))\n"}
{"text": "Forming triangles using points on a square ", "java": "class GFG {\n  static int noOfTriangles(int n) {\n    int y = 4 * n;\n    return ((y * (y - 2) * (y - 1)) - (4 * n * (n - 2) * (n - 1))) / 6;\n  }\n\n  public static void main(String[] args) {\n    int n = 1;\n    System.out.println(noOfTriangles(n));\n  }\n}\n", "python": "def noOfTriangles(n):\n    y = 4 * n\n    return ((y * (y - 2) * (y - 1)) - (4 * n * (n - 2) * (n - 1))) // 6\n\n\nn = 1\nprint(noOfTriangles(n))\n"}
{"text": "Angle subtended by an arc at the centre of a circle ", "java": "import java.io.*;\n\nclass GFG {\n  static int angle(int n) {\n    return 2 * n;\n  }\n\n  public static void main(String[] args) {\n    int n = 30;\n    System.out.println(angle(n));\n  }\n}\n", "python": "def angle(n):\n    return 2 * n\n\n\nn = 30\nprint(angle(n))\n"}
{"text": "Program to find Area of Triangle inscribed in N ", "java": "import java.util.*;\n\nclass GFG {\n  static double area_of_regular_polygon(double n, double len) {\n    double P = (len * n);\n    double A = len / (2 * Math.tan((180 / n) * 3.14159 / 180));\n    double area = (P * A) / 2;\n    return area;\n  }\n\n  static double area_of_triangle_inscribed(double n, double len) {\n    double area = area_of_regular_polygon(n, len);\n    double triangle = area / n;\n    double ins_tri = (triangle * 3);\n    return ins_tri;\n  }\n\n  public static void main(String[] arg) {\n    double n = 6, len = 10;\n    System.out.printf(\" % .3f \", area_of_triangle_inscribed(n, len));\n  }\n}\n", "python": "import math\n\n\ndef area_of_regular_polygon(n, len):\n    P = len * n\n    A = len / (2 * math.tan((180 / n) * 3.14159 / 180))\n    area = (P * A) / 2\n    return area\n\n\ndef area_of_triangle_inscribed(n, len):\n    area = area_of_regular_polygon(n, len)\n    triangle = area / n\n    ins_tri = triangle * 3\n    return ins_tri\n\n\nn = 6\nlen = 10\nprint(round(area_of_triangle_inscribed(n, len), 3))\n"}
{"text": "Find the area of quadrilateral when diagonal and the perpendiculars to it from opposite vertices are given ", "java": "class GFG {\n  static float Area(int d, int h1, int h2) {\n    float area;\n    area = (float) 0.5 * d * (h1 + h2);\n    return area;\n  }\n\n  public static void main(String[] args) {\n    int d = 6, h1 = 4, h2 = 3;\n    System.out.println(\" Area \u2581 of \u2581 Quadrilateral \u2581 = \u2581 \" + Area(d, h1, h2));\n  }\n}\n", "python": "def Area(d, h1, h2):\n    area = 0.5 * d * (h1 + h2)\n    return area\n\n\nif __name__ == \" _ _ main _ _ \":\n    d = 6\n    h1 = 4\n    h2 = 3\n    print(\" Area \u2581 of \u2581 Quadrilateral \u2581 = \u2581 \", (Area(d, h1, h2)))\n"}
{"text": "Find the diagonal of the Cube ", "java": "class GFG {\n  static float diagonal_length(float a) {\n    float L;\n    L = a * (float) Math.sqrt(3);\n    return L;\n  }\n\n  public static void main(String[] args) {\n    float a = 5;\n    System.out.println(diagonal_length(a));\n  }\n}\n", "python": "from math import sqrt\n\n\ndef diagonal_length(a):\n    L = 0\n    L = a * sqrt(3)\n    return L\n\n\na = 5\nprint(diagonal_length(a))\n"}
{"text": "Concentric Hexagonal Numbers ", "java": "class GFG {\n  static int concentric_Haxagon(int n) {\n    return 3 * (int) Math.pow(n, 2) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(concentric_Haxagon(n));\n  }\n}\n", "python": "def concentric_Hexagon(n):\n    return 3 * pow(n, 2) // 2\n\n\nn = 3\nprint(concentric_Hexagon(n))\n"}
{"text": "Find area of the larger circle when radius of the smaller circle and difference in the area is given ", "java": "class GFG {\n  static double PI = 3.14;\n\n  static double find_area(int r, int d) {\n    double R = d / PI;\n    R += Math.pow(r, 2);\n    R = Math.sqrt(R);\n    double area = PI * Math.pow(R, 2);\n    return area;\n  }\n\n  public static void main(String[] args) {\n    int r = 4, d = 5;\n    System.out.println(find_area(r, d));\n  }\n}\n", "python": "PI = 3.14\nfrom math import pow, sqrt\n\n\ndef find_area(r, d):\n    R = d / PI\n    R += pow(r, 2)\n    R = sqrt(R)\n    area = PI * pow(R, 2)\n    return area\n\n\nif __name__ == \" _ _ main _ _ \":\n    r = 4\n    d = 5\n    print(find_area(r, d))\n"}
{"text": "Check whether Quadrilateral is valid or not if angles are given ", "java": "class GFG {\n  public static int Valid(int a, int b, int c, int d) {\n    if (a + b + c + d == 360) return 1;\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int a = 80, b = 70, c = 100, d = 110;\n    if (Valid(a, b, c, d) == 1) System.out.println(\" Valid \u2581 quadrilateral \");\n    else System.out.println(\" Invalid \u2581 quadrilateral \");\n  }\n}\n", "python": "def Valid(a, b, c, d):\n    if a + b + c + d == 360:\n        return True\n    return False\n\n\na = 80\nb = 70\nc = 100\nd = 110\nif Valid(a, b, c, d):\n    print(\" Valid \u2581 quadrilateral \")\nelse:\n    print(\" Invalid \u2581 quadrilateral \")\n"}
{"text": "Central angle of a N sided Regular Polygon ", "java": "class GFG {\n  static double calculate_angle(double n) {\n    double total_angle = 360;\n    return total_angle / n;\n  }\n\n  public static void main(String[] args) {\n    double N = 5;\n    System.out.println(calculate_angle(N));\n  }\n}\n", "python": "def calculate_angle(n):\n    total_angle = 360\n    return total_angle // n\n\n\nN = 5\nprint(calculate_angle(N))\n"}
{"text": "Program to calculate the area of Kite ", "java": "class GFG {\n  static float areaOfKite(int d1, int d2) {\n    float area = (d1 * d2) / 2;\n    return area;\n  }\n\n  public static void main(String[] args) {\n    int d1 = 4, d2 = 6;\n    System.out.println(\" Area \u2581 of \u2581 Kite \u2581 = \u2581 \" + areaOfKite(d1, d2));\n  }\n}\n", "python": "def areaOfKite(d1, d2):\n    area = (d1 * d2) / 2\n    return area\n\n\nd1 = 4\nd2 = 6\nprint(\" Area \u2581 of \u2581 Kite \u2581 = \u2581 \", areaOfKite(d1, d2))\n"}
{"text": "Program to calculate the area of Kite ", "java": "import java.io.*;\n\nclass GFG {\n  static double PI = (3.14159 / 180);\n\n  static float areaOfKite(int a, int b, double angle) {\n    angle = angle * PI;\n    double area = a * b * Math.sin(angle);\n    return (float) area;\n  }\n\n  public static void main(String[] args) {\n    int a = 4, b = 7, angle = 78;\n    System.out.println(\" Area \u2581 of \u2581 Kite \u2581 = \u2581 \" + areaOfKite(a, b, angle));\n  }\n}\n", "python": "def areaOfKite(d1, d2):\n    area = (d1 * d2) / 2\n    return area\n\n\nd1 = 4\nd2 = 6\nprint(\" Area \u2581 of \u2581 Kite \u2581 = \u2581 \", areaOfKite(d1, d2))\n"}
{"text": "Program to calculate angle on circumference subtended by the chord when the central angle subtended by the chord is given ", "java": "class GFG {\n  static float angleOncirCumference(float z) {\n    return (z / 2);\n  }\n\n  public static void main(String[] args) {\n    float angle = 65;\n    float z = angleOncirCumference(angle);\n    System.out.println(\" The \u2581 angle \u2581 is \u2581 \" + z + \" \u2581 degrees \");\n  }\n}\n", "python": "def angleOncirCumference(z):\n    return z / 2\n\n\nangle = 65\nz = angleOncirCumference(angle)\nprint(\" The \u2581 angle \u2581 is \", (z), \" degrees \")\n"}
{"text": "Percentage increase in the cylinder if the height is increased by given percentage but radius remains constant ", "java": "import java.io.*;\n\nclass GFG {\n  static void newvol(double x) {\n    System.out.print(\n        \" percentage \u2581 increase \u2581 \"\n            + \" in \u2581 the \u2581 volume \u2581 of \u2581 the \u2581 cylinder \u2581 is \u2581 \"\n            + x\n            + \" % \");\n  }\n\n  public static void main(String[] args) {\n    double x = 10;\n    newvol(x);\n  }\n}\n", "python": "def newvol(x):\n    print(\n        \" percentage \u2581 increase \u2581 in \u2581 the \u2581 volume \u2581 of \u2581 the \u2581 cylinder \u2581 is \u2581 \",\n        x,\n        \" % \",\n    )\n\n\nx = 10.0\nnewvol(x)\n"}
{"text": "Find the side of the squares which are inclined diagonally and lined in a row ", "java": "import java.io.*;\n\nclass GFG {\n  static void radius(double n, double d) {\n    System.out.print(\" The \u2581 side \u2581 of \u2581 each \u2581 square \u2581 is \u2581 \" + d / ((n - 1) * Math.sqrt(2)));\n  }\n\n  public static void main(String[] args) {\n    double d = 42, n = 4;\n    radius(n, d);\n  }\n}\n", "python": "def radius(n, d):\n    print(\" The \u2581 side \u2581 of \u2581 each \u2581 square \u2581 is \u2581 \", d / ((n - 1) * (2 ** (1 / 2))))\n\n\nd = 42\nn = 4\nradius(n, d)\n"}
{"text": "Program to calculate area of inner circle which passes through center of outer circle and touches its circumference ", "java": "class GFG {\n  static double innerCirclearea(double radius) {\n    if (radius < 0) {\n      return -1;\n    }\n    double r = radius / 2;\n    double Area = (3.14 * Math.pow(r, 2));\n    return Area;\n  }\n\n  public static void main(String arr[]) {\n    double radius = 4;\n    System.out.println(\" Area \u2581 of \u2581 circle \u2581 c2 \u2581 = \u2581 \" + innerCirclearea(radius));\n  }\n}\n", "python": "def innerCirclearea(radius):\n    if radius < 0:\n        return -1\n    r = radius / 2\n    Area = 3.14 * pow(r, 2)\n    return Area\n\n\nif __name__ == \" _ _ main _ _ \":\n    radius = 4\n    print(\" Area \u2581 of \u2581 circle \u2581 c2 \u2581 = \", innerCirclearea(radius))\n"}
{"text": "Angle subtended by the chord when the angle subtended by another chord of same length is given ", "java": "import java.io.*;\n\nclass GFG {\n  static void angleequichord(int z) {\n    System.out.println(\" The \u2581 angle \u2581 subtended \u2581 at \u2581 the \u2581 center \u2581 is \u2581 \" + z + \" \u2581 degrees \");\n  }\n\n  public static void main(String[] args) {\n    int z = 48;\n    angleequichord(z);\n  }\n}\n", "python": "def angleequichord(z):\n    print(\" The \u2581 angle \u2581 subtended \u2581 at \", \" the \u2581 center \u2581 is \", z, \" degrees \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    z = 48\n    angleequichord(z)\n"}
{"text": "Distance of chord from center when distance between center and another equal length chord is given ", "java": "import java.io.*;\n\nclass GFG {\n  static void lengequichord(int z) {\n    System.out.println(\n        \" The \u2581 distance \u2581 between \u2581 the \u2581 \" + \" chord \u2581 and \u2581 the \u2581 center \u2581 is \u2581 \" + z);\n  }\n\n  public static void main(String[] args) {\n    int z = 48;\n    lengequichord(z);\n  }\n}\n", "python": "def lengequichord(z):\n    print(\" The \u2581 distance \u2581 between \u2581 the \", \" chord \u2581 and \u2581 the \u2581 center \u2581 is \", z)\n\n\nif __name__ == \" _ _ main _ _ \":\n    z = 48\n    lengequichord(z)\n"}
{"text": "Length of the perpendicular bisector of the line joining the centers of two circles ", "java": "class GFG {\n  static void lengperpbisect(double r1, double r2) {\n    double z = 2 * Math.sqrt((r1 * r1) - ((r1 - r2) * (r1 - r2) / 4));\n    System.out.println(\" The \u2581 length \u2581 of \u2581 the \u2581 \" + \" perpendicular \u2581 bisector \u2581 is \u2581 \" + z);\n  }\n\n  public static void main(String[] args) {\n    double r1 = 5, r2 = 3;\n    lengperpbisect(r1, r2);\n  }\n}\n", "python": "def lengperpbisect(r1, r2):\n    z = 2 * (((r1 * r1) - ((r1 - r2) * (r1 - r2) / 4)) ** (1 / 2))\n    print(\" The \u2581 length \u2581 of \u2581 the \u2581 perpendicular \u2581 bisector \u2581 is \u2581 \", z)\n\n\nr1 = 5\nr2 = 3\nlengperpbisect(r1, r2)\n"}
{"text": "Length of the chord the circle if length of the another chord which is equally inclined through the diameter is given ", "java": "import java.io.*;\n\nclass GFG {\n  static void lengchord(int z) {\n    System.out.println(\" The \u2581 length \u2581 is \u2581 \" + z);\n  }\n\n  public static void main(String[] args) {\n    int z = 48;\n    lengchord(z);\n  }\n}\n", "python": "def lengchord(z):\n    print(\" The \u2581 length \u2581 is \u2581 \", end=\" \")\n    print(z)\n\n\nz = 48\nlengchord(z)\n"}
{"text": "Distance between centers of two intersecting circles if the radii and common chord length is given ", "java": "import java.io.*;\n\nclass GFG {\n  static double distcenter(int r1, int r2, int x) {\n    double z = (Math.sqrt((r1 * r1) - (x / 2 * x / 2))) + (Math.sqrt((r2 * r2) - (x / 2 * x / 2)));\n    System.out.println(\" distance \u2581 between \u2581 the \" + \" \u2581 centers \u2581 is \u2581 \" + (int) z);\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int r1 = 24, r2 = 37, x = 40;\n    distcenter(r1, r2, x);\n  }\n}\n", "python": "def distcenter(r1, r2, x):\n    z = (((r1 * r1) - (x / 2 * x / 2)) ** (1 / 2)) + (\n        ((r2 * r2) - (x / 2 * x / 2)) ** (1 / 2)\n    )\n    print(\" distance \u2581 between \u2581 thecenters \u2581 is \u2581 \", end=\" \")\n    print(int(z))\n\n\nr1 = 24\nr2 = 37\nx = 40\ndistcenter(r1, r2, x)\n"}
{"text": "Exterior angle of a cyclic quadrilateral when the opposite interior angle is given ", "java": "import java.io.*;\n\nclass GFG {\n  static void angleextcycquad(int z) {\n    System.out.print(\n        \" The \u2581 exterior \u2581 angle \u2581 of \u2581 the \"\n            + \" \u2581 cyclic \u2581 quadrilateral \u2581 is \u2581 \"\n            + z\n            + \" \u2581 degrees \");\n  }\n\n  public static void main(String[] args) {\n    int z = 48;\n    angleextcycquad(z);\n  }\n}\n", "python": "def angleextcycquad(z):\n    print(\" The \u2581 exterior \u2581 angle \u2581 of \u2581 the \", end=\" \")\n    print(\" cyclic \u2581 quadrilateral \u2581 is \u2581 \", end=\" \")\n    print(z, \" \u2581 degrees \")\n\n\nz = 48\nangleextcycquad(z)\n"}
{"text": "Angle between a chord and a tangent when angle in the alternate segment is given ", "java": "import java.io.*;\n\nclass GFG {\n  static void anglechordtang(int z) {\n    System.out.print(\n        \" The \u2581 angle \u2581 between \u2581 tangent \" + \" \u2581 and \u2581 the \u2581 chord \u2581 is \u2581 \" + z + \" \u2581 degrees \");\n  }\n\n  public static void main(String[] args) {\n    int z = 48;\n    anglechordtang(z);\n  }\n}\n", "python": "def anglechordtang(z):\n    print(\n        \" The \u2581 angle \u2581 between \u2581 tangent \", \" and \u2581 the \u2581 chord \u2581 is \", z, \" degrees \"\n    )\n\n\nz = 48\nanglechordtang(z)\n"}
{"text": "Minimize replacements to make every element in an array exceed every element in another given array ", "java": "import java.util.*;\n\nclass GFG {\n  static void MinTime(int[] a, int[] b, int n, int m) {\n    int ans = 2147483647;\n    int[] prefix_a = new int[10];\n    int[] prefix_b = new int[10];\n    for (int i = 0; i < n; i++) {\n      prefix_a[a[i]]++;\n    }\n    for (int i = 0; i < m; i++) {\n      prefix_b[b[i]]++;\n    }\n    for (int i = 1; i <= 9; i++) {\n      prefix_a[i] += prefix_a[i - 1];\n    }\n    for (int i = 1; i <= 9; i++) {\n      prefix_b[i] += prefix_b[i - 1];\n    }\n    for (int i = 0; i <= 9; i++) {\n      ans = Math.min(ans, prefix_a[i] + m - prefix_b[i]);\n      ans = Math.min(ans, n - prefix_a[i] + prefix_b[i]);\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int[] A = {0, 0, 1, 3, 3};\n    int[] B = {2, 0, 3};\n    int N = A.length;\n    int M = B.length;\n    MinTime(A, B, N, M);\n  }\n}\n", "python": "def MinTime(a, b, n, m):\n    ans = float(\" inf \")\n    prefix_a = [0] * 10\n    prefix_b = [0] * 10\n    for i in range(n):\n        prefix_a[a[i]] += 1\n    for i in range(m):\n        prefix_b[b[i]] += 1\n    for i in range(1, 10):\n        prefix_a[i] += prefix_a[i - 1]\n    for i in range(1, 10):\n        prefix_b[i] += prefix_b[i - 1]\n    for i in range(1, 10):\n        ans = min(ans, prefix_a[i] + m - prefix_b[i])\n        ans = min(ans, n - prefix_a[i] + prefix_b[i])\n    print(ans)\n\n\nA = [0, 0, 1, 3, 3]\nB = [2, 0, 3]\nN = len(A)\nM = len(B)\nMinTime(A, B, N, M)\n"}
{"text": "Generate a circular permutation with number of mismatching bits between pairs of adjacent elements exactly 1 ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static List<Integer> circularPermutation(int n, int start) {\n    List<Integer> res = new ArrayList<>(List.of(0)), ret = new ArrayList<>();\n    int index = -1;\n    for (int k = 0, add = 1 << k; k < n; k++, add = 1 << k) {\n      for (int i = res.size() - 1; i >= 0; i--) {\n        if (res.get(i) + add == start) index = res.size();\n        res.add(res.get(i) + add);\n      }\n    }\n    if (start == 0) return res;\n    while (ret.size() < res.size()) {\n      ret.add(res.get(index));\n      index = (index + 1) % res.size();\n    }\n    return ret;\n  }\n\n  public static void main(String[] args) {\n    int N = 2, S = 3;\n    System.out.println(circularPermutation(N, S));\n  }\n}\n", "python": "def circularPermutation(n, start):\n    res = [0]\n    ret = []\n    index, add = -1, 1\n    for k in range(n):\n        add = 1 << k\n        for i in range(len(res) - 1, -1, -1):\n            if res[i] + add == start:\n                index = len(res)\n            res.append(res[i] + add)\n        add = 1 << k\n    if start == 0:\n        return res\n    while len(ret) < len(res):\n        ret.append(res[index])\n        index = (index + 1) % len(res)\n    return ret\n\n\nif __name__ == \" _ _ main _ _ \":\n    N, S = 2, 3\n    print(circularPermutation(N, S))\n"}
{"text": "Count tiles of dimensions 2 * 1 that can be placed in an M * N rectangular board that satisfies the given conditions ", "java": "import java.io.*;\n\nclass GFG {\n  static int numberOfTiles(int n, int m) {\n    if (n % 2 == 1) {\n      return -1;\n    }\n    return (m * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 2, m = 4;\n    System.out.println(numberOfTiles(n, m));\n  }\n}\n", "python": "def numberOfTiles(N, M):\n    if N % 2 == 1:\n        return -1\n    return (N * M) // 2\n\n\nN = 2\nM = 4\nprint(numberOfTiles(N, M))\n"}
{"text": "Maximum product of the remaining pair after repeatedly replacing pairs of adjacent array elements with their sum ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void maxProduct(int[] arr, int N) {\n    int max_product = Integer.MIN_VALUE;\n    int prefix_sum = 0;\n    int sum = 0;\n    for (int i = 0; i < N; i++) {\n      sum += arr[i];\n    }\n    for (int i = 0; i < N - 1; i++) {\n      prefix_sum += arr[i];\n      int X = prefix_sum;\n      int Y = sum - prefix_sum;\n      max_product = Math.max(max_product, X * Y);\n    }\n    System.out.print(max_product);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {2, 3, 5, 6, 7};\n    int N = arr.length;\n    maxProduct(arr, N);\n  }\n}\n", "python": "import sys\n\n\ndef maxProduct(arr, N):\n    max_product = -sys.maxsize\n    prefix_sum = 0\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    for i in range(N - 1):\n        prefix_sum += arr[i]\n        X = prefix_sum\n        Y = sum - prefix_sum\n        max_product = max(max_product, X * Y)\n    print(max_product)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 3, 5, 6, 7]\n    N = len(arr)\n    maxProduct(arr, N)\n"}
{"text": "Maximum prefix sum after K reversals of a given array ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void maxSumAfterKReverse(Integer arr[], int K, int N) {\n    int sum = Integer.MIN_VALUE;\n    if (K % 2 != 0) Collections.reverse(Arrays.asList(arr));\n    int currsum = 0;\n    for (int i = 0; i < N; i++) {\n      currsum += arr[i];\n      sum = Math.max(sum, currsum);\n    }\n    System.out.print(sum);\n  }\n\n  public static void main(String[] args) {\n    Integer[] arr = {1, 5, 8, 9, 11, 2};\n    int K = 1;\n    int N = arr.length;\n    maxSumAfterKReverse(arr, K, N);\n  }\n}\n", "python": "import sys\n\n\ndef maxSumAfterKReverse(arr, K, N):\n    sum = -sys.maxsize - 1\n    if K & 1:\n        arr.reverse()\n    currsum = 0\n    for i in range(N):\n        currsum += arr[i]\n        sum = max(sum, currsum)\n    print(sum)\n\n\narr = [1, 5, 8, 9, 11, 2]\nK = 1\nN = len(arr)\nmaxSumAfterKReverse(arr, K, N)\n"}
{"text": "Check if a Float value is equivalent to an Integer value ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isInteger(double N) {\n    int X = (int) N;\n    double temp2 = N - X;\n    if (temp2 > 0) {\n      return false;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    double N = 1.5;\n    if (isInteger(N)) {\n      System.out.println(\" YES \");\n    } else {\n      System.out.println(\" NO \");\n    }\n  }\n}\n", "python": "def isInteger(N):\n    X = int(N)\n    temp2 = N - X\n    if temp2 > 0:\n        return False\n    return True\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 1.5\n    if isInteger(N):\n        print(\" YES \")\n    else:\n        print(\" NO \")\n    DEDENT\n"}
{"text": "Flip bits of the sum of count of set bits of two given numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static int countSetBits(int n) {\n    int count = 0;\n    while (n != 0) {\n      n &= (n - 1);\n      count++;\n    }\n    return count;\n  }\n\n  static int invertBits(int n) {\n    int x = (int) (Math.log(n) / Math.log(2));\n    int m = 1 << x;\n    m = m | m - 1;\n    n = n ^ m;\n    return n;\n  }\n\n  static void invertSum(int A, int B) {\n    int temp = countSetBits(A) + countSetBits(B);\n    System.out.print(invertBits(temp));\n  }\n\n  public static void main(String args[]) {\n    int A = 5;\n    int B = 7;\n    invertSum(A, B);\n  }\n}\n", "python": "import math\n\n\ndef countSetBits(n):\n    count = 0\n    while n != 0:\n        n &= n - 1\n        count += 1\n    return count\n\n\ndef invertBits(n):\n    x = (int)(math.log(n) / math.log(2))\n    m = 1 << x\n    m = m | m - 1\n    n = n ^ m\n    return n\n\n\ndef invertSum(A, B):\n    temp = countSetBits(A) + countSetBits(B)\n    print(invertBits(temp))\n\n\nA = 5\nB = 7\ninvertSum(A, B)\n"}
{"text": "XOR of all even numbers from a given range ", "java": "class GFG {\n  static int bitwiseXorRange(int n) {\n    if (n % 4 == 0) return n;\n    if (n % 4 == 1) return 1;\n    if (n % 4 == 2) return n + 1;\n    return 0;\n  }\n\n  static int evenXorRange(int l, int r) {\n    int xor_l;\n    int xor_r;\n    xor_r = 2 * bitwiseXorRange(r / 2);\n    xor_l = 2 * bitwiseXorRange((l - 1) / 2);\n    return xor_l ^ xor_r;\n  }\n\n  public static void main(String[] args) {\n    int l = 10;\n    int r = 20;\n    System.out.print(evenXorRange(l, r));\n  }\n}\n", "python": "def bitwiseXorRange(n):\n    if n % 4 == 0:\n        return n\n    if n % 4 == 1:\n        return 1\n    if n % 4 == 2:\n        return n + 1\n    return 0\n\n\ndef evenXorRange(l, r):\n    xor_r = 2 * bitwiseXorRange(r // 2)\n    xor_l = 2 * bitwiseXorRange((l - 1) // 2)\n    return xor_l ^ xor_r\n\n\nif __name__ == \" _ _ main _ _ \":\n    l = 10\n    r = 20\n    print(evenXorRange(l, r))\n"}
{"text": "Program to calculate Variance of first N Natural Numbers ", "java": "class GFG {\n  static double find_Variance(int n) {\n    long numerator = n * n - 1;\n    double ans = (numerator * 1.0) / 12;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.println(find_Variance(N));\n  }\n}\n", "python": "def find_Variance(n):\n    numerator = n * n - 1\n    ans = (numerator * 1.0) / 12\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    a = find_Variance(N)\n    print(\" { 0 : . 6f } \".format(a))\n"}
{"text": "Sum of the first N terms of XOR Fibonacci series ", "java": "import java.util.*;\n\nclass GFG {\n  static void findSum(int a, int b, int n) {\n    if (n == 1) {\n      System.out.println(a);\n      return;\n    }\n    int s = a + b;\n    for (int i = 0; i < n - 2; i++) {\n      int x = a ^ b;\n      s += x;\n      a = b;\n      b = x;\n    }\n    System.out.println(s);\n  }\n\n  public static void main(String[] args) {\n    int a = 2, b = 5, N = 8;\n    findSum(a, b, N);\n  }\n}\n", "python": "def findSum(a, b, N):\n    if N == 1:\n        print(a)\n        return\n    s = a + b\n    for i in range(0, N - 2):\n        x = a ^ b\n        s += x\n        a = b\n        b = x\n    print(s)\n    return\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 2\n    b = 5\n    N = 8\n    findSum(a, b, N)\n"}
{"text": "Sum of the first N terms of XOR Fibonacci series ", "java": "import java.util.*;\n\nclass GFG {\n  static void findSum(int a, int b, int n) {\n    int sum = 0;\n    int x = a ^ b;\n    if (n % 3 == 0) {\n      sum = (n / 3) * (a + b + x);\n    } else if (n % 3 == 1) {\n      sum = (n / 3) * (a + b + x) + a;\n    } else {\n      sum = (n / 3) * (a + b + x) + a + b;\n    }\n    System.out.print(sum);\n  }\n\n  public static void main(String[] args) {\n    int a = 2, b = 5, N = 8;\n    findSum(a, b, N);\n  }\n}\n", "python": "def findSum(a, b, N):\n    if N == 1:\n        print(a)\n        return\n    s = a + b\n    for i in range(0, N - 2):\n        x = a ^ b\n        s += x\n        a = b\n        b = x\n    print(s)\n    return\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 2\n    b = 5\n    N = 8\n    findSum(a, b, N)\n"}
{"text": "Modify N by adding its smallest positive divisor exactly K times ", "java": "class GFG {\n  static int smallestDivisorGr1(int N) {\n    for (int i = 2; i <= Math.sqrt(N); i++) {\n      if (N % i == 0) {\n        return i;\n      }\n    }\n    return N;\n  }\n\n  static int findValOfNWithOperat(int N, int K) {\n    for (int i = 1; i <= K; i++) {\n      N += smallestDivisorGr1(N);\n    }\n    return N;\n  }\n\n  public static void main(String[] args) {\n    int N = 6, K = 4;\n    System.out.print(findValOfNWithOperat(N, K));\n  }\n}\n", "python": "def smallestDivisorGr1(N):\n    for i in range(sqrt(N)):\n        i += 1\n    if N % i == 0:\n        return i\n    return N\n\n\ndef findValOfNWithOperat(N, K):\n    if N % 2 == 0:\n        N += K * 2\n    else:\n        N += smallestDivisorGr1(N) + (K - 1) * 2\n    return N\n\n\nN = 6\nK = 4\nprint(findValOfNWithOperat(N, K))\n"}
{"text": "Maximize sum of MEX values of each node in an N ", "java": "import java.util.*;\n\nclass GFG {\n  static class pair {\n    int first, second;\n\n    public pair(int first, int second) {\n      this.first = first;\n      this.second = second;\n    }\n  }\n\n  static void makeTree(Vector<Integer> tree[], pair edges[], int N) {\n    for (int i = 0; i < N - 1; i++) {\n      int u = edges[i].first;\n      int v = edges[i].second;\n      tree[u].add(v);\n    }\n  }\n\n  static pair dfs(int node, Vector<Integer> tree[]) {\n    int mex = 0;\n    int size = 1;\n    for (int u : tree[node]) {\n      pair temp = dfs(u, tree);\n      mex = Math.max(mex, temp.first);\n      size += temp.second;\n    }\n    return new pair(mex + size, size);\n  }\n\n  public static void main(String[] args) {\n    int N = 7;\n    pair edges[] = {\n      new pair(1, 4), new pair(1, 5), new pair(5, 2), new pair(5, 3), new pair(4, 7), new pair(7, 6)\n    };\n    @SuppressWarnings(\" unchecked \")\n    Vector<Integer>[] tree = new Vector[N + 1];\n    for (int i = 0; i < tree.length; i++) tree[i] = new Vector<Integer>();\n    makeTree(tree, edges, N);\n    System.out.print((dfs(1, tree).first));\n  }\n}\n", "python": "def makeTree(tree, edges, N):\n    for i in range(N - 1):\n        u = edges[i][0]\n        v = edges[i][1]\n        tree[u].append(v)\n    return tree\n\n\ndef dfs(node, tree):\n    mex = 0\n    size = 1\n    for u in tree[node]:\n        temp = dfs(u, tree)\n        mex = max(mex, temp[0])\n        size += temp[1]\n    return [mex + size, size]\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 7\n    edges = [[1, 4], [1, 5], [5, 2], [5, 3], [4, 7], [7, 6]]\n    tree = [[] for i in range(N + 1)]\n    tree = makeTree(tree, edges, N)\n    print(dfs(1, tree)[0])\n"}
{"text": "Minimum value to be added to the prefix sums at each array indices to make them positive ", "java": "import java.util.*;\n\nclass GFG {\n  static int minStartValue(int[] nums) {\n    int minValue = 0;\n    int sum = 0;\n    for (int n : nums) {\n      sum += n;\n      minValue = Math.min(minValue, sum);\n    }\n    int startValue = 1 - minValue;\n    return startValue;\n  }\n\n  public static void main(String[] args) {\n    int[] nums = {-3, 2, -3, 4, 2};\n    System.out.println(minStartValue(nums));\n  }\n}\n", "python": "def minStartValue(nums):\n    minValue = 0\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n        minValue = min(minValue, sum)\n    startValue = 1 - minValue\n    return startValue\n\n\nif __name__ == \" _ _ main _ _ \":\n    nums = [-3, 2, -3, 4, 2]\n    print(minStartValue(nums))\n"}
{"text": "Count ways to split array into two equal sum subarrays by replacing each array element to 0 once ", "java": "import java.util.*;\n\nclass GFG {\n  static int countSubArrayRemove(int[] arr, int N) {\n    HashMap<Integer, Integer> prefix_element_count = new HashMap<Integer, Integer>();\n    HashMap<Integer, Integer> suffix_element_count = new HashMap<Integer, Integer>();\n    int total_sum_of_elements = 0;\n    for (int i = N - 1; i >= 0; i--) {\n      total_sum_of_elements += arr[i];\n      if (!suffix_element_count.containsKey(arr[i])) suffix_element_count.put(arr[i], 1);\n      else suffix_element_count.put(arr[i], suffix_element_count.get(arr[i]) + 1);\n    }\n    int prefix_sum = 0;\n    int suffix_sum = 0;\n    int count_subarray_equal_sum = 0;\n    for (int i = 0; i < N; i++) {\n      prefix_sum += arr[i];\n      if (!prefix_element_count.containsKey(arr[i])) prefix_element_count.put(arr[i], 1);\n      else prefix_element_count.put(arr[i], prefix_element_count.get(arr[i]) + 1);\n      suffix_sum = total_sum_of_elements - prefix_sum;\n      if (!suffix_element_count.containsKey(arr[i])) suffix_element_count.put(arr[i], 0);\n      else suffix_element_count.put(arr[i], suffix_element_count.get(arr[i]) - 1);\n      int difference = prefix_sum - suffix_sum;\n      int number_of_subarray_at_i_split = 0;\n      if (prefix_element_count.containsKey(difference))\n        number_of_subarray_at_i_split = prefix_element_count.get(difference);\n      if (suffix_element_count.containsKey(-difference))\n        number_of_subarray_at_i_split += suffix_element_count.get(-difference);\n      count_subarray_equal_sum += number_of_subarray_at_i_split;\n    }\n    return count_subarray_equal_sum;\n  }\n\n  public static void main(String args[]) {\n    int[] arr = {1, 2, 1, 1, 3, 1};\n    int N = arr.length;\n    System.out.println(countSubArrayRemove(arr, N));\n  }\n}\n", "python": "def countSubArrayRemove(arr, N):\n    prefix_element_count = {}\n    suffix_element_count = {}\n    total_sum_of_elements = 0\n    i = N - 1\n    while i >= 0:\n        total_sum_of_elements += arr[i]\n        suffix_element_count[arr[i]] = suffix_element_count.get(arr[i], 0) + 1\n        i -= 1\n    prefix_sum = 0\n    suffix_sum = 0\n    count_subarray_equal_sum = 0\n    for i in range(N):\n        prefix_sum += arr[i]\n        prefix_element_count[arr[i]] = prefix_element_count.get(arr[i], 0) + 1\n        suffix_sum = total_sum_of_elements - prefix_sum\n        suffix_element_count[arr[i]] = suffix_element_count.get(arr[i], 0) - 1\n        difference = prefix_sum - suffix_sum\n        number_of_subarray_at_i_split = prefix_element_count.get(\n            difference, 0\n        ) + suffix_element_count.get(-difference, 0)\n        count_subarray_equal_sum += number_of_subarray_at_i_split\n    return count_subarray_equal_sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 1, 1, 3, 1]\n    N = len(arr)\n    print(countSubArrayRemove(arr, N))\n"}
{"text": "Count set bits in Bitwise XOR of all adjacent elements upto N ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int countXORSetBitsAdjElemRange1_N(int N) {\n    int total_set_bits = 0;\n    int bit_Position = 1;\n    while (N != 0) {\n      total_set_bits += ((N + 1) / 2 * bit_Position);\n      N -= (N + 1) / 2;\n      bit_Position++;\n    }\n    return total_set_bits;\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    System.out.println(countXORSetBitsAdjElemRange1_N(N));\n  }\n}\n", "python": "def countXORSetBitsAdjElemRange1_N(N):\n    total_set_bits = 0\n    bit_Position = 1\n    while N:\n        total_set_bits += (N + 1) // 2 * bit_Position\n        N -= (N + 1) // 2\n        bit_Position += 1\n    return total_set_bits\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    print(countXORSetBitsAdjElemRange1_N(N))\n"}
{"text": "Bitwise OR of all unordered pairs from a given array ", "java": "import java.util.*;\n\nclass GFG {\n  static int TotalBitwiseORPair(int arr[], int N) {\n    int totalOR = 0;\n    for (int i = 0; i < N; i++) {\n      totalOR |= arr[i];\n    }\n    return totalOR;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 5, 12, 15};\n    int N = arr.length;\n    System.out.print(TotalBitwiseORPair(arr, N));\n  }\n}\n", "python": "def TotalBitwiseORPair(arr, N):\n    totalOR = 0\n    for i in range(N):\n        totalOR |= arr[i]\n    return totalOR\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [4, 5, 12, 15]\n    N = len(arr)\n    print(TotalBitwiseORPair(arr, N))\n"}
{"text": "Probability of obtaining Prime Numbers as product of values obtained by throwing N dices ", "java": "import java.util.*;\n\nclass GFG {\n  static int power(int x, int N) {\n    int res = 1;\n    while (N > 0) {\n      if (N % 2 == 1) {\n        res = (res * x);\n      }\n      x = (x * x);\n      N = N >> 1;\n    }\n    return res;\n  }\n\n  static void probablityPrimeprod(int N) {\n    int N_E = 3 * N;\n    int N_S = power(6, N);\n    System.out.print(N_E + \" \u2581 / \u2581 \" + N_S);\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    probablityPrimeprod(N);\n  }\n}\n", "python": "def power(x, N):\n    res = 1\n    while N > 0:\n        if N % 2 == 1:\n            res = res * x\n        x = x * x\n        N = N >> 1\n    return res\n\n\ndef probablityPrimeprod(N):\n    N_E = 3 * N\n    N_S = power(6, N)\n    print(N_E, \" \u2581 / \u2581 \", N_S)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    probablityPrimeprod(N)\n"}
{"text": "Smaller palindromic number closest to N ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean checkPalindrome(int N) {\n    int rev = 0;\n    int temp = N;\n    while (N != 0) {\n      rev = rev * 10 + N % 10;\n      N = N / 10;\n    }\n    N = temp;\n    if (N == rev) {\n      return true;\n    }\n    return false;\n  }\n\n  static int closestSmallerPalindrome(int N) {\n    do {\n      N--;\n    } while (N >= 0 && !checkPalindrome(N));\n    return N;\n  }\n\n  public static void main(String[] args) {\n    int N = 4000;\n    System.out.println(closestSmallerPalindrome(N));\n  }\n}\n", "python": "def checkPalindrome(N):\n    rev = 0\n    temp = N\n    while N != 0:\n        rev = rev * 10 + N % 10\n        N = N // 10\n    N = temp\n    if N == rev:\n        return True\n    return False\n\n\ndef closestSmallerPalindrome(N):\n    while N >= 0 and not checkPalindrome(N):\n        N -= 1\n    return N\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4000\n    print(closestSmallerPalindrome(N))\n"}
{"text": "Minimize increments or decrements by 2 to convert given value to a perfect square ", "java": "class GFG {\n  static int MinimumOperationReq(int N) {\n    int cntDecr = 0;\n    int temp = N;\n    while (temp > 0) {\n      int X = (int) Math.sqrt(temp);\n      if (X * X == temp) {\n        break;\n      }\n      temp = temp - 2;\n      cntDecr += 1;\n    }\n    int cntIncr = 0;\n    while (true) {\n      int X = (int) Math.sqrt(N);\n      if (X * X == N) {\n        break;\n      }\n      N = N + 2;\n      cntIncr += 1;\n    }\n    return Math.min(cntIncr, cntDecr);\n  }\n\n  public static void main(String args[]) {\n    int N = 15;\n    System.out.print(MinimumOperationReq(N));\n  }\n}\n", "python": "def MinimumOperationReq(N):\n    cntDecr = 0\n    temp = N\n    while temp > 0:\n        X = int(pow(temp, 1 / 2))\n        if X * X == temp:\n            break\n        temp = temp - 2\n        cntDecr += 1\n    cntIncr = 0\n    while True:\n        X = int(pow(N, 1 / 2))\n        if X * X == N:\n            break\n        N = N + 2\n        cntIncr += 1\n    return min(cntIncr, cntDecr)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 15\n    print(MinimumOperationReq(N))\n"}
{"text": "First term from given Nth term of the equation F ( N ) = ( 2 * F ( N ", "java": "import java.util.*;\n\nclass GFG {\n  static final int M = 1000000007;\n\n  static long power(long x, long N) {\n    long res = 1;\n    while (N > 0) {\n      if (N % 2 == 1) {\n        res = (res * x) % M;\n      }\n      x = (x * x) % M;\n      N = N >> 1;\n    }\n    return res;\n  }\n\n  static long moduloInverse(long X) {\n    return power(X, M - 2);\n  }\n\n  static long F_1(long N, long F_N) {\n    long P_2 = power(2, N - 1);\n    long modInv = moduloInverse(P_2);\n    long res;\n    res = ((modInv % M) * (F_N % M)) % M;\n    return res;\n  }\n\n  public static void main(String[] args) {\n    long N = 3;\n    long F_N = 6;\n    System.out.print(F_1(N, F_N));\n  }\n}\n", "python": "M = 1000000007\n\n\ndef power(x, N):\n    res = 1\n    while N > 0:\n        if N & 1:\n            res = (res * x) % M\n        x = (x * x) % M\n        N = N >> 1\n    return res\n\n\ndef moduloInverse(X):\n    return power(X, M - 2)\n\n\ndef F_1(N, F_N):\n    P_2 = power(2, N - 1)\n    modInv = moduloInverse(P_2)\n    res = 0\n    res = ((modInv % M) * (F_N % M)) % M\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    F_N = 6\n    print(F_1(N, F_N))\n"}
{"text": "Sum of all ordered pair ", "java": "import java.util.*;\n\nclass GFG {\n  static int sumOfProd(int arr[], int N) {\n    int sum = 0;\n    for (int i = 0; i < N; i++) {\n      sum += arr[i];\n    }\n    return sum * sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 3, 1, 5, 4};\n    int N = arr.length;\n    System.out.print(sumOfProd(arr, N));\n  }\n}\n", "python": "def sumOfProd(arr, N):\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    return sum * sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 3, 1, 5, 4]\n    N = len(arr)\n    print(sumOfProd(arr, N))\n"}
{"text": "Check if a given number is one less than twice its reverse ", "java": "import java.util.*;\n\nclass GFG {\n  static int rev(int num) {\n    int rev_num = 0;\n    while (num > 0) {\n      rev_num = rev_num * 10 + num % 10;\n      num = num / 10;\n    }\n    return rev_num;\n  }\n\n  static boolean check(int n) {\n    return 2 * rev(n) == n + 1;\n  }\n\n  public static void main(String[] args) {\n    int n = 73;\n    if (check(n)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def rev(num):\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num\n\n\ndef check(n):\n    return 2 * rev(n) == n + 1\n\n\nn = 73\nif check(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Check if a given number is one less than twice its reverse ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static boolean isPower(int x, int y) {\n    double res1 = Math.log(y) / Math.log(x);\n    double res2 = Math.log(y) / Math.log(x);\n    return (res1 == res2);\n  }\n\n  static boolean check(int n) {\n    int x = (n + 7) / 8;\n    if ((n + 7) % 8 == 0 && isPower(10, x)) return true;\n    else return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 73;\n    if (check(n)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def rev(num):\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num\n\n\ndef check(n):\n    return 2 * rev(n) == n + 1\n\n\nn = 73\nif check(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Check if number is palindrome or not in base B ", "java": "class GFG {\n  static boolean checkPalindromeB(int N, int B) {\n    int rev = 0;\n    int N1 = N;\n    while (N1 > 0) {\n      rev = rev * B + N1 % B;\n      N1 = N1 / B;\n    }\n    return N == rev;\n  }\n\n  public static void main(String[] args) {\n    int N = 5, B = 2;\n    if (checkPalindromeB(N, B)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "def checkPalindromeB(N, B):\n    rev = 0\n    N1 = N\n    while N1 > 0:\n        rev = rev * B + N1 % B\n        N1 = N1 // B\n    return N == rev\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    B = 2\n    if checkPalindromeB(N, B):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Maximize count of equal numbers in Array of numbers upto N by replacing pairs with their sum ", "java": "import java.io.*;\n\nclass GFG {\n  static int countEqual(int n) {\n    return (n + 1) / 2;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 5, 6};\n    int n = arr.length;\n    System.out.println(countEqual(n));\n  }\n}\n", "python": "def countEqual(n):\n    return (n + 1) // 2\n\n\nlst = [1, 2, 3, 4, 5, 6]\nn = len(lst)\nprint(countEqual(n))\n"}
{"text": "Count of distinct permutations of length N having no similar adjacent characters ", "java": "class GFG {\n  static int countofPermutations(int N) {\n    return (int) (3 * Math.pow(2, N - 1));\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.print(countofPermutations(N));\n  }\n}\n", "python": "def countofPermutations(N):\n    return int((3 * pow(2, N - 1)))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    print(countofPermutations(N))\n"}
{"text": "Sum of bit differences for numbers from 0 to N ", "java": "class GFG {\n  static int totalCountDifference(int n) {\n    if (n == 1) return 1;\n    return n + totalCountDifference(n / 2);\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.println(totalCountDifference(N));\n  }\n}\n", "python": "def totalCountDifference(n):\n    if n == 1:\n        return 1\n    return n + totalCountDifference(n // 2)\n\n\nN = 5\nprint(totalCountDifference(N))\n"}
{"text": "Sum of elements of a Geometric Progression ( GP ) in a given range ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int findSum(int[] arr, int n, int left, int right) {\n    int k = right - left + 1;\n    int d = arr[1] / arr[0];\n    int ans = arr[left - 1];\n    if (d == 1) ans = ans * d * k;\n    else ans = ans * ((int) Math.pow(d, k) - 1 / (d - 1));\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int[] arr = {2, 4, 8, 16, 32, 64, 128, 256};\n    int queries = 3;\n    int[][] q = {{2, 4}, {2, 6}, {5, 8}};\n    int n = arr.length;\n    for (int i = 0; i < queries; i++) System.out.println(findSum(arr, n, q[i][0], q[i][1]));\n  }\n}\n", "python": "def findSum(arr, n, left, right):\n    k = right - left + 1\n    d = arr[1] // arr[0]\n    ans = arr[left - 1]\n    if d == 1:\n        ans = ans * d * k\n    else:\n        ans = ans * (d ** k - 1) // (d - 1)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 4, 8, 16, 32, 64, 128, 256]\n    queries = 3\n    q = [[2, 4], [2, 6], [5, 8]]\n    n = len(arr)\n    for i in range(queries):\n        print(findSum(arr, n, q[i][0], q[i][1]))\n    DEDENT\n"}
{"text": "Minimize Steps required to obtain Sorted Order of an Array ", "java": "class GFG {\n  static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n  }\n\n  static int findlcm(int arr[], int n) {\n    int ans = 1;\n    for (int i = 1; i <= n; i++) ans = (((arr[i] * ans)) / (gcd(arr[i], ans)));\n    return ans;\n  }\n\n  static void minimumSteps(int arr[], int n) {\n    int i;\n    int dat[] = new int[n + 1];\n    for (i = 1; i <= n; i++) dat[arr[i - 1]] = i;\n    int b[] = new int[n + 1];\n    int j = 0, c;\n    for (i = 1; i <= n; i++) {\n      c = 1;\n      j = dat[i];\n      while (j != i) {\n        c++;\n        j = dat[j];\n      }\n      b[i] = c;\n    }\n    System.out.println(findlcm(b, n));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {5, 1, 4, 3, 2, 7, 6};\n    int N = arr.length;\n    minimumSteps(arr, N);\n  }\n}\n", "python": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef findlcm(arr, n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = (arr[i] * ans) // (gcd(arr[i], ans))\n    return ans\n\n\ndef minimumSteps(arr, n):\n    dat = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dat[arr[i - 1]] = i\n    b = [0] * (n + 1)\n    j = 0\n    for i in range(1, n + 1):\n        c = 1\n        j = dat[i]\n        while j != i:\n            c += 1\n            j = dat[j]\n        b[i] = c\n    print(findlcm(b, n))\n\n\narr = [5, 1, 4, 3, 2, 7, 6]\nN = len(arr)\nminimumSteps(arr, N)\n"}
{"text": "Check if N leaves only distinct remainders on division by all values up to K ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean is_distinct(long n, long k) {\n    HashSet<Long> s = new HashSet<Long>();\n    for (int i = 1; i <= k; i++) {\n      long tmp = n % i;\n      if (s.contains(tmp)) {\n        return false;\n      }\n      s.add(tmp);\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    long N = 5, K = 3;\n    if (is_distinct(N, K)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def is_distinct(n, k):\n    s = set()\n    for i in range(1, k + 1):\n        tmp = n % i\n        if tmp in s:\n            return False\n        s.add(tmp)\n    return True\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    K = 3\n    if is_distinct(N, K):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Philaland Coin ", "java": "import java.io.*;\n\nclass GFG {\n  static int findMinDenomin(int n) {\n    return ((int) (Math.log(n) / Math.log(2)) + 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(findMinDenomin(n));\n  }\n}\n", "python": "from math import log2, floor\n\n\ndef findMinDenomin(n):\n    return log2(n) + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    print(floor(findMinDenomin(n)))\n"}
{"text": "Content of a Polynomial ", "java": "class GFG {\n  static int findContent(int arr[], int n) {\n    int content = arr[0];\n    for (int i = 1; i < n; i++) {\n      content = __gcd(content, arr[i]);\n    }\n    return content;\n  }\n\n  static int __gcd(int a, int b) {\n    return b == 0 ? a : __gcd(b, a % b);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    int arr[] = {9, 6, 12};\n    System.out.print(findContent(arr, n));\n  }\n}\n", "python": "from math import gcd\n\n\ndef findContent(arr, n):\n    content = arr[0]\n    for i in range(1, n):\n        content = gcd(content, arr[i])\n    return content\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    arr = [9, 6, 12]\n    print(findContent(arr, n))\n"}
{"text": "Product of divisors of a number from a given list of its prime factors ", "java": "import java.util.*;\n\nclass GFG {\n  static int MOD = 1000000007;\n\n  static int power(int a, int b, int m) {\n    a %= m;\n    int res = 1;\n    while (b > 0) {\n      if (b % 2 == 1) res = ((res % m) * (a % m)) % m;\n      a = ((a % m) * (a % m)) % m;\n      b >>= 1;\n    }\n    return res % m;\n  }\n\n  static int productOfDivisors(int p[], int n) {\n    HashMap<Integer, Integer> prime = new HashMap<Integer, Integer>();\n    for (int i = 0; i < n; i++) {\n      if (prime.containsKey(p[i])) prime.put(p[i], prime.get(p[i]) + 1);\n      else prime.put(p[i], 1);\n    }\n    int product = 1, d = 1;\n    for (Map.Entry<Integer, Integer> itr : prime.entrySet()) {\n      int val = power(itr.getKey(), (itr.getValue()) * (itr.getValue() + 1) / 2, MOD);\n      product = (power(product, itr.getValue() + 1, MOD) * power(val, d, MOD)) % MOD;\n      d = (d * (itr.getValue() + 1)) % (MOD - 1);\n    }\n    return product;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {11, 11};\n    int n = arr.length;\n    System.out.println(productOfDivisors(arr, n));\n  }\n}\n", "python": "from collections import defaultdict\n\nMOD = 1000000007\n\n\ndef power(a, b, m):\n    a %= m\n    res = 1\n    while b > 0:\n        if b & 1:\n            res = ((res % m) * (a % m)) % m\n        a = ((a % m) * (a % m)) % m\n        b >>= 1\n    return res % m\n\n\ndef productOfDivisors(p, n):\n    prime = defaultdict(int)\n    for i in range(n):\n        prime[p[i]] += 1\n    product, d = 1, 1\n    for itr in prime.keys():\n        val = power(itr, (prime[itr]) * (prime[itr] + 1) // 2, MOD)\n        product = power(product, prime[itr] + 1, MOD) * power(val, d, MOD) % MOD\n        d = (d * (prime[itr] + 1)) % (MOD - 1)\n    return product\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [11, 11]\n    n = len(arr)\n    print(productOfDivisors(arr, n))\n"}
{"text": "Maximum number of objects that can be created as per given conditions ", "java": "class GFG {\n  static int numberOfObjects(int N, int M) {\n    int initial = Math.min(N, M);\n    int last = (N + M) / 3;\n    return Math.min(initial, last);\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    int M = 7;\n    System.out.println(numberOfObjects(N, M));\n  }\n}\n", "python": "def numberOfObjects(N, M):\n    initial = min(N, M)\n    final = (N + M) // 3\n    return min(initial, final)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    M = 7\n    print(numberOfObjects(N, M))\n"}
{"text": "Maximize count of distinct elements possible in an Array from the given operation ", "java": "import java.util.*;\n\nclass GFG {\n  static int gcd(int x, int y) {\n    if (x == 0) return y;\n    return gcd(y % x, x);\n  }\n\n  static int findDistinct(int arr[], int n) {\n    int maximum = Arrays.stream(arr).max().getAsInt();\n    if (n == 1) return 1;\n    if (n == 2) {\n      return (maximum / gcd(arr[0], arr[1]));\n    }\n    int k = gcd(arr[0], arr[1]);\n    for (int i = 2; i < n; i++) {\n      k = gcd(k, arr[i]);\n    }\n    return (maximum / k);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 5};\n    int n = arr.length;\n    System.out.println(findDistinct(arr, n));\n  }\n}\n", "python": "def gcd(x, y):\n    if x == 0:\n        return y\n    return gcd(y % x, x)\n\n\ndef findDistinct(arr, n):\n    maximum = max(arr)\n    if n == 1:\n        return 1\n    if n == 2:\n        return maximum // gcd(arr[0], arr[1])\n    k = gcd(arr[0], arr[1])\n    for i in range(2, n):\n        k = gcd(k, arr[i])\n    return maximum // k\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 5]\n    n = len(arr)\n    print(findDistinct(arr, n))\n"}
{"text": "Generate Array whose difference of each element with its left yields the given Array ", "java": "class GFG {\n  static void find_seq(int arr[], int m, int n) {\n    int b[] = new int[n];\n    int x = 0;\n    b[0] = x;\n    for (int i = 0; i < n - 1; i++) {\n      b[i + 1] = x + arr[i] + b[i];\n    }\n    int mn = n;\n    for (int i = 0; i < n; i++) {\n      mn = Math.min(mn, b[i]);\n    }\n    x = 1 - mn;\n    for (int i = 0; i < n; i++) {\n      b[i] += x;\n    }\n    for (int i = 0; i < n; i++) {\n      System.out.print(b[i] + \" \u2581 \");\n    }\n    System.out.println();\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    int arr[] = new int[] {-2, 1};\n    int M = arr.length;\n    find_seq(arr, M, N);\n  }\n}\n", "python": "def find_seq(arr, m, n):\n    b = []\n    x = 0\n    b.append(x)\n    for i in range(n - 1):\n        b.append(x + arr[i] + b[i])\n    mn = n\n    for i in range(n):\n        mn = min(mn, b[i])\n    x = 1 - mn\n    for i in range(n):\n        b[i] += x\n    for i in range(n):\n        print(b[i], end=\" \u2581 \")\n    print()\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    arr = [-2, 1]\n    M = len(arr)\n    find_seq(arr, M, N)\n"}
{"text": "Largest N digit number in Base B ", "java": "import java.util.*;\n\nclass GFG {\n  static void findNumbers(int n, int b) {\n    double largest = Math.pow(b, n) - 1;\n    System.out.println(largest);\n  }\n\n  public static void main(String[] args) {\n    int N = 2, B = 5;\n    findNumbers(N, B);\n  }\n}\n", "python": "def findNumbers(n, b):\n    largest = pow(b, n) - 1\n    print(largest)\n\n\nN, B = 2, 5\nfindNumbers(N, B)\n"}
{"text": "Super Niven Numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isDivBySubsetSums(Vector<Integer> arr, int num) {\n    int n = arr.size();\n    long total = 1 << n;\n    for (long i = 0; i < total; i++) {\n      long sum = 0;\n      for (int j = 0; j < n; j++) if ((i & (1 << j)) > 0) sum += arr.get(j);\n      if (sum != 0 && num % sum != 0) return false;\n    }\n    return true;\n  }\n\n  static boolean isSuperNivenNum(int n) {\n    int temp = n;\n    Vector<Integer> digits = new Vector<Integer>();\n    while (n != 0) {\n      int digit = n % 10;\n      digits.add(digit);\n      n = n / 10;\n    }\n    return isDivBySubsetSums(digits, temp);\n  }\n\n  public static void main(String[] args) {\n    int n = 500;\n    if (isSuperNivenNum(n)) System.out.print(\" yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def isDivBySubsetSums(arr, num):\n    n = len(arr)\n    total = 1 << n\n    i = 0\n    while i < total:\n        sum = 0\n        j = 0\n        while j < n:\n            if i & (1 << j):\n                sum += arr[j]\n            j += 1\n        if (sum != 0) and (num % sum != 0):\n            return False\n        i += 1\n    return True\n\n\ndef isSuperNivenNum(n):\n    temp = n\n    digits = []\n    while n > 1:\n        digit = int(n) % 10\n        digits.append(digit)\n        n = n / 10\n    return isDivBySubsetSums(digits, temp)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 500\n    if isSuperNivenNum(n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Pentacontahenagon Number ", "java": "import java.util.*;\n\nclass GFG {\n  static int PentacontahenagonNum(int N) {\n    return (49 * N * N - 47 * N) / 2;\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    System.out.print(\"3rd \u2581 Pentacontahenagon \u2581 Number \u2581 is \u2581 \" + PentacontahenagonNum(N));\n  }\n}\n", "python": "def PentacontahenagonNum(N):\n    return (49 * N * N - 47 * N) // 2\n\n\nN = 3\nprint(\"3rd \u2581 Pentacontahenagon \u2581 Number \u2581 is \", PentacontahenagonNum(N))\n"}
{"text": "Repdigit Numbers ", "java": "class GFG {\n  static boolean isRepdigit(int num, int b) {\n    int prev = -1;\n    while (num != 0) {\n      int digit = num % b;\n      num /= b;\n      if (prev != -1 && digit != prev) return false;\n      prev = digit;\n    }\n    return true;\n  }\n\n  public static void main(String args[]) {\n    int num = 2000, base1 = 7;\n    if (isRepdigit(num, base1)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "def isRepdigit(num, b):\n    prev = -1\n    while num:\n        digit = num % b\n        num //= b\n        if prev != -1 and digit != prev:\n            return False\n        prev = digit\n    return True\n\n\nnum = 2000\nbase = 7\nif isRepdigit(num, base):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Lynch ", "java": "class GFG {\n  static boolean checkDivisibility(int n, int digit) {\n    return (digit != 0 && n % digit == 0);\n  }\n\n  static boolean isAllDigitsDivide(int n) {\n    int temp = n;\n    while (temp > 0) {\n      int digit = temp % 10;\n      if (!(checkDivisibility(n, digit))) return false;\n      temp /= 10;\n    }\n    return true;\n  }\n\n  static boolean isAllDigitsDistinct(int n) {\n    boolean arr[] = new boolean[10];\n    while (n > 0) {\n      int digit = n % 10;\n      if (arr[digit]) return false;\n      arr[digit] = true;\n      n = n / 10;\n    }\n    return true;\n  }\n\n  static boolean isLynchBell(int n) {\n    return isAllDigitsDivide(n) && isAllDigitsDistinct(n);\n  }\n\n  public static void main(String[] args) {\n    int N = 12;\n    if (isLynchBell(N)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "import math\n\n\ndef checkDivisibility(n, digit):\n    return (digit != 0) and ((n % digit) == 0)\n\n\ndef isAllDigitsDivide(n):\n    temp = n\n    while temp >= 1:\n        digit = int(temp % 10)\n        if checkDivisibility(n, digit) == False:\n            return 0\n        temp = temp / 10\n    return 1\n\n\ndef isAllDigitsDistinct(n):\n    arr = [0] * 10\n    while n >= 1:\n        digit = int(n % 10)\n        if arr[digit]:\n            return 0\n        arr[digit] = 1\n        n = int(n / 10)\n    return 1\n\n\ndef isLynchBell(n):\n    return isAllDigitsDivide(n) and isAllDigitsDistinct(n)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 12\n    if isLynchBell(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Repunit numbers ", "java": "class GFG {\n  static boolean isRepunitNum(int n, int b) {\n    int length = 0;\n    int countOne = 0;\n    while (n != 0) {\n      int r = n % b;\n      length++;\n      if (r == 1) countOne++;\n      n = n / b;\n    }\n    return countOne >= 3 && countOne == length;\n  }\n\n  public static void main(String[] args) {\n    int n = 31;\n    int base = 2;\n    if (isRepunitNum(n, base)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def isRepunitNum(n, b):\n    length = 0\n    countOne = 0\n    while n != 0:\n        r = n % b\n        length += 1\n        if r == 1:\n            countOne += 1\n        n = n // b\n    return countOne >= 3 and countOne == length\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 31\n    base = 2\n    if isRepunitNum(n, base):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Gapful Numbers ", "java": "class GFG {\n  static int firstDigit(int n) {\n    int digits = (int) (Math.log(n) / Math.log(10));\n    n = (int) (n / Math.pow(10, digits));\n    return n;\n  }\n\n  static int lastDigit(int n) {\n    return (n % 10);\n  }\n\n  static boolean isGapful(int n) {\n    int first_dig = firstDigit(n);\n    int last_dig = lastDigit(n);\n    int concatenation = first_dig * 10 + last_dig;\n    return (n % concatenation == 0);\n  }\n\n  public static void main(String[] args) {\n    int n = 108;\n    if (isGapful(n)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "import math\n\n\ndef firstDigit(n):\n    digits = math.log10(n)\n    n = n / math.pow(10, digits)\n    return n\n\n\ndef lastDigit(n):\n    return n % 10\n\n\ndef isGapful(n):\n    concatenation = (firstDigit(n) * 10) + lastDigit(n)\n    return n % concatenation\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 108\n    if isGapful(n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Place Value of a given digit in a number ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int placeValue(int N, int num) {\n    int total = 1, value = 0, rem = 0;\n    while (true) {\n      rem = N % 10;\n      N = N / 10;\n      if (rem == num) {\n        value = total * rem;\n        break;\n      }\n      total = total * 10;\n    }\n    return value;\n  }\n\n  public static void main(String[] args) {\n    int D = 5;\n    int N = 85932;\n    System.out.println(placeValue(N, D));\n  }\n}\n", "python": "def placeValue(N, num):\n    total = 1\n    value = 0\n    rem = 0\n    while True:\n        rem = N % 10\n        N = N // 10\n        if rem == num:\n            value = total * rem\n            break\n        total = total * 10\n    return value\n\n\nD = 5\nN = 85932\nprint(placeValue(N, D))\n"}
{"text": "Sum of the first N Pronic Numbers ", "java": "class GFG {\n  static int calculateSum(int N) {\n    return N * (N - 1) / 2 + N * (N - 1) * (2 * N - 1) / 6;\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    System.out.println(calculateSum(N));\n  }\n}\n", "python": "def calculateSum(N):\n    return N * (N - 1) // 2 + N * (N - 1) * (2 * N - 1) // 6\n\n\nN = 3\nprint(calculateSum(N))\n"}
{"text": "Cunningham Numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isPower(int a) {\n    if (a == 1) return true;\n    for (int i = 2; i * i <= a; i++) {\n      double val = Math.log(a) / Math.log(i);\n      if ((val - (int) val) < 0.00000001) return true;\n    }\n    return false;\n  }\n\n  static boolean isCunningham(int n) {\n    return isPower(n - 1) || isPower(n + 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 126;\n    if (isCunningham(n)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "import math\n\n\ndef isPower(a):\n    if a == 1:\n        return True\n    i = 2\n    while i * i <= a:\n        val = math.log(a) / math.log(i)\n        if (val - int(val)) < 0.00000001:\n            return True\n        i += 1\n    return False\n\n\ndef isCunningham(n):\n    return isPower(n - 1) or isPower(n + 1)\n\n\nn = 126\nif isCunningham(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Number of ways to reach ( M , N ) in a matrix starting from the origin without visiting ( X , Y ) ", "java": "import java.util.*;\n\nclass GFG {\n  public static int nCr(int n, int r) {\n    return fact(n) / (fact(r) * fact(n - r));\n  }\n\n  public static int fact(int n) {\n    int res = 1;\n    for (int i = 2; i <= n; i++) res = res * i;\n    return res;\n  }\n\n  public static int countWays(int m, int n, int x, int y) {\n    return nCr(m + n, m) - nCr(x + y, x) * nCr(m + n - x - y, m - x);\n  }\n\n  public static void main(String[] args) {\n    int m = 5;\n    int n = 4;\n    int x = 3;\n    int y = 2;\n    System.out.println(countWays(m, n, x, y));\n  }\n}\n", "python": "def nCr(n, r):\n    return fact(n) // (fact(r) * fact(n - r))\n\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\n\n\ndef countWays(m, n, x, y):\n    return nCr(m + n, m) - nCr(x + y, x) * nCr(m + n - x - y, m - x)\n\n\nm = 5\nn = 4\nx = 3\ny = 2\nprint(countWays(m, n, x, y))\n"}
{"text": "Find the Batting Average of a batsman ", "java": "class GFG {\n  static int averageRuns(int runs, int matches, int notout) {\n    int out = matches - notout;\n    if (out == 0) return -1;\n    int avg = (runs) / out;\n    return avg;\n  }\n\n  public static void main(String[] args) {\n    int runs = 10000;\n    int matches = 250;\n    int notout = 50;\n    int avg = averageRuns(runs, matches, notout);\n    if (avg == -1) System.out.print(\" NA \");\n    else System.out.print(avg);\n  }\n}\n", "python": "def averageRuns(runs, matches, notout):\n    out = matches - notout\n    if out == 0:\n        return -1\n    avg = runs // out\n    return avg\n\n\nruns = 10000\nmatches = 250\nnotout = 50\navg = averageRuns(runs, matches, notout)\nif avg == -1:\n    print(\" NA \")\nelse:\n    print(avg)\n"}
{"text": "Sum of series formed by difference between product and sum of N natural numbers ", "java": "class GFG {\n  static int seriesSumUtil(int k, int n, int prevSum, int multi, int add) {\n    if (k == n + 1) {\n      return prevSum;\n    }\n    multi = multi * k;\n    add = add + k;\n    prevSum = prevSum + multi - add;\n    return seriesSumUtil(k + 1, n, prevSum, multi, add);\n  }\n\n  static int seriesSum(int n) {\n    if (n == 1) return 0;\n    int prevSum = 0;\n    int multi = 1;\n    int add = 1;\n    return seriesSumUtil(2, n, prevSum, multi, add);\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.println(seriesSum(N));\n  }\n}\n", "python": "def seriesSum(n):\n    sum1 = 0\n    currProd = 1\n    currSum = 1\n    for i in range(2, n + 1):\n        currProd *= i\n        currSum += i\n        sum1 += currProd - currSum\n    return sum1\n\n\nN = 5\nprint(seriesSum(N), end=\" \u2581 \")\n"}
{"text": "Count of total bits toggled / flipped in binary representation of 0 to N ", "java": "class GFG {\n  static void solve(int N) {\n    int ans = 0;\n    while (N != 0) {\n      ans += N;\n      N /= 2;\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    solve(N);\n  }\n}\n", "python": "def solve(N):\n    ans = 0\n    while N != 0:\n        ans += N\n        N //= 2\n    print(ans)\n\n\nN = 5\nsolve(N)\n"}
{"text": "Maximum Bitwise AND pair ( X , Y ) from given range such that X and Y can be same ", "java": "class GFG {\n  static int maximumAND(int L, int R) {\n    return R;\n  }\n\n  public static void main(String[] args) {\n    int l = 3;\n    int r = 7;\n    System.out.print(maximumAND(l, r));\n  }\n}\n", "python": "def maximumAND(L, R):\n    return R\n\n\nif __name__ == \" _ _ main _ _ \":\n    l = 3\n    r = 7\n    print(maximumAND(l, r))\n"}
{"text": "Smallest N digit number divisible by N ", "java": "import java.util.*;\n\nclass GFG {\n  static void smallestNumber(int N) {\n    int L = (int) (Math.pow(10, N) - 1);\n    int S = (int) Math.pow(10, N - 1);\n    for (int i = S; i <= L; i++) {\n      if (i % N == 0) {\n        System.out.print(i);\n        return;\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    smallestNumber(N);\n  }\n}\n", "python": "import math\n\n\ndef smallestNumber(N):\n    return N * math.ceil(pow(10, (N - 1)) // N)\n\n\nN = 2\nprint(smallestNumber(N))\n"}
{"text": "Zuckerman Numbers ", "java": "class GFG {\n  static int getProduct(int n) {\n    int product = 1;\n    while (n != 0) {\n      product = product * (n % 10);\n      n = n / 10;\n    }\n    return product;\n  }\n\n  static boolean isZuckerman(int n) {\n    return n % getProduct(n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int n = 115;\n    if (isZuckerman(n)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "def getProduct(n):\n    product = 1\n    while n > 0:\n        product = product * (n % 10)\n        n = n // 10\n    return product\n\n\ndef isZuckerman(n):\n    return n % getProduct(n) == 0\n\n\nN = 115\nif isZuckerman(N):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Second ", "java": "class GFG {\n  static void findNthTerm(int n) {\n    System.out.println(Math.pow(2, n) - 2 * n);\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    findNthTerm(N);\n  }\n}\n", "python": "def findNthTerm(n):\n    print(pow(2, n) - 2 * n)\n\n\nN = 4\nfindNthTerm(N)\n"}
{"text": "Decakismyriagon Number ", "java": "class GFG {\n  static int DecakismyriagonNum(int N) {\n    return (99998 * N * N - 99996 * N) / 2;\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    System.out.println(DecakismyriagonNum(N));\n  }\n}\n", "python": "def DecakismyriagonNum(N):\n    return (99998 * N * N - 99996 * N) // 2\n\n\nN = 3\nprint(DecakismyriagonNum(N))\n"}
{"text": "How to calculate strike rate of a batsman ", "java": "class GFG {\n  static float strikerate(float bowls, float runs) {\n    float z;\n    z = (runs / bowls) * 100;\n    return z;\n  }\n\n  public static void main(String[] args) {\n    int A, B;\n    A = 264;\n    B = 173;\n    System.out.println(strikerate(B, A));\n  }\n}\n", "python": "def strikerate(bowls, runs):\n    z = (float(runs) / bowls) * 100\n    return z\n\n\nA = 264\nB = 173\nprint(strikerate(B, A))\n"}
{"text": "Find position of given term in a series formed with only digits 4 and 7 allowed ", "java": "import java.util.*;\n\nclass GFG {\n  static void findPosition(int n) {\n    int i = 0;\n    int pos = 0;\n    while (n > 0) {\n      if (n % 10 == 7) {\n        pos = pos + (int) Math.pow(2, i + 1);\n      } else {\n        pos = pos + (int) Math.pow(2, i);\n      }\n      i++;\n      n = n / 10;\n    }\n    System.out.print(pos);\n  }\n\n  public static void main(String[] args) {\n    int N = 777;\n    findPosition(N);\n  }\n}\n", "python": "def findPosition(n):\n    i = 0\n    pos = 0\n    while n > 0:\n        if n % 10 == 7:\n            pos = pos + pow(2, i + 1)\n        else:\n            pos = pos + pow(2, i)\n        i += 1\n        n = n // 10\n    print(pos)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 777\n    findPosition(N)\n"}
{"text": "Average of Cubes of first N natural numbers ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static double findAverageOfCube(int n) {\n    double sum = 0;\n    for (int i = 1; i <= n; i++) {\n      sum += i * i * i;\n    }\n    return sum / n;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(findAverageOfCube(n));\n  }\n}\n", "python": "def findAverageOfCube(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i * i\n    return round(sum / n, 6)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(findAverageOfCube(n))\n"}
{"text": "Smallest and Largest N ", "java": "import java.io.*;\n\nclass GFG {\n  static String findNumberL(int n) {\n    if (n == 1) return \"1\";\n    String result = \" \";\n    int length = (int) Math.floor(Math.log10(n) + 1);\n    for (int i = 1; i <= n - (2 * length); i++) {\n      result += '9';\n    }\n    result = Integer.toString(n) + result + Integer.toString(n);\n    return result;\n  }\n\n  static String findNumberS(int n) {\n    if (n == 1) return \"1\";\n    String result = \" \";\n    int length = (int) Math.floor(Math.log10(n) + 1);\n    for (int i = 1; i <= n - (2 * length); i++) {\n      result += '0';\n    }\n    result = Integer.toString(n) + result + Integer.toString(n);\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    System.out.println(\" Smallest \u2581 Number \u2581 = \u2581 \" + findNumberS(N));\n    System.out.print(\" Largest \u2581 Number \u2581 = \u2581 \" + findNumberL(N));\n  }\n}\n", "python": "from math import ceil\n\n\ndef nDigitPerfectCubes(n):\n    print(pow(ceil((pow(10, (n - 1))) ** (1 / 3)), 3), end=\" \u2581 \")\n    print(pow(ceil((pow(10, (n))) ** (1 / 3)) - 1, 3))\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    nDigitPerfectCubes(n)\n"}
{"text": "Sum of first N Star Numbers ", "java": "class GFG {\n  static int sum_star_num(int n) {\n    int summ = 2 * n * (n + 1) * (n - 1) + n;\n    return summ;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(sum_star_num(n));\n  }\n}\n", "python": "def sum_star_num(n):\n    summ = 2 * n * (n + 1) * (n - 1) + n\n    return summ\n\n\nn = 3\nprint(sum_star_num(n))\n"}
{"text": "Count distinct median possible for an Array using given ranges of elements ", "java": "import java.awt.*;\nimport java.util.*;\n\nclass GFG {\n  static void solve(int n, ArrayList<Point> vec) {\n    ArrayList<Integer> a = new ArrayList<>();\n    ArrayList<Integer> b = new ArrayList<>();\n    for (Point pr : vec) {\n      a.add(pr.x);\n      b.add(pr.y);\n    }\n    Collections.sort(a);\n    Collections.sort(b);\n    int left, right, ans;\n    if ((n & 1) != 0) {\n      left = a.get(n / 2);\n      right = b.get(n / 2);\n      ans = right - left + 1;\n    } else {\n      left = (a.get(n / 2) + a.get(n / 2 - 1));\n      right = (b.get(n / 2) + b.get(n / 2 - 1));\n      ans = right - left + 1;\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    ArrayList<Point> vec = new ArrayList<>();\n    vec.add(new Point(100, 100));\n    vec.add(new Point(10, 10000));\n    vec.add(new Point(1, 1000000000));\n    solve(N, vec);\n  }\n}\n", "python": "def solve(n, vec):\n    a = []\n    b = []\n    for pr in vec:\n        a.append(pr[0])\n        b.append(pr[1])\n    a.sort()\n    b.sort()\n    if n & 1:\n        left = a[n // 2]\n        right = b[n // 2]\n        ans = right - left + 1\n    else:\n        left = a[n // 2] + a[n // 2 - 1]\n        right = b[n // 2] + b[n // 2 - 1]\n        ans = right - left + 1\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    vec = [(100, 100), (10, 10000), (1, 1000000000)]\n    solve(N, vec)\n"}
{"text": "360 ", "java": "class GFG {\n  static int gonNum360(int n) {\n    return (358 * n * n - 356 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(gonNum360(n));\n  }\n}\n", "python": "def gonNum360(n):\n    return (358 * n * n - 356 * n) // 2\n\n\nn = 3\nprint(gonNum360(n))\n"}
{"text": "120 ", "java": "class GFG {\n  static int gonNum120(int n) {\n    return (118 * n * n - 116 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(gonNum120(n));\n  }\n}\n", "python": "def gonNum120(n):\n    return (118 * n * n - 116 * n) // 2\n\n\nn = 3\nprint(gonNum120(n))\n"}
{"text": "Tetracontaoctagonal Number ", "java": "class GFG {\n  static int TetracontaoctagonalNum(int n) {\n    return (46 * n * n - 44 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(TetracontaoctagonalNum(n));\n  }\n}\n", "python": "def TetracontaoctagonalNum(n):\n    return (46 * n * n - 44 * n) / 2\n\n\nn = 3\nprint(TetracontaoctagonalNum(n))\n"}
{"text": "257 ", "java": "class GFG {\n  static int gonNum257(int n) {\n    return (255 * n * n - 253 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(gonNum257(n));\n  }\n}\n", "python": "def gonNum257(n):\n    return (255 * n * n - 253 * n) // 2\n\n\nn = 3\nprint(gonNum257(n))\n"}
{"text": "Tetracontadigonal Number ", "java": "import java.util.*;\n\nclass GFG {\n  static int TetracontadigonalNum(int n) {\n    return (40 * n * n - 38 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(TetracontadigonalNum(n));\n  }\n}\n", "python": "def TetracontadigonalNum(n):\n    return int((40 * n * n - 38 * n) / 2)\n\n\nn = 3\nprint(TetracontadigonalNum(n))\n"}
{"text": "Index of smallest triangular number with N digits ", "java": "class GFG {\n  static double findIndex(int n) {\n    double x = Math.sqrt(2 * Math.pow(10, (n - 1)));\n    return Math.round(x);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(findIndex(n));\n  }\n}\n", "python": "import math\n\n\ndef findIndex(n):\n    x = math.sqrt(2 * math.pow(10, (n - 1)))\n    return round(x)\n\n\nn = 3\nprint(findIndex(n))\n"}
{"text": "Program to find the LCM of two prime numbers ", "java": "class GFG {\n  static int findLCMPrime(int a, int b) {\n    if (a == b) {\n      return a;\n    }\n    return a * b;\n  }\n\n  public static void main(String[] args) {\n    int a = 3, b = 5;\n    System.out.println(findLCMPrime(a, b));\n  }\n}\n", "python": "def findLCMPrime(a, b):\n    if a == b:\n        return a\n    return a * b\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 3\n    b = 5\n    print(findLCMPrime(a, b))\n"}
{"text": "Smallest multiple of N with exactly N digits in its Binary number representation ", "java": "class GFG {\n  static void smallestNumber(int N) {\n    System.out.print(N * Math.ceil(Math.pow(2, (N - 1)) / N));\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    smallestNumber(N);\n  }\n}\n", "python": "from math import ceil\n\n\ndef smallestNumber(N):\n    print(N * ceil(pow(2, (N - 1)) / N))\n\n\nN = 3\nsmallestNumber(N)\n"}
{"text": "Find the largest N digit multiple of N ", "java": "import java.util.*;\n\nclass GFG {\n  static void smallestNumber(int N) {\n    System.out.print(N * Math.floor((Math.pow(10, N) - 1) / N));\n  }\n\n  public static void main(String args[]) {\n    int N = 2;\n    smallestNumber(N);\n  }\n}\n", "python": "from math import floor\n\n\ndef smallestNumber(N):\n    print(N * floor((pow(10, N) - 1) / N))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    smallestNumber(N)\n"}
{"text": "Icosikaiheptagonal Number ", "java": "class GFG {\n  static int icosikaiheptagonalNum(int n) {\n    return (25 * n * n - 23 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(\"3rd \u2581 icosikaiheptagonal \u2581 Number \u2581 is \u2581 \" + icosikaiheptagonalNum(n));\n  }\n}\n", "python": "def icosikaiheptagonalNum(n):\n    return (25 * n * n - 23 * n) // 2\n\n\nn = 3\nprint(\"3rd \u2581 icosikaiheptagonal \u2581 Number \u2581 is \u2581 \", icosikaiheptagonalNum(n))\n"}
{"text": "Program to check if N is a triacontagonal number ", "java": "class GFG {\n  static boolean istriacontagonal(int N) {\n    float n = (float) ((26 + Math.sqrt(224 * N + 676)) / 56);\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 30;\n    if (istriacontagonal(N)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef istriacontagonal(N):\n    n = (26 + math.sqrt(224 * N + 676)) // 56\n    return (n - int(n)) == 0\n\n\ni = 30\nif istriacontagonal(i):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Count of digits after concatenation of first N positive integers ", "java": "class GFG {\n  static void numberOfDigits(int N) {\n    int nod = (int) Math.floor(Math.log10(N) + 1);\n    int toDecrease = (int) (Math.pow(10, nod) - 1) / 9;\n    System.out.print((N + 1) * nod - toDecrease);\n  }\n\n  public static void main(String[] args) {\n    int N = 13;\n    numberOfDigits(N);\n  }\n}\n", "python": "from math import log10, floor\n\n\ndef numberOfDigits(N):\n    nod = floor(log10(N) + 1)\n    toDecrease = (pow(10, nod) - 1) // 9\n    print((N + 1) * nod - toDecrease)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 13\n    numberOfDigits(N)\n"}
{"text": "Find the last two digits of Factorial of a given Number ", "java": "import java.util.*;\n\nclass GFG {\n  static void lastTwoDigits(double N) {\n    if (N >= 10) {\n      System.out.print(\"00\");\n      return;\n    }\n    double fac = 1;\n    for (int i = 1; i <= N; i++) fac = (fac * i) % 100;\n    System.out.print(fac);\n  }\n\n  public static void main(String args[]) {\n    int N = 7;\n    lastTwoDigits(N);\n  }\n}\n", "python": "def lastTwoDigits(N):\n    if N >= 10:\n        print(\"00\", end=\" \")\n        return\n    fac = 1\n    for i in range(1, N + 1):\n        fac = (fac * i) % 100\n    print(fac)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 7\n    lastTwoDigits(N)\n"}
{"text": "Product of N terms of a given Geometric series ", "java": "class GFG {\n  static float productOfGP(float a, float r, int n) {\n    return (float) Math.pow(a, n) * (float) Math.pow(r, n * (n - 1) / 2);\n  }\n\n  public static void main(String s[]) {\n    float a = 1, r = 2;\n    int N = 4;\n    System.out.println(productOfGP(a, r, N));\n  }\n}\n", "python": "def productOfGP(a, r, n):\n    product = 1\n    for i in range(0, n):\n        product = product * a\n        a = a * r\n    return product\n\n\na = 1\nr = 2\nN = 4\nprint(productOfGP(a, r, N))\n"}
{"text": "Product of N terms of a given Geometric series ", "java": "import java.util.*;\n\nclass GFG {\n  static float productOfGP(float a, float r, int n) {\n    int an = (int) (a * (int) (Math.pow(r, n - 1)));\n    return (int) Math.sqrt((int) Math.pow(a * an, n));\n  }\n\n  public static void main(String args[]) {\n    float a = 1, r = 2;\n    int N = 4;\n    System.out.print(productOfGP(a, r, N));\n  }\n}\n", "python": "def productOfGP(a, r, n):\n    product = 1\n    for i in range(0, n):\n        product = product * a\n        a = a * r\n    return product\n\n\na = 1\nr = 2\nN = 4\nprint(productOfGP(a, r, N))\n"}
{"text": "Program to check if N is a Chiliagon Number ", "java": "class GFG {\n  static boolean is_Chiliagon(int N) {\n    float n = (float) (996 + Math.sqrt(7984 * N + 992016)) / 1996;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String s[]) {\n    int N = 1000;\n    if (is_Chiliagon(N)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef is_Chiliagon(N):\n    n = (996 + math.sqrt(7984 * N + 992016)) // 1996\n    return (n - int(n)) == 0\n\n\nN = 1000\nif is_Chiliagon(N):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Hensel 's Lemma ", "java": "import java.util.*;\n\nclass GFG {\n  static int inv(int a, int m) {\n    int m0 = m, t, q;\n    int x0 = 0, x1 = 1;\n    if (m == 1) return 0;\n    while (a > 1) {\n      q = a / m;\n      t = m;\n      m = a % m;\n      a = t;\n      t = x0;\n      x0 = x1 - q * x0;\n      x1 = t;\n    }\n    if (x1 < 0) x1 += m0;\n    return x1;\n  }\n\n  static int derivative(int x) {\n    return 3 * x * x;\n  }\n\n  static int Image(int x, int k) {\n    return x * x * x - k;\n  }\n\n  static int next_power(int a_t, int t, int a1, int prime, int k) {\n    int power_p = (int) Math.pow(prime, t + 1);\n    int next_a = (a_t - Image(a_t, k) * inv(derivative(a1), prime)) % power_p;\n    if (next_a < 0) return next_a += power_p;\n    return next_a;\n  }\n\n  static int powerOfPrime(int prime, int power, int k, int a1) {\n    if (derivative(a1) != 0) {\n      int a_t = a1;\n      for (int p = 1; p < power; p++) {\n        a_t = next_power(a_t, p, a1, prime, k);\n      }\n      return a_t;\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int prime = 7, a1 = 3;\n    int power = 2, k = 3;\n    System.out.print(powerOfPrime(prime, power, k, a1));\n  }\n}\n", "python": "def inv(a, m):\n    m0 = m\n    x0 = 0\n    x1 = 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = x0\n        x0 = x1 - q * x0\n        x1 = t\n    if x1 < 0:\n        x1 += m0\n    return x1\n\n\ndef derivative(x):\n    return 3 * x * x\n\n\ndef Image(x, k):\n    return x * x * x - k\n\n\ndef next_power(a_t, t, a1, prime, k):\n    power_p = int(pow(prime, t + 1))\n    next_a = (a_t - Image(a_t, k) * inv(derivative(a1), prime)) % power_p\n    if next_a < 0:\n        next_a += power_p\n        return next_a\n    return next_a\n\n\ndef powerOfPrime(prime, power, k, a1):\n    if derivative(a1) != 0:\n        a_t = a1\n        for p in range(1, power):\n            a_t = next_power(a_t, p, a1, prime, k)\n        return a_t\n    return -1\n\n\nprime = 7\na1 = 3\npower = 2\nk = 3\nprint(powerOfPrime(prime, power, k, a1))\n"}
{"text": "Count of triplets of numbers 1 to N such that middle element is always largest ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int findArrangement(int N) {\n    if (N < 3) return 0;\n    return ((N) * (N - 1) * (N - 2)) / 3;\n  }\n\n  public static void main(String[] args) {\n    int N = 10;\n    System.out.println(findArrangement(N));\n  }\n}\n", "python": "def findArrangement(N):\n    if N < 3:\n        return 0\n    return ((N) * (N - 1) * (N - 2)) // 3\n\n\nN = 10\nprint(findArrangement(N))\n"}
{"text": "Maximize the division result of Array using given operations ", "java": "import java.util.*;\n\nclass GFG {\n  static float maxDivision(Integer arr[], int n) {\n    Arrays.sort(arr, Collections.reverseOrder());\n    float mxdiv = arr[1];\n    for (int i = 2; i < n; ++i) mxdiv = mxdiv / arr[i];\n    return arr[0] / mxdiv;\n  }\n\n  public static void main(String[] args) {\n    Integer arr[] = {100, 1000, 10, 2};\n    int n = arr.length;\n    System.out.print((int) maxDivision(arr, n));\n  }\n}\n", "python": "def maxDivision(arr, n):\n    arr.sort(reverse=True)\n    mxdiv = arr[1]\n    for i in range(2, n):\n        mxdiv = mxdiv / arr[i]\n    return arr[0] / mxdiv\n\n\narr = [100, 1000, 10, 2]\nn = len(arr)\nprint(maxDivision(arr, n))\n"}
{"text": "Find the sequence number of a triangular number ", "java": "import java.util.*;\n\nclass GFG {\n  public static void main(String args[]) {\n    int N = 21;\n    int A = (int) (Math.sqrt(2 * N + 0.25) - 0.5);\n    int B = A;\n    if (B != A) System.out.print(\" - 1\");\n    else System.out.print(B);\n  }\n}\n", "python": "import math\n\nN = 21\nA = math.sqrt(2 * N + 0.25) - 0.5\nB = int(A)\nif B != A:\n    print(-1)\nelse:\n    print(B)\n"}
{"text": "Count of subarrays whose sum is a perfect square ", "java": "import java.util.*;\n\nclass GFG {\n  static long countSubarrays(int arr[], int n) {\n    HashMap<Integer, Integer> mp = new HashMap<Integer, Integer>();\n    int[] prefixSum = new int[n];\n    int prefixMin = 0;\n    prefixSum[0] = arr[0];\n    prefixMin = Math.min(prefixMin, prefixSum[0]);\n    for (int i = 1; i < n; i++) {\n      prefixSum[i] = prefixSum[i - 1] + arr[i];\n      prefixMin = Math.min(prefixMin, prefixSum[i]);\n    }\n    long countSubs = 0;\n    mp.put(0, 1);\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; prefixSum[i] - j * j >= prefixMin; j++) {\n        if (mp.containsKey(prefixSum[i] - j * j)) countSubs += mp.get(prefixSum[i] - j * j);\n      }\n      if (mp.containsKey(prefixSum[i])) {\n        mp.put(prefixSum[i], mp.get(prefixSum[i]) + 1);\n      } else {\n        mp.put(prefixSum[i], 1);\n      }\n    }\n    return countSubs;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 3, -5, 6, -7, 4};\n    int n = arr.length;\n    long ans = countSubarrays(arr, n);\n    System.out.print(ans);\n  }\n}\n", "python": "from collections import defaultdict\n\n\ndef countSubarrays(arr, n):\n    mp = defaultdict(lambda: 0)\n    prefixSum = [0] * n\n    prefixMin = 0\n    prefixSum[0] = arr[0]\n    prefixMin = min(prefixMin, prefixSum[0])\n    for i in range(1, n):\n        prefixSum[i] = prefixSum[i - 1] + arr[i]\n        prefixMin = min(prefixMin, prefixSum[i])\n    countSubs = 0\n    mp[0] = 1\n    for i in range(n):\n        j = 0\n        while prefixSum[i] - j * j >= prefixMin:\n            if prefixSum[i] - j * j in mp:\n                countSubs += mp[prefixSum[i] - j * j]\n            j += 1\n        mp[prefixSum[i]] += 1\n    return countSubs\n\n\narr = [2, 3, -5, 6, -7, 4]\nn = len(arr)\nans = countSubarrays(arr, n)\nprint(ans)\n"}
{"text": "Find if two given Quadratic equations have common roots or not ", "java": "class GFG {\n  static boolean checkSolution(float a1, float b1, float c1, float a2, float b2, float c2) {\n    return ((a1 / a2) == (b1 / b2) && (b1 / b2) == (c1 / c2));\n  }\n\n  public static void main(String[] args) {\n    float a1 = 1, b1 = -5, c1 = 6;\n    float a2 = 2, b2 = -10, c2 = 12;\n    if (checkSolution(a1, b1, c1, a2, b2, c2)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def checkSolution(a1, b1, c1, a2, b2, c2):\n    return (a1 / a2) == (b1 / b2) and (b1 / b2) == (c1 / c2)\n\n\na1, b1, c1 = 1, -5, 6\na2, b2, c2 = 2, -10, 12\nif checkSolution(a1, b1, c1, a2, b2, c2):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Sum of all subsequences of length K ", "java": "class GFG {\n  static int nCr(int n, int r) {\n    return fact(n) / (fact(r) * fact(n - r));\n  }\n\n  static int fact(int n) {\n    int res = 1;\n    for (int i = 2; i <= n; i++) res = res * i;\n    return res;\n  }\n\n  static int sumSubsequences(int arr[], int n, int k) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += arr[i];\n    }\n    int kLengthSubSequence;\n    kLengthSubSequence = nCr(n, k);\n    int ans = sum * ((k * kLengthSubSequence) / n);\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {7, 8, 9, 2};\n    int K = 2;\n    int n = arr.length;\n    System.out.print(sumSubsequences(arr, n, K));\n  }\n}\n", "python": "def nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\n\n\ndef sumSubsequences(arr, n, k):\n    sum = 0\n    for i in range(0, n):\n        sum = sum + arr[i]\n    kLengthSubSequence = nCr(n, k)\n    ans = sum * ((k * kLengthSubSequence) / n)\n    return ans\n\n\narr = [7, 8, 9, 2]\nk = 2\nn = len(arr)\nprint(sumSubsequences(arr, n, k))\n"}
{"text": "Sum of first K numbers which are not divisible by N ", "java": "import java.util.*;\n\nclass GFG {\n  static int findSum(int n, int k) {\n    int val = (k / (n - 1)) * n;\n    int rem = k % (n - 1);\n    if (rem == 0) {\n      val = val - 1;\n    } else {\n      val = val + rem;\n    }\n    int sum = (val * (val + 1)) / 2;\n    int x = k / (n - 1);\n    int sum_of_multiples = (x * (x + 1) * n) / 2;\n    sum -= sum_of_multiples;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 7, k = 13;\n    System.out.println(findSum(n, k));\n  }\n}\n", "python": "def findSum(n, k):\n    val = (k // (n - 1)) * n\n    rem = k % (n - 1)\n    if rem == 0:\n        val = val - 1\n    else:\n        val = val + rem\n    sum = (val * (val + 1)) // 2\n    x = k // (n - 1)\n    sum_of_multiples = (x * (x + 1) * n) // 2\n    sum -= sum_of_multiples\n    return sum\n\n\nn = 7\nk = 13\nprint(findSum(n, k))\n"}
{"text": "Check if a number is Full Fibonacci or not ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isPerfectSquare(int x) {\n    int s = (int) Math.sqrt(x);\n    return (s * s == x);\n  }\n\n  static boolean isFibonacci(int n) {\n    return isPerfectSquare(5 * n * n + 4) || isPerfectSquare(5 * n * n - 4);\n  }\n\n  static boolean checkDigits(int n) {\n    while (n != 0) {\n      int dig = n % 10;\n      if (dig == 4 && dig == 6 && dig == 7 && dig == 9) return false;\n      n /= 10;\n    }\n    return true;\n  }\n\n  static boolean isFullfibonacci(int n) {\n    return (checkDigits(n) && isFibonacci(n));\n  }\n\n  public static void main(String[] args) {\n    int n = 13;\n    if (isFullfibonacci(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "from math import *\n\n\ndef isPerfectSquare(x):\n    s = sqrt(x)\n    return s * s == x\n\n\ndef isFibonacci(n):\n    return isPerfectSquare(5 * n * n + 4) or isPerfectSquare(5 * n * n - 4)\n\n\ndef checkDigits(n):\n    while n:\n        dig = n % 10\n        if dig == 4 and dig == 6 and dig == 7 and dig == 9:\n            return False\n        n /= 10\n    return True\n\n\ndef isFullfibonacci(n):\n    return checkDigits(n) and isFibonacci(n)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 13\n    if isFullfibonacci(n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Nth term where K + 1 th term is product of Kth term with difference of max and min digit of Kth term ", "java": "class GFG {\n  static int MIN(int n) {\n    int ans = 11;\n    while (n > 0) {\n      ans = Math.min(ans, n % 10);\n      n /= 10;\n    }\n    return ans;\n  }\n\n  static int MAX(int n) {\n    int ans = -1;\n    while (n > 0) {\n      ans = Math.max(ans, n % 10);\n      n /= 10;\n    }\n    return ans;\n  }\n\n  static void Find_value(int n, int k) {\n    k--;\n    int x = 0;\n    int y = 0;\n    while (k-- > 0) {\n      x = MIN(n);\n      y = MAX(n);\n      if (y - x == 0) break;\n      n *= (y - x);\n    }\n    System.out.print(n);\n  }\n\n  public static void main(String[] args) {\n    int N = 487, D = 5;\n    Find_value(N, D);\n  }\n}\n", "python": "def MIN(n):\n    ans = 11\n    while n:\n        ans = min(ans, n % 10)\n        n //= 10\n    return ans\n\n\ndef MAX(n):\n    ans = -1\n    while n:\n        ans = max(ans, n % 10)\n        n //= 10\n    return ans\n\n\ndef Find_value(n, k):\n    k -= 1\n    (x, y) = (0, 0)\n    while k:\n        k -= 1\n        x = MIN(n)\n        y = MAX(n)\n        if (y - x) == 0:\n            break\n        n *= y - x\n    print(n, end=\" \u2581 \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    (N, D) = (487, 5)\n    Find_value(N, D)\n"}
{"text": "Program to check if N is a Decagonal Number ", "java": "\nclass GFG {\n  public static boolean isdecagonal(int N) {\n    double n = (3 + Math.sqrt(16 * N + 9)) / 8;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 10;\n    if (isdecagonal(N)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isdecagonal(N):\n    n = (3 + math.sqrt(16 * N + 9)) / 8\n    return (n - int(n)) == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 10\n    if isdecagonal(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Program to check if N is a Octadecagon number ", "java": "\nclass GFG {\n  public static boolean isOctadecagon(int N) {\n    double n = (14 + Math.sqrt(128 * N + 196)) / 32;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 18;\n    if (isOctadecagon(N)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isOctadecagon(N):\n    n = (14 + math.sqrt(128 * N + 196)) // 32\n    return (n - int(n)) == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 18\n    if isOctadecagon(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Program to check if N is a Hendecagonal Number ", "java": "\nclass GFG {\n  public static boolean ishendecagonal(int N) {\n    double n = (7 + Math.sqrt(72 * N + 49)) / 18;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 11;\n    if (ishendecagonal(N)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef ishendecagonal(N):\n    n = (7 + math.sqrt(72 * N + 49)) // 18\n    return (n - int(n)) == 0\n\n\nN = 11\nif ishendecagonal(N):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to check if N is a Hexadecagonal Number ", "java": "\nclass GFG {\n  public static boolean ishexadecagonal(int N) {\n    double n = (12 + Math.sqrt(112 * N + 144)) / 28;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 16;\n    if (ishexadecagonal(N)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "from math import sqrt\n\n\ndef ishexadecagonal(N):\n    n = (12 + sqrt(112 * N + 144)) / 28\n    return (n - int(n)) == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 16\n    if ishexadecagonal(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Program to check if N is a Nonagonal Number ", "java": "\nclass GFG {\n  public static boolean isnonagonal(int N) {\n    double n = (5 + Math.sqrt(56 * N + 25)) / 14;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 9;\n    if (isnonagonal(N)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "def isnonagonal(N):\n    n = (5 + pow((56 * N + 25), 1 / 2)) / 14\n    return (n - int(n)) == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 9\n    if isnonagonal(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Count the minimum steps to reach 0 from the given integer N ", "java": "class GFG {\n  static int getMinSteps(int n, int jump) {\n    int quotient = n / jump;\n    int remainder = n % jump;\n    int steps = quotient + remainder;\n    return steps;\n  }\n\n  public static void main(String[] args) {\n    int N = 6, K = 3;\n    System.out.print(getMinSteps(N, K));\n  }\n}\n", "python": "def getMinSteps(n, jump):\n    quotient = int(n / jump)\n    remainder = n % jump\n    steps = quotient + remainder\n    return steps\n\n\nN = 6\nK = 3\nprint(getMinSteps(N, K))\n"}
{"text": "Program to check if N is a Centered Decagonal Number ", "java": "\nclass GFG {\n  public static boolean isCentereddecagonal(int N) {\n    double n = (5 + Math.sqrt(20 * N + 5)) / 10;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int n = 11;\n    if (isCentereddecagonal(n)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import numpy as np\n\n\ndef isCentereddecagonal(N):\n    n = (5 + np.sqrt(20 * N + 5)) / 10\n    return (n - int(n)) == 0\n\n\nN = 11\nif isCentereddecagonal(N):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Find the Largest N digit perfect square number in Base B ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static double nDigitPerfectSquares(int n, int b) {\n    double largest = Math.pow(Math.ceil(Math.sqrt(Math.pow(b, n))) - 1, 2);\n    return largest;\n  }\n\n  public static void main(String[] args) {\n    int N = 1, B = 8;\n    System.out.println(nDigitPerfectSquares(N, B));\n  }\n}\n", "python": "import math\n\n\ndef nDigitPerfectSquares(n, b):\n    largest = pow(math.ceil(math.sqrt(pow(b, n))) - 1, 2)\n    print(largest)\n\n\nN = 1\nB = 8\nnDigitPerfectSquares(N, B)\n"}
{"text": "Find Cube root of a number using Log function ", "java": "class GFG {\n  static double cubeRoot(double n) {\n    double ans = Math.pow(3, ((1.0 / 3) * (Math.log(n) / Math.log(3))));\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    double N = 8;\n    System.out.printf(\" % .2f \", cubeRoot(N));\n  }\n}\n", "python": "import numpy as np\n\n\ndef cubeRoot(n):\n    ans = pow(3, (1.0 / 3) * (np.log(n) / np.log(3)))\n    return ans\n\n\nN = 8\nprint(\" % .2f \" % cubeRoot(N))\n"}
{"text": "Find the maximum possible value for the given periodic function ", "java": "class GFG {\n  public static int floorMax(int A, int B, int N) {\n    int x = Math.min(B - 1, N);\n    return (A * x) / B;\n  }\n\n  public static void main(String[] args) {\n    int A = 11, B = 10, N = 9;\n    System.out.println(floorMax(A, B, N));\n  }\n}\n", "python": "def floorMax(A, B, N):\n    x = min(B - 1, N)\n    return (A * x) // B\n\n\nA = 11\nB = 10\nN = 9\nprint(floorMax(A, B, N))\n"}
{"text": "Minimum moves taken to move coin of each cell to any one cell of Matrix ", "java": "class GFG {\n  public static int calculateMoves(int n) {\n    int count = 0;\n    int layers = n / 2;\n    for (int k = 1; k < layers + 1; k++) {\n      count += 8 * k * k;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.println(calculateMoves(N));\n  }\n}\n", "python": "def calculateMoves(n):\n    count = 0\n    layers = n // 2\n    for k in range(1, layers + 1):\n        count += 8 * k * k\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    print(calculateMoves(N))\n"}
{"text": "Check if N can be represented as sum of squares of two consecutive integers ", "java": "\nclass GFG {\n  public static boolean isSumSquare(int N) {\n    double n = (2 + Math.sqrt(8 * N - 4)) / 2;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int i = 13;\n    if (isSumSquare(i)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isSumSquare(N):\n    n = (2 + math.sqrt(8 * N - 4)) / 2\n    return (n - int(n)) == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    i = 13\n    if isSumSquare(i):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Program to check if N is a Centered heptagonal number ", "java": "\nclass GFG {\n  public static boolean isCenteredheptagonal(int N) {\n    double n = (7 + Math.sqrt(56 * N - 7)) / 14;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int n = 8;\n    if (isCenteredheptagonal(n)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isCenteredheptagonal(N):\n    n = (7 + math.sqrt(56 * N - 7)) / 14\n    return (n - int(n)) == 0\n\n\nn = 8\nif isCenteredheptagonal(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to check if N is a Centered nonadecagonal number ", "java": "class GFG {\n  static boolean isCenterednonadecagonal(int N) {\n    float n = (float) ((19 + Math.sqrt(152 * N + 209)) / 38);\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int n = 20;\n    if (isCenterednonadecagonal(n)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isCenterednonadecagonal(N):\n    n = (19 + math.sqrt(152 * N + 209)) / 38\n    return (n - int(n)) == 0\n\n\nn = 20\nif isCenterednonadecagonal(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to check if N is a Centered Octadecagonal number ", "java": "\nclass GFG {\n  public static boolean isCenteredOctadecagonal(int N) {\n    double n = (9 + Math.sqrt(36 * N + 45)) / 18;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int n = 19;\n    if (isCenteredOctadecagonal(n)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isCenteredOctadecagonal(N):\n    n = (9 + math.sqrt(36 * N + 45)) / 18\n    return (n - int(n)) == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 19\n    if isCenteredOctadecagonal(n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Logarithm tricks for Competitive Programming ", "java": "class GFG {\n  static double kthRoot(double n, int k) {\n    return Math.pow(k, (1.0 / k) * (Math.log(n) / Math.log(k)));\n  }\n\n  public static void main(String[] args) {\n    double N = 8.0;\n    int K = 3;\n    System.out.print(kthRoot(N, K));\n  }\n}\n", "python": "import math\n\n\ndef isPowerOfTwo(n):\n    return math.ceil(math.log(n) // math.log(2)) == math.floor(\n        math.log(n) // math.log(2)\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    if isPowerOfTwo(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Logarithm tricks for Competitive Programming ", "java": "class GFG {\n  static boolean isPower(int N, int K) {\n    int res1 = (int) (Math.log(N) / Math.log(K));\n    double res2 = Math.log(N) / Math.log(K);\n    return (res1 == res2);\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    int K = 2;\n    if (isPower(N, K)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isPowerOfTwo(n):\n    return math.ceil(math.log(n) // math.log(2)) == math.floor(\n        math.log(n) // math.log(2)\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    if isPowerOfTwo(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Count of subarrays which start and end with the same element ", "java": "public class Main {\n  public static void cntArray(int A[], int N) {\n    int result = 0;\n    int[] frequency = new int[N + 1];\n    for (int i = 0; i < N; i++) {\n      frequency[A[i]]++;\n    }\n    for (int i = 1; i <= N; i++) {\n      int frequency_of_i = frequency[i];\n      result += ((frequency_of_i) * (frequency_of_i + 1)) / 2;\n    }\n    System.out.println(result);\n  }\n\n  public static void main(String[] args) {\n    int[] A = {1, 5, 6, 1, 9, 5, 8, 10, 8, 9};\n    int N = A.length;\n    cntArray(A, N);\n  }\n}\n", "python": "def cntArray(A, N):\n    result = 0\n    frequency = [0] * (N + 1)\n    for i in range(0, N):\n        frequency[A[i]] = frequency[A[i]] + 1\n    for i in range(1, N + 1):\n        frequency_of_i = frequency[i]\n        result = result + ((frequency_of_i) * (frequency_of_i + 1)) / 2\n    print(int(result))\n    print(\" \")\n\n\nA = [1, 5, 6, 1, 9, 5, 8, 10, 8, 9]\nN = len(A)\ncntArray(A, N)\n"}
{"text": "Length of array pair formed where one contains all distinct elements and other all same elements ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int findMaxSize(int a[], int n) {\n    ArrayList<Integer> frq = new ArrayList<Integer>(n + 1);\n    for (int i = 0; i <= n; i++) frq.add(0);\n    for (int i = 0; i < n; ++i) frq.set(a[i], frq.get(a[i]) + 1);\n    int maxfrq = Collections.max(frq);\n    int dist = n + 1 - Collections.frequency(frq, 0);\n    int ans1 = Math.min(maxfrq - 1, dist);\n    int ans2 = Math.min(maxfrq, dist - 1);\n    int ans = Math.max(ans1, ans2);\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 2, 4, 1, 4, 3, 4};\n    int n = arr.length;\n    System.out.println(findMaxSize(arr, n));\n  }\n}\n", "python": "def findMaxSize(a, n):\n    frq = [0] * (n + 1)\n    for i in range(n):\n        frq[a[i]] += 1\n    maxfrq = max(frq)\n    dist = n + 1 - frq.count(0)\n    ans1 = min(maxfrq - 1, dist)\n    ans2 = min(maxfrq, dist - 1)\n    ans = max(ans1, ans2)\n    return ans\n\n\narr = [4, 2, 4, 1, 4, 3, 4]\nn = len(arr)\nprint(findMaxSize(arr, n))\n"}
{"text": "Nth root of a number using log ", "java": "import java.util.*;\n\nclass GFG {\n  static double kthRoot(double n, int k) {\n    return Math.pow(k, ((1.0 / k) * (Math.log(n) / Math.log(k))));\n  }\n\n  public static void main(String args[]) {\n    double n = 81;\n    int k = 4;\n    System.out.printf(\" % .6f \", kthRoot(n, k));\n  }\n}\n", "python": "import numpy as np\n\n\ndef kthRoot(n, k):\n    return pow(k, ((1.0 / k) * (np.log(n) / np.log(k))))\n\n\nn = 81\nk = 4\nprint(\" % .6f \" % kthRoot(n, k))\n"}
{"text": "Sum of alternating sign cubes of first N Natural numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static int summation(int N) {\n    int co = (N + 1) / 2;\n    int ce = (N) / 2;\n    int se = 2 * ((ce * (ce + 1)) * (ce * (ce + 1)));\n    int so = (co * co) * (2 * ((co * co)) - 1);\n    return so - se;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(summation(n));\n  }\n}\n", "python": "def summation(N):\n    co = (N + 1) / 2\n    co = int(co)\n    ce = N / 2\n    ce = int(ce)\n    se = 2 * ((ce * (ce + 1)) * (ce * (ce + 1)))\n    so = (co * co) * (2 * (co * co) - 1)\n    return so - se\n\n\nn = 3\nprint(summation(n))\n"}
{"text": "Program to check if N is a Star Number ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static boolean isStar(int N) {\n    double n = (6 + Math.sqrt(24 * N + 12)) / 6;\n    return (n - (int) n) == 0;\n  }\n\n  public static void main(String[] args) {\n    int i = 13;\n    if (isStar(i)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "import math\n\n\ndef isStar(N):\n    n = (math.sqrt(24 * N + 12) + 6) / 6\n    return (n - int(n)) == 0\n\n\ni = 13\nif isStar(i):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to calculate Electricity Bill ", "java": "import java.util.*;\n\nclass ComputeElectricityBill {\n  public static int calculateBill(int units) {\n    if (units <= 100) {\n      return units * 10;\n    } else if (units <= 200) {\n      return (100 * 10) + (units - 100) * 15;\n    } else if (units <= 300) {\n      return (100 * 10) + (100 * 15) + (units - 200) * 20;\n    } else if (units > 300) {\n      return (100 * 10) + (100 * 15) + (100 * 20) + (units - 300) * 25;\n    }\n    return 0;\n  }\n\n  public static void main(String args[]) {\n    int units = 250;\n    System.out.println(calculateBill(units));\n  }\n}\n", "python": "def calculateBill(units):\n    if units <= 100:\n        return units * 10\n    elif units <= 200:\n        return (100 * 10) + (units - 100) * 15\n    elif units <= 300:\n        return (100 * 10) + (100 * 15) + (units - 200) * 20\n    elif units > 300:\n        return (100 * 10) + (100 * 15) + (100 * 20) + (units - 300) * 25\n    return 0\n\n\nunits = 250\nprint(calculateBill(units))\n"}
{"text": "Count of N digit palindromic numbers divisible by 9 ", "java": "import java.util.*;\n\nclass GFG {\n  static int countPalindromic(int n) {\n    int count;\n    if (n % 2 == 1) {\n      count = (int) Math.pow(9, (n - 1) / 2);\n    } else {\n      count = (int) Math.pow(9, (n - 2) / 2);\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(countPalindromic(n));\n  }\n}\n", "python": "def countPalindromic(n):\n    count = 0\n    if n % 2 == 1:\n        count = pow(9, (n - 1) // 2)\n    else:\n        count = pow(9, (n - 2) // 2)\n    return count\n\n\nn = 3\nprint(countPalindromic(n))\n"}
{"text": "Find the minimum number to be added to N to make it a power of K ", "java": "class GFG {\n  static int minNum(int n, int k) {\n    int x = (int) (Math.log(n) / Math.log(k)) + 1;\n    int mn = (int) (Math.pow(k, x) - n);\n    return mn;\n  }\n\n  public static void main(String[] args) {\n    int n = 20, k = 5;\n    System.out.print(minNum(n, k));\n  }\n}\n", "python": "import math\n\n\ndef minNum(n, k):\n    x = int((math.log(n) // math.log(k))) + 1\n    mn = pow(k, x) - n\n    return mn\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 20\n    k = 5\n    print(minNum(n, k))\n"}
{"text": "Previous perfect square and cube number smaller than number N ", "java": "import java.util.*;\n\nclass GFG {\n  static int previousPerfectSquare(int N) {\n    int prevN = (int) Math.floor(Math.sqrt(N));\n    if (prevN * prevN == N) prevN -= 1;\n    return prevN * prevN;\n  }\n\n  static int previousPerfectCube(int N) {\n    int prevN = (int) Math.floor(Math.cbrt(N));\n    if (prevN * prevN * prevN == N) prevN -= 1;\n    return prevN * prevN * prevN;\n  }\n\n  public static void main(String[] args) {\n    int n = 30;\n    System.out.println(previousPerfectSquare(n));\n    System.out.println(previousPerfectCube(n));\n  }\n}\n", "python": "import math\nimport numpy as np\n\n\ndef previousPerfectSquare(N):\n    prevN = math.floor(math.sqrt(N))\n    if prevN * prevN == N:\n        prevN -= 1\n    return prevN * prevN\n\n\ndef previousPerfectCube(N):\n    prevN = math.floor(np.cbrt(N))\n    if prevN * prevN * prevN == N:\n        prevN -= 1\n    return prevN * prevN * prevN\n\n\nn = 30\nprint(previousPerfectSquare(n))\nprint(previousPerfectCube(n))\n"}
{"text": "Product of all non repeating Subarrays of an Array ", "java": "public class GFG {\n  private static long product(int[] arr) {\n    double occurrence = Math.pow(2, arr.length - 1);\n    double product = 1;\n    for (int i = 0; i < arr.length; i++) {\n      product *= Math.pow(arr[i], occurrence);\n    }\n    return (long) product;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {10, 3, 7};\n    System.out.println(product(arr));\n  }\n}\n", "python": "def product(arr):\n    occurrence = pow(2, len(arr) - 1)\n    product = 1\n    for i in range(0, len(arr)):\n        product *= pow(arr[i], occurrence)\n    return product\n\n\narr = [10, 3, 7]\nprint(product(arr))\n"}
{"text": "Maximize array sum by concatenating corresponding elements of given two arrays ", "java": "class GFG {\n  static int joinNumbers(int numA, int numB) {\n    int revB = 0;\n    while (numB > 0) {\n      revB = revB * 10 + (numB % 10);\n      numB = numB / 10;\n    }\n    while (revB > 0) {\n      numA = numA * 10 + (revB % 10);\n      revB = revB / 10;\n    }\n    return numA;\n  }\n\n  static int findMaxSum(int A[], int B[], int n) {\n    int maxArr[] = new int[n];\n    for (int i = 0; i < n; ++i) {\n      int X = joinNumbers(A[i], B[i]);\n      int Y = joinNumbers(B[i], A[i]);\n      int mx = Math.max(X, Y);\n      maxArr[i] = mx;\n    }\n    int maxAns = 0;\n    for (int i = 0; i < n; i++) {\n      maxAns += maxArr[i];\n    }\n    return maxAns;\n  }\n\n  public static void main(String args[]) {\n    int N = 5;\n    int A[] = {11, 23, 38, 43, 59};\n    int B[] = {36, 24, 17, 40, 56};\n    System.out.println(findMaxSum(A, B, N));\n  }\n}\n", "python": "def joinNumbers(numA, numB):\n    revB = 0\n    while numB > 0:\n        revB = revB * 10 + (numB % 10)\n        numB = numB // 10\n    while revB > 0:\n        numA = numA * 10 + (revB % 10)\n        revB = revB // 10\n    return numA\n\n\ndef findMaxSum(A, B, n):\n    maxArr = [0 for i in range(n)]\n    for i in range(n):\n        X = joinNumbers(A[i], B[i])\n        Y = joinNumbers(B[i], A[i])\n        mx = max(X, Y)\n        maxArr[i] = mx\n    maxAns = 0\n    for i in range(n):\n        maxAns += maxArr[i]\n    return maxAns\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    A = [11, 23, 38, 43, 59]\n    B = [36, 24, 17, 40, 56]\n    print(findMaxSum(A, B, N))\n"}
{"text": "Length of largest subarray whose all elements are Perfect Number ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isPerfect(int n) {\n    int sum = 1;\n    int i;\n    for (i = 2; i * i <= n; i++) {\n      if (n % i == 0) {\n        if (i * i != n) sum = sum + i + n / i;\n        else sum = sum + i;\n      }\n    }\n    if (sum == n && n != 1) return true;\n    return false;\n  }\n\n  static int contiguousPerfectNumber(int arr[], int n) {\n    int current_length = 0;\n    int max_length = 0;\n    int i;\n    for (i = 0; i < n; i++) {\n      if (isPerfect(arr[i])) current_length++;\n      else current_length = 0;\n      max_length = Math.max(max_length, current_length);\n    }\n    return max_length;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 7, 36, 4, 6, 28, 4};\n    int n = arr.length;\n    System.out.print(contiguousPerfectNumber(arr, n));\n  }\n}\n", "python": "def isPerfect(n):\n    sum = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            sum = sum + i + n / i\n        i += 1\n    return True if sum == n and n != 1 else False\n\n\ndef contiguousPerfectNumber(arr, n):\n    current_length = 0\n    max_length = 0\n    for i in range(0, n, 1):\n        if isPerfect(arr[i]):\n            current_length += 1\n        else:\n            current_length = 0\n        max_length = max(max_length, current_length)\n    return max_length\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 7, 36, 4, 6, 28, 4]\n    n = len(arr)\n    print(contiguousPerfectNumber(arr, n))\n"}
{"text": "Maximize sum of K corner elements in Array ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxSum(int arr[], int K, int start, int end, int max_sum) {\n    if (K == 0) return max_sum;\n    int max_sum_start = max_sum + arr[start];\n    int max_sum_end = max_sum + arr[end];\n    int ans =\n        Math.max(\n            maxSum(arr, K - 1, start + 1, end, max_sum_start),\n            maxSum(arr, K - 1, start, end - 1, max_sum_end));\n    return ans;\n  }\n\n  static void maximizeSum(int arr[], int K, int n) {\n    int max_sum = 0;\n    int start = 0;\n    int end = n - 1;\n    System.out.print(maxSum(arr, K, start, end, max_sum));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {8, 4, 4, 8, 12, 3, 2, 9};\n    int K = 3;\n    int n = arr.length;\n    maximizeSum(arr, K, n);\n  }\n}\n", "python": "def maxSum(arr, K, start, end, max_sum):\n    if K == 0:\n        return max_sum\n    max_sum_start = max_sum + arr[start]\n    max_sum_end = max_sum + arr[end]\n    ans = max(\n        maxSum(arr, K - 1, start + 1, end, max_sum_start),\n        maxSum(arr, K - 1, start, end - 1, max_sum_end),\n    )\n    return ans\n\n\ndef maximizeSum(arr, K, n):\n    max_sum = 0\n    start = 0\n    end = n - 1\n    print(maxSum(arr, K, start, end, max_sum))\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [8, 4, 4, 8, 12, 3, 2, 9]\n    K = 3\n    n = len(arr)\n    maximizeSum(arr, K, n)\n"}
{"text": "Maximize sum of K corner elements in Array ", "java": "\nclass GFG {\n  public static int maxPointCount(int arr[], int K, int size) {\n    int curr_points = 0;\n    int max_points = 0;\n    for (int i = 0; i < K; i++) curr_points += arr[i];\n    max_points = curr_points;\n    int j = size - 1;\n    for (int i = K - 1; i >= 0; i--) {\n      curr_points = curr_points + arr[j] - arr[i];\n      max_points = Math.max(curr_points, max_points);\n      j--;\n    }\n    return max_points;\n  }\n\n  public static void main(String args[]) {\n    int[] arr = {8, 4, 4, 8, 12, 3, 2, 9};\n    int K = 3;\n    int n = arr.length;\n    System.out.print(maxPointCount(arr, K, n));\n  }\n}\n", "python": "def maxSum(arr, K, start, end, max_sum):\n    if K == 0:\n        return max_sum\n    max_sum_start = max_sum + arr[start]\n    max_sum_end = max_sum + arr[end]\n    ans = max(\n        maxSum(arr, K - 1, start + 1, end, max_sum_start),\n        maxSum(arr, K - 1, start, end - 1, max_sum_end),\n    )\n    return ans\n\n\ndef maximizeSum(arr, K, n):\n    max_sum = 0\n    start = 0\n    end = n - 1\n    print(maxSum(arr, K, start, end, max_sum))\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [8, 4, 4, 8, 12, 3, 2, 9]\n    K = 3\n    n = len(arr)\n    maximizeSum(arr, K, n)\n"}
{"text": "Sum of all N digit palindromic numbers divisible by 9 formed using digits 1 to 9 ", "java": "import java.util.*;\n\nclass GFG {\n  static int countPalindrome(int n) {\n    int count;\n    if (n % 2 == 1) {\n      count = (int) Math.pow(9, (n - 1) / 2);\n    } else {\n      count = (int) Math.pow(9, (n - 2) / 2);\n    }\n    return count;\n  }\n\n  static int sumPalindrome(int n) {\n    int count = countPalindrome(n);\n    int res = 0;\n    if (n == 1) return 9;\n    if (n == 2) return 99;\n    for (int i = 0; i < n; i++) {\n      res = res * 10 + count * 5;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(sumPalindrome(n));\n  }\n}\n", "python": "def countPalindrome(n):\n    count = 0\n    if n % 2 == 1:\n        count = pow(9, (n - 1) // 2)\n    else:\n        count = pow(9, (n - 2) // 2)\n    return count\n\n\ndef sumPalindrome(n):\n    count = countPalindrome(n)\n    res = 0\n    if n == 1:\n        return 9\n    if n == 2:\n        return 99\n    for i in range(n):\n        res = res * 10 + count * 5\n    return res\n\n\nn = 3\nprint(sumPalindrome(n))\n"}
{"text": "Find the total count of numbers up to N digits in a given base B ", "java": "class GFG {\n  static int count(int N, int B) {\n    int sum = 0;\n    for (int i = 1; i <= N; i++) {\n      sum += (B - 1) * Math.pow(B, i - 1);\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int N = 2, B = 10;\n    System.out.print(count(N, B));\n  }\n}\n", "python": "from math import pow\n\n\ndef count(N, B):\n    sum = 0\n    for i in range(1, N + 1):\n        sum += (B - 1) * pow(B, i - 1)\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    B = 10\n    print(int(count(N, B)))\n"}
{"text": "Minimum Cost Path to visit all nodes situated at the Circumference of Circular Road ", "java": "import java.util.*;\nimport java.util.Arrays;\n\nclass GFG {\n  static int minCost(int arr[], int n, int circumference) {\n    Arrays.sort(arr);\n    int[] arr2 = new int[2 * n];\n    for (int i = 0; i < n; i++) {\n      arr2[i] = arr[i];\n      arr2[i + n] = arr[i] + circumference;\n    }\n    int res = Integer.MAX_VALUE;\n    for (int i = 0; i < n; i++) res = Math.min(res, arr2[i + (n - 1)] - arr2[i]);\n    return res;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {19, 3, 6};\n    int n = arr.length;\n    int circumference = 20;\n    System.out.println(minCost(arr, n, circumference));\n  }\n}\n", "python": "def minCost(arr, n, circumference):\n    arr.sort()\n    arr2 = [0] * (2 * n)\n    for i in range(n):\n        arr2[i] = arr[i]\n        arr2[i + n] = arr[i] + circumference\n    res = 9999999999999999999\n    for i in range(n):\n        res = min(res, arr2[i + (n - 1)] - arr2[i])\n    return res\n\n\narr = [19, 3, 6]\nn = len(arr)\ncircumference = 20\nprint(minCost(arr, n, circumference))\n"}
{"text": "Unique element in an array where all elements occur K times except one ", "java": "\nclass Main {\n  public static int findunique(int a[], int k) {\n    int res = 0;\n    for (int i = 0; i < 32; i++) {\n      int p = 0;\n      for (int j = 0; j < a.length; j++) {\n        p += (Math.abs(a[j]) & (1 << i)) != 0 ? 1 : 0;\n      }\n      p %= k;\n      res += Math.pow(2, i) * p;\n    }\n    int c = 0;\n    for (int x = 0; x < a.length; x++)\n      if (a[x] == res) {\n        c = 1;\n        break;\n      }\n    return c == 1 ? res : -res;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {12, 12, 2, 2, 3};\n    int k = 2;\n    System.out.println(findunique(a, k));\n  }\n}\n", "python": "def findUniqueElements(arr, N, K):\n    s = set()\n    for x in arr:\n        s.add(x)\n    arr_sum = sum(arr)\n    set_sum = 0\n    for x in s:\n        set_sum += x\n    print((K * set_sum - arr_sum) // (K - 1))\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [12, 1, 12, 3, 12, 1, 1, 2, 3, 2, 2, 3, 7]\n    N = len(arr)\n    K = 3\n    findUniqueElements(arr, N, K)\n"}
{"text": "Find minimum GCD of all pairs in an array ", "java": "import java.util.*;\n\nclass GFG {\n  static int __gcd(int a, int b) {\n    if (b == 0) return a;\n    else return __gcd(b, a % b);\n  }\n\n  static int MinimumGCD(int arr[], int n) {\n    int g = 0;\n    for (int i = 0; i < n; i++) {\n      g = __gcd(g, arr[i]);\n    }\n    return g;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 4, 6, 8, 3};\n    int N = arr.length;\n    System.out.println(MinimumGCD(arr, N));\n  }\n}\n", "python": "from math import gcd\n\n\ndef MinimumGCD(arr, n):\n    g = 0\n    for i in range(n):\n        g = gcd(g, arr[i])\n    return g\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 4, 6, 8, 3]\n    N = len(arr)\n    print(MinimumGCD(arr, N))\n"}
{"text": "Minimum steps to reach the Nth stair in jumps of perfect power of 2 ", "java": "import java.util.*;\n\nclass GFG {\n  static int stepRequired(int N) {\n    int cnt = 0;\n    while (N > 0) {\n      N = N & (N - 1);\n      cnt++;\n    }\n    return cnt;\n  }\n\n  public static void main(String[] args) {\n    int N = 23;\n    System.out.print(stepRequired(N));\n  }\n}\n", "python": "def stepRequired(N):\n    cnt = 0\n    while N > 0:\n        N = N & (N - 1)\n        cnt += 1\n    return cnt\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 23\n    print(stepRequired(N))\n"}
{"text": "Minimum volume of cone that can be circumscribed about a sphere of radius R ", "java": "import java.util.*;\n\nclass GFG {\n  static double Volume_of_cone(double R) {\n    double V = (double) ((1 / 3.0) * (3.14) * (2 * (R * R)) * (4 * R));\n    return V;\n  }\n\n  public static void main(String[] args) {\n    double R = 10.0;\n    System.out.print(Volume_of_cone(R));\n  }\n}\n", "python": "import math\n\n\ndef Volume_of_cone(R):\n    V = (1 / 3) * (3.14) * (2 * (R ** 2)) * (4 * R)\n    return V\n\n\nif __name__ == \" _ _ main _ _ \":\n    R = 10\n    print(Volume_of_cone(R))\n"}
{"text": "Program to find Surface Area and Volume of Octagonal Prism ", "java": "public class GFG {\n  static void find_volume(double area, double h) {\n    double Volume = (area * h);\n    System.out.println(\" Volume : \u2581 \" + Volume);\n  }\n\n  static void find_Surface_area(double area, double a, double h) {\n    double Surface_area = (2 * area) + (8 * a * h);\n    System.out.println(\" Surface \u2581 area : \u2581 \" + Surface_area);\n  }\n\n  public static void main(String[] args) {\n    double h = 1;\n    double a = 6;\n    double d = 2;\n    double area = 2 * a * d;\n    find_Surface_area(area, a, h);\n    find_volume(area, h);\n  }\n}\n", "python": "import math\n\n\ndef find_volume(area, h):\n    Volume = area * h\n    print(\" Volume : \u2581 \", end=\" \u2581 \")\n    print(Volume)\n\n\ndef find_Surface_area(area, a, h):\n    Surface_area = (2 * area) + (8 * a * h)\n    print(\" Surface \u2581 area : \u2581 \", end=\" \u2581 \")\n    print(Surface_area)\n\n\nh = 1\na = 6\nd = 2\narea = 2 * a * d\nfind_Surface_area(area, a, h)\nfind_volume(area, h)\n"}
{"text": "Find the Maximum Alternate Subsequence Sum from a given array ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int maxAlternatingSum(int[] arr, int n) {\n    int max_sum = 0;\n    int i = 0;\n    while (i < n) {\n      int current_max = arr[i];\n      int k = i;\n      while (k < n && ((arr[i] > 0 && arr[k] > 0) || (arr[i] < 0 && arr[k] < 0))) {\n        current_max = Math.max(current_max, arr[k]);\n        k += 1;\n      }\n      max_sum += current_max;\n      i = k;\n    }\n    return max_sum;\n  }\n\n  public static void main(String args[]) {\n    int[] arr = {1, 2, 3, 4, -1, -2};\n    int n = arr.length;\n    System.out.println(maxAlternatingSum(arr, n));\n  }\n}\n", "python": "def maxAlternatingSum(arr, n):\n    max_sum = 0\n    i = 0\n    while i < n:\n        current_max = arr[i]\n        k = i\n        while k < n and ((arr[i] > 0 and arr[k] > 0) or (arr[i] < 0 and arr[k] < 0)):\n            current_max = max(current_max, arr[k])\n            k += 1\n        max_sum += current_max\n        i = k\n    return max_sum\n\n\narr = [1, 2, 3, 4, -1, -2]\nn = len(arr)\nprint(maxAlternatingSum(arr, n))\n"}
{"text": "Program for finding the Integral of a given function using Boole 's Rule ", "java": "class GFG {\n  static float y(float x) {\n    return (1 / (1 + x));\n  }\n\n  static float BooleRule(float a, float b) {\n    int n = 4;\n    int h;\n    h = (int) ((b - a) / n);\n    float sum = 0;\n    float bl =\n        (7 * y(a) + 32 * y(a + h) + 12 * y(a + 2 * h) + 32 * y(a + 3 * h) + 7 * y(a + 4 * h))\n            * 2\n            * h\n            / 45;\n    sum = sum + bl;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    System.out.printf((\" f ( x ) \u2581 = \u2581 % .4f \"), BooleRule(0, 4));\n  }\n}\n", "python": "def y(x):\n    return 1 / (1 + x)\n\n\ndef BooleRule(a, b):\n    n = 4\n    h = (b - a) / n\n    sum = 0\n    bl = (\n        (\n            7 * y(a)\n            + 32 * y(a + h)\n            + 12 * y(a + 2 * h)\n            + 32 * y(a + 3 * h)\n            + 7 * y(a + 4 * h)\n        )\n        * 2\n        * h\n        / 45\n    )\n    sum = sum + bl\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    lowlimit = 0\n    upplimit = 4\n    print(\" f ( x ) \u2581 = \", round(BooleRule(0, 4), 4))\n"}
{"text": "Find the product of sum of two diagonals of a square Matrix ", "java": "class GFG {\n  static long product(int[][] mat, int n) {\n    long d1 = 0, d2 = 0;\n    for (int i = 0; i < n; i++) {\n      d1 += mat[i][i];\n      d2 += mat[i][n - i - 1];\n    }\n    return 1L * d1 * d2;\n  }\n\n  public static void main(String[] args) {\n    int[][] mat = {{5, 8, 1}, {5, 10, 3}, {-6, 17, -9}};\n    int n = mat.length;\n    System.out.print(product(mat, n));\n  }\n}\n", "python": "def product(mat, n):\n    d1 = 0\n    d2 = 0\n    for i in range(n):\n        d1 += mat[i][i]\n        d2 += mat[i][n - i - 1]\n    return d1 * d2\n\n\nif __name__ == \" _ _ main _ _ \":\n    mat = [[5, 8, 1], [5, 10, 3], [-6, 17, -9]]\n    n = len(mat)\n    print(product(mat, n))\n"}
{"text": "Program to calculate Percentile of a student based on rank ", "java": "import java.util.*;\n\nclass GFG {\n  static float getPercentile(int rank, int students) {\n    float result = (float) (students - rank) / students * 100;\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int your_rank = 805;\n    int total_students = 97481;\n    System.out.print(getPercentile(your_rank, total_students));\n  }\n}\n", "python": "def getPercentile(rank, students):\n    result = (students - rank) / students * 100\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    your_rank = 805\n    total_students = 97481\n    print(getPercentile(your_rank, total_students))\n"}
{"text": "Sum of numbers in the Kth level of a Fibonacci triangle ", "java": "import java.util.*;\n\nclass GFG {\n  static int fib(int n) {\n    double phi = (1 + Math.sqrt(5)) / 2;\n    return (int) Math.round(Math.pow(phi, n) / Math.sqrt(5));\n  }\n\n  static int calculateSum(int l, int r) {\n    int sum = fib(r + 2) - fib(l + 1);\n    return sum;\n  }\n\n  static int sumFibonacci(int k) {\n    int l = (k * (k - 1)) / 2;\n    int r = l + k;\n    int sum = calculateSum(l, r - 1);\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int k = 3;\n    System.out.println(sumFibonacci(k));\n  }\n}\n", "python": "import math\n\nMAX = 1000000\n\n\ndef fib(n):\n    phi = (1 + math.sqrt(5)) / 2\n    return round(pow(phi, n) / math.sqrt(5))\n\n\ndef calculateSum(l, r):\n    sum = fib(r + 2) - fib(l + 1)\n    return sum\n\n\ndef sumFibonacci(k):\n    l = (k * (k - 1)) / 2\n    r = l + k\n    sum = calculateSum(l, r - 1)\n    return sum\n\n\nk = 3\nprint(sumFibonacci(k))\n"}
{"text": "Finding Integreand using Weedle 's Rule ", "java": "import java.util.*;\n\nclass GFG {\n  static float y(float x) {\n    float num = 1;\n    float denom = (float) 1.0 + x * x;\n    return num / denom;\n  }\n\n  static float WeedleRule(float a, float b) {\n    float h = (b - a) / 6;\n    float sum = 0;\n    sum =\n        sum\n            + (((3 * h) / 10)\n                * (y(a)\n                    + y(a + 2 * h)\n                    + 5 * y(a + h)\n                    + 6 * y(a + 3 * h)\n                    + y(a + 4 * h)\n                    + 5 * y(a + 5 * h)\n                    + y(a + 6 * h)));\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    float a = 0, b = 6;\n    float num = WeedleRule(a, b);\n    System.out.format(\" f ( x ) \u2581 = \u2581 \" + \" % .6f \", num);\n  }\n}\n", "python": "def y(x):\n    num = 1\n    denom = float(1.0 + x * x)\n    return num / denom\n\n\ndef WeedleRule(a, b):\n    h = (b - a) / 6\n    sum = 0\n    sum = sum + (\n        ((3 * h) / 10)\n        * (\n            y(a)\n            + y(a + 2 * h)\n            + 5 * y(a + h)\n            + 6 * y(a + 3 * h)\n            + y(a + 4 * h)\n            + 5 * y(a + 5 * h)\n            + y(a + 6 * h)\n        )\n    )\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 0\n    b = 6\n    num = WeedleRule(a, b)\n    print(\" f ( x ) \u2581 = \u2581 { 0 : . 6f } \".format(num))\n"}
{"text": "Sum of i * countDigits ( i ) ^ countDigits ( i ) for all i in range [ L , R ] ", "java": "import java.util.*;\n\nclass GFG {\n  static final int MOD = 1000000007;\n\n  static int rangeSum(int l, int r) {\n    int a = 1, b = 9, res = 0;\n    for (int i = 1; i <= 10; i++) {\n      int L = Math.max(l, a);\n      int R = Math.min(r, b);\n      if (L <= R) {\n        int sum = (L + R) * (R - L + 1) / 2;\n        res += Math.pow(i, i) * (sum % MOD);\n        res %= MOD;\n      }\n      a = a * 10;\n      b = b * 10 + 9;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int l = 98, r = 102;\n    System.out.print(rangeSum(l, r));\n  }\n}\n", "python": "MOD = 1000000007\n\n\ndef rangeSum(l, r):\n    a = 1\n    b = 9\n    res = 0\n    for i in range(1, 11):\n        L = max(l, a)\n        R = min(r, b)\n        if L <= R:\n            sum = (L + R) * (R - L + 1) // 2\n            res += pow(i, i) * (sum % MOD)\n            res %= MOD\n        a = a * 10\n        b = b * 10 + 9\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    l = 98\n    r = 102\n    print(rangeSum(l, r))\n"}
{"text": "Trial division Algorithm for Prime Factorization ", "java": "import java.util.*;\n\nclass GFG {\n  static int TrialDivision(int N) {\n    int i = 2;\n    int k = (int) Math.ceil(Math.sqrt(N));\n    while (i <= k) {\n      if (N % i == 0) return 0;\n      i += 1;\n    }\n    return 1;\n  }\n\n  public static void main(String[] args) {\n    int N = 49;\n    int p = TrialDivision(N);\n    if (p != 0) System.out.print(\" Prime \");\n    else System.out.print(\" Composite \");\n  }\n}\n", "python": "def TrialDivision(N):\n    i = 2\n    k = int(N ** 0.5)\n    while i <= k:\n        if N % i == 0:\n            return 0\n        i += 1\n    return 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 49\n    p = TrialDivision(N)\n    if p:\n        print(\" Prime \")\n    else:\n        print(\" Composite \")\n    DEDENT\n"}
{"text": "Count ways to divide C in two parts and add to A and B to make A strictly greater than B ", "java": "import java.util.*;\n\nclass GFG {\n  static int countWays(int A, int B, int C) {\n    int minAddA = Math.max(0, (C + B - A + 2) / 2);\n    int count_ways = Math.max(C - minAddA + 1, 0);\n    return count_ways;\n  }\n\n  public static void main(String args[]) {\n    int A = 3, B = 5, C = 5;\n    System.out.println(countWays(A, B, C));\n  }\n}\n", "python": "def countWays(A, B, C):\n    minAddA = max(0, (C + B - A + 2) // 2)\n    count_ways = max(C - minAddA + 1, 0)\n    return count_ways\n\n\nA = 3\nB = 5\nC = 5\nprint(countWays(A, B, C))\n"}
{"text": "Find the Sum of the series 1 + 1 / 3 + 1 / 5 + 1 / 7 + ... till N terms ", "java": "class GFG {\n  static void printSumSeries(int N) {\n    float sum = 0;\n    for (int i = 1; i <= N; i++) {\n      sum += 1.0 / (2 * i - 1);\n    }\n    System.out.println(sum);\n  }\n\n  public static void main(String[] args) {\n    int N = 6;\n    printSumSeries(N);\n  }\n}\n", "python": "def printSumSeries(N):\n    sum = 0\n    for i in range(1, N + 1):\n        sum += 1.0 / (2 * i - 1)\n    print(sum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 6\n    printSumSeries(N)\n"}
{"text": "Find the Sum of the series 1 , 2 , 3 , 6 , 9 , 18 , 27 , 54 , ... till N terms ", "java": "class GFG {\n  static void printSeriesSum(int N) {\n    double sum = 0;\n    int a = 1;\n    int cnt = 0;\n    boolean flag = true;\n    sum += a;\n    while (cnt < N) {\n      int nextElement;\n      if (flag == true) {\n        nextElement = a * 2;\n        sum += nextElement;\n        flag = !flag;\n      } else {\n        nextElement = a * 3 / 2;\n        sum += nextElement;\n        flag = !flag;\n      }\n      a = nextElement;\n      cnt++;\n    }\n    System.out.println(sum);\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    printSeriesSum(N);\n  }\n}\n", "python": "def printSeriesSum(N):\n    sum = 0\n    a = 1\n    cnt = 0\n    flag = True\n    sum += a\n    while cnt < N:\n        nextElement = None\n        if flag:\n            nextElement = a * 2\n            sum += nextElement\n            flag = not flag\n        else:\n            nextElement = a * (3 / 2)\n            sum += nextElement\n            flag = not flag\n        a = nextElement\n        cnt += 1\n    print(sum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    printSeriesSum(N)\n"}
{"text": "Program to add two integers of given base ", "java": "class GFG {\n  static String sumBaseB(String a, String b, int base) {\n    int len_a, len_b;\n    len_a = a.length();\n    len_b = b.length();\n    String sum, s;\n    s = \" \";\n    sum = \" \";\n    int diff;\n    diff = Math.abs(len_a - len_b);\n    for (int i = 1; i <= diff; i++) s += \"0\";\n    if (len_a < len_b) a = s + a;\n    else b = s + b;\n    int curr, carry = 0;\n    for (int i = Math.max(len_a, len_b) - 1; i > -1; i--) {\n      curr = carry + (a.charAt(i) - '0') + (b.charAt(i) - '0');\n      carry = curr / base;\n      curr = curr % base;\n      sum = (char) (curr + '0') + sum;\n    }\n    if (carry > 0) sum = (char) (carry + '0') + sum;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    String a, b, sum;\n    int base;\n    a = \"123\";\n    b = \"234\";\n    base = 6;\n    sum = sumBaseB(a, b, base);\n    System.out.println(sum);\n  }\n}\n", "python": "def sumBaseB(a, b, base):\n    len_a = len(a)\n    len_b = len(b)\n    s = \" \"\n    sum = \" \"\n    diff = abs(len_a - len_b)\n    for i in range(1, diff + 1):\n        s += \"0\"\n    if len_a < len_b:\n        a = s + a\n    else:\n        b = s + b\n    carry = 0\n    for i in range(max(len_a, len_b) - 1, -1, -1):\n        curr = carry + (ord(a[i]) - ord(\"0\")) + (ord(b[i]) - ord(\"0\"))\n        carry = curr // base\n        curr = curr % base\n        sum = chr(curr + ord(\"0\")) + sum\n    if carry > 0:\n        sum = chr(carry + ord(\"0\")) + sum\n    return sum\n\n\na = \"123\"\nb = \"234\"\nbase = 6\nsum = sumBaseB(a, b, base)\nprint(sum)\n"}
{"text": "Count the occurrence of digit K in a given number N using Recursion ", "java": "import java.util.*;\n\nclass GFG {\n  static double countdigits(int n, int k) {\n    if (n == 0) return 0;\n    int digit = n % 10;\n    if (digit == k) return 1 + countdigits(n / 10, k);\n    return countdigits(n / 10, k);\n  }\n\n  public static void main(String[] args) {\n    int n = 1000;\n    int k = 0;\n    System.out.println(countdigits(n, k));\n  }\n}\n", "python": "def countdigits(n, k):\n    if n == 0:\n        return 0\n    digit = n % 10\n    if digit == k:\n        return 1 + countdigits(n / 10, k)\n    return countdigits(n / 10, k)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 1000\n    k = 0\n    print(countdigits(n, k))\n"}
{"text": "Make array elements equal with minimum cost ", "java": "class GFG {\n  static void makearrayequal(int arr[], int n) {\n    int x = 0;\n    for (int i = 0; i < n; i++) {\n      x += (arr[i] & 1);\n    }\n    System.out.println(Math.min(x, n - x));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 3, 2, 1};\n    int n = arr.length;\n    makearrayequal(arr, n);\n  }\n}\n", "python": "def makearrayequal(arr, n):\n    x = 0\n    for i in range(n):\n        x += arr[i] & 1\n    print(min(x, n - x))\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [4, 3, 2, 1]\n    n = len(arr)\n    makearrayequal(arr, n)\n"}
{"text": "Runge ", "java": "class GFG {\n  static double dydx(double x, double y) {\n    return (x + y - 2);\n  }\n\n  static double rungeKutta(double x0, double y0, double x, double h) {\n    int n = (int) ((x - x0) / h);\n    double k1, k2;\n    double y = y0;\n    for (int i = 1; i <= n; i++) {\n      k1 = h * dydx(x0, y);\n      k2 = h * dydx(x0 + 0.5 * h, y + 0.5 * k1);\n      y = y + (1.0 / 6.0) * (k1 + 2 * k2);\n      x0 = x0 + h;\n    }\n    return y;\n  }\n\n  public static void main(String[] args) {\n    double x0 = 0, y = 1, x = 2, h = 0.2;\n    System.out.println(rungeKutta(x0, y, x, h));\n  }\n}\n", "python": "def dydx(x, y):\n    return x + y - 2\n\n\ndef rungeKutta(x0, y0, x, h):\n    n = round((x - x0) / h)\n    y = y0\n    for i in range(1, n + 1):\n        k1 = h * dydx(x0, y)\n        k2 = h * dydx(x0 + 0.5 * h, y + 0.5 * k1)\n        y = y + (1.0 / 6.0) * (k1 + 2 * k2)\n        x0 = x0 + h\n    return y\n\n\nif __name__ == \" _ _ main _ _ \":\n    x0 = 0\n    y = 1\n    x = 2\n    h = 0.2\n    print(\" y ( x ) \u2581 = \", rungeKutta(x0, y, x, h))\n"}
{"text": "Check if a number is divisible by 47 or not ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isDivisible(int n) {\n    int d;\n    while ((n / 100) > 0) {\n      d = n % 10;\n      n /= 10;\n      n = Math.abs(n - (d * 14));\n    }\n    return (n % 47 == 0);\n  }\n\n  public static void main(String[] args) {\n    int N = 59173;\n    if (isDivisible(N)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def isDivisible(n):\n    while n // 100:\n        d = n % 10\n        n //= 10\n        n = abs(n - (d * 14))\n    return n % 47 == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 59173\n    if isDivisible(n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Check if a number is divisible by 31 or not ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isDivisible(int n) {\n    int d;\n    while ((n / 100) > 0) {\n      d = n % 10;\n      n /= 10;\n      n = Math.abs(n - (d * 3));\n    }\n    return (n % 31 == 0);\n  }\n\n  public static void main(String[] args) {\n    int N = 1922;\n    if (isDivisible(N)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def isDivisible(n):\n    while n // 100:\n        d = n % 10\n        n //= 10\n        n = abs(n - (d * 3))\n    return n % 31 == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 1922\n    if isDivisible(n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Check if the number is divisible 43 or not ", "java": "class GFG {\n  static boolean isDivisible(int n) {\n    int d;\n    while ((n / 100) > 0) {\n      d = n % 10;\n      n /= 10;\n      n = Math.abs(n + (d * 13));\n    }\n    return (n % 43 == 0);\n  }\n\n  public static void main(String[] args) {\n    int N = 2795;\n    if (isDivisible(N)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def isDivisible(n):\n    while n // 100:\n        d = n % 10\n        n //= 10\n        n = abs(n + (d * 13))\n    return n % 43 == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2795\n    if isDivisible(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Check if the given number is divisible by 71 or not ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isDivisible(int n) {\n    int d;\n    while ((n / 100) <= 0) {\n      d = n % 10;\n      n /= 10;\n      n = Math.abs(n - (d * 7));\n    }\n    return (n % 71 == 0);\n  }\n\n  public static void main(String args[]) {\n    int N = 5041;\n    if (isDivisible(N)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isDivisible(n):\n    while n // 100:\n        d = n % 10\n        n //= 10\n        n = abs(n - (d * 7))\n    return n % 71 == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5041\n    if isDivisible(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Maximum value of B less than A such that A ^ B = A + B ", "java": "class GFG {\n  static void maxValue(int a) {\n    String c = Integer.toBinaryString(a);\n    String b = \" \";\n    for (int i = 0; i < c.length(); i++) {\n      if ((c.charAt(i) - '0') == 1) b += '0';\n      else b += '1';\n    }\n    System.out.print(Integer.parseInt(b, 2));\n  }\n\n  public static void main(String[] args) {\n    int a = 4;\n    maxValue(a);\n  }\n}\n", "python": "def maxValue(a):\n    a = bin(a)[2:]\n    b = \" \"\n    for i in list(a):\n        b += str(int(not int(i)))\n    print(int(b, 2))\n    return int(b, 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 4\n    maxValue(a)\n"}
{"text": "Count perfect power of K in a range [ L , R ] ", "java": "class GFG {\n  static double nthRoot(int A, int N) {\n    double xPre = Math.random() * 10 % 10;\n    double eps = 1e-3;\n    double delX = Integer.MAX_VALUE;\n    double xK = 0;\n    while (delX > eps) {\n      xK = ((N - 1.0) * xPre + (double) A / Math.pow(xPre, N - 1)) / (double) N;\n      delX = Math.abs(xK - xPre);\n      xPre = xK;\n    }\n    return xK;\n  }\n\n  static int countPowers(int a, int b, int k) {\n    return (int) (Math.floor(nthRoot(b, k)) - Math.ceil(nthRoot(a, k)) + 1);\n  }\n\n  public static void main(String[] args) {\n    int a = 7, b = 28, k = 2;\n    System.out.print(\" Count \u2581 of \u2581 Powers \u2581 is \u2581 \" + countPowers(a, b, k));\n  }\n}\n", "python": "import sys\nfrom math import pow, ceil, floor\nimport random\n\n\ndef nthRoot(A, N):\n    xPre = (random.randint(0, 9)) % 10\n    eps = 1e-3\n    delX = sys.maxsize\n    while delX > eps:\n        xK = ((N - 1.0) * xPre + A / pow(xPre, N - 1)) / N\n        delX = abs(xK - xPre)\n        xPre = xK\n    return xK\n\n\ndef countPowers(a, b, k):\n    return floor(nthRoot(b, k)) - ceil(nthRoot(a, k)) + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 7\n    b = 28\n    k = 2\n    print(\" Count \u2581 of \u2581 Powers \u2581 is \", countPowers(a, b, k))\n"}
{"text": "Find any K distinct odd integers such that their sum is equal to N ", "java": "class GFG {\n  static void oddIntegers(int n, int k) {\n    if (n % 2 != k % 2) {\n      System.out.println(\" - 1\");\n      return;\n    }\n    int sum = 0;\n    int i = 1;\n    int j = 1;\n    while (j < k) {\n      sum = sum + i;\n      System.out.print(i + \" \u2581 \");\n      i = i + 2;\n      j++;\n    }\n    int finalOdd = n - sum;\n    System.out.println(finalOdd);\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    int k = 2;\n    oddIntegers(n, k);\n  }\n}\n", "python": "def oddIntegers(n, k):\n    if n % 2 != k % 2:\n        print(\" - 1\")\n        return\n    sum = 0\n    i = 1\n    j = 1\n    while j < k:\n        sum += i\n        print(i, end=\" \u2581 \")\n        i += 2\n        j += 1\n    finalOdd = n - sum\n    print(finalOdd)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    k = 2\n    oddIntegers(n, k)\n"}
{"text": "Calculate sum of all integers from 1 to N , excluding perfect power of 2 ", "java": "\nclass GFG {\n  public static void findSum(int N) {\n    int sum = (N) * (N + 1) / 2;\n    int r = (int) (Math.log(N) / Math.log(2)) + 1;\n    int expSum = (int) (Math.pow(2, r)) - 1;\n    System.out.println(sum - expSum);\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    findSum(N);\n  }\n}\n", "python": "from math import log2, pow\n\n\ndef findSum(N):\n    sum = (N) * (N + 1) // 2\n    r = log2(N) + 1\n    expSum = pow(2, r) - 1\n    print(int(sum - expSum))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    findSum(N)\n"}
{"text": "Largest Even and Odd N ", "java": "import java.util.*;\n\nclass GFG {\n  static void findNumbers(int n, int b) {\n    double even = 0, odd = 0;\n    if (b % 2 == 0) {\n      even = Math.pow(b, n) - 2;\n      odd = Math.pow(b, n) - 1;\n    } else {\n      even = Math.pow(b, n) - 1;\n      odd = Math.pow(b, n) - 2;\n    }\n    System.out.println(\" Even \u2581 Number \u2581 = \u2581 \" + (int) even);\n    System.out.print(\" Odd \u2581 Number \u2581 = \u2581 \" + (int) odd);\n  }\n\n  public static void main(String[] args) {\n    int N = 2, B = 5;\n    findNumbers(N, B);\n  }\n}\n", "python": "def findNumbers(n, b):\n    even = 0\n    odd = 0\n    if b % 2 == 0:\n        even = pow(b, n) - 2\n        odd = pow(b, n) - 1\n    else:\n        even = pow(b, n) - 1\n        odd = pow(b, n) - 2\n    print(\" Even \u2581 Number \u2581 = \u2581 \", int(even))\n    print(\" Odd \u2581 Number \u2581 = \u2581 \", int(odd))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    B = 5\n    findNumbers(N, B)\n"}
{"text": "Number of times the largest Perfect Cube can be subtracted from N ", "java": "class GFG {\n  static int countSteps(int n) {\n    int steps = 0;\n    while (n > 0) {\n      int largest = (int) Math.cbrt(n);\n      n -= (largest * largest * largest);\n      steps++;\n    }\n    return steps;\n  }\n\n  public static void main(String[] args) {\n    int n = 150;\n    System.out.print(countSteps(n));\n  }\n}\n", "python": "from math import floor\n\n\ndef countSteps(n):\n    steps = 0\n    while n:\n        largest = floor(n ** (1 / 3))\n        n -= largest * largest * largest\n        steps += 1\n    return steps\n\n\nn = 150\nprint(countSteps(n))\n"}
{"text": "Product of all Subsets of a set formed by first N natural numbers ", "java": "class GFG {\n  static int product(int N) {\n    int ans = 1;\n    int val = (int) Math.pow(2, N - 1);\n    for (int i = 1; i <= N; i++) {\n      ans *= (int) Math.pow(i, val);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    System.out.println(product(N));\n  }\n}\n", "python": "def product(N):\n    ans = 1\n    val = 2 ** (N - 1)\n    for i in range(1, N + 1):\n        ans *= i ** val\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    print(product(N))\n"}
{"text": "Program to find the number of region in Planar Graph ", "java": "import java.io.*;\n\nclass GFG {\n  static int Regions(int Vertices, int Edges) {\n    int R = Edges + 2 - Vertices;\n    return R;\n  }\n\n  public static void main(String[] args) {\n    int V = 5, E = 7;\n    System.out.println(Regions(V, E));\n  }\n}\n", "python": "def Regions(Vertices, Edges):\n    R = Edges + 2 - Vertices\n    return R\n\n\nif __name__ == \" _ _ main _ _ \":\n    V = 5\n    E = 7\n    print(Regions(V, E))\n"}
{"text": "Ratio of the distance between the centers of the circles and the point of intersection of two direct common tangents to the circles ", "java": "class GFG {\n  static int GCD(int a, int b) {\n    return (b != 0 ? GCD(b, a % b) : a);\n  }\n\n  static void ratiotang(int r1, int r2) {\n    System.out.println(\" The \u2581 ratio \u2581 is \u2581 \" + r1 / GCD(r1, r2) + \" \u2581 : \u2581 \" + r2 / GCD(r1, r2));\n  }\n\n  public static void main(String args[]) {\n    int r1 = 4, r2 = 6;\n    ratiotang(r1, r2);\n  }\n}\n", "python": "from math import gcd\n\n\ndef ratiotang(r1, r2):\n    print(\" The \u2581 ratio \u2581 is \", int(r1 / gcd(r1, r2)), \" : \", int(r2 / gcd(r1, r2)))\n\n\nif __name__ == \" _ _ main _ _ \":\n    r1 = 4\n    r2 = 6\n    ratiotang(r1, r2)\n"}
{"text": "Length of the transverse common tangent between the two non intersecting circles ", "java": "class GFG {\n  static void lengthOfTangent(double r1, double r2, double d) {\n    System.out.println(\n        \" The \u2581 length \u2581 of \u2581 the \u2581 transverse \"\n            + \" \u2581 common \u2581 tangent \u2581 is \u2581 \"\n            + Math.sqrt(Math.pow(d, 2) - Math.pow((r1 + r2), 2)));\n  }\n\n  public static void main(String args[]) {\n    double r1 = 4, r2 = 6, d = 12;\n    lengthOfTangent(r1, r2, d);\n  }\n}\n", "python": "from math import sqrt, pow\n\n\ndef lengthOfTangent(r1, r2, d):\n    print(\n        \" The \u2581 length \u2581 of \u2581 the \u2581 transverse \",\n        \" common \u2581 tangent \u2581 is \",\n        \" { 0 : . 6g } \".format(sqrt(pow(d, 2) - pow((r1 + r2), 2))),\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    r1 = 4\n    r2 = 6\n    d = 12\n    lengthOfTangent(r1, r2, d)\n"}
{"text": "Length of the direct common tangent between two externally touching circles ", "java": "class GFG {\n  static void lengtang(double r1, double r2) {\n    System.out.println(\n        \" The \u2581 length \u2581 of \u2581 the \u2581 \"\n            + \" direct \u2581 common \u2581 tangent \u2581 is \u2581 \"\n            + (2 * Math.sqrt(r1 * r2)));\n  }\n\n  public static void main(String[] args) {\n    double r1 = 5, r2 = 9;\n    lengtang(r1, r2);\n  }\n}\n", "python": "def lengtang(r1, r2):\n    print(\n        \" The \u2581 length \u2581 of \u2581 the \u2581 direct \",\n        \" common \u2581 tangent \u2581 is \",\n        2 * (r1 * r2) ** (1 / 2),\n    )\n\n\nr1 = 5\nr2 = 9\nlengtang(r1, r2)\n"}
{"text": "Shortest distance between a point and a circle ", "java": "class GFG {\n  static void dist(double x1, double y1, double x2, double y2, double r) {\n    System.out.println(\n        \" The \u2581 shortest \u2581 distance \u2581 \"\n            + \" between \u2581 a \u2581 point \u2581 and \u2581 a \u2581 circle \u2581 is \u2581 \"\n            + (Math.sqrt((Math.pow((x2 - x1), 2)) + (Math.pow((y2 - y1), 2))) - r));\n  }\n\n  public static void main(String[] args) {\n    double x1 = 4, y1 = 6, x2 = 35, y2 = 42, r = 5;\n    dist(x1, y1, x2, y2, r);\n  }\n}\n", "python": "def dist(x1, y1, x2, y2, r):\n    print(\n        \" The \u2581 shortest \u2581 distance \u2581 between \u2581 a \u2581 point \u2581 and \u2581 a \u2581 circle \u2581 is \u2581 \",\n        ((((x2 - x1) ** 2) + ((y2 - y1) ** 2)) ** (1 / 2)) - r,\n    )\n\n\nx1 = 4\ny1 = 6\nx2 = 35\ny2 = 42\nr = 5\ndist(x1, y1, x2, y2, r)\n"}
{"text": "Distance between two parallel lines ", "java": "class GFG {\n  static double dist(double m, double b1, double b2) {\n    double d = Math.abs(b2 - b1) / ((m * m) - 1);\n    return d;\n  }\n\n  public static void main(String[] args) {\n    double m = 2, b1 = 4, b2 = 3;\n    System.out.println(dist(m, b1, b2));\n  }\n}\n", "python": "def dist(m, b1, b2):\n    d = abs(b2 - b1) / ((m * m) - 1)\n    return d\n\n\ndef main():\n    m, b1, b2 = 2, 4, 3\n    print(dist(m, b1, b2))\n\n\nif __name__ == \" _ _ main _ _ \":\n    main()\n"}
{"text": "Length of the normal from origin on a straight line whose intercepts are given ", "java": "class GFG {\n  static float normal(float m, float n) {\n    float N =\n        (float)\n            ((Math.abs(m) * Math.abs(n))\n                / Math.sqrt((Math.abs(m) * Math.abs(m)) + (Math.abs(n) * Math.abs(n))));\n    return N;\n  }\n\n  public static void main(String[] args) {\n    float m = -5, n = 3;\n    System.out.println(normal(m, n));\n  }\n}\n", "python": "import math\n\n\ndef normal(m, n):\n    N = (abs(m) * abs(n)) / math.sqrt((abs(m) * abs(m)) + (abs(n) * abs(n)))\n    return N\n\n\nm = -5\nn = 3\nprint(normal(m, n))\n"}
{"text": "Check if it is possible to create a polygon with given n sides ", "java": "class GFG {\n  static boolean isPossible(int a[], int n) {\n    int sum = 0, maxS = 0;\n    for (int i = 0; i < n; i++) {\n      sum += a[i];\n      maxS = Math.max(a[i], maxS);\n    }\n    if ((sum - maxS) > maxS) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {2, 3, 4};\n    int n = a.length;\n    if (isPossible(a, n)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def isPossible(a, n):\n    sum = 0\n    maxS = 0\n    for i in range(n):\n        sum += a[i]\n        maxS = max(a[i], maxS)\n    if (sum - maxS) > maxS:\n        return True\n    return False\n\n\na = [2, 3, 4]\nn = len(a)\nif isPossible(a, n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Find the area of the shaded region formed by the intersection of four semicircles in a square ", "java": "class GFG {\n  static float findAreaShaded(float a) {\n    float sqArea = a * a;\n    float semiCircleArea = (float) (3.14 * (a * a) / 8);\n    float ShadedArea = 4 * semiCircleArea - sqArea;\n    return ShadedArea;\n  }\n\n  public static void main(String[] args) {\n    float a = 10;\n    System.out.println(findAreaShaded(a));\n  }\n}\n", "python": "def findAreaShaded(a):\n    sqArea = a * a\n    semiCircleArea = 3.14 * (a * a) / 8\n    ShadedArea = 4 * semiCircleArea - sqArea\n    return ShadedArea\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 10\n    print(findAreaShaded(a))\n"}
{"text": "Check whether the point ( x , y ) lies on a given line ", "java": "class GFG {\n  static boolean pointIsOnLine(int m, int c, int x, int y) {\n    if (y == ((m * x) + c)) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int m = 3, c = 2;\n    int x = 1, y = 5;\n    if (pointIsOnLine(m, c, x, y)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def pointIsOnLine(m, c, x, y):\n    if y == ((m * x) + c):\n        return True\n    return False\n\n\nm = 3\nc = 2\nx = 1\ny = 5\nif pointIsOnLine(m, c, x, y):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Biggest Reuleaux Triangle inscribed within a square which is inscribed within an ellipse ", "java": "import java.io.*;\n\nclass GFG {\n  static float Area(float a, float b) {\n    if (a < 0 && b < 0) return -1;\n    float h =\n        (float) Math.sqrt(((Math.pow(a, 2) + Math.pow(b, 2)) / (Math.pow(a, 2) * Math.pow(b, 2))));\n    float A = (float) (0.70477 * Math.pow(h, 2));\n    return A;\n  }\n\n  public static void main(String[] args) {\n    float a = 5, b = 4;\n    System.out.println(Area(a, b));\n  }\n}\n", "python": "import math\n\n\ndef Area(a, b):\n    if a < 0 and b < 0:\n        return -1\n    h = math.sqrt(((pow(a, 2) + pow(b, 2)) / (pow(a, 2) * pow(b, 2))))\n    A = 0.70477 * pow(h, 2)\n    return A\n\n\na = 5\nb = 4\nprint(round(Area(a, b), 7))\n"}
{"text": "Maximum given sized rectangles that can be cut out of a sheet of paper ", "java": "class GFG {\n  static int maxRectangles(int L, int B, int l, int b) {\n    int horizontal = 0, vertical = 0;\n    if (l <= L && b <= B) {\n      int columns = B / b;\n      int rows = L / l;\n      horizontal = rows * columns;\n    }\n    if (l <= B && b <= L) {\n      int columns = L / b;\n      int rows = B / l;\n      vertical = rows * columns;\n    }\n    return Math.max(horizontal, vertical);\n  }\n\n  public static void main(String[] args) {\n    int L = 10, B = 7, l = 4, b = 3;\n    System.out.print(maxRectangles(L, B, l, b));\n  }\n}\n", "python": "def maxRectangles(L, B, l, b):\n    horizontal, vertical = 0, 0\n    if l <= L and b <= B:\n        columns = B // b\n        rows = L // l\n        horizontal = rows * columns\n    if l <= B and b <= L:\n        columns = L // b\n        rows = B // l\n        vertical = rows * columns\n    return max(horizontal, vertical)\n\n\nif __name__ == \" _ _ main _ _ \":\n    L, B, l, b = 10, 7, 4, 3\n    print(maxRectangles(L, B, l, b))\n"}
{"text": "Largest right circular cone that can be inscribed within a sphere which is inscribed within a cube ", "java": "import java.io.*;\n\nclass GFG {\n  static float cone(float a) {\n    if (a < 0) return -1;\n    float r = (float) (a * Math.sqrt(2)) / 3;\n    float h = (2 * a) / 3;\n    float V = (float) (3.14 * Math.pow(r, 2) * h);\n    return V;\n  }\n\n  public static void main(String[] args) {\n    float a = 5;\n    System.out.println(cone(a));\n  }\n}\n", "python": "import math\n\n\ndef cone(a):\n    if a < 0:\n        return -1\n    r = (a * math.sqrt(2)) / 3\n    h = (2 * a) / 3\n    V = 3.14 * math.pow(r, 2) * h\n    return V\n\n\na = 5\nprint(cone(a))\n"}
{"text": "Biggest Reuleaux Triangle inscribed within a square which is inscribed within a hexagon ", "java": "import java.io.*;\n\nclass GFG {\n  static float Area(float a) {\n    if (a < 0) return -1;\n    float h = (float) 1.268 * a;\n    float A = (float) (0.70477 * Math.pow(h, 2));\n    return A;\n  }\n\n  public static void main(String[] args) {\n    float a = 5;\n    System.out.println(Area(a));\n  }\n}\n", "python": "import math\n\n\ndef Area(a):\n    if a < 0:\n        return -1\n    h = 1.268 * a\n    A = 0.70477 * math.pow(h, 2)\n    return A\n\n\na = 5\nprint(Area(a), end=\" \")\n"}
{"text": "Biggest Reuleaux Triangle inscirbed within a square inscribed in a semicircle ", "java": "\nclass GFG {\n  static float Area(float r) {\n    if (r < 0) return -1;\n    float x = (2 * r) / (float) (Math.sqrt(5));\n    float A = 0.70477f * (float) (Math.pow(x, 2));\n    return A;\n  }\n\n  public static void main(String[] args) {\n    float r = 5;\n    System.out.println(Area(r));\n  }\n}\n", "python": "import math as mt\n\n\ndef Area(r):\n    if r < 0:\n        return -1\n    x = (2 * r) / mt.sqrt(5)\n    A = 0.70477 * pow(x, 2)\n    return A\n\n\nr = 5\nprint(Area(r))\n"}
{"text": "Biggest Reuleaux Triangle inscribed within a Square inscribed in an equilateral triangle ", "java": "class GFG {\n  static float Area(float a) {\n    if (a < 0) return -1;\n    float x = 0.464f * a;\n    float A = 0.70477f * (float) Math.pow(x, 2);\n    return A;\n  }\n\n  public static void main(String[] args) {\n    float a = 5;\n    System.out.println(String.format(\" % .5f \", Area(a)));\n  }\n}\n", "python": "import math as mt\n\n\ndef Area(a):\n    if a < 0:\n        return -1\n    x = 0.464 * a\n    A = 0.70477 * pow(x, 2)\n    return A\n\n\na = 5\nprint(Area(a))\n"}
{"text": "Program for Area Of Square after N ", "java": "class GFG {\n  static double areaSquare(double side, double fold) {\n    double area = side * side;\n    return area * 1.0 / Math.pow(2, fold);\n  }\n\n  public static void main(String[] args) {\n    double side = 4, fold = 2;\n    System.out.println(areaSquare(side, fold));\n  }\n}\n", "python": "def areaSquare(side, fold):\n    area = side * side\n    ans = area / pow(2, fold)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    side = 4\n    fold = 2\n    print(areaSquare(side, fold))\n"}
{"text": "Biggest Reuleaux Triangle within a Square which is inscribed within a Circle ", "java": "import java.util.*;\n\nclass GFG {\n  static double ReuleauxArea(double r) {\n    if (r < 0) return -1;\n    double A = 0.70477 * 2 * Math.pow(r, 2);\n    return A;\n  }\n\n  public static void main(String args[]) {\n    double r = 6;\n    System.out.println(ReuleauxArea(r));\n  }\n}\n", "python": "import math as mt\n\n\ndef ReuleauxArea(r):\n    if r < 0:\n        return -1\n    A = 0.70477 * 2 * pow(r, 2)\n    return A\n\n\nr = 6\nprint(ReuleauxArea(r))\n"}
{"text": "Largest right circular cylinder that can be inscribed within a cone which is in turn inscribed within a cube ", "java": "\nclass cfg {\n  static float cyl(float a) {\n    if (a < 0) return -1;\n    float r = (2 * a * (float) (Math.sqrt(2)) / 3);\n    float h = (2 * a) / 3;\n    float V = (3.14f * (float) (Math.pow(r, 2) * h));\n    return V;\n  }\n\n  public static void main(String[] args) {\n    float a = 5;\n    System.out.println(cyl(a));\n  }\n}\n", "python": "import math as mt\n\n\ndef cyl(a):\n    if a < 0:\n        return -1\n    r = (2 * a * mt.sqrt(2)) / 3\n    h = (2 * a) / 3\n    V = 3.14 * pow(r, 2) * h\n    return V\n\n\na = 5\nprint(cyl(a))\n"}
{"text": "Largest square that can be inscribed within a hexagon which is inscribed within an equilateral triangle ", "java": "class cfg {\n  static float squareSide(float a) {\n    if (a < 0) return -1;\n    float x = (0.423f * a);\n    return x;\n  }\n\n  public static void main(String[] args) {\n    float a = 8;\n    System.out.println(squareSide(a));\n  }\n}\n", "python": "def squareSide(a):\n    if a < 0:\n        return -1\n    x = 0.423 * a\n    return x\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 8\n    print(squareSide(a))\n"}
{"text": "Check if it is possible to draw a straight line with the given direction cosines ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isPossible(float x, float y, float z) {\n    float a = x * x + y * y + z * z;\n    if (Math.ceil(a) == 1 && Math.floor(a) == 1) return true;\n    return false;\n  }\n\n  public static void main(String args[]) {\n    float l = 0.70710678f, m = 0.5f, n = 0.5f;\n    if (isPossible(l, m, n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "from math import ceil, floor\n\n\ndef isPossible(x, y, z):\n    a = x * x + y * y + z * z\n    a = round(a, 8)\n    if ceil(a) == 1 & floor(a) == 1:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    l = 0.70710678\n    m = 0.5\n    n = 0.5\n    if isPossible(l, m, n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Length of Diagonal of a n ", "java": "class GFG {\n  static float polydiagonal(float n, float a) {\n    if (a < 0 && n < 0) {\n      return -1;\n    }\n    return (float) (2 * a * Math.sin((((n - 2) * 180) / (2 * n)) * 3.14159 / 180));\n  }\n\n  public static void main(String[] args) {\n    float a = 9, n = 10;\n    System.out.printf(\" % .3f \", polydiagonal(n, a));\n  }\n}\n", "python": "import math as mt\n\n\ndef polydiagonal(n, a):\n    if a < 0 and n < 0:\n        return -1\n    return 2 * a * mt.sin((((n - 2) * 180) / (2 * n)) * 3.14159 / 180)\n\n\na, n = 9, 10\nprint(polydiagonal(n, a))\n"}
{"text": "Diagonal of a Regular Decagon ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static double decdiagonal(double a) {\n    if (a < 0) return -1;\n    double d = 1.902 * a;\n    return d;\n  }\n\n  public static void main(String[] args) {\n    int a = 9;\n    System.out.println(decdiagonal(a));\n  }\n}\n", "python": "def decdiagonal(a):\n    if a < 0:\n        return -1\n    d = 1.902 * a\n    return d\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 9\n    print(decdiagonal(a))\n"}
{"text": "Diagonal of a Regular Heptagon ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static double heptdiagonal(double a) {\n    if (a < 0) return -1;\n    double d = 1.802 * a;\n    return d;\n  }\n\n  public static void main(String[] args) {\n    int a = 6;\n    System.out.println(heptdiagonal(a));\n  }\n}\n", "python": "def heptdiagonal(a):\n    if a < 0:\n        return -1\n    d = 1.802 * a\n    return round(d, 3)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 6\n    print(heptdiagonal(a))\n"}
{"text": "Diagonal of a Regular Hexagon ", "java": "public class GFG {\n  static double hexDiagonal(float a) {\n    if (a < 0) return -1;\n    double d = (double) 1.73 * a;\n    return d;\n  }\n\n  public static void main(String[] args) {\n    float a = 9;\n    System.out.println(hexDiagonal(a));\n  }\n}\n", "python": "def hexDiagonal(a):\n    if a < 0:\n        return -1\n    d = 1.73 * a\n    return d\n\n\na = 9\nprint(hexDiagonal(a))\n"}
{"text": "Area of Reuleaux Triangle ", "java": "public class GFG {\n  static double ReuleauxArea(float a) {\n    if (a < 0) return -1;\n    double A = (double) 0.70477 * Math.pow(a, 2);\n    return A;\n  }\n\n  public static void main(String args[]) {\n    float a = 6;\n    System.out.println(ReuleauxArea(a));\n  }\n}\n", "python": "import math as mt\n\n\ndef ReuleauxArea(a):\n    if a < 0:\n        return -1\n    return 0.70477 * pow(a, 2)\n\n\na = 6\nprint(ReuleauxArea(a))\n"}
{"text": "Largest Square that can be inscribed within a hexagon ", "java": "class Solution {\n  static float squareArea(float a) {\n    if (a < 0) return -1;\n    float area = (float) (Math.pow(1.268, 2) * Math.pow(a, 2));\n    return area;\n  }\n\n  public static void main(String args[]) {\n    float a = 6;\n    System.out.println(squareArea(a));\n  }\n}\n", "python": "def squareArea(a):\n    if a < 0:\n        return -1\n    area = (1.268 ** 2) * (a ** 2)\n    return area\n\n\na = 6\nprint(squareArea(a))\n"}
{"text": "Volume of cube using its space diagonal ", "java": "public class GFG {\n  static float CubeVolume(float d) {\n    float Volume;\n    Volume = (float) (Math.sqrt(3) * Math.pow(d, 3)) / 9;\n    return Volume;\n  }\n\n  public static void main(String[] args) {\n    float d = 5;\n    System.out.println(\" Volume \u2581 of \u2581 Cube : \u2581 \" + CubeVolume(d));\n  }\n}\n", "python": "from math import sqrt, pow\n\n\ndef CubeVolume(d):\n    Volume = (sqrt(3) * pow(d, 3)) / 9\n    return Volume\n\n\nif __name__ == \" _ _ main _ _ \":\n    d = 5\n    print(\" Volume \u2581 of \u2581 Cube : \", \" { 0 : . 6 } \".format(CubeVolume(d)))\n"}
{"text": "Perimeter and Area of Varignon 's Parallelogram ", "java": "\nclass GFG {\n  public static double per(double a, double b) {\n    return (a + b);\n  }\n\n  public static double area(double s) {\n    return (s / 2);\n  }\n\n  public static void main(String[] args) {\n    double a = 7, b = 8, s = 10;\n    System.out.println(per(a, b));\n    System.out.println(area(s));\n  }\n}\n", "python": "def per(a, b):\n    return a + b\n\n\ndef area(s):\n    return s / 2\n\n\na = 7\nb = 8\ns = 10\nprint(per(a, b))\nprint(area(s))\n"}
{"text": "Area of a leaf inside a square ", "java": "\nclass GFG {\n  static double PI = 3.14159265;\n\n  public static double area_leaf(double a) {\n    return (a * a * (PI / 2 - 1));\n  }\n\n  public static void main(String[] args) {\n    double a = 7;\n    System.out.println(area_leaf(a));\n  }\n}\n", "python": "PI = 3.14159265\n\n\ndef area_leaf(a):\n    return a * a * (PI / 2 - 1)\n\n\na = 7\nprint(area_leaf(a))\n"}
{"text": "Length of rope tied around three equal circles touching each other ", "java": "\nclass GFG {\n  static double PI = 3.14159265;\n\n  public static double length_rope(double r) {\n    return ((2 * PI * r) + 6 * r);\n  }\n\n  public static void main(String[] args) {\n    double r = 7;\n    System.out.println(length_rope(r));\n  }\n}\n", "python": "PI = 3.14159265\n\n\ndef length_rope(r):\n    return (2 * PI * r) + 6 * r\n\n\nr = 7\nprint(length_rope(r))\n"}
{"text": "Area of Incircle of a Right Angled Triangle ", "java": "\nclass GFG {\n  static double PI = 3.14159265;\n\n  public static double area_inscribed(double P, double B, double H) {\n    return ((P + B - H) * (P + B - H) * (PI / 4));\n  }\n\n  public static void main(String[] args) {\n    double P = 3, B = 4, H = 5;\n    System.out.println(area_inscribed(P, B, H));\n  }\n}\n", "python": "PI = 3.14159265\n\n\ndef area_inscribed(P, B, H):\n    return (P + B - H) * (P + B - H) * (PI / 4)\n\n\nP = 3\nB = 4\nH = 5\nprint(area_inscribed(P, B, H))\n"}
{"text": "Area of Circumcircle of a Right Angled Triangle ", "java": "\nclass GFG {\n  static double PI = 3.14159265;\n\n  public static double area_cicumscribed(double c) {\n    return (c * c * (PI / 4));\n  }\n\n  public static void main(String[] args) {\n    double c = 8.0;\n    System.out.println(area_cicumscribed(c));\n  }\n}\n", "python": "PI = 3.14159265\n\n\ndef area_cicumscribed(c):\n    return c * c * (PI / 4)\n\n\nc = 8.0\nprint(area_cicumscribed(c))\n"}
{"text": "Largest right circular cylinder that can be inscribed within a cone ", "java": "import java.io.*;\n\nclass GFG {\n  static double cyl(double r, double h) {\n    if (r < 0 && h < 0) return -1;\n    double R = (2 * r) / 3;\n    double H = (2 * h) / 3;\n    double V = 3.14 * Math.pow(R, 2) * H;\n    return V;\n  }\n\n  public static void main(String[] args) {\n    double r = 4, h = 8;\n    System.out.println(cyl(r, h));\n  }\n}\n", "python": "import math\n\n\ndef cyl(r, h):\n    if r < 0 and h < 0:\n        return -1\n    R = (2 * r) / 3\n    H = (2 * h) / 3\n    V = 3.14 * math.pow(R, 2) * H\n    return V\n\n\nr = 4\nh = 8\nprint(cyl(r, h), \" \")\n"}
{"text": "Largest cube that can be inscribed within a right circular cylinder ", "java": "class Solution {\n  static float cube(float h, float r) {\n    if (h < 0 && r < 0) return -1;\n    float a = (float) Math.pow(h, 3);\n    return a;\n  }\n\n  public static void main(String args[]) {\n    float h = 5, r = 4;\n    System.out.println(cube(h, r));\n  }\n}\n", "python": "import math\n\n\ndef cube(h, r):\n    if h < 0 and r < 0:\n        return -1\n    a = math.pow(h, 3)\n    return a\n\n\nh = 5\nr = 4\nprint(cube(h, r))\n"}
{"text": "Volume of biggest sphere within a right circular cylinder ", "java": "import java.io.*;\n\nclass GFG {\n  static float sph(float r, float h) {\n    if (r < 0 && h < 0) return -1;\n    float R = r;\n    return R;\n  }\n\n  public static void main(String[] args) {\n    float r = 4, h = 8;\n    System.out.println(sph(r, h));\n  }\n}\n", "python": "def sph(r, h):\n    if r < 0 and h < 0:\n        return -1\n    R = r\n    return float(R)\n\n\nr, h = 4, 8\nprint(sph(r, h))\n"}
{"text": "Volume of largest right circular cylinder within a Sphere ", "java": "import java.io.*;\n\nclass GFG {\n  static float cyl(float R) {\n    if (R < 0) return -1;\n    float V = (float) ((2 * 3.14 * Math.pow(R, 3)) / (3 * Math.sqrt(3)));\n    return V;\n  }\n\n  public static void main(String[] args) {\n    float R = 4;\n    System.out.print(cyl(R));\n  }\n}\n", "python": "import math\n\n\ndef cyl(R):\n    if R < 0:\n        return -1\n    V = (2 * 3.14 * math.pow(R, 3)) / (3 * math.sqrt(3))\n    return float(V)\n\n\nR = 4\nprint(cyl(R))\n"}
{"text": "Longest rod that can be inserted within a right circular cylinder ", "java": "import java.io.*;\n\nclass GFG {\n  static float rod(float h, float r) {\n    if (h < 0 && r < 0) return -1;\n    float l = (float) (Math.sqrt(Math.pow(h, 2) + 4 * Math.pow(r, 2)));\n    return l;\n  }\n\n  public static void main(String[] args) {\n    float h = 4;\n    float r = 1.5f;\n    System.out.print(rod(h, r));\n  }\n}\n", "python": "import math\n\n\ndef rod(h, r):\n    if h < 0 and r < 0:\n        return -1\n    l = math.sqrt(math.pow(h, 2) + 4 * math.pow(r, 2))\n    return float(l)\n\n\nh, r = 4, 1.5\nprint(rod(h, r))\n"}
{"text": "Program to calculate the Area and Perimeter of Incircle of an Equilateral Triangle ", "java": "\nclass GFG {\n  static double PI = 3.14159265;\n\n  public static double area_inscribed(double a) {\n    return (a * a * (PI / 12));\n  }\n\n  public static double perm_inscribed(double a) {\n    return (PI * (a / Math.sqrt(3)));\n  }\n\n  public static void main(String[] args) {\n    double a = 6.0;\n    System.out.println(\" Area \u2581 of \u2581 inscribed \u2581 circle \u2581 is \u2581 : \" + area_inscribed(a));\n    System.out.println(\" Perimeter of inscribed circle is : \" + perm_inscribed(a));\n  }\n}\n", "python": "import math\n\nPI = 3.14159265\n\n\ndef area_inscribed(a):\n    return a * a * (PI / 12)\n\n\ndef perm_inscribed(a):\n    return PI * (a / math.sqrt(3))\n\n\na = 6.0\nprint(\" Area \u2581 of \u2581 inscribed \u2581 circle \u2581 is \u2581 : % \u2581 f \" % area_inscribed(a))\nprint(\" Perimeter of inscribed circle is : % f \" % perm_inscribed(a))\n"}
{"text": "Largest cube that can be inscribed within a right circular cone ", "java": "import java.io.*;\n\nclass GFG {\n  static float cube(float h, float r) {\n    if (h < 0 && r < 0) return -1;\n    float a = (h * r * (float) Math.sqrt(2)) / (h + (float) Math.sqrt(2) * r);\n    return a;\n  }\n\n  public static void main(String[] args) {\n    float h = 5, r = 6;\n    System.out.println(cube(h, r));\n  }\n}\n", "python": "import math\n\n\ndef cubeSide(h, r):\n    if h < 0 and r < 0:\n        return -1\n    a = (h * r * math.sqrt(2)) / (h + math.sqrt(2) * r)\n    return a\n\n\nh = 5\nr = 6\nprint(cubeSide(h, r), \" \")\n"}
{"text": "Largest right circular cone that can be inscribed within a sphere ", "java": "import java.util.*;\n\nclass GFG {\n  static float coner(float R) {\n    if (R < 0) return -1;\n    float r = (float) (2 * Math.sqrt(2) * R) / 3;\n    return r;\n  }\n\n  static float coneh(float R) {\n    if (R < 0) return -1;\n    float h = (4 * R) / 3;\n    return h;\n  }\n\n  public static void main(String args[]) {\n    float R = 10;\n    System.out.println(\" r \u2581 = \u2581 \" + coner(R) + \" , \u2581 \" + \" h \u2581 = \u2581 \" + coneh(R));\n  }\n}\n", "python": "import math\n\n\ndef coner(R):\n    if R < 0:\n        return -1\n    r = (2 * math.sqrt(2) * R) / 3\n    return float(r)\n\n\ndef coneh(R):\n    if R < 0:\n        return -1\n    h = (4 * R) / 3\n    return float(h)\n\n\nR = 10\nprint(\" r \u2581 = \u2581 \", coner(R), \" , \u2581 \", \" h \u2581 = \u2581 \", coneh(R))\n"}
{"text": "Largest cone that can be inscribed within a cube ", "java": "import java.util.*;\n\nclass GFG {\n  static float coneRadius(float a) {\n    if (a < 0) return -1;\n    float r = (float) (a / Math.sqrt(2));\n    return r;\n  }\n\n  static float coneHeight(float a) {\n    if (a < 0) return -1;\n    float h = a;\n    return h;\n  }\n\n  public static void main(String args[]) {\n    float a = 6;\n    System.out.println(\" r \u2581 = \u2581 \" + coneRadius(a) + \" , \u2581 \" + \" h \u2581 = \u2581 \" + coneHeight(a));\n  }\n}\n", "python": "import math\n\n\ndef coneRadius(a):\n    if a < 0:\n        return -1\n    r = a / math.sqrt(2)\n    return r\n\n\ndef coneHeight(a):\n    if a < 0:\n        return -1\n    h = a\n    return h\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 6\n    print(\" r \u2581 = \u2581 \", coneRadius(a), \" h \u2581 = \u2581 \", coneHeight(a))\n"}
{"text": "Largest cube that can be inscribed within the sphere ", "java": "import java.util.*;\n\nclass Solution {\n  static float largestCube(float r) {\n    if (r < 0) return -1;\n    float a = (2 * r) / (float) Math.sqrt(3);\n    return a;\n  }\n\n  public static void main(String args[]) {\n    float r = 5;\n    System.out.println(largestCube(r));\n  }\n}\n", "python": "from math import sqrt\n\n\ndef largestCube(r):\n    if r < 0:\n        return -1\n    a = (2 * r) / sqrt(3)\n    return a\n\n\nif __name__ == \" _ _ main _ _ \":\n    r = 5\n    print(\" { 0 : . 6 } \".format(largestCube(r)))\n"}
{"text": "Largest sphere that can be inscribed inside a cube ", "java": "class GFG {\n  static float sphere(float a) {\n    if (a < 0) return -1;\n    float r = a / 2;\n    return r;\n  }\n\n  public static void main(String[] args) {\n    float a = 5;\n    System.out.println(sphere(a));\n  }\n}\n", "python": "def sphere(a):\n    if a < 0:\n        return -1\n    r = a / 2\n    return r\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 5\n    print(sphere(a))\n"}
{"text": "Minimum Cuts can be made in the Chessboard such that it is not divided into 2 parts ", "java": "class GFG {\n  static int numberOfCuts(int M, int N) {\n    int result = 0;\n    result = (M - 1) * (N - 1);\n    return result;\n  }\n\n  public static void main(String args[]) {\n    int M = 4, N = 4;\n    int Cuts = numberOfCuts(M, N);\n    System.out.println(\" Maximum \u2581 cuts \u2581 = \u2581 \" + Cuts);\n  }\n}\n", "python": "def numberOfCuts(M, N):\n    result = 0\n    result = (M - 1) * (N - 1)\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    M, N = 4, 4\n    Cuts = numberOfCuts(M, N)\n    print(\" Maximum \u2581 cuts \u2581 = \u2581 \", Cuts)\n"}
{"text": "Find maximum volume of a cuboid from the given perimeter and area ", "java": "import java.util.*;\n\nclass Geeks {\n  static float maxVol(float P, float A) {\n    float l = (float) (P - Math.sqrt(P * P - 24 * A)) / 12;\n    float V = (float) (l * (A / 2.0 - l * (P / 4.0 - l)));\n    return V;\n  }\n\n  public static void main(String args[]) {\n    float P = 20, A = 16;\n    System.out.println(maxVol(P, A));\n  }\n}\n", "python": "from math import sqrt\n\n\ndef maxVol(P, A):\n    l = (P - sqrt(P * P - 24 * A)) / 12\n    V = l * (A / 2.0 - l * (P / 4.0 - l))\n    return V\n\n\nif __name__ == \" _ _ main _ _ \":\n    P = 20\n    A = 16\n    print(maxVol(P, A))\n"}
{"text": "Program to calculate area and perimeter of a rhombus whose diagonals are given ", "java": "import java.io.*;\n\nclass GFG {\n  static int rhombusAreaPeri(int d1, int d2) {\n    int area, perimeter;\n    area = (d1 * d2) / 2;\n    perimeter = (int) (2 * Math.sqrt(Math.pow(d1, 2) + Math.pow(d2, 2)));\n    System.out.println(\n        \" The \u2581 area \u2581 of \u2581 rhombus \u2581 with \u2581 diagonals \u2581 \"\n            + d1\n            + \" \u2581 and \u2581 \"\n            + d2\n            + \" \u2581 is \u2581 \"\n            + area\n            + \" . \");\n    System.out.println(\n        \" The \u2581 perimeter \u2581 of \u2581 rhombus \u2581 with \u2581 diagonals \u2581 \"\n            + d1\n            + \" \u2581 and \u2581 \"\n            + d2\n            + \" \u2581 is \u2581 \"\n            + perimeter\n            + \" . \");\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int d1 = 2, d2 = 4;\n    rhombusAreaPeri(d1, d2);\n  }\n}\n", "python": "from math import sqrt, pow\n\n\ndef rhombusAreaPeri(d1, d2):\n    area = (d1 * d2) / 2\n    perimeter = 2 * sqrt(pow(d1, 2) + pow(d2, 2))\n    print(\n        \" The \u2581 area \u2581 of \u2581 rhombus \u2581 with \u2581 diagonals \",\n        d1,\n        \" and \",\n        d2,\n        \" is \",\n        area,\n        \" . \",\n    )\n    print(\n        \" The \u2581 perimeter \u2581 of \u2581 rhombus \u2581 with \u2581 diagonals \",\n        d1,\n        \" and \",\n        d2,\n        \" is \",\n        perimeter,\n        \" . \",\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    d1 = 2\n    d2 = 4\n    rhombusAreaPeri(d1, d2)\n"}
{"text": "Maximum area of rectangle possible with given perimeter ", "java": "import java.io.*;\n\nclass GFG {\n  static int maxArea(float perimeter) {\n    int length = (int) Math.ceil(perimeter / 4);\n    int breadth = (int) Math.floor(perimeter / 4);\n    return length * breadth;\n  }\n\n  public static void main(String[] args) {\n    float n = 38;\n    System.out.println(\" Maximum \u2581 Area \u2581 = \u2581 \" + maxArea(n));\n  }\n}\n", "python": "from math import ceil, floor\n\n\ndef maxArea(perimeter):\n    length = int(ceil(perimeter / 4))\n    breadth = int(floor(perimeter / 4))\n    return length * breadth\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 38\n    print(\" Maximum \u2581 Area \u2581 = \", maxArea(n))\n"}
{"text": "Find the foot of perpendicular of a point in a 3 D plane ", "java": "import java.text.*;\nimport java.util.*;\n\nclass solution {\n  static void foot(float a, float b, float c, float d, float x1, float y1, float z1) {\n    float k = (-a * x1 - b * y1 - c * z1 - d) / (float) (a * a + b * b + c * c);\n    float x2 = a * k + x1;\n    float y2 = b * k + y1;\n    float z2 = c * k + z1;\n    DecimalFormat form = new DecimalFormat(\"0.0\");\n    System.out.print(\" \u2581 x2 \u2581 = \u2581 \" + form.format(x2));\n    System.out.print(\" \u2581 y2 \u2581 = \u2581 \" + form.format(y2));\n    System.out.print(\" \u2581 z2 \u2581 = \u2581 \" + form.format(z2));\n  }\n\n  public static void main(String arr[]) {\n    float a = 1;\n    float b = -2;\n    float c = 0;\n    float d = 0;\n    float x1 = -1;\n    float y1 = 3;\n    float z1 = 4;\n    foot(a, b, c, d, x1, y1, z1);\n  }\n}\n", "python": "def foot(a, b, c, d, x1, y1, z1):\n    k = (-a * x1 - b * y1 - c * z1 - d) / (a * a + b * b + c * c)\n    x2 = a * k + x1\n    y2 = b * k + y1\n    z2 = c * k + z1\n    print(\" x2 \u2581 = \", round(x2, 1))\n    print(\" y2 \u2581 = \", round(y2, 1))\n    print(\" z2 \u2581 = \", round(z2, 1))\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 1\n    b = -2\n    c = 0\n    d = 0\n    x1 = -1\n    y1 = 3\n    z1 = 4\n    foot(a, b, c, d, x1, y1, z1)\n"}
{"text": "Equation of parabola from its focus and directrix ", "java": "import java.util.*;\n\nclass solution {\n  static void equation_parabola(float x1, float y1, float a, float b, float c) {\n    float t = a * a + b * b;\n    float a1 = t - (a * a);\n    float b1 = t - (b * b);\n    float c1 = (-2 * t * x1) - (2 * c * a);\n    float d1 = (-2 * t * y1) - (2 * c * b);\n    float e1 = -2 * a * b;\n    float f1 = (-c * c) + (t * x1 * x1) + (t * y1 * y1);\n    System.out.println(\n        \" equation \u2581 of \u2581 parabola \u2581 is \u2581 \"\n            + a1\n            + \" \u2581 x ^ 2 \u2581 + \u2581 \"\n            + b1\n            + \" \u2581 y ^ 2 \u2581 + \u2581 \"\n            + c1\n            + \" \u2581 x \u2581 + \u2581 \"\n            + d1\n            + \" \u2581 y \u2581 + \u2581 \"\n            + e1\n            + \" \u2581 xy \u2581 + \u2581 \"\n            + f1\n            + \" \u2581 = \u2581 0 . \");\n  }\n\n  public static void main(String arr[]) {\n    float x1 = 0;\n    float y1 = 0;\n    float a = 3;\n    float b = -4;\n    float c = 2;\n    equation_parabola(x1, y1, a, b, c);\n  }\n}\n", "python": "def equation_parabola(x1, y1, a, b, c):\n    t = a * a + b * b\n    a1 = t - (a * a)\n    b1 = t - (b * b)\n    c1 = (-2 * t * x1) - (2 * c * a)\n    d1 = (-2 * t * y1) - (2 * c * b)\n    e1 = -2 * a * b\n    f1 = (-c * c) + (t * x1 * x1) + (t * y1 * y1)\n    print(\n        \" equation \u2581 of \u2581 parabola \u2581 is \",\n        a1,\n        \" x ^ 2 \u2581 + \",\n        b1,\n        \" y ^ 2 \u2581 + \",\n        c1,\n        \" x \u2581 + \",\n        d1,\n        \" y \u2581 + \u2581 \",\n        e1,\n        \" xy \u2581 + \",\n        f1,\n        \" = \u2581 0 . \",\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    x1, y1, a, b, c = 0, 0, 3, -4, 2\n    equation_parabola(x1, y1, a, b, c)\n"}
{"text": "Minimum squares to evenly cut a rectangle ", "java": "class GFG {\n  static int __gcd(int a, int b) {\n    if (b == 0) return a;\n    return __gcd(b, a % b);\n  }\n\n  static int countRectangles(int l, int w) {\n    int squareSide = __gcd(l, w);\n    return (l * w) / (squareSide * squareSide);\n  }\n\n  public static void main(String[] args) {\n    int l = 4, w = 6;\n    System.out.println(countRectangles(l, w));\n  }\n}\n", "python": "import math\n\n\ndef countRectangles(l, w):\n    squareSide = math.gcd(l, w)\n    return (l * w) / (squareSide * squareSide)\n\n\nif __name__ == \" _ _ main _ _ \":\n    l = 4\n    w = 6\n    ans = countRectangles(l, w)\n    print(int(ans))\n"}
{"text": "Equation of circle from center and radius ", "java": "import java.util.*;\n\nclass solution {\n  static void circle_equation(double x1, double y1, double r) {\n    double a = -2 * x1;\n    double b = -2 * y1;\n    double c = (r * r) - (x1 * x1) - (y1 * y1);\n    System.out.print(\" x ^ 2 \u2581 + \u2581 ( \" + a + \" \u2581 x ) \u2581 + \u2581 \");\n    System.out.print(\" y ^ 2 \u2581 + \u2581 ( \" + b + \" \u2581 y ) \u2581 = \u2581 \");\n    System.out.println(c + \" . \");\n  }\n\n  public static void main(String arr[]) {\n    double x1 = 2, y1 = -3, r = 8;\n    circle_equation(x1, y1, r);\n  }\n}\n", "python": "def circle_equation(x1, y1, r):\n    a = -2 * x1\n    b = -2 * y1\n    c = (r * r) - (x1 * x1) - (y1 * y1)\n    print(\" x ^ 2 \u2581 + \u2581 ( \", a, \" x ) \u2581 + \u2581 \", end=\" \")\n    print(\" y ^ 2 \u2581 + \u2581 ( \", b, \" y ) \u2581 = \u2581 \", end=\" \")\n    print(c, \" . \")\n\n\nx1 = 2\ny1 = -3\nr = 8\ncircle_equation(x1, y1, r)\n"}
{"text": "Program to find the Area and Perimeter of a Semicircle ", "java": "import java.io.*;\n\nclass GFG {\n  static float area(float r) {\n    return (float) ((0.5) * (3.14) * (r * r));\n  }\n\n  static float perimeter(float r) {\n    return (float) ((3.14) * (r));\n  }\n\n  public static void main(String[] args) {\n    float r = 10;\n    System.out.println(\" The \u2581 Area \u2581 of \u2581 Semicircle : \u2581 \" + area(r));\n    System.out.println(\" The \u2581 Perimeter \u2581 of \u2581 Semicircle : \" + +perimeter(r));\n  }\n}\n", "python": "def area(r):\n    return (0.5) * (3.14) * (r * r)\n\n\ndef perimeter(r):\n    return (3.14) * (r)\n\n\nif __name__ == \" _ _ main _ _ \":\n    r = 10\n    print(\" The \u2581 Area \u2581 of \u2581 Semicircle : \u2581 \", area(r))\n    print(\" The \u2581 Perimeter \u2581 of \u2581 Semicircle : \u2581 \", perimeter(r))\n"}
{"text": "Find length of Diagonal of Hexagon ", "java": "import java.io.*;\n\nclass GFG {\n  static float hexadiagonal(float a) {\n    if (a < 0) return -1;\n    return 2 * a;\n  }\n\n  public static void main(String[] args) {\n    float a = 4;\n    System.out.print(hexadiagonal(a));\n  }\n}\n", "python": "def hexadiagonal(a):\n    if a < 0:\n        return -1\n    return 2 * a\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 4\n    print(hexadiagonal(a))\n"}
{"text": "Program to find the side of the Octagon inscribed within the square ", "java": "import java.io.*;\n\nclass GFG {\n  static double octaside(double a) {\n    if (a < 0) return -1;\n    double s = a / (Math.sqrt(2) + 1);\n    return s;\n  }\n\n  public static void main(String[] args) {\n    double a = 4;\n    System.out.println(octaside(a));\n  }\n}\n", "python": "from math import sqrt\n\n\ndef octaside(a):\n    if a < 0:\n        return -1\n    s = a / (sqrt(2) + 1)\n    return s\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 4\n    print(\" { 0 : . 6 } \".format(octaside(a)))\n"}
{"text": "Check if it is possible to move from ( 0 , 0 ) to ( x , y ) in N steps ", "java": "import java.io.*;\n\npublic class GFG {\n  static boolean Arrive(int a, int b, int n) {\n    if (n >= Math.abs(a) + Math.abs(b) && (n - (Math.abs(a) + Math.abs(b))) % 2 == 0) return true;\n    return false;\n  }\n\n  int main() {\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int a = 5, b = 5, n = 11;\n    if (Arrive(a, b, n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def Arrive(a, b, n):\n    if n >= abs(a) + abs(b) and (n - (abs(a) + abs(b))) % 2 == 0:\n        return True\n    return False\n\n\na = 5\nb = 5\nn = 11\nif Arrive(a, b, n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Check if it is possible to move from ( a , 0 ) to ( b , 0 ) with given jumps ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean Move(int a, int x, int b) {\n    if ((((b - a) % x == 0) || ((b - a - 1) % x == 0) && a + 1 != b) && b >= a) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int a = 3, x = 2, b = 7;\n    if (Move(a, x, b)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def Move(a, x, b):\n    if (((b - a) % x == 0) or ((b - a - 1) % x == 0) and a + 1 != b) and b >= a:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 3\n    x = 2\n    b = 7\n    if Move(a, x, b):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Find the altitude and area of an isosceles triangle ", "java": "import java.io.*;\n\nclass GFG {\n  static float altitude(float a, float b) {\n    return (float) (Math.sqrt(Math.pow(a, 2) - (Math.pow(b, 2) / 4)));\n  }\n\n  static float area(float b, float h) {\n    return (1 * b * h) / 2;\n  }\n\n  public static void main(String[] args) {\n    float a = 2, b = 3;\n    float h = altitude(a, b);\n    System.out.print(\" Altitude = \u2581 \" + h + \" , \u2581 \");\n    System.out.print(\" Area = \u2581 \" + area(b, h));\n  }\n}\n", "python": "import math\n\n\ndef altitude(a, b):\n    return math.sqrt(pow(a, 2) - (pow(b, 2) / 4))\n\n\ndef area(b, h):\n    return (1 * b * h) / 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 2\n    b = 3\n    h = altitude(a, b)\n    print(\" Altitude \u2581 = \u2581 \" + str(round(h, 3)), end=\" , \u2581 \")\n    print(\" Area \u2581 = \u2581 \" + str(round(area(b, h), 3)))\n"}
{"text": "Program to find the surface area of the square pyramid ", "java": "import java.io.*;\n\nclass GFG {\n  static int surfaceArea(int b, int s) {\n    return 2 * b * s + (int) Math.pow(b, 2);\n  }\n\n  public static void main(String[] args) {\n    int b = 3, s = 4;\n    System.out.println(surfaceArea(b, s));\n  }\n}\n", "python": "def surfaceArea(b, s):\n    return 2 * b * s + pow(b, 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    b = 3\n    s = 4\n    print(surfaceArea(b, s))\n"}
{"text": "Largest triangle that can be inscribed in a semicircle ", "java": "import java.io.*;\n\nclass GFG {\n  static float trianglearea(float r) {\n    if (r < 0) return -1;\n    return r * r;\n  }\n\n  public static void main(String[] args) {\n    float r = 5;\n    System.out.println(trianglearea(r));\n  }\n}\n", "python": "def trianglearea(r):\n    if r < 0:\n        return -1\n    return r * r\n\n\nif __name__ == \" _ _ main _ _ \":\n    r = 5\n    print(trianglearea(r))\n"}
{"text": "Largest square that can be inscribed in a semicircle ", "java": "import java.io.*;\n\nclass GFG {\n  static float squarearea(float r) {\n    if (r < 0) return -1;\n    float a = 4 * (float) (Math.pow(r, 2) / 5);\n    return a;\n  }\n\n  public static void main(String[] args) {\n    float r = 5;\n    System.out.println(squarearea(r));\n  }\n}\n", "python": "def squarearea(r):\n    if r < 0:\n        return -1\n    a = 4 * (pow(r, 2) / 5)\n    return a\n\n\nif __name__ == \" _ _ main _ _ \":\n    r = 5\n    print(int(squarearea(r)))\n"}
{"text": "Minimum squares to cover a rectangle ", "java": "class GFG {\n  static int squares(int l, int b, int a) {\n    return (int) (Math.ceil(l / (double) a) * Math.ceil(b / (double) a));\n  }\n\n  public static void main(String[] args) {\n    int l = 11, b = 23, a = 14;\n    System.out.println(squares(l, b, a));\n  }\n}\n", "python": "import math\n\n\ndef squares(l, b, a):\n    return math.ceil(l / a) * math.ceil(b / a)\n\n\nif __name__ == \" _ _ main _ _ \":\n    l = 11\n    b = 23\n    a = 14\n    print(squares(l, b, a))\n"}
{"text": "Find all angles of a triangle in 3D ", "java": "class GFG {\n  static double angle_triangle(\n      int x1, int x2, int x3, int y1, int y2, int y3, int z1, int z2, int z3) {\n    int num = (x2 - x1) * (x3 - x1) + (y2 - y1) * (y3 - y1) + (z2 - z1) * (z3 - z1);\n    double den =\n        Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2) + Math.pow((z2 - z1), 2))\n            * Math.sqrt(Math.pow((x3 - x1), 2) + Math.pow((y3 - y1), 2) + Math.pow((z3 - z1), 2));\n    double angle = Math.acos(num / den) * (180.0 / 3.141592653589793238463);\n    return angle;\n  }\n\n  public static void main(String[] args) {\n    int x1 = -1;\n    int y1 = 3;\n    int z1 = 2;\n    int x2 = 2;\n    int y2 = 3;\n    int z2 = 5;\n    int x3 = 3;\n    int y3 = 5;\n    int z3 = -2;\n    double angle_A = angle_triangle(x1, x2, x3, y1, y2, y3, z1, z2, z3);\n    double angle_B = angle_triangle(x2, x3, x1, y2, y3, y1, z2, z3, z1);\n    double angle_C = angle_triangle(x3, x2, x1, y3, y2, y1, z3, z2, z1);\n    System.out.println(\" Angles \u2581 are \u2581 : \");\n    System.out.println(\" angle \u2581 A \u2581 = \u2581 \" + angle_A + \" \u2581 degree \");\n    System.out.println(\" angle \u2581 B \u2581 = \u2581 \" + angle_B + \" \u2581 degree \");\n    System.out.println(\" angle \u2581 C \u2581 = \u2581 \" + angle_C + \" \u2581 degree \");\n  }\n}\n", "python": "import math\n\n\ndef angle_triangle(x1, x2, x3, y1, y2, y3, z1, z2, z3):\n    num = (x2 - x1) * (x3 - x1) + (y2 - y1) * (y3 - y1) + (z2 - z1) * (z3 - z1)\n    den = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2) * math.sqrt(\n        (x3 - x1) ** 2 + (y3 - y1) ** 2 + (z3 - z1) ** 2\n    )\n    angle = math.degrees(math.acos(num / den))\n    return round(angle, 3)\n\n\nx1 = -1\ny1 = 3\nz1 = 2\nx2 = 2\ny2 = 3\nz2 = 5\nx3 = 3\ny3 = 5\nz3 = -2\nangle_A = angle_triangle(x1, x2, x3, y1, y2, y3, z1, z2, z3)\nangle_B = angle_triangle(x2, x3, x1, y2, y3, y1, z2, z3, z1)\nangle_C = angle_triangle(x3, x2, x1, y3, y2, y1, z3, z2, z1)\nprint(\" Angles \u2581 are \u2581 : \")\nprint(\" angle \u2581 A \u2581 = \u2581 \", angle_A, \" degree \")\nprint(\" angle \u2581 B \u2581 = \u2581 \", angle_B, \" degree \")\nprint(\" angle \u2581 C \u2581 = \u2581 \", angle_C, \" degree \")\n"}
{"text": "Minimum number of square tiles required to fill the rectangular floor ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int solve(int M, int N, int s) {\n    if (N % s == 0) {\n      N = N / s;\n    } else {\n      N = (N / s) + 1;\n    }\n    if (M % s == 0) {\n      M = M / s;\n    } else {\n      M = (M / s) + 1;\n    }\n    return M * N;\n  }\n\n  public static void main(String args[]) {\n    int N = 12, M = 13, s = 4;\n    System.out.println(solve(M, N, s));\n  }\n}\n", "python": "def solve(M, N, s):\n    if N % s == 0:\n        N = N // s\n    else:\n        N = (N // s) + 1\n    if M % s == 0:\n        M = M // s\n    else:\n        M = (M // s) + 1\n    return M * N\n\n\nif __name__ == \" _ _ main _ _ \":\n    N, M, s = 12, 13, 4\n    print(solve(M, N, s))\n"}
{"text": "Minimum number of square tiles required to fill the rectangular floor ", "java": "class GFG {\n  static int solve(double M, double N, double s) {\n    int ans = ((int) (Math.ceil(M / s)) * (int) (Math.ceil(N / s)));\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    double N = 12, M = 13, s = 4;\n    System.out.println(solve(M, N, s));\n  }\n}\n", "python": "def solve(M, N, s):\n    if N % s == 0:\n        N = N // s\n    else:\n        N = (N // s) + 1\n    if M % s == 0:\n        M = M // s\n    else:\n        M = (M // s) + 1\n    return M * N\n\n\nif __name__ == \" _ _ main _ _ \":\n    N, M, s = 12, 13, 4\n    print(solve(M, N, s))\n"}
{"text": "Program to find equation of a plane passing through 3 points ", "java": "import java.io.*;\n\nclass GFG {\n  static void equation_plane(\n      float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3) {\n    float a1 = x2 - x1;\n    float b1 = y2 - y1;\n    float c1 = z2 - z1;\n    float a2 = x3 - x1;\n    float b2 = y3 - y1;\n    float c2 = z3 - z1;\n    float a = b1 * c2 - b2 * c1;\n    float b = a2 * c1 - a1 * c2;\n    float c = a1 * b2 - b1 * a2;\n    float d = (-a * x1 - b * y1 - c * z1);\n    System.out.println(\n        \" equation \u2581 of \u2581 plane \u2581 is \u2581 \"\n            + a\n            + \" \u2581 x \u2581 + \u2581 \"\n            + b\n            + \" \u2581 y \u2581 + \u2581 \"\n            + c\n            + \" \u2581 z \u2581 + \u2581 \"\n            + d\n            + \" \u2581 = \u2581 0 . \");\n  }\n\n  public static void main(String[] args) {\n    float x1 = -1;\n    float y1 = 2;\n    float z1 = 1;\n    float x2 = 0;\n    float y2 = -3;\n    float z2 = 2;\n    float x3 = 1;\n    float y3 = 1;\n    float z3 = -4;\n    equation_plane(x1, y1, z1, x2, y2, z2, x3, y3, z3);\n  }\n}\n", "python": "def equation_plane(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a1 = x2 - x1\n    b1 = y2 - y1\n    c1 = z2 - z1\n    a2 = x3 - x1\n    b2 = y3 - y1\n    c2 = z3 - z1\n    a = b1 * c2 - b2 * c1\n    b = a2 * c1 - a1 * c2\n    c = a1 * b2 - b1 * a2\n    d = -a * x1 - b * y1 - c * z1\n    print \" equation \u2581 of \u2581 plane \u2581 is \u2581 \",\n    print a, \" x \u2581 + \",\n    print b, \" y \u2581 + \",\n    print c, \" z \u2581 + \",\n    print d, \" = \u2581 0 . \"\n\n\nx1 = -1\ny1 = 2\nz1 = 1\nx2 = 0\ny2 = -3\nz2 = 2\nx3 = 1\ny3 = 1\nz3 = -4\nequation_plane(x1, y1, z1, x2, y2, z2, x3, y3, z3)\n"}
{"text": "Perpendicular distance between a point and a Line in 2 D ", "java": "import java.io.*;\n\nclass GFG {\n  static void shortest_distance(float x1, float y1, float a, float b, float c) {\n    double d = Math.abs(((a * x1 + b * y1 + c)) / (Math.sqrt(a * a + b * b)));\n    System.out.println(\" Perpendicular \u2581 \" + \" distance \u2581 is \u2581 \" + d);\n    return;\n  }\n\n  public static void main(String[] args) {\n    float x1 = 5;\n    float y1 = 6;\n    float a = -2;\n    float b = 3;\n    float c = 4;\n    shortest_distance(x1, y1, a, b, c);\n  }\n}\n", "python": "import math\n\n\ndef shortest_distance(x1, y1, a, b, c):\n    d = abs((a * x1 + b * y1 + c)) / (math.sqrt(a * a + b * b))\n    print(\" Perpendicular \u2581 distance \u2581 is \"), d\n\n\nx1 = 5\ny1 = 6\na = -2\nb = 3\nc = 4\nshortest_distance(x1, y1, a, b, c)\n"}
{"text": "Number of triangles in a plane if no more than two points are collinear ", "java": "import java.io.*;\n\nclass GFG {\n  static int countNumberOfTriangles(int n) {\n    return n * (n - 1) * (n - 2) / 6;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(countNumberOfTriangles(n));\n  }\n}\n", "python": "def countNumberOfTriangles(n):\n    return n * (n - 1) * (n - 2) // 6\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(countNumberOfTriangles(n))\n"}
{"text": "Centered Dodecagonal Number ", "java": "import java.io.*;\n\nclass GFG {\n  static long centeredDodecagonal(long n) {\n    return 6 * n * (n - 1) + 1;\n  }\n\n  public static void main(String[] args) {\n    long n = 2;\n    System.out.println(centeredDodecagonal(n));\n    n = 9;\n    System.out.println(centeredDodecagonal(n));\n  }\n}\n", "python": "def centeredDodecagonal(n):\n    return 6 * n * (n - 1) + 1\n\n\nn = 2\nprint(centeredDodecagonal(n))\nn = 9\nprint(centeredDodecagonal(n))\n"}
{"text": "Centered tridecagonal number ", "java": "import java.io.*;\n\nclass GFG {\n  static long centeredTridecagonalNum(long n) {\n    return (13 * n * (n - 1) + 2) / 2;\n  }\n\n  public static void main(String[] args) {\n    long n = 3;\n    System.out.println(centeredTridecagonalNum(n));\n    n = 10;\n    System.out.println(centeredTridecagonalNum(n));\n  }\n}\n", "python": "def centeredTridecagonalNum(n):\n    return (13 * n * (n - 1) + 2) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(centeredTridecagonalNum(n))\n    n = 10\n    print(centeredTridecagonalNum(n))\n"}
{"text": "Pentagonal Pyramidal Number ", "java": "import java.io.*;\n\nclass GFG {\n  static int pentagon_pyramidal(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n      int p = (3 * i * i - i) / 2;\n      sum = sum + p;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(pentagon_pyramidal(n));\n  }\n}\n", "python": "def pentagon_pyramidal(n):\n    sum = 0\n    for i in range(1, n + 1):\n        p = (3 * i * i - i) / 2\n        sum = sum + p\n    return sum\n\n\nn = 4\nprint(int(pentagon_pyramidal(n)))\n"}
{"text": "Pentagonal Pyramidal Number ", "java": "import java.io.*;\n\nclass GFG {\n  static int pentagon_pyramidal(int n) {\n    return n * n * (n + 1) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(pentagon_pyramidal(n));\n  }\n}\n", "python": "def pentagon_pyramidal(n):\n    sum = 0\n    for i in range(1, n + 1):\n        p = (3 * i * i - i) / 2\n        sum = sum + p\n    return sum\n\n\nn = 4\nprint(int(pentagon_pyramidal(n)))\n"}
{"text": "Check if three straight lines are concurrent or not ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean checkConcurrent(\n      int a1, int b1, int c1, int a2, int b2, int c2, int a3, int b3, int c3) {\n    return (a3 * (b1 * c2 - b2 * c1) + b3 * (c1 * a2 - c2 * a1) + c3 * (a1 * b2 - a2 * b1) == 0);\n  }\n\n  public static void main(String[] args) {\n    int a1 = 2, b1 = -3, c1 = 5;\n    int a2 = 3, b2 = 4, c2 = -7;\n    int a3 = 9, b3 = -5, c3 = 8;\n    if (checkConcurrent(a1, b1, c1, a2, b2, c2, a3, b3, c3)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def checkConcurrent(a1, b1, c1, a2, b2, c2, a3, b3, c3):\n    return (\n        a3 * (b1 * c2 - b2 * c1) + b3 * (c1 * a2 - c2 * a1) + c3 * (a1 * b2 - a2 * b1)\n        == 0\n    )\n\n\na1 = 2\nb1 = -3\nc1 = 5\na2 = 3\nb2 = 4\nc2 = -7\na3 = 9\nb3 = -5\nc3 = 8\nif checkConcurrent(a1, b1, c1, a2, b2, c2, a3, b3, c3):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Centered Octadecagonal Number ", "java": "import java.io.*;\n\nclass GFG {\n  static int center_octadecagon_num(int n) {\n    return 9 * n * n - 9 * n + 1;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(n + \" th \u2581 centered \u2581 \" + \" octadecagonal \u2581 number \u2581 : \u2581 \");\n    System.out.println(center_octadecagon_num(n));\n    n = 13;\n    System.out.print(n + \" th \u2581 centered \u2581 \" + \" octadecagonal \u2581 number \u2581 : \u2581 \");\n    System.out.println(center_octadecagon_num(n));\n  }\n}\n", "python": "def center_octadecagon_num(n):\n    return 9 * n * n - 9 * n + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(\n        n,\n        \" rd \u2581 centered \u2581 octadecagonal \u2581 \" + \" number \u2581 : \u2581 \",\n        center_octadecagon_num(n),\n    )\n    n = 13\n    print(\n        n,\n        \" th \u2581 centered \u2581 octadecagonal \u2581 \" + \" number \u2581 : \u2581 \",\n        center_octadecagon_num(n),\n    )\n"}
{"text": "Centered decagonal number ", "java": "import java.io.*;\n\nclass GFG {\n  static int centereddecagonalnum(int n) {\n    return (5 * n * n + 5 * n + 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.print(n + \" th \u2581 centered \u2581 \" + \" decagonal \u2581 number : \u2581 \");\n    System.out.println(centereddecagonalnum(n));\n    n = 9;\n    System.out.print(n + \" th \u2581 centered \u2581 \" + \" decagonal \u2581 number : \u2581 \");\n    System.out.println(centereddecagonalnum(n));\n  }\n}\n", "python": "def centereddecagonalnum(n):\n    return 5 * n * n + 5 * n + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(\n        n, \" th \u2581 centered \u2581 decagonal \u2581 \" + \" number \u2581 : \u2581 \", centereddecagonalnum(n)\n    )\n    n = 9\n    print(\n        n, \" th \u2581 centered \u2581 decagonal \u2581 \" + \" number \u2581 : \u2581 \", centereddecagonalnum(n)\n    )\n"}
{"text": "Centered pentagonal number ", "java": "import java.io.*;\n\nclass GFG {\n  static int centered_pentagonal_Num(int n) {\n    return (5 * n * n - 5 * n + 2) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 7;\n    System.out.print(n + \" th \u2581 Centered \u2581 \" + \" pentagonal \u2581 number : \u2581 \");\n    System.out.println(centered_pentagonal_Num(n));\n  }\n}\n", "python": "def centered_pentagonal_Num(n):\n    return (5 * n * n - 5 * n + 2) // 2\n\n\nn = 7\nprint(\" % sth \u2581 Centered \u2581 pentagonal \u2581 number \u2581 : \u2581 \" % n, centered_pentagonal_Num(n))\n"}
{"text": "Find maximum and minimum distance between magnets ", "java": "import java.io.*;\n\nclass GFG {\n  static int pivotDis(int x0, int y0, int x1, int y1) {\n    return (int) Math.sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));\n  }\n\n  static int minDis(int D, int r1, int r2) {\n    return Math.max((D - r1 - r2), 0);\n  }\n\n  static int maxDis(int D, int r1, int r2) {\n    return D + r1 + r2;\n  }\n\n  public static void main(String[] args) {\n    int x0 = 0, y0 = 0, x1 = 8, y1 = 0, r1 = 4, r2 = 5;\n    int D = pivotDis(x0, y0, x1, y1);\n    System.out.print(\" Distance \u2581 while \u2581 \" + \" repulsion \u2581 = \u2581 \" + maxDis(D, r1, r2));\n    System.out.print(\" Distance while \" + \" attraction \u2581 = \u2581 \" + minDis(D, r1, r2));\n  }\n}\n", "python": "import math\n\n\ndef pivotDis(x0, y0, x1, y1):\n    return math.sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0))\n\n\ndef minDis(D, r1, r2):\n    return max((D - r1 - r2), 0)\n\n\ndef maxDis(D, r1, r2):\n    return D + r1 + r2\n\n\nx0 = 0\ny0 = 0\nx1 = 8\ny1 = 0\nr1 = 4\nr2 = 5\nD = pivotDis(x0, y0, x1, y1)\nprint(\" Distance \u2581 while \u2581 repulsion \u2581 = \u2581 \", int(maxDis(D, r1, r2)))\nprint(\" Distance \u2581 while \u2581 attraction \u2581 = \u2581 \", minDis(D, r1, r2))\n"}
{"text": "Find the other end point of a line with given one end and mid ", "java": "class GFG {\n  static void otherEndPoint(int x1, int y1, int m1, int m2) {\n    float x2 = (float) (2 * m1 - x1);\n    float y2 = (float) (2 * m2 - y1);\n    System.out.println(\" x2 \u2581 = \u2581 \" + x2 + \" , \u2581 \" + \" y2 \u2581 = \u2581 \" + y2);\n  }\n\n  public static void main(String args[]) {\n    int x1 = -4, y1 = -1, m1 = 3, m2 = 5;\n    otherEndPoint(x1, y1, m1, m2);\n  }\n}\n", "python": "def otherEndPoint(x1, y1, m1, m2):\n    x2 = 2 * m1 - x1\n    y2 = 2 * m2 - y1\n    print(\" x2 \u2581 = \u2581 { } , \u2581 y2 \u2581 = \u2581 { } \".format(x2, y2))\n\n\nx1 = -4\ny1 = -1\nm1 = 3\nm2 = 5\notherEndPoint(x1, y1, m1, m2)\n"}
{"text": "Coordinates of rectangle with given points lie inside ", "java": "import java.util.Arrays;\nimport java.util.Collections;\n\nclass GFG {\n  static void printRect(Integer X[], Integer Y[], int n) {\n    int Xmax = Collections.max(Arrays.asList(X));\n    int Xmin = Collections.min(Arrays.asList(X));\n    int Ymax = Collections.max(Arrays.asList(Y));\n    int Ymin = Collections.min(Arrays.asList(Y));\n    System.out.println(\" { \" + Xmin + \" , \u2581 \" + Ymin + \" } \");\n    System.out.println(\" { \" + Xmin + \" , \u2581 \" + Ymax + \" } \");\n    System.out.println(\" { \" + Xmax + \" , \u2581 \" + Ymax + \" } \");\n    System.out.println(\" { \" + Xmax + \" , \u2581 \" + Ymin + \" } \");\n  }\n\n  public static void main(String[] args) {\n    Integer X[] = {4, 3, 6, 1, -1, 12};\n    Integer Y[] = {4, 1, 10, 3, 7, -1};\n    int n = X.length;\n    printRect(X, Y, n);\n  }\n}\n", "python": "def printRect(X, Y, n):\n    Xmax = max(X)\n    Xmin = min(X)\n    Ymax = max(Y)\n    Ymin = min(Y)\n    print(\" { \", Xmin, \" , \u2581 \", Ymin, \" } \", sep=\" \")\n    print(\" { \", Xmin, \" , \u2581 \", Ymax, \" } \", sep=\" \")\n    print(\" { \", Xmax, \" , \u2581 \", Ymax, \" } \", sep=\" \")\n    print(\" { \", Xmax, \" , \u2581 \", Ymin, \" } \", sep=\" \")\n\n\nX = [4, 3, 6, 1, -1, 12]\nY = [4, 1, 10, 3, 7, -1]\nn = len(X)\nprintRect(X, Y, n)\n"}
{"text": "Check if a line passes through the origin ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean checkOrigin(int x1, int y1, int x2, int y2) {\n    return (x1 * (y2 - y1) == y1 * (x2 - x1));\n  }\n\n  public static void main(String[] args) {\n    if (checkOrigin(1, 28, 2, 56) == true) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def checkOrigin(x1, y1, x2, y2):\n    return x1 * (y2 - y1) == y1 * (x2 - x1)\n\n\nif checkOrigin(1, 28, 2, 56) == True:\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program for Volume and Surface area of Frustum of Cone ", "java": "public class demo {\n  static float pi = 3.14159f;\n\n  public static float volume(float r, float R, float h) {\n    return (float) 1 / 3 * pi * h * (r * r + R * R + r * R);\n  }\n\n  public static float curved_surface_area(float r, float R, float l) {\n    return pi * l * (R + r);\n  }\n\n  public static float total_surface_area(float r, float R, float l, float h) {\n    return pi * l * (R + r) + pi * (r * r + R * R);\n  }\n\n  public static void main(String args[]) {\n    float small_radius = 3;\n    float big_radius = 8;\n    float slant_height = 13;\n    float height = 12;\n    System.out.print(\" Volume \u2581 Of \u2581 Frustum \u2581 of \u2581 Cone \u2581 : \u2581 \");\n    System.out.println(volume(small_radius, big_radius, height));\n    System.out.print(\" Curved \u2581 Surface \u2581 Area \u2581 Of \" + \" \u2581 Frustum \u2581 of \u2581 Cone \u2581 : \u2581 \");\n    System.out.println(curved_surface_area(small_radius, big_radius, slant_height));\n    System.out.print(\" Total \u2581 Surface \u2581 Area \u2581 Of \" + \" \u2581 Frustum \u2581 of \u2581 Cone \u2581 : \u2581 \");\n    System.out.println(total_surface_area(small_radius, big_radius, slant_height, height));\n  }\n}\n", "python": "import math\n\npi = math.pi\n\n\ndef volume(r, R, h):\n    return 1 / 3 * pi * h * (r * r + R * R + r * R)\n\n\ndef curved_surface_area(r, R, l):\n    return pi * l * (R + r)\n\n\ndef total_surface_area(r, R, l, h):\n    return pi * l * (R + r) + pi * (r * r + R * R)\n\n\nsmall_radius = 3\nbig_radius = 8\nslant_height = 13\nheight = 12\nprint(\" Volume \u2581 Of \u2581 Frustum \u2581 of \u2581 Cone \u2581 : \u2581 \", end=\" \")\nprint(volume(small_radius, big_radius, height))\nprint(\" Curved \u2581 Surface \u2581 Area \u2581 Of \u2581 Frustum \" + \" \u2581 of \u2581 Cone \u2581 : \u2581 \", end=\" \")\nprint(curved_surface_area(small_radius, big_radius, slant_height))\nprint(\" Total \u2581 Surface \u2581 Area \u2581 Of \u2581 Frustum \" + \" \u2581 of \u2581 Cone \u2581 : \u2581 \", end=\" \")\nprint(total_surface_area(small_radius, big_radius, slant_height, height))\n"}
{"text": "Program to find Perimeter / Circumference of Square and Rectangle ", "java": "import java.io.*;\n\nclass GFG {\n  int Circumference(int a) {\n    return 4 * a;\n  }\n\n  public static void main(String args[]) {\n    GFG obj = new GFG();\n    int a = 5;\n    System.out.println(\" Circumference \u2581 of \u2581 \" + \" a \u2581 square \u2581 is \u2581 \" + obj.Circumference(a));\n  }\n}\n", "python": "def Circumference(a):\n    return 4 * a\n\n\na = 5\nc = Circumference(a)\nprint(\" Circumference \u2581 of \u2581 a \u2581 \" + \" square \u2581 is \u2581 % \u2581 d \" % (c))\n"}
{"text": "Maximum area of quadrilateral ", "java": "import java.io.*;\n\nclass GFG {\n  static double maxArea(double a, double b, double c, double d) {\n    double semiperimeter = (a + b + c + d) / 2;\n    return Math.sqrt(\n        (semiperimeter - a) * (semiperimeter - b) * (semiperimeter - c) * (semiperimeter - d));\n  }\n\n  public static void main(String[] args) {\n    double a = 1, b = 2, c = 1, d = 2;\n    System.out.println(maxArea(a, b, c, d));\n  }\n}\n", "python": "import math\n\n\ndef maxArea(a, b, c, d):\n    semiperimeter = (a + b + c + d) / 2\n    return math.sqrt(\n        (semiperimeter - a)\n        * (semiperimeter - b)\n        * (semiperimeter - c)\n        * (semiperimeter - d)\n    )\n\n\na = 1\nb = 2\nc = 1\nd = 2\nprint(\" % .2f \" % maxArea(a, b, c, d))\n"}
{"text": "Find minimum radius such that atleast k point lie inside the circle ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int minRadius(int k, int[] x, int[] y, int n) {\n    int[] dis = new int[n];\n    for (int i = 0; i < n; i++) dis[i] = x[i] * x[i] + y[i] * y[i];\n    Arrays.sort(dis);\n    return dis[k - 1];\n  }\n\n  public static void main(String[] args) {\n    int k = 3;\n    int[] x = {1, -1, 1};\n    int[] y = {1, -1, -1};\n    int n = x.length;\n    System.out.println(minRadius(k, x, y, n));\n  }\n}\n", "python": "def minRadius(k, x, y, n):\n    dis = [0] * n\n    for i in range(0, n):\n        dis[i] = x[i] * x[i] + y[i] * y[i]\n    dis.sort()\n    return dis[k - 1]\n\n\nk = 3\nx = [1, -1, 1]\ny = [1, -1, -1]\nn = len(x)\nprint(minRadius(k, x, y, n))\n"}
{"text": "Program for Area And Perimeter Of Rectangle ", "java": "import java.io.*;\n\nclass Geometry {\n  static int areaRectangle(int a, int b) {\n    int area = a * b;\n    return area;\n  }\n\n  static int perimeterRectangle(int a, int b) {\n    int perimeter = 2 * (a + b);\n    return perimeter;\n  }\n\n  public static void main(String[] args) {\n    int a = 5;\n    int b = 6;\n    System.out.println(\" Area \u2581 = \u2581 \" + areaRectangle(a, b));\n    System.out.println(\" Perimeter \u2581 = \u2581 \" + perimeterRectangle(a, b));\n  }\n}\n", "python": "def areaRectangle(a, b):\n    return a * b\n\n\ndef perimeterRectangle(a, b):\n    return 2 * (a + b)\n\n\na = 5\nb = 6\nprint(\" Area \u2581 = \u2581 \", areaRectangle(a, b))\nprint(\" Perimeter \u2581 = \u2581 \", perimeterRectangle(a, b))\n"}
{"text": "Program for Area Of Square ", "java": "import java.util.*;\n\nclass GFG {\n  static int areaSquare(int side) {\n    int area = side * side;\n    return area;\n  }\n\n  public static void main(String[] args) {\n    int side = 5;\n    System.out.println(areaSquare(4));\n  }\n}\n", "python": "def areaSquare(side):\n    area = side * side\n    return area\n\n\nside = 4\nprint(areaSquare(side))\n"}
{"text": "Area of a polygon with given n ordered vertices ", "java": "import java.io.*;\n\nclass GFG {\n  public static double polygonArea(double X[], double Y[], int n) {\n    double area = 0.0;\n    int j = n - 1;\n    for (int i = 0; i < n; i++) {\n      area += (X[j] + X[i]) * (Y[j] - Y[i]);\n      j = i;\n    }\n    return Math.abs(area / 2.0);\n  }\n\n  public static void main(String[] args) {\n    double X[] = {0, 2, 4};\n    double Y[] = {1, 3, 7};\n    int n = 3;\n    System.out.println(polygonArea(X, Y, n));\n  }\n}\n", "python": "def polygonArea(X, Y, n):\n    area = 0.0\n    j = n - 1\n    for i in range(0, n):\n        area += (X[j] + X[i]) * (Y[j] - Y[i])\n    return int(abs(area / 2.0))\n\n\nX = [0, 2, 4]\nY = [1, 3, 7]\nn = len(X)\nprint(polygonArea(X, Y, n))\n"}
{"text": "Convert 0 to N by adding 1 or multiplying by 2 in minimum steps ", "java": "import java.io.*;\n\nclass GFG {\n  static int minimumAdditionOperation(int N) {\n    int count = 0;\n    while (N > 0) {\n      if (N % 2 == 1) {\n        count++;\n      }\n      N = N >> 1;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int N = 6;\n    System.out.println(minimumAdditionOperation(N));\n  }\n}\n", "python": "def minimumAdditionOperation(N):\n    count = 0\n    while N:\n        if N & 1 == 1:\n            count += 1\n        N = N >> 1\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 6\n    print(minimumAdditionOperation(N))\n"}
{"text": "Find subfactorial of a number ", "java": "import java.util.*;\n\nclass GFG {\n  static double subfactorial(int N) {\n    double res = 0, fact = 1;\n    int count = 0;\n    for (int i = 1; i <= N; i++) {\n      fact = fact * i;\n      if (count % 2 == 0) res = res - (1 / fact);\n      else res = res + (1 / fact);\n      count++;\n    }\n    return fact * (1 + res);\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    System.out.println((int) (subfactorial(N)));\n  }\n}\n", "python": "def subfactorial(N):\n    res = 0\n    fact = 1\n    count = 0\n    for i in range(1, N + 1):\n        fact = fact * i\n        if count % 2 == 0:\n            res = res - (1 / fact)\n        else:\n            res = res + (1 / fact)\n        count += 1\n    return fact * (1 + res)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    print(subfactorial(N))\n"}
{"text": "Minimize operations to delete all elements of permutation A by removing a subsequence having order as array B ", "java": "import java.util.*;\n\nclass GFG {\n  static int minOperations(int A[], int B[], int N) {\n    int cnt = 0;\n    int i = 0;\n    while (i < N) {\n      int j = 0;\n      while (j < N && i < N) {\n        if (B[i] == A[j]) {\n          i++;\n        }\n        j++;\n      }\n      cnt++;\n    }\n    return cnt;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {2, 4, 6, 1, 5, 3};\n    int B[] = {6, 5, 4, 2, 3, 1};\n    int N = A.length;\n    System.out.print(minOperations(A, B, N));\n  }\n}\n", "python": "def minOperations(A, B, N):\n    cnt = 0\n    i = 0\n    while i < N:\n        j = 0\n        while j < N and i < N:\n            if B[i] == A[j]:\n                i += 1\n            j += 1\n        cnt += 1\n    return cnt\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [2, 4, 6, 1, 5, 3]\n    B = [6, 5, 4, 2, 3, 1]\n    N = len(A)\n    print(minOperations(A, B, N))\n"}
{"text": "Count of pair of integers ( x , y ) such that difference between square of x and y is a perfect square ", "java": "import java.util.*;\n\nclass GFG {\n  static int countPairs(int N) {\n    int res = 0;\n    for (int q = 1; q * q <= N; q++) {\n      int maxP = Math.min(2 * N - q, N / q);\n      if (maxP < q) continue;\n      int cnt = maxP - q + 1;\n      res += (cnt / 2 + (cnt & 1));\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    System.out.print(countPairs(N));\n  }\n}\n", "python": "import math\n\n\ndef countPairs(N):\n    res = 0\n    for q in range(1, int(math.sqrt(N)) + 1):\n        maxP = min(2 * N - q, N // q)\n        if maxP < q:\n            continue\n        cnt = maxP - q + 1\n        res += cnt // 2 + (cnt & 1)\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    print(countPairs(N))\n"}
{"text": "Count of distinct sums formed by N numbers taken form range [ L , R ] ", "java": "import java.util.*;\n\nclass GFG {\n  static int countDistinctSums(int N, int L, int R) {\n    int minSum = L * N;\n    int maxSum = R * N;\n    return maxSum - minSum + 1;\n  }\n\n  public static void main(String[] args) {\n    int N = 2, L = 1, R = 3;\n    System.out.print(countDistinctSums(N, L, R));\n  }\n}\n", "python": "def countDistinctSums(N, L, R):\n    minSum = L * N\n    maxSum = R * N\n    return maxSum - minSum + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    L = 1\n    R = 3\n    print(countDistinctSums(N, L, R))\n"}
{"text": "Finding the Nth term in a sequence formed by removing digit K from natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static long convertToBase9(long n) {\n    long ans = 0;\n    long a = 1;\n    while (n > 0) {\n      ans += (a * (n % 9));\n      a *= 10;\n      n /= 9;\n    }\n    return ans;\n  }\n\n  static long getNthnumber(long base9, long K) {\n    long ans = 0;\n    long a = 1;\n    while (base9 > 0) {\n      int cur = (int) (base9 % 10);\n      if (cur >= K) {\n        ans += a * (cur + 1);\n      } else {\n        ans += a * cur;\n      }\n      base9 /= 10;\n      a *= 10;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    long N = 10, K = 1;\n    long base9 = convertToBase9(N);\n    System.out.println(getNthnumber(base9, K));\n  }\n}\n", "python": "def convertToBase9(n):\n    ans = 0\n    a = 1\n    while n > 0:\n        ans += a * (n % 9)\n        a *= 10\n        n //= 9\n    return ans\n\n\ndef getNthnumber(base9, K):\n    ans = 0\n    a = 1\n    while base9 > 0:\n        cur = base9 % 10\n        if cur >= K:\n            ans += a * (cur + 1)\n        else:\n            ans += a * cur\n        base9 //= 10\n        a *= 10\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 10\n    K = 1\n    base9 = convertToBase9(N)\n    print(getNthnumber(base9, K))\n"}
{"text": "Count of distinct integers belonging to first N terms of at least one of given GPs ", "java": "import java.util.*;\n\nclass GFG {\n  static int UniqueGeometricTerms(int N, int a1, int r1, int a2, int r2) {\n    HashSet<Integer> S = new HashSet<Integer>();\n    int p1 = a1;\n    for (int i = 0; i < N; i++) {\n      S.add(p1);\n      p1 = (p1 * r1);\n    }\n    int p2 = a2;\n    for (int i = 0; i < N; i++) {\n      S.add(p2);\n      p2 = (p2 * r2);\n    }\n    return S.size();\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    int a1 = 3, r1 = 2, a2 = 2, r2 = 3;\n    System.out.print(UniqueGeometricTerms(N, a1, r1, a2, r2));\n  }\n}\n", "python": "def UniqueGeometricTerms(N, a1, r1, a2, r2):\n    S = set()\n    p1 = a1\n    for i in range(N):\n        S.add(p1)\n        p1 = p1 * r1\n    p2 = a2\n    for i in range(N):\n        S.add(p2)\n        p2 = p2 * r2\n    return len(S)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    a1 = 3\n    r1 = 2\n    a2 = 2\n    r2 = 3\n    print(UniqueGeometricTerms(N, a1, r1, a2, r2))\n"}
{"text": "Minimum size of set having either element in range [ 0 , X ] or an odd power of 2 with sum N ", "java": "import java.io.*;\n\nclass GFG {\n  static int highestPowerof2(int n) {\n    int p = (int) Math.floor(Math.log(n) / Math.log(2.0));\n    if (p % 2 == 0) p -= 1;\n    int result = (int) (Math.pow(2, p));\n    return result;\n  }\n\n  static int minStep(int N, int X) {\n    if (N % 2 != 0 && X == 0) return -1;\n    int size = 0;\n    while (X < N) {\n      N -= highestPowerof2(N);\n      size += 1;\n    }\n    if (N != 0) size += 1;\n    return size;\n  }\n\n  public static void main(String[] args) {\n    int N = 11;\n    int X = 2;\n    System.out.println(minStep(N, X));\n  }\n}\n", "python": "import math\n\n\ndef highestPowerof2(n):\n    p = int(math.log(n, 2))\n    if p % 2 == 0:\n        p -= 1\n    return int(pow(2, p))\n\n\ndef minStep(N, X):\n    if N % 2 and X == 0:\n        return -1\n    size = 0\n    while X < N:\n        N -= highestPowerof2(N)\n        size += 1\n    if N:\n        size += 1\n    return size\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 11\n    X = 2\n    print(minStep(N, X))\n"}
{"text": "Check if all the digits of the given number are same ", "java": "import java.io.*;\n\nclass GFG {\n  public static String checkSameDigits(int N) {\n    int digit = N % 10;\n    while (N != 0) {\n      int current_digit = N % 10;\n      N = N / 10;\n      if (current_digit != digit) {\n        return \" No \";\n      }\n    }\n    return \" Yes \";\n  }\n\n  public static void main(String args[]) throws IOException {\n    int N = 222;\n    System.out.println(checkSameDigits(N));\n  }\n}\n", "python": "import math\n\n\ndef checkSameDigits(N):\n    length = int(math.log10(N)) + 1\n    M = (int(math.pow(10, length)) - 1) // (10 - 1)\n    M *= N % 10\n    if M == N:\n        return \" Yes \"\n    return \" No \"\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 222\n    print(checkSameDigits(N))\n"}
{"text": "Find number formed by K times alternatively reducing X and adding Y to 0 ", "java": "import java.util.*;\n\nclass GFG {\n  static int positionAfterKJumps(int X, int Y, int K) {\n    int addY = Y * (K / 2);\n    int reduceX = -1 * X * (K / 2 + K % 2);\n    return addY + reduceX;\n  }\n\n  public static void main(String[] args) {\n    int X = 2, Y = 5, K = 3;\n    System.out.print(positionAfterKJumps(X, Y, K));\n  }\n}\n", "python": "def positionAfterKJumps(X, Y, K):\n    addY = Y * (K // 2)\n    reduceX = -1 * X * (K // 2 + K % 2)\n    return addY + reduceX\n\n\nX = 2\nY = 5\nK = 3\nprint(positionAfterKJumps(X, Y, K))\n"}
{"text": "Maximize the largest number K such that bitwise and of K till N is 0 ", "java": "import java.io.*;\n\nclass GFG {\n  static int findMaxK(int N) {\n    int K = N;\n    for (int i = N - 1; i >= 0; i--) {\n      K &= i;\n      if (K == 0) {\n        return i;\n      }\n    }\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.println(findMaxK(N));\n  }\n}\n", "python": "import math\n\n\ndef findMaxK(N):\n    p = math.log(N) // math.log(2)\n    return int(pow(2, p))\n\n\nN = 5\nprint(findMaxK(N) - 1)\n"}
{"text": "Sum of all subsets of a given size ( = K ) ", "java": "import java.io.*;\n\nclass GFG {\n  static void findSumOfAllSubsets(int[] arr, int n, int k) {\n    int factorial_N = 1, factorial_d = 1, factorial_D = 1;\n    for (int i = 1; i <= n - 1; i++) factorial_N *= i;\n    for (int i = 1; i <= k - 1; i++) factorial_d *= i;\n    for (int i = 1; i <= n - k; i++) factorial_D *= i;\n    int freq = factorial_N / (factorial_d * factorial_D);\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum += arr[i];\n    sum = sum * freq;\n    System.out.println(\" Sum \u2581 of \u2581 all \u2581 subsets \u2581 of \u2581 size \u2581 = \u2581 \" + k + \" \u2581 is \u2581 = > \u2581 \" + sum);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 4, 5};\n    int n = 4, k = 2;\n    findSumOfAllSubsets(arr, n, k);\n  }\n}\n", "python": "def findSumOfAllSubsets(arr, n, k):\n    factorial_N = 1\n    factorial_d = 1\n    factorial_D = 1\n    for i in range(1, n, 1):\n        factorial_N *= i\n    for i in range(1, k, 1):\n        factorial_d *= i\n    for i in range(1, n - k + 1, 1):\n        factorial_D *= i\n    freq = factorial_N // (factorial_d * factorial_D)\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    sum = sum * freq\n    print(\" Sum \u2581 of \u2581 all \u2581 subsets \u2581 of \u2581 size \u2581 = \u2581 \", k, \" \u2581 is \u2581 = > \", sum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 4, 5]\n    n = 4\n    k = 2\n    findSumOfAllSubsets(arr, n, k)\n"}
{"text": "Count of integers in given range having their last K digits are equal ", "java": "import java.util.*;\n\nclass GFG {\n  static int intCount(int X, int K) {\n    int ans = 0;\n    for (int z = 0; z < Math.pow(10, K); z += (Math.pow(10, K) - 1) / 9) {\n      if (z > X) break;\n      ans += ((X - z) / Math.pow(10, K) + 1);\n    }\n    return ans;\n  }\n\n  static int intCountInRange(int L, int R, int K) {\n    return (intCount(R, K) - intCount(L - 1, K));\n  }\n\n  public static void main(String[] args) {\n    int L = 49;\n    int R = 101;\n    int K = 2;\n    System.out.print(intCountInRange(L, R, K));\n  }\n}\n", "python": "def intCount(X, K):\n    ans = 0\n    for z in range(0, int(pow(10, K)), int((pow(10, K) - 1) / 9)):\n        if z > X:\n            break\n        ans += int((X - z) / int(pow(10, K)) + 1)\n    return ans\n\n\ndef intCountInRange(L, R, K):\n    return intCount(R, K) - intCount(L - 1, K)\n\n\nL = 49\nR = 101\nK = 2\nprint(intCountInRange(L, R, K))\n"}
{"text": "Count cells in a grid from which maximum number of cells can be reached by K vertical or horizontal jumps ", "java": "class GFG {\n  public static long countCells(int n, int m, int s) {\n    int mx1 = -1;\n    int cont1 = 0;\n    for (int i = 0; i < s && i < n; ++i) {\n      int aux = (n - (i + 1)) / s + 1;\n      if (aux > mx1) {\n        mx1 = cont1 = aux;\n      } else if (aux == mx1) cont1 += aux;\n    }\n    int mx2 = -1;\n    int cont2 = 0;\n    for (int i = 0; i < s && i < m; ++i) {\n      int aux = (m - (i + 1)) / s + 1;\n      if (aux > mx2) mx2 = cont2 = aux;\n      else if (aux == mx2) cont2 += aux;\n    }\n    return (long) (cont1 * cont2);\n  }\n\n  public static void main(String args[]) {\n    int N = 5, M = 5, K = 2;\n    System.out.println(countCells(N, M, K));\n  }\n}\n", "python": "def countCells(n, m, s):\n    mx1 = -1\n    cont1 = 0\n    i = 0\n    while i < s and i < n:\n        aux = (n - (i + 1)) // s + 1\n        if aux > mx1:\n            mx1 = cont1 = aux\n        elif aux == mx1:\n            cont1 += aux\n        i += 1\n    mx2 = -1\n    cont2 = 0\n    i = 0\n    while i < s and i < m:\n        aux = (m - (i + 1)) // s + 1\n        if aux > mx2:\n            mx2 = cont2 = aux\n        elif aux == mx2:\n            cont2 += aux\n        i += 1\n    return cont1 * cont2\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    M = 5\n    K = 2\n    print(countCells(N, M, K))\n"}
{"text": "Count of pairs from first N natural numbers with remainder at least K ", "java": "import java.io.*;\n\nclass GFG {\n  public static int countTotalPairs(int N, int K) {\n    if (K == 0) {\n      return N * N;\n    }\n    int ans = 0;\n    for (int i = K + 1; i <= N; i++) {\n      ans += (N / i) * (i - K);\n      if ((N % i) - K + 1 > 0) {\n        ans += (N % i) - K + 1;\n      }\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 5, K = 2;\n    System.out.println(countTotalPairs(N, K));\n  }\n}\n", "python": "def countTotalPairs(N, K):\n    if K == 0:\n        return N * N\n    ans = 0\n    for b in range(K + 1, N + 1):\n        ans += (N // b) * (b - K)\n        ans += max(N % b - K + 1, 0)\n    return ans\n\n\nN = 5\nK = 2\nprint(countTotalPairs(N, K))\n"}
{"text": "Minimize sum of absolute difference between all pairs of array elements by decrementing and incrementing pairs by 1 ", "java": "class GFG {\n  public static int minSumDifference(int ar[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum += ar[i];\n    int rem = sum % n;\n    return rem * (n - rem);\n  }\n\n  public static void main(String args[]) {\n    int[] arr = {3, 6, 8, 5, 2, 1, 11, 7, 10, 4};\n    int N = arr.length;\n    System.out.println(minSumDifference(arr, N));\n  }\n}\n", "python": "def minSumDifference(ar, n):\n    sum = 0\n    for i in range(n):\n        sum += ar[i]\n    rem = sum % n\n    return rem * (n - rem)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 6, 8, 5, 2, 1, 11, 7, 10, 4]\n    N = len(arr)\n    print(minSumDifference(arr, N))\n"}
{"text": "Minimum jumps to traverse all integers in range [ 1 , N ] such that integer i can jump i steps ", "java": "import java.io.*;\n\nclass GFG {\n  static int minSteps(int N) {\n    int count = 1, res = 0;\n    for (int i = 1; i <= N; i += count) {\n      res = Math.max(res, count);\n      count++;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int N = 6;\n    System.out.println(minSteps(N));\n  }\n}\n", "python": "def minSteps(N):\n    count = 1\n    res = 0\n    for i in range(1, N + 1, count):\n        res = max(res, count)\n        count += 1\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 6\n    print(minSteps(N))\n"}
{"text": "The dice problem ", "java": "import java.io.*;\n\nclass GFG {\n  static void oppositeFaceOfDice(int N) {\n    int ans = 7 - N;\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    oppositeFaceOfDice(N);\n  }\n}\n", "python": "def oppositeFaceOfDice(N):\n    ans = 7 - N\n    print(ans)\n\n\nN = 2\noppositeFaceOfDice(N)\n"}
{"text": "Maximum number of Armstrong Numbers present in a subarray of size K ", "java": "import java.util.*;\n\nclass GFG {\n  static int power(int x, int y) {\n    if (y == 0) return 1;\n    if (y % 2 == 0) return power(x, y / 2) * power(x, y / 2);\n    return x * power(x, y / 2) * power(x, y / 2);\n  }\n\n  static int order(int num) {\n    int count = 0;\n    while (num > 0) {\n      count++;\n      num = num / 10;\n    }\n    return count;\n  }\n\n  static int isArmstrong(int N) {\n    int r = order(N);\n    int temp = N, sum = 0;\n    while (temp > 0) {\n      int d = temp % 10;\n      sum += power(d, r);\n      temp = temp / 10;\n    }\n    if (sum == N) return 1;\n    return 0;\n  }\n\n  static int maxSum(int[] arr, int N, int K) {\n    if (N < K) {\n      return -1;\n    }\n    int res = 0;\n    for (int i = 0; i < K; i++) {\n      res += arr[i];\n    }\n    int curr_sum = res;\n    for (int i = K; i < N; i++) {\n      curr_sum += arr[i] - arr[i - K];\n      res = Math.max(res, curr_sum);\n    }\n    return res;\n  }\n\n  static int maxArmstrong(int[] arr, int N, int K) {\n    for (int i = 0; i < N; i++) {\n      arr[i] = isArmstrong(arr[i]);\n    }\n    return maxSum(arr, N, K);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {28, 2, 3, 6, 153, 99, 828, 24};\n    int K = 6;\n    int N = arr.length;\n    System.out.println(maxArmstrong(arr, N, K));\n  }\n}\n", "python": "def power(x, y):\n    if y == 0:\n        return 1\n    if y % 2 == 0:\n        return power(x, y // 2) * power(x, y // 2)\n    return x * power(x, y // 2) * power(x, y // 2)\n\n\ndef order(num):\n    count = 0\n    while num:\n        count += 1\n        num = num // 10\n    return count\n\n\ndef isArmstrong(N):\n    r = order(N)\n    temp = N\n    sum = 0\n    while temp:\n        d = temp % 10\n        sum += power(d, r)\n        temp = temp // 10\n    return sum == N\n\n\ndef maxSum(arr, N, K):\n    if N < K:\n        return -1\n    res = 0\n    for i in range(K):\n        res += arr[i]\n    curr_sum = res\n    for i in range(K, N, 1):\n        curr_sum += arr[i] - arr[i - K]\n        res = max(res, curr_sum)\n    return res\n\n\ndef maxArmstrong(arr, N, K):\n    for i in range(N):\n        arr[i] = isArmstrong(arr[i])\n    return maxSum(arr, N, K)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [28, 2, 3, 6, 153, 99, 828, 24]\n    K = 6\n    N = len(arr)\n    print(maxArmstrong(arr, N, K))\n"}
{"text": "Represent a number N in base ", "java": "class GFG {\n  public static String BaseConversion(int N) {\n    String s = \" \";\n    while (N != 0) {\n      if (N % 2 == 0) {\n        s = \"0\" + s;\n      } else {\n        s = \"1\" + s;\n        N--;\n      }\n      N /= -2;\n    }\n    if (s == \" \") {\n      s = \"0\";\n    }\n    return s;\n  }\n\n  public static void main(String args[]) {\n    int N = -9;\n    System.out.println(BaseConversion(N));\n  }\n}\n", "python": "def BaseConversion(N):\n    s = \" \"\n    while N != 0:\n        if N % 2 == 0:\n            s = \"0\" + s\n        else:\n            s = \"1\" + s\n            N -= 1\n        N /= -2\n    if s == \" \":\n        s = \"0\"\n    return s\n\n\nN = -9\nprint(BaseConversion(N))\n"}
{"text": "Find instances at end of time frame after auto scaling ", "java": "class GFG {\n  public static void finalInstances(int instances, int[] arr) {\n    int i = 0;\n    while (i < arr.length) {\n      if (arr[i] < 25 && instances > 1) {\n        instances = (instances / 2);\n        i = i + 10;\n      } else if (arr[i] > 60 && instances <= Math.pow(10, 8)) {\n        instances = instances * 2;\n        i = i + 10;\n      }\n      i = i + 1;\n    }\n    System.out.println(instances);\n  }\n\n  public static void main(String args[]) {\n    int instances = 2;\n    int[] arr = {25, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 76, 80};\n    finalInstances(instances, arr);\n  }\n}\n", "python": "from math import ceil\n\n\ndef finalInstances(instances, arr):\n    i = 0\n    while i < len(arr):\n        if arr[i] < 25 and instances > 1:\n            instances = ceil(instances / 2)\n            i += 10\n        elif arr[i] > 60 and instances <= 10 ** 8:\n            instances *= 2\n            i += 10\n        i += 1\n    print(instances)\n\n\ninstances = 2\narr = [25, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 76, 80]\nfinalInstances(instances, arr)\n"}
{"text": "Maximize minimum array element possible by exactly K decrements ", "java": "import java.io.*;\n\nclass GFG {\n  static int minimumElement(int arr[], int N, int K) {\n    int minElement = arr[0];\n    for (int i = 0; i < N; ++i) {\n      minElement = Math.min(minElement, arr[i]);\n    }\n    int reqOperations = 0;\n    for (int i = 0; i < N; ++i) {\n      reqOperations += arr[i] - minElement;\n    }\n    if (reqOperations < K) {\n      K -= reqOperations;\n      minElement -= (K + N - 1) / N;\n    }\n    return minElement;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {10, 10, 10, 10};\n    int K = 7;\n    int N = arr.length;\n    System.out.println(minimumElement(arr, N, K));\n  }\n}\n", "python": "def minimumElement(arr, N, K):\n    minElement = arr[0]\n    for i in range(N):\n        minElement = min(minElement, arr[i])\n    reqOperations = 0\n    for i in range(N):\n        reqOperations += arr[i] - minElement\n    if reqOperations < K:\n        K -= reqOperations\n        minElement -= (K + N - 1) // N\n    return minElement\n\n\narr = [10, 10, 10, 10]\nK = 7\nN = len(arr)\nprint(minimumElement(arr, N, K))\n"}
{"text": "Split the fraction into sum of multiple fractions having numerator as 1 ", "java": "import java.util.Vector;\n\npublic class GFG {\n  static Vector<String> FractionSplit(long n, long d) {\n    Vector<String> UnitFactions = new Vector<>();\n    while (n > 0) {\n      long x = (d + n - 1) / n;\n      String s = \"1 / \" + String.valueOf(x);\n      UnitFactions.add(s);\n      n = n * x - d;\n      d = d * x;\n    }\n    return UnitFactions;\n  }\n\n  public static void main(String[] args) {\n    long n = 13, d = 18;\n    Vector<String> res = FractionSplit(n, d);\n    for (String s : res) System.out.print(s + \" , \u2581 \");\n  }\n}\n", "python": "def FractionSplit(n, d):\n    UnitFactions = []\n    while n > 0:\n        x = (d + n - 1) // n\n        s = \"1 / \" + str(x)\n        UnitFactions.append(s)\n        n = n * x - d\n        d = d * x\n    return UnitFactions\n\n\nn = 13\nd = 18\nres = FractionSplit(n, d)\nfor s in res:\n    print(s + \" , \u2581 \", end=\" \u2581 \")\n"}
{"text": "Maximize the number N by inserting given digit at any position ", "java": "class GFG {\n  public static void maximizeNumber(int N, int K) {\n    String s = Integer.toString(N);\n    int L = s.length();\n    String result = \" \";\n    int i = 0;\n    while ((i < L) && (K <= ((int) s.charAt(i) - (int) '0'))) {\n      result += (s.charAt(i));\n      ++i;\n    }\n    result += ((char) (K + (int) '0'));\n    while (i < L) {\n      result += (s.charAt(i));\n      ++i;\n    }\n    System.out.println(result);\n  }\n\n  public static void main(String args[]) {\n    int N = 6673, K = 6;\n    maximizeNumber(N, K);\n  }\n}\n", "python": "def maximizeNumber(N, K):\n    s = str(N)\n    L = len(s)\n    result = \" \"\n    i = 0\n    while (i < L) and (K <= (ord(s[i]) - ord(\"0\"))):\n        result += s[i]\n        i += 1\n    result += chr(K + ord(\"0\"))\n    while i < L:\n        result += s[i]\n        i += 1\n    print(result)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 6673\n    K = 6\n    maximizeNumber(N, K)\n"}
{"text": "Concatenate the Array of elements into a single element ", "java": "import java.util.*;\n\nclass GFG {\n  static int ConcatenateArr(int[] arr, int N) {\n    int ans = arr[0];\n    for (int i = 1; i < N; i++) {\n      int l = (int) Math.floor(Math.log10(arr[i]) + 1);\n      ans = ans * (int) Math.pow(10, l);\n      ans += arr[i];\n    }\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 23, 456};\n    int N = arr.length;\n    System.out.println(ConcatenateArr(arr, N));\n  }\n}\n", "python": "import math\n\n\ndef ConcatenateArr(arr, N):\n    ans = arr[0]\n    for i in range(1, N):\n        l = math.floor(math.log10(arr[i]) + 1)\n        ans = ans * math.pow(10, l)\n        ans += arr[i]\n    return int(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 23, 456]\n    N = len(arr)\n    print(ConcatenateArr(arr, N))\n"}
{"text": "Count of integers K in range [ 0 , N ] such that ( K XOR K + 1 ) equals ( K + 2 XOR K + 3 ) ", "java": "import java.io.*;\n\nclass GFG {\n  static int countXor(int N) {\n    int cnt = (int) N / 2 + 1;\n    return cnt;\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    System.out.println(countXor(N));\n  }\n}\n", "python": "def countXor(N):\n    cnt = N // 2 + 1\n    return cnt\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    print(countXor(N))\n"}
{"text": "Sum of the first M elements of Array formed by infinitely concatenating given array ", "java": "import java.io.*;\n\nclass GFG {\n  public static int sumOfFirstM(int A[], int N, int M) {\n    int sum = 0;\n    for (int i = 0; i < M; i++) {\n      sum = sum + A[i % N];\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3};\n    int M = 5;\n    int N = arr.length;\n    System.out.println(sumOfFirstM(arr, N, M));\n  }\n}\n", "python": "def sumOfFirstM(A, N, M):\n    sum = 0\n    for i in range(M):\n        sum = sum + A[i % N]\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3]\n    M = 5\n    N = len(arr)\n    print(sumOfFirstM(arr, N, M))\n"}
{"text": "Find array whose elements are XOR of adjacent elements in given array ", "java": "import java.io.*;\n\nclass GFG {\n  static int[] game_with_number(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n      arr[i] = arr[i] ^ arr[i + 1];\n    }\n    return arr;\n  }\n\n  static void print(int arr[], int n) {\n    for (int i = 0; i < n; i++) {\n      System.out.print(arr[i] + \" \u2581 \");\n    }\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {10, 11, 1, 2, 3};\n    int n = arr.length;\n    int[] new_arr = game_with_number(arr, n);\n    print(new_arr, n);\n  }\n}\n", "python": "def game_with_number(arr, n):\n    for i in range(n - 1):\n        arr[i] = arr[i] ^ arr[i + 1]\n    return arr\n\n\ndef printt(arr, n):\n    print(*arr)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [10, 11, 1, 2, 3]\n    n = len(arr)\n    new_arr = game_with_number(arr, n)\n    printt(new_arr, n)\n"}
{"text": "Length of the smallest subarray with maximum possible sum ", "java": "import java.util.*;\n\nclass GFG {\n  static int minimumSizeSubarray(int arr[], int N) {\n    int i = 0, j = N - 1;\n    while (i < N && arr[i] == 0) {\n      i++;\n    }\n    if (i == N) return 1;\n    while (j >= 0 && arr[j] == 0) {\n      j--;\n    }\n    return (j - i + 1);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {0, 2, 0, 0, 12, 0, 0, 0};\n    int N = arr.length;\n    System.out.print(minimumSizeSubarray(arr, N));\n  }\n}\n", "python": "def minimumSizeSubarray(arr, N):\n    i, j = 0, N - 1\n    while i < N and arr[i] == 0:\n        i += 1\n    if i == N:\n        return 1\n    while j >= 0 and arr[j] == 0:\n        j -= 1\n    return j - i + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [0, 2, 0, 0, 12, 0, 0, 0]\n    N = len(arr)\n    print(minimumSizeSubarray(arr, N))\n"}
{"text": "Count ways to represent N as XOR of distinct integers not exceeding N ", "java": "import java.io.*;\n\nclass GFG {\n  static void countXorPartition(int N) {\n    double a = Math.pow(2, (int) (N - Math.log(N + 1) / Math.log(2)));\n    System.out.print(a);\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    countXorPartition(N);\n  }\n}\n", "python": "from math import *\n\n\ndef countXorPartition(N):\n    a = 2 ** floor(N - log(N + 1) / log(2))\n    print(int(a))\n\n\nN = 5\ncountXorPartition(N)\n"}
{"text": "Count numbers less than N whose modulo with A is equal to B ", "java": "public class MyClass {\n  static void countValues(int A, int B, int C) {\n    if (B >= A) {\n      System.out.println(0);\n      return;\n    }\n    if (B == 0) {\n      System.out.println(C / A);\n      return;\n    }\n    int ans = C / A;\n    if (ans * A + B <= C) {\n      ans++;\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String args[]) {\n    int A = 6, B = 3, N = 15;\n    countValues(A, B, N);\n  }\n}\n", "python": "def countValues(A, B, C):\n    if B >= A:\n        print(0)\n        return\n    if B == 0:\n        print(C // A)\n        return\n    ans = C // A\n    if ans * A + B <= C:\n        ans += 1\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = 6\n    B = 3\n    N = 15\n    countValues(A, B, N)\n"}
{"text": "Reduce a number to 1 by performing given operations ", "java": "class GFG {\n  static int highestPowerof2(int n) {\n    int p = (int) (Math.log(n) / Math.log(2));\n    return (int) Math.pow(2, p);\n  }\n\n  static boolean isPowerOfTwo(int n) {\n    if (n == 0) return false;\n    return (int) (Math.ceil((Math.log(n) / Math.log(2))))\n        == (int) (Math.floor(((Math.log(n) / Math.log(2)))));\n  }\n\n  static int reduceToOne(int N) {\n    if (N == 1) {\n      return 0;\n    }\n    if (isPowerOfTwo(N) == true) {\n      return 1 + reduceToOne(N / 2);\n    } else {\n      return 1 + reduceToOne(N - highestPowerof2(N));\n    }\n  }\n\n  public static void main(String[] args) {\n    int N = 7;\n    System.out.println(reduceToOne(N));\n  }\n}\n", "python": "def set_bits(n):\n    count = 0\n    while n:\n        count += n % 2\n        n //= 2\n    return count\n\n\ndef minSteps(n):\n    ans = 0\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        elif n == 3 or set_bits(n - 1) < set_bits(n + 1):\n            n -= 1\n        else:\n            n += 1\n        ans += 1\n    return ans\n\n\nn = 15\nprint(minSteps(n))\n"}
{"text": "Maximum frequency of any array element possible by at most K increments ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static void maxFrequency(int arr[], int N, int K) {\n    Arrays.sort(arr);\n    int start = 0, end = 0;\n    int sum = 0, res = 0;\n    for (end = 0; end < N; end++) {\n      sum += arr[end];\n      while ((end - start + 1) * arr[end] - sum > K) {\n        sum -= arr[start];\n        start++;\n      }\n      res = Math.max(res, end - start + 1);\n    }\n    System.out.println(res);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 4, 8, 13};\n    int N = 4;\n    int K = 5;\n    maxFrequency(arr, N, K);\n  }\n}\n", "python": "def maxFrequency(arr, N, K):\n    arr.sort()\n    start = 0\n    end = 0\n    sum = 0\n    res = 0\n    for end in range(N):\n        sum += arr[end]\n        while (end - start + 1) * arr[end] - sum > K:\n            sum -= arr[start]\n            start += 1\n        res = max(res, end - start + 1)\n    print(res)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 4, 8, 13]\n    N = 4\n    K = 5\n    maxFrequency(arr, N, K)\n"}
{"text": "Check if a number N can be expressed as the sum of powers of X or not ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static boolean ToCheckPowerofX(int n, int x) {\n    while (n > 0) {\n      int rem = n % x;\n      if (rem >= 2) {\n        return false;\n      }\n      n = n / x;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int N = 10, X = 3;\n    if (ToCheckPowerofX(N, X)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "def ToCheckPowerofX(n, x):\n    while n > 0:\n        rem = n % x\n        if rem >= 2:\n            return False\n        n = n // x\n    return True\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 10\n    X = 3\n    if ToCheckPowerofX(N, X):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Sum of Euler Totient Functions obtained for each divisor of N ", "java": "public class GFG {\n  static int sumOfDivisors(int N) {\n    return N;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.println(sumOfDivisors(N));\n  }\n}\n", "python": "def sumOfDivisors(N):\n    return N\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    print(sumOfDivisors(N))\n"}
{"text": "Minimum time required to schedule K processes ", "java": "import java.util.*;\n\nclass GFG {\n  static int minTime(int[] A, int n, int K) {\n    int max_ability = A[0];\n    for (int i = 1; i < n; i++) {\n      max_ability = Math.max(max_ability, A[i]);\n    }\n    int tmp[] = new int[max_ability + 1];\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n      tmp[A[i]]++;\n    }\n    for (int i = max_ability; i >= 0; i--) {\n      if (tmp[i] != 0) {\n        if (tmp[i] * i < K) {\n          K -= (i * tmp[i]);\n          tmp[i / 2] += tmp[i];\n          count += tmp[i];\n          if (K <= 0) {\n            return count;\n          }\n        } else {\n          if (K % i != 0) {\n            count += (K / i) + 1;\n          } else {\n            count += (K / i);\n          }\n          return count;\n        }\n      }\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 1, 7, 2, 4};\n    int N = arr.length;\n    int K = 15;\n    System.out.println(minTime(arr, N, K));\n  }\n}\n", "python": "def executeProcesses(A, N, K):\n    pq = []\n    for i in range(N):\n        pq.append(A[i])\n    ans = 0\n    pq.sort()\n    while len(pq) > 0 and K > 0:\n        top = pq.pop()\n        ans += 1\n        K -= top\n        top //= 2\n        pq.append(top)\n        pq.sort()\n    print(ans)\n\n\nA = [3, 1, 7, 4, 2]\nK = 15\nN = len(A)\nexecuteProcesses(A, N, K)\n"}
{"text": "Minimum length of a rod that can be split into N equal parts that can further be split into given number of equal parts ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n  }\n\n  static int findlcm(int arr[], int n) {\n    int ans = arr[0];\n    for (int i = 1; i < n; i++) {\n      ans = (((arr[i] * ans)) / (gcd(arr[i], ans)));\n    }\n    return ans;\n  }\n\n  static void minimumRod(int A[], int N) {\n    System.out.println(N * findlcm(A, N));\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2};\n    int N = arr.length;\n    minimumRod(arr, N);\n  }\n}\n", "python": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef findlcm(arr, n):\n    ans = arr[0]\n    for i in range(n):\n        ans = ((arr[i] * ans)) / (gcd(arr[i], ans))\n    return ans\n\n\ndef minimumRod(A, N):\n    print(int(N * findlcm(A, N)))\n\n\narr = [1, 2]\nN = len(arr)\nminimumRod(arr, N)\n"}
{"text": "Check if N can be represented as sum of positive integers containing digit D at least once ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean findDigit(int N, int D) {\n    while (N > 0) {\n      int a = N % 10;\n      if (a == D) {\n        return true;\n      }\n      N /= 10;\n    }\n    return false;\n  }\n\n  static boolean check(int N, int D) {\n    while (N > 0) {\n      if (findDigit(N, D) == true) {\n        return true;\n      }\n      N -= D;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int N = 24;\n    int D = 7;\n    if (check(N, D)) {\n      System.out.print(\" Yes \");\n    } else {\n      System.out.print(\" No \");\n    }\n  }\n}\n", "python": "def findDigit(N, D):\n    while N > 0:\n        a = N % 10\n        if a == D:\n            return True\n        N /= 10\n    return False\n\n\ndef check(N, D):\n    while N > 0:\n        if findDigit(N, D) == True:\n            return True\n        N -= D\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 24\n    D = 7\n    if check(N, D):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Number of relations that are neither Reflexive nor Irreflexive on a Set ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int mod = 1000000007;\n\n  static int power(int x, int y) {\n    int res = 1;\n    x = x % mod;\n    if (x == 0) return 0;\n    while (y > 0) {\n      if ((y & 1) != 0) res = (res * x) % mod;\n      y = y >> 1;\n      x = (x * x) % mod;\n    }\n    return res;\n  }\n\n  static void countRelations(int N) {\n    System.out.print((power(2, N) - 2) * power(2, N * N - N));\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    countRelations(N);\n  }\n}\n", "python": "mod = 1000000007\n\n\ndef power(x, y):\n    res = 1\n    x = x % mod\n    if x == 0:\n        return 0\n    while y > 0:\n        if y % 2 == 1:\n            res = (res * x) % mod\n        y = y >> 1\n        x = (x * x) % mod\n    return res\n\n\ndef countRelations(N):\n    print((power(2, N) - 2) * power(2, N * N - N))\n\n\nN = 2\ncountRelations(N)\n"}
{"text": "Minimum operations required to make all elements in an array of first N odd numbers equal ", "java": "class GFG {\n  public static int minOperations(int N) {\n    int[] arr = new int[N];\n    int sum = 0;\n    for (int i = 0; i < N; i++) {\n      arr[i] = (2 * i) + 1;\n      sum = sum + arr[i];\n    }\n    int mid = 0;\n    if (N % 2 == 0) {\n      mid = sum / N;\n    } else {\n      mid = arr[N / 2];\n    }\n    int ans = 0;\n    for (int i = 0; i < N / 2; i++) {\n      ans += mid - arr[i];\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 6;\n    System.out.println(minOperations(N));\n  }\n}\n", "python": "def minOperations(N):\n    arr = [0] * N\n    sum = 0\n    for i in range(N):\n        arr[i] = (2 * i) + 1\n        sum = sum + arr[i]\n    mid = 0\n    if N % 2 == 0:\n        mid = sum / N\n    else:\n        mid = arr[int(N / 2)]\n    ans = 0\n    for i in range(int(N / 2)):\n        ans += mid - arr[i]\n    return int(ans)\n\n\nN = 6\nprint(minOperations(N))\n"}
{"text": "Minimum operations required to make all elements in an array of first N odd numbers equal ", "java": "class GFG {\n  public static int minOperation(int N) {\n    if (N % 2 == 0) {\n      return (N / 2) * (N / 2);\n    }\n    int k = (N - 1) / 2;\n    return k * (k + 1);\n  }\n\n  public static void main(String[] args) {\n    int N = 6;\n    System.out.println(minOperation(N));\n  }\n}\n", "python": "def minOperations(N):\n    arr = [0] * N\n    sum = 0\n    for i in range(N):\n        arr[i] = (2 * i) + 1\n        sum = sum + arr[i]\n    mid = 0\n    if N % 2 == 0:\n        mid = sum / N\n    else:\n        mid = arr[int(N / 2)]\n    ans = 0\n    for i in range(int(N / 2)):\n        ans += mid - arr[i]\n    return int(ans)\n\n\nN = 6\nprint(minOperations(N))\n"}
{"text": "Difference between ceil of array sum divided by K and sum of ceil of array elements divided by K ", "java": "public class GFG {\n  static int ceilDifference(int arr[], int n, int x) {\n    int totalSum = 0;\n    int perElementSum = 0;\n    for (int i = 0; i < n; i++) {\n      totalSum += arr[i];\n      perElementSum += Math.ceil((double) (arr[i]) / (double) (x));\n    }\n    int totalCeilSum = (int) Math.ceil((double) (totalSum) / (double) (x));\n    return Math.abs(perElementSum - totalCeilSum);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 5, 6};\n    int K = 4;\n    int N = arr.length;\n    System.out.println(ceilDifference(arr, N, K));\n  }\n}\n", "python": "from math import ceil\n\n\ndef ceilDifference(arr, n, x):\n    totalSum = 0\n    perElementSum = 0\n    for i in range(n):\n        totalSum += arr[i]\n        perElementSum += ceil(arr[i] / x)\n    totalCeilSum = ceil(totalSum / x)\n    return abs(perElementSum - totalCeilSum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4, 5, 6]\n    K = 4\n    N = len(arr)\n    print(ceilDifference(arr, N, K))\n"}
{"text": "Sum of an Infinite Geometric Progression ( GP ) ", "java": "import java.util.*;\n\nclass GFG {\n  static void findSumOfGP(double a, double r) {\n    if (Math.abs(r) >= 1) {\n      System.out.print(\" Infinite \");\n      return;\n    }\n    double sum = a / (1 - r);\n    System.out.print(sum);\n  }\n\n  public static void main(String[] args) {\n    double A = 1, R = 0.5;\n    findSumOfGP(A, R);\n  }\n}\n", "python": "def findSumOfGP(a, r):\n    if abs(r) >= 1:\n        print(\" Infinite \")\n        return\n    sum = a / (1 - r)\n    print(int(sum))\n\n\nif __name__ == \" _ _ main _ _ \":\n    A, R = 1, 0.5\n    findSumOfGP(A, R)\n"}
{"text": "Number of Relations that are both Irreflexive and Antisymmetric on a Set ", "java": "import java.util.*;\n\nclass GFG {\n  static int mod = 1000000007;\n\n  static int power(long x, int y) {\n    int res = 1;\n    x = x % mod;\n    while (y > 0) {\n      if (y % 2 == 1) res = (int) (res * x) % mod;\n      y = y >> 1;\n      x = (x * x) % mod;\n    }\n    return res;\n  }\n\n  static int numberOfRelations(int N) {\n    return power(3, (N * N - N) / 2);\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    System.out.print(numberOfRelations(N));\n  }\n}\n", "python": "mod = 1000000007\n\n\ndef power(x, y):\n    res = 1\n    x = x % mod\n    while y > 0:\n        if y & 1:\n            res = (res * x) % mod\n        y = y >> 1\n        x = (x * x) % mod\n    return res\n\n\ndef numberOfRelations(N):\n    return power(3, (N * N - N) // 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    print(numberOfRelations(N))\n"}
{"text": "Maximum sum of pairs that are at least K distance apart in an array ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static int getMaxPairSum(int[] arr, int N, int K) {\n    int[] preMax = new int[N];\n    preMax[0] = arr[0];\n    for (int i = 1; i < N; i++) {\n      preMax[i] = Math.max(preMax[i - 1], arr[i]);\n    }\n    int res = Integer.MIN_VALUE;\n    for (int i = K; i < N; i++) {\n      res = Math.max(res, arr[i] + preMax[i - K]);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 4, 8, 6, 3};\n    int K = 3;\n    int N = arr.length;\n    System.out.print(getMaxPairSum(arr, N, K));\n  }\n}\n", "python": "def getMaxPairSum(arr, N, K):\n    preMax = [0] * N\n    preMax[0] = arr[0]\n    for i in range(1, N):\n        preMax[i] = max(preMax[i - 1], arr[i])\n    res = -(10 ** 8)\n    for i in range(K, N):\n        res = max(res, arr[i] + preMax[i - K])\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 4, 8, 6, 3]\n    K = 3\n    N = len(arr)\n    print(getMaxPairSum(arr, N, K))\n"}
{"text": "Program to calculate sum of an Infinite Arithmetic ", "java": "class GFG {\n  static void sumOfInfiniteAGP(double a, double d, double r) {\n    double ans = a / (1 - r) + (d * r) / (1 - r * r);\n    System.out.print(ans);\n  }\n\n  public static void main(String[] args) {\n    double a = 0, d = 1, r = 0.5;\n    sumOfInfiniteAGP(a, d, r);\n  }\n}\n", "python": "def sumOfInfiniteAGP(a, d, r):\n    ans = a / (1 - r) + (d * r) / (1 - r * r)\n    print(round(ans, 6))\n\n\nif __name__ == \" _ _ main _ _ \":\n    a, d, r = 0, 1, 0.5\n    sumOfInfiniteAGP(a, d, r)\n"}
{"text": "Product of count of set bits present in binary representations of elements in an array ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static int countbits(int n) {\n    int count = 0;\n    while (n != 0) {\n      if ((n & 1) != 0) count++;\n      n = n / 2;\n    }\n    return count;\n  }\n\n  static int BitProduct(int arr[], int N) {\n    int product = 1;\n    for (int i = 0; i < N; i++) {\n      int bits = countbits(arr[i]);\n      product *= bits;\n    }\n    return product;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 2, 4, 1, 5};\n    int N = arr.length;\n    System.out.print(BitProduct(arr, N));\n  }\n}\n", "python": "def countbits(n):\n    count = 0\n    while n != 0:\n        if n & 1:\n            count += 1\n        n = n // 2\n    return count\n\n\ndef BitProduct(arr, N):\n    product = 1\n    for i in range(N):\n        bits = countbits(arr[i])\n        product *= bits\n    return product\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 2, 4, 1, 5]\n    N = len(arr)\n    print(BitProduct(arr, N))\n"}
{"text": "Array element with minimum sum of absolute differences ", "java": "import java.io.*;\n\nclass GFG {\n  static void minimumDiff(int[] arr, int N) {\n    int res = arr[0], sum = 0;\n    for (int i = 0; i < N; i++) sum += arr[i];\n    int min_diff = sum;\n    for (int i = 0; i < N; i++) {\n      if (Math.abs(sum - (arr[i] * N)) < min_diff) {\n        min_diff = Math.abs(sum - (arr[i] * N));\n        res = arr[i];\n      }\n    }\n    System.out.println(res);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 5};\n    int N = arr.length;\n    minimumDiff(arr, N);\n  }\n}\n", "python": "def minSum(arr, n):\n    arr.sort()\n    x = arr[n // 2]\n    sum = 0\n    for i in range(n):\n        sum += abs(arr[i] - x)\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 3, 9, 3, 6]\n    n = len(arr)\n    print(minSum(arr, n))\n"}
{"text": "Minimize maximum difference between adjacent elements possible by removing a single array element ", "java": "import java.util.*;\n\nclass GFG {\n  static int maxAdjacentDifference(ArrayList<Integer> A) {\n    int diff = 0;\n    for (int i = 1; i < (int) A.size(); i++) {\n      diff = Math.max(diff, A.get(i) - A.get(i - 1));\n    }\n    return diff;\n  }\n\n  static int MinimumValue(int arr[], int N) {\n    int MinValue = Integer.MAX_VALUE;\n    for (int i = 0; i < N; i++) {\n      ArrayList<Integer> new_arr = new ArrayList<>();\n      for (int j = 0; j < N; j++) {\n        if (i == j) continue;\n        new_arr.add(arr[j]);\n      }\n      MinValue = Math.min(MinValue, maxAdjacentDifference(new_arr));\n    }\n    return MinValue;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 3, 7, 8};\n    int N = arr.length;\n    System.out.print(MinimumValue(arr, N));\n  }\n}\n", "python": "import sys\n\n\ndef maxAdjacentDifference(A):\n    diff = 0\n    for i in range(1, len(A), 1):\n        diff = max(diff, A[i] - A[i - 1])\n    return diff\n\n\ndef MinimumValue(arr, N):\n    MinValue = sys.maxsize\n    for i in range(N):\n        new_arr = []\n        for j in range(N):\n            if i == j:\n                continue\n            new_arr.append(arr[j])\n        MinValue = min(MinValue, maxAdjacentDifference(new_arr))\n    return MinValue\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 3, 7, 8]\n    N = len(arr)\n    print(MinimumValue(arr, N))\n"}
{"text": "Number of Antisymmetric Relations on a set of N elements ", "java": "import java.util.*;\n\nclass GFG {\n  static int mod = 1000000007;\n\n  static int power(int x, int y) {\n    int res = 1;\n    x = x % mod;\n    while (y > 0) {\n      if ((y & 1) != 0) res = (res * x) % mod;\n      y = y >> 1;\n      x = (x * x) % mod;\n    }\n    return res;\n  }\n\n  static int antisymmetricRelation(int N) {\n    return (power(2, N) * power(3, (N * N - N) / 2)) % mod;\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    System.out.print(antisymmetricRelation(N));\n  }\n}\n", "python": "mod = 1000000007\n\n\ndef power(x, y):\n    res = 1\n    x = x % mod\n    while y > 0:\n        if y & 1:\n            res = (res * x) % mod\n        y = y >> 1\n        x = (x * x) % mod\n    return res\n\n\ndef antisymmetricRelation(N):\n    return (power(2, N) * power(3, (N * N - N) // 2)) % mod\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    print(antisymmetricRelation(N))\n"}
{"text": "Number of Asymmetric Relations on a set of N elements ", "java": "import java.io.*;\n\nclass GFG {\n  static final int mod = 1000000007;\n\n  public static int power(int x, int y) {\n    int res = 1;\n    x = x % mod;\n    if (x == 0) return 0;\n    while (y > 0) {\n      if (y % 2 == 1) res = (res * x) % mod;\n      y = y >> 1;\n      x = (x * x) % mod;\n    }\n    return res;\n  }\n\n  public static int asymmetricRelation(int N) {\n    return power(3, (N * N - N) / 2);\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    System.out.print(asymmetricRelation(N));\n  }\n}\n", "python": "mod = 1000000007\n\n\ndef power(x, y):\n    res = 1\n    x = x % mod\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1:\n            res = (res * x) % mod\n        y = y >> 1\n        x = (x * x) % mod\n    return res\n\n\ndef asymmetricRelation(N):\n    return power(3, (N * N - N) // 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    print(asymmetricRelation(N))\n"}
{"text": "Program to calculate Kinetic Energy and Potential Energy ", "java": "class GFG {\n  static double kineticEnergy(double M, double V) {\n    double KineticEnergy;\n    KineticEnergy = 0.5 * M * V * V;\n    return KineticEnergy;\n  }\n\n  static double potentialEnergy(double M, double H) {\n    double PotentialEnergy;\n    PotentialEnergy = M * 9.8 * H;\n    return PotentialEnergy;\n  }\n\n  public static void main(String[] args) {\n    double M = 5.5, H = 23.5, V = 10.5;\n    System.out.println(\" Kinetic \u2581 Energy \u2581 = \u2581 \" + kineticEnergy(M, V));\n    System.out.println(\" Potential \u2581 Energy \u2581 = \u2581 \" + potentialEnergy(M, H));\n  }\n}\n", "python": "def kineticEnergy(M, V):\n    KineticEnergy = 0.5 * M * V * V\n    return KineticEnergy\n\n\ndef potentialEnergy(M, H):\n    PotentialEnergy = M * 9.8 * H\n    return PotentialEnergy\n\n\nif __name__ == \" _ _ main _ _ \":\n    M = 5.5\n    H = 23.5\n    V = 10.5\n    print(\" Kinetic \u2581 Energy \u2581 = \u2581 \", kineticEnergy(M, V))\n    print(\" Potential \u2581 Energy \u2581 = \u2581 \", potentialEnergy(M, H))\n"}
{"text": "Sum of squares of differences between all pairs of an array ", "java": "class GFG {\n  static void sumOfSquaredDifferences(int arr[], int N) {\n    int ans = 0;\n    int sumA = 0, sumB = 0;\n    for (int i = 0; i < N; i++) {\n      sumA += (arr[i] * arr[i]);\n      sumB += arr[i];\n    }\n    sumA = N * sumA;\n    sumB = (sumB * sumB);\n    ans = sumA - sumB;\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 8, 4};\n    int N = arr.length;\n    sumOfSquaredDifferences(arr, N);\n  }\n}\n", "python": "def sumOfSquaredDifferences(arr, N):\n    ans = 0\n    sumA, sumB = 0, 0\n    for i in range(N):\n        sumA += arr[i] * arr[i]\n        sumB += arr[i]\n    sumA = N * sumA\n    sumB = sumB * sumB\n    ans = sumA - sumB\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 8, 4]\n    N = len(arr)\n    sumOfSquaredDifferences(arr, N)\n"}
{"text": "Count ways to remove objects such that exactly M equidistant objects remain ", "java": "import java.io.*;\n\nclass GFG {\n  static void waysToRemove(int n, int m) {\n    int ans = 0;\n    if (m == 1) {\n      System.out.println(n);\n      return;\n    }\n    for (int d = 0; d >= 0; d++) {\n      int len = m + (m - 1) * d;\n      if (len > n) break;\n      ans += (n - len) + 1;\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int N = 5, M = 3;\n    waysToRemove(N, M);\n  }\n}\n", "python": "def waysToRemove(n, m):\n    ans = 0\n    if m == 1:\n        print(n)\n        return\n    d = 0\n    while d >= 0:\n        length = m + (m - 1) * d\n        if length > n:\n            break\n        ans += (n - length) + 1\n        d += 1\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    M = 3\n    waysToRemove(N, M)\n"}
{"text": "Minimize divisions by 2 , 3 , or 5 required to make two given integers equal ", "java": "import java.util.*;\n\nclass GFG {\n  static int gcd(int a, int b) {\n    if (b == 0) {\n      return a;\n    }\n    return gcd(b, a % b);\n  }\n\n  static void minimumOperations(int X, int Y) {\n    int GCD = gcd(X, Y);\n    X = X / GCD;\n    Y = Y / GCD;\n    int count = 0;\n    while (X != Y) {\n      if (Y > X) {\n        int t = X;\n        X = Y;\n        Y = t;\n      }\n      if (X % 2 == 0) {\n        X = X / 2;\n      } else if (X % 3 == 0) {\n        X = X / 3;\n      } else if (X % 5 == 0) {\n        X = X / 5;\n      } else {\n        System.out.print(\" - 1\");\n        return;\n      }\n      count += 1;\n    }\n    System.out.println(count);\n  }\n\n  public static void main(String args[]) {\n    int X = 15, Y = 20;\n    minimumOperations(X, Y);\n  }\n}\n", "python": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef minimumOperations(X, Y):\n    GCD = gcd(X, Y)\n    X = X // GCD\n    Y = Y // GCD\n    count = 0\n    while X != Y:\n        if Y > X:\n            X, Y = Y, X\n        if X % 2 == 0:\n            X = X // 2\n        elif X % 3 == 0:\n            X = X // 3\n        elif X % 5 == 0:\n            X = X // 5\n        else:\n            print(\" - 1\")\n            return\n        count += 1\n    print(count)\n\n\nif __name__ == \" _ _ main _ _ \":\n    X, Y = 15, 20\n    minimumOperations(X, Y)\n"}
{"text": "Minimum increments or decrements required to convert a sorted array into a power sequence ", "java": "class GFG {\n  static int minOperations(int a[], int n) {\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n      ans += a[i];\n    }\n    ans -= n;\n    for (int x = 1; ; x++) {\n      int curPow = 1, curCost = 0;\n      for (int i = 0; i < n; i++) {\n        curCost += Math.abs(a[i] - curPow);\n        curPow *= x;\n      }\n      if (curPow / x > ans + a[n - 1]) break;\n      ans = Math.min(ans, curCost);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 5, 7};\n    int N = arr.length;\n    System.out.print(minOperations(arr, N));\n  }\n}\n", "python": "def minOperations(a, n):\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n    ans -= n\n    x = 1\n    while 1:\n        curPow = 1\n        curCost = 0\n        for i in range(n):\n            curCost += abs(a[i] - curPow)\n            curPow *= x\n        if curPow / x > ans + a[n - 1]:\n            break\n        ans = min(ans, curCost)\n        x += 1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 5, 7]\n    N = len(arr)\n    print(minOperations(arr, N))\n"}
{"text": "Modulo Operations in Programming With Negative Results ", "java": "public class GFG {\n  static int floorMod(int a, int n) {\n    int q = (int) Math.floor((double) a / n);\n    return a - n * q;\n  }\n\n  public static void main(String[] args) {\n    int a, b;\n    a = 9;\n    b = 4;\n    System.out.println(a + \" \u2581 % \u2581 \" + b + \" \u2581 = \u2581 \" + floorMod(a, b));\n    a = -9;\n    b = 4;\n    System.out.println(a + \" \u2581 % \u2581 \" + b + \" \u2581 = \u2581 \" + floorMod(a, b));\n    a = 9;\n    b = -4;\n    System.out.println(a + \" \u2581 % \u2581 \" + b + \" \u2581 = \u2581 \" + floorMod(a, b));\n    a = -9;\n    b = -4;\n    System.out.println(a + \" \u2581 % \u2581 \" + b + \" \u2581 = \u2581 \" + floorMod(a, b));\n  }\n}\n", "python": "def truncMod(a, n):\n    q = a // n\n    return a - n * q\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 9\n    b = 4\n    print(a, \" % \", b, \" = \", truncMod(a, b))\n    a = -9\n    b = 4\n    print(a, \" % \", b, \" = \", truncMod(a, b))\n    a = 9\n    b = -4\n    print(a, \" % \", b, \" = \", truncMod(a, b))\n    a = -9\n    b = -4\n    print(a, \" % \", b, \" = \", truncMod(a, b))\n"}
{"text": "Count of subtrees possible from an N ", "java": "import java.util.*;\n\nclass GFG {\n  static int MAX = 300004;\n  static ArrayList<ArrayList<Integer>> graph;\n  static long mod = (long) 1e9 + 7;\n  static int ans = 0;\n\n  static int countSubtreesUtil(int cur, int par) {\n    int res = 1;\n    for (int i = 0; i < graph.get(cur).size(); i++) {\n      int v = graph.get(cur).get(i);\n      if (v == par) continue;\n      res = (int) ((res * (countSubtreesUtil(v, cur) + 1)) % mod);\n    }\n    ans = (int) ((ans + res) % mod);\n    return res;\n  }\n\n  static void countSubtrees(int N, int[][] adj) {\n    for (int i = 0; i < N - 1; i++) {\n      int a = adj[i][0];\n      int b = adj[i][1];\n      graph.get(a).add(b);\n      graph.get(b).add(a);\n    }\n    countSubtreesUtil(1, 1);\n    System.out.println(ans + 1);\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    int[][] adj = {{0, 1}, {1, 2}};\n    graph = new ArrayList<>();\n    for (int i = 0; i < MAX; i++) graph.add(new ArrayList<>());\n    countSubtrees(N, adj);\n  }\n}\n", "python": "MAX = 300004\ngraph = [[] for i in range(MAX)]\nmod = 10 ** 9 + 7\nans = 0\n\n\ndef countSubtreesUtil(cur, par):\n    global mod, ans\n    res = 1\n    for i in range(len(graph[cur])):\n        v = graph[cur][i]\n        if v == par:\n            continue\n        res = (res * (countSubtreesUtil(v, cur) + 1)) % mod\n    ans = (ans + res) % mod\n    return res\n\n\ndef countSubtrees(N, adj):\n    for i in range(N - 1):\n        a = adj[i][0]\n        b = adj[i][1]\n        graph[a].append(b)\n        graph[b].append(a)\n    countSubtreesUtil(1, 1)\n    print(ans + 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    adj = [[0, 1], [1, 2]]\n    countSubtrees(N, adj)\n"}
{"text": "Place N boys and M girls in different rows such that count of persons placed in each row is maximized ", "java": "import java.util.*;\n\nclass GFG {\n  static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n  }\n\n  static int maximumRowValue(int n, int m) {\n    return gcd(n, m);\n  }\n\n  public static void main(String args[]) {\n    int N = 4;\n    int M = 2;\n    System.out.print(maximumRowValue(N, M));\n  }\n}\n", "python": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef maximumRowValue(n, m):\n    return gcd(n, m)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    M = 2\n    print(maximumRowValue(N, M))\n"}
{"text": "Sum of quotients of division of N by powers of K not exceeding N ", "java": "import java.util.*;\n\nclass GFG {\n  static void findSum(int N, int K) {\n    int ans = 0;\n    int i = 1;\n    while (i <= N) {\n      ans += N / i;\n      i = i * K;\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int N = 10, K = 2;\n    findSum(N, K);\n  }\n}\n", "python": "def findSum(N, K):\n    ans = 0\n    i = 1\n    while i <= N:\n        ans += N // i\n        i = i * K\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N, K = 10, 2\n    findSum(N, K)\n"}
{"text": "Number of Irreflexive Relations on a Set ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int mod = 1000000007;\n\n  static int power(int x, int y) {\n    int res = 1;\n    x = x % mod;\n    if (x == 0) return 0;\n    while (y > 0) {\n      if ((y & 1) != 0) res = (res * x) % mod;\n      y = y >> 1;\n      x = (x * x) % mod;\n    }\n    return res;\n  }\n\n  static int irreflexiveRelation(int N) {\n    return power(2, N * N - N);\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    System.out.println(irreflexiveRelation(N));\n  }\n}\n", "python": "mod = 1000000007\n\n\ndef power(x, y):\n    global mod\n    res = 1\n    x = x % mod\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1:\n            res = (res * x) % mod\n        y = y >> 1\n        x = (x * x) % mod\n    return res\n\n\ndef irreflexiveRelation(N):\n    return power(2, N * N - N)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    print(irreflexiveRelation(N))\n"}
{"text": "Check if a given number N has at least one odd divisor not exceeding N ", "java": "import java.io.*;\n\nclass GFG {\n  public static String oddDivisor(int N) {\n    int X = N;\n    while (N % 2 == 0) {\n      N /= 2;\n    }\n    for (int i = 3; i * i <= X; i += 2) {\n      if (N % i == 0) {\n        return \" Yes \";\n      }\n    }\n    if (N != X) {\n      return \" Yes \";\n    }\n    return \" No \";\n  }\n\n  public static void main(String[] args) {\n    int N = 10;\n    System.out.println(oddDivisor(N));\n  }\n}\n", "python": "def oddDivisor(N):\n    X = N\n    while N % 2 == 0:\n        N //= 2\n    i = 3\n    while i * i <= X:\n        if N % i == 0:\n            return \" Yes \"\n        i += 2\n    if N != X:\n        return \" Yes \"\n    return \" No \"\n\n\nN = 10\nprint(oddDivisor(N))\n"}
{"text": "Replace all array elements with the nearest power of its previous element ", "java": "import java.util.*;\n\nclass GFG {\n  static int LOG(int a, int b) {\n    return (int) (Math.log(a) / Math.log(b));\n  }\n\n  static void repbyNP(int[] arr, int n) {\n    int x = arr[n - 1];\n    for (int i = 0; i < n; i++) {\n      int k = LOG(arr[i], x);\n      int temp = arr[i];\n      if (Math.abs(Math.pow(x, k) - arr[i]) < Math.abs(Math.pow(x, k + 1) - arr[i]))\n        arr[i] = (int) Math.pow(x, k);\n      else arr[i] = (int) Math.pow(x, k + 1);\n      x = temp;\n    }\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 4, 6, 3, 11};\n    int n = arr.length;\n    repbyNP(arr, n);\n    for (int i = 0; i < n; i++) System.out.print(arr[i] + \" \u2581 \");\n  }\n}\n", "python": "import math\n\n\ndef LOG(x, base):\n    return int(math.log(x) / math.log(base))\n\n\ndef repbyNP(arr):\n    x = arr[-1]\n    for i in range(len(arr)):\n        k = LOG(arr[i], x)\n        temp = arr[i]\n        if abs(x ** k - arr[i]) < abs(x ** (k + 1) - arr[i]):\n            arr[i] = x ** k\n        else:\n            arr[i] = x ** (k + 1)\n        x = temp\n    return arr\n\n\narr = [2, 4, 6, 3, 11]\nprint(repbyNP(arr))\n"}
{"text": "Remaining array element after repeated removal of last element and subtraction of each element from next adjacent element ", "java": "import java.io.*;\n\nclass GFG {\n  public static int lastElement(int arr[], int n) {\n    int sum = 0;\n    int multiplier = n % 2 == 0 ? -1 : 1;\n    for (int i = 0; i < n; i++) {\n      sum += arr[i] * multiplier;\n      multiplier = multiplier * (n - 1 - i) / (i + 1) * (-1);\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 4, 2, 1};\n    int N = 4;\n    System.out.println(lastElement(arr, N));\n  }\n}\n", "python": "def lastElement(arr, n):\n    sum = 0\n    if n % 2 == 0:\n        multiplier = -1\n    else:\n        multiplier = 1\n    for i in range(n):\n        sum += arr[i] * multiplier\n        multiplier = multiplier * (n - 1 - i) / (i + 1) * (-1)\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 4, 2, 1]\n    N = len(arr)\n    print(int(lastElement(arr, N)))\n"}
{"text": "Maximize count of pairs whose Bitwise AND exceeds Bitwise XOR by replacing such pairs with their Bitwise AND ", "java": "import java.util.*;\n\nclass GFG {\n  static int countPairs(int[] arr, int N) {\n    HashMap<Integer, Integer> freq = new HashMap<Integer, Integer>();\n    for (int i = 0; i < N; i++) {\n      if (freq.containsKey((int) (Math.log(arr[i]))))\n        freq.put((int) (Math.log(arr[i])), (int) (Math.log(arr[i])) + 1);\n      else freq.put((int) (Math.log(arr[i])), 1);\n    }\n    int pairs = 0;\n    for (Map.Entry<Integer, Integer> item : freq.entrySet()) {\n      pairs += item.getValue() - 1;\n    }\n    return pairs;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {12, 9, 15, 7};\n    int N = arr.length;\n    System.out.println(countPairs(arr, N));\n  }\n}\n", "python": "from math import log2\n\n\ndef countPairs(arr, N):\n    freq = {}\n    for i in range(N):\n        x = int(log2(arr[i]))\n        freq[x] = freq.get(x, 0) + 1\n    pairs = 0\n    for i in freq:\n        pairs += freq[i] - 1\n    return pairs\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [12, 9, 15, 7]\n    N = len(arr)\n    print(countPairs(arr, N))\n"}
{"text": "Minimize difference between two sequences obtained by splitting first N powers of 2 ", "java": "import java.util.*;\n\nclass GFG {\n  static void minimumDifference(int N) {\n    int sum1 = (1 << N), sum2 = 0;\n    for (int i = 1; i < N / 2; i++) sum1 += (1 << i);\n    for (int i = N / 2; i < N; i++) sum2 += (1 << i);\n    System.out.println(sum1 - sum2);\n  }\n\n  public static void main(String args[]) {\n    int N = 4;\n    minimumDifference(N);\n  }\n}\n", "python": "def minimumDifference(N):\n    sum1 = 1 << N\n    sum2 = 0\n    for i in range(1, N // 2):\n        sum1 += 1 << i\n    for i in range(N // 2, N):\n        sum2 += 1 << i\n    print(sum1 - sum2)\n\n\nN = 4\nminimumDifference(N)\n"}
{"text": "Recursive Program to print multiplication table of a number ", "java": "class GFG {\n  static void mul_table(int N, int i) {\n    if (i > 10) return;\n    System.out.println(N + \" \u2581 * \u2581 \" + i + \" \u2581 = \u2581 \" + N * i);\n    mul_table(N, i + 1);\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    mul_table(N, 1);\n  }\n}\n", "python": "def mul_table(N, i):\n    if i > 10:\n        return\n    print(N, \" * \", i, \" = \", N * i)\n    return mul_table(N, i + 1)\n\n\nN = 8\nmul_table(N, 1)\n"}
{"text": "Program to compute log a to any base b ( logb a ) ", "java": "class GFG {\n  static int log_a_to_base_b(int a, int b) {\n    return (int) (Math.log(a) / Math.log(b));\n  }\n\n  public static void main(String[] args) {\n    int a = 3;\n    int b = 2;\n    System.out.println(log_a_to_base_b(a, b));\n    a = 256;\n    b = 4;\n    System.out.println(log_a_to_base_b(a, b));\n  }\n}\n", "python": "from math import log\n\n\ndef log_a_to_base_b(a, b):\n    return log(a) // log(b)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 3\n    b = 2\n    print(log_a_to_base_b(a, b))\n    a = 256\n    b = 4\n    print(log_a_to_base_b(a, b))\n"}
{"text": "Program to compute log a to any base b ( logb a ) ", "java": "class GFG {\n  static int log_a_to_base_b(int a, int b) {\n    int rslt = (a > b - 1) ? 1 + log_a_to_base_b(a / b, b) : 0;\n    return rslt;\n  }\n\n  public static void main(String[] args) {\n    int a = 3;\n    int b = 2;\n    System.out.println(log_a_to_base_b(a, b));\n    a = 256;\n    b = 4;\n    System.out.println(log_a_to_base_b(a, b));\n  }\n}\n", "python": "from math import log\n\n\ndef log_a_to_base_b(a, b):\n    return log(a) // log(b)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 3\n    b = 2\n    print(log_a_to_base_b(a, b))\n    a = 256\n    b = 4\n    print(log_a_to_base_b(a, b))\n"}
{"text": "Highest and Smallest power of K less than and greater than equal to N respectively ", "java": "import java.io.*;\n\nclass GFG {\n  static int prevPowerofK(int n, int k) {\n    int p = (int) (Math.log(n) / Math.log(k));\n    return (int) Math.pow(k, p);\n  }\n\n  static int nextPowerOfK(int n, int k) {\n    return prevPowerofK(n, k) * k;\n  }\n\n  static void printResult(int n, int k) {\n    System.out.println(prevPowerofK(n, k) + \" \u2581 \" + nextPowerOfK(n, k));\n  }\n\n  public static void main(String args[]) {\n    int n = 25, k = 3;\n    printResult(n, k);\n  }\n}\n", "python": "import math\n\n\ndef prevPowerofK(n, k):\n    p = int(math.log(n) / math.log(k))\n    return int(math.pow(k, p))\n\n\ndef nextPowerOfK(n, k):\n    return prevPowerofK(n, k) * k\n\n\ndef printResult(n, k):\n    print(prevPowerofK(n, k), nextPowerOfK(n, k))\n\n\nn = 6\nk = 3\nprintResult(n, k)\n"}
{"text": "Maximize value of ( a + b ) such that ( a * a ", "java": "class GFG {\n  static int maxValue(int n) {\n    return n;\n  }\n\n  public static void main(String[] args) {\n    int n = 1;\n    System.out.print(maxValue(n));\n  }\n}\n", "python": "def maxValue(n):\n    return n\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 1\n    print(maxValue(n))\n"}
{"text": "Maximum number of edges that N ", "java": "class GFG {\n  public static int solve(int n) {\n    int ans = (n * n / 4);\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int n = 10;\n    System.out.println(solve(n));\n  }\n}\n", "python": "def solve(n):\n    ans = n * n // 4\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    print(solve(n))\n"}
{"text": "Find Maximum and Minimum of two numbers using Absolute function ", "java": "class GFG {\n  static int maximum(int x, int y) {\n    return ((x + y + Math.abs(x - y)) / 2);\n  }\n\n  static int minimum(int x, int y) {\n    return ((x + y - Math.abs(x - y)) / 2);\n  }\n\n  public static void main(String[] args) {\n    int x = 99, y = 18;\n    System.out.println(\" Maximum : \u2581 \" + maximum(x, y));\n    System.out.println(\" Minimum : \u2581 \" + minimum(x, y));\n  }\n}\n", "python": "def maximum(x, y):\n    return (x + y + abs(x - y)) // 2\n\n\ndef minimum(x, y):\n    return (x + y - abs(x - y)) // 2\n\n\nx = 99\ny = 18\nprint(\" Maximum : \", maximum(x, y))\nprint(\" Minimum : \", minimum(x, y))\n"}
{"text": "Given a number N in decimal base , find the sum of digits in any base B ", "java": "class GFG {\n  static int sumOfDigit(int n, int b) {\n    int unitDigit, sum = 0;\n    while (n > 0) {\n      unitDigit = n % b;\n      sum += unitDigit;\n      n = n / b;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 50;\n    int b = 2;\n    System.out.print(sumOfDigit(n, b));\n  }\n}\n", "python": "def sumOfDigit(n, b):\n    unitDigit = 0\n    sum = 0\n    while n > 0:\n        unitDigit = n % b\n        sum += unitDigit\n        n = n // b\n    return sum\n\n\nn = 50\nb = 2\nprint(sumOfDigit(n, b))\n"}
{"text": "Find the Nth digit from right in base B of the given number in Decimal base ", "java": "import java.util.*;\n\nclass GFG {\n  static int nthDigit(int a, int n, int b) {\n    for (int i = 1; i < n; i++) a = a / b;\n    return a % b;\n  }\n\n  public static void main(String[] args) {\n    int a = 100;\n    int n = 3;\n    int b = 4;\n    System.out.print(nthDigit(a, n, b));\n  }\n}\n", "python": "def nthDigit(a, n, b):\n    for i in range(1, n):\n        a = a // b\n    return a % b\n\n\na = 100\nn = 3\nb = 4\nprint(nthDigit(a, n, b))\n"}
{"text": "Count of non decreasing arrays of length N formed with values in range L to R ", "java": "class GFG {\n  static int countSum(int N, int L, int R) {\n    if (L > R) {\n      return 0;\n    }\n    if (N == 1) {\n      return R - L + 1;\n    }\n    if (N > 1) {\n      return (N - 2) * (R - L) + 1;\n    }\n    return 0;\n  }\n\n  public static void main(String[] args) {\n    int N = 4, L = 4, R = 6;\n    System.out.print(countSum(N, L, R));\n  }\n}\n", "python": "def countSum(N, L, R):\n    if L > R:\n        return 0\n    if N == 1:\n        return R - L + 1\n    if N > 1:\n        return (N - 2) * (R - L) + 1\n    return 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    N, L, R = 4, 4, 6\n    print(countSum(N, L, R))\n"}
{"text": "Length of Smallest subarray in range 1 to N with sum greater than a given value ", "java": "class GFG {\n  static int usingBinarySearch(int start, int end, int N, int S) {\n    if (start >= end) return start;\n    int mid = start + (end - start) / 2;\n    int totalSum = (N * (N + 1)) / 2;\n    int midSum = (mid * (mid + 1)) / 2;\n    if ((totalSum - midSum) <= S) {\n      return usingBinarySearch(start, mid, N, S);\n    }\n    return usingBinarySearch(mid + 1, end, N, S);\n  }\n\n  public static void main(String[] args) {\n    int N, S;\n    N = 5;\n    S = 11;\n    System.out.println(N - usingBinarySearch(1, N, N, S) + 1);\n  }\n}\n", "python": "def countNumber(N, S):\n    countElements = 0\n    currSum = 0\n    while currSum <= S:\n        currSum += N\n        N = N - 1\n        countElements = countElements + 1\n    return countElements\n\n\nN = 5\nS = 11\ncount = countNumber(N, S)\nprint(count)\n"}
{"text": "Reduce a number to 1 by performing given operations ", "java": "class GFG {\n  static int set_bits(int n) {\n    int count = 0;\n    while (n > 0) {\n      count += n % 2;\n      n /= 2;\n    }\n    return count;\n  }\n\n  static int minSteps(int n) {\n    int ans = 0;\n    while (n != 1) {\n      if (n % 2 == 0) n /= 2;\n      else if (n == 3 || set_bits(n - 1) < set_bits(n + 1)) n--;\n      else n++;\n      ans++;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 15;\n    System.out.print(minSteps(n));\n  }\n}\n", "python": "def set_bits(n):\n    count = 0\n    while n:\n        count += n % 2\n        n //= 2\n    return count\n\n\ndef minSteps(n):\n    ans = 0\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        elif n == 3 or set_bits(n - 1) < set_bits(n + 1):\n            n -= 1\n        else:\n            n += 1\n        ans += 1\n    return ans\n\n\nn = 15\nprint(minSteps(n))\n"}
{"text": "Make all elements zero by decreasing any two elements by one at a time ", "java": "public class GFG {\n  static boolean checkZeroArray(int[] arr, int n) {\n    int sum = 0, maximum = Integer.MIN_VALUE;\n    for (int i = 0; i < n; i++) {\n      sum = sum + arr[i];\n      maximum = Math.max(maximum, arr[i]);\n    }\n    if (sum % 2 == 0 && maximum <= sum / 2) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 1, 2, 2};\n    int n = arr.length;\n    if (checkZeroArray(arr, n) == true) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def checkZeroArray(arr, n):\n    sum = 0\n    maximum = -(10 ** 9)\n    for i in range(n):\n        sum = sum + arr[i]\n        maximum = max(maximum, arr[i])\n    if sum % 2 == 0 and maximum <= sum // 2:\n        return True\n    return False\n\n\narr = [1, 2, 1, 2, 2]\nn = len(arr)\nif checkZeroArray(arr, n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Check if there exists a prime number which gives Y after being repeatedly subtracted from X ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isPossible(int x, int y) {\n    if ((x - y) == 1) return false;\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int x = 100, y = 98;\n    if (isPossible(x, y)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def isPossible(x, y):\n    if (x - y) == 1:\n        return False\n    return True\n\n\nx = 100\ny = 98\nif isPossible(x, y):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Find the value of N XOR 'ed to itself K times ", "java": "class GFG {\n  static int xorK(int n, int k) {\n    int res = n;\n    for (int i = 1; i < k; i++) res = (res ^ n);\n    return n;\n  }\n\n  public static void main(String[] args) {\n    int n = 123, k = 3;\n    System.out.print(xorK(n, k));\n  }\n}\n", "python": "def xorK(n, k):\n    if k % 2 == 1:\n        return n\n    return 0\n\n\nn = 123\nk = 3\nprint(xorK(n, k))\n"}
{"text": "Find if there exists multiple ways to draw line through ( x , y ) to cut rectangle in equal halfs ", "java": "class GFG {\n  static boolean isPossible(int w, int h, int x, int y) {\n    if (x * 2 == w && y * 2 == h) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int w = 1, h = 2, x = 1, y = 2;\n    if (isPossible(w, h, x, y)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def isPossible(w, h, x, y):\n    if x * 2 == w and y * 2 == h:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    w = 1\n    h = 2\n    x = 1\n    y = 2\n    if isPossible(w, h, x, y):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Sum of the updated array after performing the given operation ", "java": "import java.util.*;\n\nclass GFG {\n  static int sumArr(int arr[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum += arr[i];\n    return sum;\n  }\n\n  static int sumModArr(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n      int subSum = 0;\n      for (int j = i + 1; j < n; j++) {\n        subSum += arr[j];\n      }\n      arr[i] -= subSum;\n    }\n    return sumArr(arr, n);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {40, 25, 12, 10};\n    int n = arr.length;\n    System.out.println(sumModArr(arr, n));\n  }\n}\n", "python": "def sumArr(arr, n):\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    return sum\n\n\ndef sumModArr(arr, n):\n    subSum = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        curr = arr[i]\n        arr[i] -= subSum\n        subSum += curr\n    return sumArr(arr, n)\n\n\narr = [40, 25, 12, 10]\nn = len(arr)\nprint(sumModArr(arr, n))\n"}
{"text": "Find the minimum possible health of the winning player ", "java": "class GFG {\n  static int minHealth(int health[], int n) {\n    int gcd = 0;\n    for (int i = 0; i < n; i++) {\n      gcd = __gcd(gcd, health[i]);\n    }\n    return gcd;\n  }\n\n  static int __gcd(int a, int b) {\n    return b == 0 ? a : __gcd(b, a % b);\n  }\n\n  public static void main(String[] args) {\n    int health[] = {5, 6, 1, 2, 3, 4};\n    int n = health.length;\n    System.out.println(minHealth(health, n));\n  }\n}\n", "python": "from math import gcd\n\n\ndef minHealth(health, n):\n    __gcd = 0\n    for i in range(n):\n        __gcd = gcd(__gcd, health[i])\n    return __gcd\n\n\nif __name__ == \" _ _ main _ _ \":\n    health = [5, 6, 1, 2, 3, 4]\n    n = len(health)\n    print(minHealth(health, n))\n"}
{"text": "Number of ways to distribute N Paper Set among M students ", "java": "import java.util.*;\n\nclass GFG {\n  static int MOD = 1000000007;\n\n  static int factMod(int n) {\n    long fact = 1;\n    for (int i = 2; i <= n; i++) {\n      fact *= (i % MOD);\n      fact %= MOD;\n    }\n    return (int) fact;\n  }\n\n  static int countWays(int n, int m) {\n    return factMod(m);\n  }\n\n  public static void main(String args[]) {\n    int n = 2, m = 2;\n    System.out.print(countWays(n, m));\n  }\n}\n", "python": "MOD = 1000000007\n\n\ndef factMod(n):\n    fact = 1\n    for i in range(2, n + 1):\n        fact *= i % MOD\n        fact %= MOD\n    return fact\n\n\ndef countWays(n, m):\n    return factMod(m)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 2\n    m = 2\n    print(countWays(n, m))\n"}
{"text": "Program for nth Fuss \u2013 Catalan Number ", "java": "class GFG {\n  static int binomialCoeff(int n, int k) {\n    int res = 1;\n    if (k > n - k) k = n - k;\n    for (int i = 0; i < k; ++i) {\n      res *= (n - i);\n      res /= (i + 1);\n    }\n    return res;\n  }\n\n  static int Fuss_catalan(int n) {\n    int c = binomialCoeff(3 * n, n);\n    return c / (2 * n + 1);\n  }\n\n  public static void main(String[] args) {\n    for (int i = 0; i < 10; i++) System.out.print(Fuss_catalan(i) + \" \u2581 \");\n  }\n}\n", "python": "def binomialCoeff(n, k):\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= n - i\n        res //= i + 1\n    return res\n\n\ndef Fuss_catalan(n):\n    c = binomialCoeff(3 * n, n)\n    return c // (2 * n + 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    for i in range(10):\n        print(Fuss_catalan(i), end=\" \u2581 \")\n    DEDENT\n"}
{"text": "Count integers in the range [ A , B ] that are not divisible by C and D ", "java": "class GFG {\n  static int countNums(int a, int b, int c, int d) {\n    int x = b / c - (a - 1) / c;\n    int y = b / d - (a - 1) / d;\n    int k = (c * d) / __gcd(c, d);\n    int z = b / k - (a - 1) / k;\n    return b - a + 1 - x - y + z;\n  }\n\n  static int __gcd(int a, int b) {\n    if (b == 0) return a;\n    return __gcd(b, a % b);\n  }\n\n  public static void main(String[] args) {\n    int a = 10, b = 50, c = 4, d = 6;\n    System.out.println(countNums(a, b, c, d));\n  }\n}\n", "python": "from math import gcd\n\n\ndef countNums(a, b, c, d):\n    x = b // c - (a - 1) // c\n    y = b // d - (a - 1) // d\n    k = (c * d) // gcd(c, d)\n    z = b // k - (a - 1) // k\n    return b - a + 1 - x - y + z\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 10\n    b = 50\n    c = 4\n    d = 6\n    print(countNums(a, b, c, d))\n"}
{"text": "Program to find the last digit of X in base Y ", "java": "class GFG {\n  static void last_digit(int X, int Y) {\n    System.out.print(X % Y);\n  }\n\n  public static void main(String[] args) {\n    int X = 55, Y = 3;\n    last_digit(X, Y);\n  }\n}\n", "python": "def last_digit(X, Y):\n    print(X % Y)\n\n\nif __name__ == \" _ _ main _ _ \":\n    X = 55\n    Y = 3\n    last_digit(X, Y)\n"}
{"text": "Count of squares that can be drawn without lifting the pencil ", "java": "class GFG {\n  static int countSquares(int n) {\n    return (int) (Math.pow(n, 2) - (2 * n) + 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(countSquares(n));\n  }\n}\n", "python": "def countSquares(n):\n    return pow(n, 2) - (2 * n) + 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 2\n    print(countSquares(n))\n"}
{"text": "Integer part of the geometric mean of the divisors of N ", "java": "class GFG {\n  static int geometricMean(int n) {\n    return (int) Math.sqrt(n);\n  }\n\n  public static void main(String[] args) {\n    int n = 16;\n    System.out.println(geometricMean(n));\n  }\n}\n", "python": "from math import sqrt\n\n\ndef geometricMean(n):\n    return int(sqrt(n))\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 16\n    print(geometricMean(n))\n"}
{"text": "Number of K 's such that the given array can be divided into two sets satisfying the given conditions ", "java": "import java.util.*;\n\nclass GFG {\n  static int two_sets(int a[], int n) {\n    Arrays.sort(a);\n    return a[n / 2] - a[(n / 2) - 1];\n  }\n\n  public static void main(String[] args) {\n    int a[] = {1, 4, 4, 6, 7, 9};\n    int n = a.length;\n    System.out.println(two_sets(a, n));\n  }\n}\n", "python": "def two_sets(a, n):\n    a.sort()\n    return a[n // 2] - a[(n // 2) - 1]\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [1, 4, 4, 6, 7, 9]\n    n = len(a)\n    print(two_sets(a, n))\n"}
{"text": "Make the array non ", "java": "class GFG {\n  static boolean isPossible(int a[], int n) {\n    int cur = a[0];\n    cur--;\n    for (int i = 1; i < n; i++) {\n      int nxt = a[i];\n      if (nxt > cur) nxt--;\n      else if (nxt < cur) return false;\n      cur = nxt;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {1, 2, 1, 2, 3};\n    int n = a.length;\n    if (isPossible(a, n)) System.out.printf(\" Yes \");\n    else System.out.printf(\" No \");\n  }\n}\n", "python": "def isPossible(a, n):\n    cur = a[0]\n    cur -= 1\n    for i in range(1, n):\n        nxt = a[i]\n        if nxt > cur:\n            nxt -= 1\n        elif nxt < cur:\n            return False\n        cur = nxt\n    return True\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [1, 2, 1, 2, 3]\n    n = len(a)\n    if isPossible(a, n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Find the Kth position element of the given sequence ", "java": "class GFG {\n  static int kthNum(int n, int k) {\n    int a = (n + 1) / 2;\n    if (k > a) return (2 * (k - a));\n    return (2 * k - 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 7, k = 7;\n    System.out.println(kthNum(n, k));\n  }\n}\n", "python": "def kthNum(n, k):\n    a = (n + 1) // 2\n    if k > a:\n        return 2 * (k - a)\n    return 2 * k - 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 7\n    k = 7\n    print(kthNum(n, k))\n"}
{"text": "Find K such that ", "java": "class GFG {\n  static int find_k(int a, int b) {\n    if ((a + b) % 2 == 0) return ((a + b) / 2);\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int a = 2, b = 16;\n    System.out.println(find_k(a, b));\n  }\n}\n", "python": "def find_k(a, b):\n    if (a + b) % 2 == 0:\n        return (a + b) // 2\n    return -1\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 2\n    b = 16\n    print(find_k(a, b))\n"}
{"text": "Maximum LCM among all pairs ( i , j ) of first N natural numbers ", "java": "class GFG {\n  static int maxLCM(int n) {\n    return (n * (n - 1));\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(maxLCM(n));\n  }\n}\n", "python": "def maxLCM(n):\n    return n * (n - 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(maxLCM(n))\n"}
{"text": "Sum of all the numbers in the Nth row of the given triangle ", "java": "class GFG {\n  static int getSum(int n) {\n    return ((n - 1) + (int) Math.pow(n, 2));\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(getSum(n));\n  }\n}\n", "python": "def getSum(n):\n    return (n - 1) + pow(n, 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(getSum(n))\n"}
{"text": "Number of edges in a perfect binary tree with N levels ", "java": "class GFG {\n  static int cntEdges(int n) {\n    int edges = (int) Math.pow(2, n) - 2;\n    return edges;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(cntEdges(n));\n  }\n}\n", "python": "def cntEdges(n):\n    edges = 2 ** n - 2\n    return edges\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(cntEdges(n))\n"}
{"text": "Number of cells in the Nth order figure ", "java": "class GFG {\n  static int cntCells(int n) {\n    int cells = (int) Math.pow(n, 2) + (int) Math.pow(n - 1, 2);\n    return cells;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(cntCells(n));\n  }\n}\n", "python": "def cntCells(n):\n    cells = pow(n, 2) + pow(n - 1, 2)\n    return cells\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(cntCells(n))\n"}
{"text": "Sum of all the numbers in the Nth parenthesis ", "java": "class GFG {\n  static int findSum(int n) {\n    return (int) Math.pow(n, 3);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(findSum(n));\n  }\n}\n", "python": "def findSum(n):\n    return n ** 3\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(findSum(n))\n"}
{"text": "Find the count of natural Hexadecimal numbers of size N ", "java": "class GFG {\n  static int count(int n) {\n    return (int) (15 * Math.pow(16, n - 1));\n  }\n\n  public static void main(String args[]) {\n    int n = 2;\n    System.out.println(count(n));\n  }\n}\n", "python": "def count(n):\n    return 15 * pow(16, n - 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 2\n    print(count(n))\n"}
{"text": "Largest Even and Odd N ", "java": "class GFG {\n  static void findNumbers(int n) {\n    String ans = \" \";\n    for (int i = 0; i < n - 1; i++) ans += '7';\n    String even = ans + '6';\n    String odd = ans + '7';\n    System.out.println(\" Even \u2581 : \u2581 \" + even);\n    System.out.println(\" Odd \u2581 : \u2581 \" + odd);\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    findNumbers(n);\n  }\n}\n", "python": "def findNumbers(n, b):\n    even = 0\n    odd = 0\n    if b % 2 == 0:\n        even = pow(b, n) - 2\n        odd = pow(b, n) - 1\n    else:\n        even = pow(b, n) - 1\n        odd = pow(b, n) - 2\n    print(\" Even \u2581 Number \u2581 = \u2581 \", int(even))\n    print(\" Odd \u2581 Number \u2581 = \u2581 \", int(odd))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    B = 5\n    findNumbers(N, B)\n"}
{"text": "Nth term of a Custom Fibonacci series ", "java": "class GFG {\n  static int nth_term(int a, int b, int n) {\n    int z = 0;\n    if (n % 6 == 1) z = a;\n    else if (n % 6 == 2) z = b;\n    else if (n % 6 == 3) z = b - a;\n    else if (n % 6 == 4) z = -a;\n    else if (n % 6 == 5) z = -b;\n    if (n % 6 == 0) z = -(b - a);\n    return z;\n  }\n\n  public static void main(String[] args) {\n    int a = 10, b = 17, n = 3;\n    System.out.println(nth_term(a, b, n));\n  }\n}\n", "python": "def nth_term(a, b, n):\n    z = 0\n    if n % 6 == 1:\n        z = a\n    elif n % 6 == 2:\n        z = b\n    elif n % 6 == 3:\n        z = b - a\n    elif n % 6 == 4:\n        z = -a\n    elif n % 6 == 5:\n        z = -b\n    if n % 6 == 0:\n        z = -(b - a)\n    return z\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 10\n    b = 17\n    n = 3\n    print(nth_term(a, b, n))\n"}
{"text": "Check whether the given integers a , b , c and d are in proportion ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean inProportion(int[] arr) {\n    int n = 4;\n    Arrays.sort(arr);\n    long extremes = (long) arr[0] * (long) arr[3];\n    long means = (long) arr[1] * (long) arr[2];\n    if (extremes == means) return true;\n    return false;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 2, 4, 2};\n    if (inProportion(arr)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def inProportion(arr):\n    n = 4\n    arr.sort()\n    extremes = arr[0] * arr[3]\n    means = arr[1] * arr[2]\n    if extremes == means:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 4, 2]\n    if inProportion(arr):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Find the deleted value from the array when average of original elements is given ", "java": "class GFG {\n  static int findMissing(int arr[], int n, int k, int avg) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += arr[i];\n    }\n    int num = (avg * (n + k)) - sum;\n    int den = k;\n    if (num % den != 0) return -1;\n    return (int) (num / den);\n  }\n\n  public static void main(String[] args) {\n    int k = 3, avg = 4;\n    int arr[] = {2, 7, 3};\n    int n = arr.length;\n    System.out.println(findMissing(arr, n, k, avg));\n  }\n}\n", "python": "def findMissing(arr, n, k, avg):\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    num = (avg * (n + k)) - sum\n    den = k\n    if num % den != 0:\n        return -1\n    return (int)(num / den)\n\n\nk = 3\navg = 4\narr = [2, 7, 3]\nn = len(arr)\nprint(findMissing(arr, n, k, avg))\n"}
{"text": "Maximum number of distinct positive integers that can be used to represent N ", "java": "class GFG {\n  static int count(int n) {\n    return (int) (-1 + Math.sqrt(1 + 8 * n)) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(count(n));\n  }\n}\n", "python": "from math import sqrt\n\n\ndef count(n):\n    return (-1 + sqrt(1 + 8 * n)) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    print(count(n))\n"}
{"text": "Find the previous fibonacci number ", "java": "import java.io.*;\n\nclass GFG {\n  static int previousFibonacci(int n) {\n    double a = n / ((1 + Math.sqrt(5)) / 2.0);\n    return (int) Math.round(a);\n  }\n\n  public static void main(String[] args) {\n    int n = 8;\n    System.out.println(previousFibonacci(n));\n  }\n}\n", "python": "from math import *\n\n\ndef previousFibonacci(n):\n    a = n / ((1 + sqrt(5)) / 2.0)\n    return round(a)\n\n\nn = 8\nprint(previousFibonacci(n))\n"}
{"text": "Find the quadratic equation from the given roots ", "java": "class GFG {\n  static void findEquation(int a, int b) {\n    int sum = (a + b);\n    int product = (a * b);\n    System.out.println(\" x ^ 2 \u2581 - \u2581 ( \" + sum + \" x ) \u2581 + \u2581 ( \" + product + \" ) \u2581 = \u2581 0\");\n  }\n\n  public static void main(String args[]) {\n    int a = 2, b = 3;\n    findEquation(a, b);\n  }\n}\n", "python": "def findEquation(a, b):\n    summ = a + b\n    product = a * b\n    print(\" x ^ 2 \u2581 - \u2581 ( \", summ, \" x ) \u2581 + \u2581 ( \", product, \" ) \u2581 = \u2581 0\")\n\n\na = 2\nb = 3\nfindEquation(a, b)\n"}
{"text": "Smallest N digit number which is a perfect fourth power ", "java": "class GFG {\n  static int cal(int n) {\n    double res = Math.pow(Math.ceil((Math.pow(Math.pow(10, (n - 1)), 1 / 4))), 4);\n    return (int) res;\n  }\n\n  public static void main(String[] args) {\n    int n = 1;\n    System.out.println(cal(n));\n  }\n}\n", "python": "from math import *\n\n\ndef cal(n):\n    res = pow(ceil((pow(pow(10, (n - 1)), 1 / 4))), 4)\n    return int(res)\n\n\nn = 1\nprint(cal(n))\n"}
{"text": "Count of 0 s in an N ", "java": "class GFG {\n  static int count(int n) {\n    return 3 * n * (n - 1) + 1;\n  }\n\n  public static void main(String args[]) {\n    int n = 3;\n    System.out.println(count(n));\n  }\n}\n", "python": "def count(n):\n    return 3 * n * (n - 1) + 1\n\n\nn = 3\nprint(count(n))\n"}
{"text": "Find the next fibonacci number ", "java": "class GFG {\n  static long nextFibonacci(int n) {\n    double a = n * (1 + Math.sqrt(5)) / 2.0;\n    return Math.round(a);\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(nextFibonacci(n));\n  }\n}\n", "python": "from math import *\n\n\ndef nextFibonacci(n):\n    a = n * (1 + sqrt(5)) / 2.0\n    return round(a)\n\n\nn = 5\nprint(nextFibonacci(n))\n"}
{"text": "Sum of all the numbers present at given level in Pascal 's triangle ", "java": "class GFG {\n  static int sum(int h) {\n    return (int) Math.pow(2, h - 1);\n  }\n\n  public static void main(String[] args) {\n    int L = 3;\n    System.out.println(sum(L));\n  }\n}\n", "python": "def summ(h):\n    return pow(2, h - 1)\n\n\nL = 3\nprint(summ(L))\n"}
{"text": "Product of values of all possible non ", "java": "class GFG {\n  static int product(int a[], int n) {\n    int ans = 1;\n    int val = (int) Math.pow(2, n - 1);\n    for (int i = 0; i < n; i++) {\n      ans *= (int) Math.pow(a[i], val);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    int a[] = {3, 7};\n    System.out.println(product(a, n));\n  }\n}\n", "python": "def product(a, n):\n    ans = 1\n    val = pow(2, n - 1)\n    for i in range(n):\n        ans *= pow(a[i], val)\n    return ans\n\n\nn = 2\na = [3, 7]\nprint(product(a, n))\n"}
{"text": "Program to find Nth odd Fibonacci Number ", "java": "class GFG {\n  static int oddFib(int n) {\n    n = (3 * n + 1) / 2;\n    int a = -1, b = 1, c = 0, i;\n    for (i = 1; i <= n; i++) {\n      c = a + b;\n      a = b;\n      b = c;\n    }\n    return c;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(oddFib(n));\n  }\n}\n", "python": "def oddFib(n):\n    n = (3 * n + 1) // 2\n    a = -1\n    b = 1\n    c = 0\n    for i in range(1, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return c\n\n\nn = 4\nprint(oddFib(n))\n"}
{"text": "Sum of values of all possible non ", "java": "class GFG {\n  static int sum(int arr[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += arr[i];\n    }\n    sum = sum * (int) Math.pow(2, n - 1);\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 1, 5, 6};\n    int n = arr.length;\n    System.out.println(sum(arr, n));\n  }\n}\n", "python": "def sum(arr, n):\n    sum = 0\n    for i in arr:\n        sum += i\n    sum = sum * pow(2, n - 1)\n    return sum\n\n\narr = [2, 1, 5, 6]\nn = len(arr)\nprint(sum(arr, n))\n"}
{"text": "Number of ways in which N can be represented as the sum of two positive integers ", "java": "class GFG {\n  static int ways(int n) {\n    return n / 2;\n  }\n\n  public static void main(String args[]) {\n    int n = 2;\n    System.out.println(ways(n));\n  }\n}\n", "python": "def ways(n):\n    return n // 2\n\n\nn = 2\nprint(ways(n))\n"}
{"text": "Minimum absolute difference between N and any power of 2 ", "java": "import java.util.*;\n\nclass GFG {\n  static int prevPowerof2(int n) {\n    int p = (int) (Math.log(n) / Math.log(2));\n    return (int) Math.pow(2, p);\n  }\n\n  static int nextPowerOf2(int n) {\n    int p = 1;\n    if ((n == 0) && !((n & (n - 1)) == 0)) return n;\n    while (p < n) p <<= 1;\n    return p;\n  }\n\n  static int minDiff(int n) {\n    int low = prevPowerof2(n);\n    int high = nextPowerOf2(n);\n    return Math.min(n - low, high - n);\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    System.out.println(minDiff(n));\n  }\n}\n", "python": "from math import log\n\n\ndef prevPowerof2(n):\n    p = int(log(n))\n    return pow(2, p)\n\n\ndef nextPowerOf2(n):\n    p = 1\n    if n and (n & (n - 1)) == 0:\n        return n\n    while p < n:\n        p <<= 1\n    return p\n\n\ndef minDiff(n):\n    low = prevPowerof2(n)\n    high = nextPowerOf2(n)\n    return min(n - low, high - n)\n\n\nn = 6\nprint(minDiff(n))\n"}
{"text": "Find the ratio of number of elements in two Arrays from their individual and combined average ", "java": "class GFG {\n  static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n  }\n\n  static void FindRatio(int a, int b, int c) {\n    int up = Math.abs(b - c);\n    int down = Math.abs(c - a);\n    int g = gcd(up, down);\n    up /= g;\n    down /= g;\n    System.out.println(up + \" : \" + down);\n  }\n\n  public static void main(String[] args) {\n    int a = 4, b = 10, c = 6;\n    FindRatio(a, b, c);\n  }\n}\n", "python": "from math import gcd\n\n\ndef FindRatio(a, b, c):\n    up = abs(b - c)\n    down = abs(c - a)\n    g = gcd(up, down)\n    up //= g\n    down //= g\n    print(up, \" : \", down)\n\n\na = 4\nb = 10\nc = 6\nFindRatio(a, b, c)\n"}
{"text": "Check if it is possible to move from ( 0 , 0 ) to ( X , Y ) in exactly K steps ", "java": "class GFG {\n  static boolean isPossible(int x, int y, int k) {\n    int minMoves = Math.abs(x) + Math.abs(y);\n    if (k >= minMoves && (k - minMoves) % 2 == 0) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int x = 5, y = 8, k = 20;\n    if (isPossible(x, y, k)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isPossible(x, y, k):\n    minMoves = abs(x) + abs(y)\n    if k >= minMoves and (k - minMoves) % 2 == 0:\n        return True\n    return False\n\n\nx = 5\ny = 8\nk = 20\nif isPossible(x, y, k):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Check whether N is a Factorion or not ", "java": "class GFG {\n  static int MAX = 10;\n\n  static boolean isFactorion(int n) {\n    int fact[] = new int[MAX];\n    fact[0] = 1;\n    for (int i = 1; i < MAX; i++) fact[i] = i * fact[i - 1];\n    int org = n;\n    int sum = 0;\n    while (n > 0) {\n      int d = n % 10;\n      sum += fact[d];\n      n /= 10;\n    }\n    if (sum == org) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 40585;\n    if (isFactorion(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "MAX = 10\n\n\ndef isFactorion(n):\n    fact = [0] * MAX\n    fact[0] = 1\n    for i in range(1, MAX):\n        fact[i] = i * fact[i - 1]\n    org = n\n    sum = 0\n    while n > 0:\n        d = n % 10\n        sum += fact[d]\n        n = n // 10\n    if sum == org:\n        return True\n    return False\n\n\nn = 40585\nif isFactorion(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Find the possible permutation of the bits of N ", "java": "import java.util.*;\n\nclass GFG {\n  static int TOTAL_BITS = 32;\n\n  static boolean isPossible(int n) {\n    int cnt = Integer.bitCount(n);\n    if (cnt == TOTAL_BITS / 2) return true;\n    return false;\n  }\n\n  public static void main(String[] arr) {\n    int n = 524280;\n    if (isPossible(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "TOTAL_BITS = 32\n\n\ndef isPossible(n):\n    cnt = bin(n).count(\"1\")\n    if cnt == TOTAL_BITS // 2:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 524280\n    if isPossible(n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Find the permutation of first N natural numbers such that sum of i % Pi is maximum possible ", "java": "class GFG {\n  static int Max_Sum(int n) {\n    return (n * (n - 1)) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 8;\n    System.out.println(Max_Sum(n));\n  }\n}\n", "python": "def Max_Sum(n):\n    return (n * (n - 1)) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 8\n    print(Max_Sum(n))\n"}
{"text": "Check if the number formed by the last digits of N numbers is divisible by 10 or not ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isDivisible(int arr[], int n) {\n    int lastDigit = arr[n - 1] % 10;\n    if (lastDigit == 0) return true;\n    return false;\n  }\n\n  public static void main(String[] arg) {\n    int arr[] = {12, 65, 46, 37, 99};\n    int n = arr.length;\n    if (isDivisible(arr, n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isDivisible(arr, n):\n    lastDigit = arr[n - 1] % 10\n    if lastDigit == 0:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [12, 65, 46, 37, 99]\n    n = len(arr)\n    if isDivisible(arr, n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Count of Multiples of A , B or C less than or equal to N ", "java": "import java.util.*;\n\nclass GFG {\n  static long gcd(long a, long b) {\n    if (a == 0) return b;\n    return gcd(b % a, a);\n  }\n\n  static long divTermCount(long a, long b, long c, long num) {\n    return ((num / a)\n        + (num / b)\n        + (num / c)\n        - (num / ((a * b) / gcd(a, b)))\n        - (num / ((c * b) / gcd(c, b)))\n        - (num / ((a * c) / gcd(a, c)))\n        + (num / ((a * b * c) / gcd(gcd(a, b), c))));\n  }\n\n  public static void main(String[] arr) {\n    long a = 7, b = 3, c = 5, n = 100;\n    System.out.println(divTermCount(a, b, c, n));\n  }\n}\n", "python": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef lcm(x, y):\n    return (x * y) // gcd(x, y)\n\n\ndef divTermCount(a, b, c, num):\n    return (\n        num // a\n        + num // b\n        + num // c\n        - num // lcm(a, b)\n        - num // lcm(c, b)\n        - num // lcm(a, c)\n        + num // (lcm(lcm(a, b), c))\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 7\n    b = 3\n    c = 5\n    n = 100\n    print(divTermCount(a, b, c, n))\n"}
{"text": "Array containing power of 2 whose XOR and Sum of elements equals X ", "java": "import java.util.*;\n\nclass GFG {\n  static Vector<Long> getArray(int n) {\n    Vector<Long> ans = new Vector<Long>();\n    long p2 = 1;\n    while (n > 0) {\n      if (n % 2 == 1) ans.add(p2);\n      n >>= 1;\n      p2 *= 2;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 15;\n    Vector<Long> ans = getArray(n);\n    for (Long i : ans) System.out.print(i + \" \u2581 \");\n  }\n}\n", "python": "def getArray(n):\n    ans = []\n    p2 = 1\n    while n > 0:\n        if n & 1:\n            ans.append(p2)\n        n >>= 1\n        p2 *= 2\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 15\n    ans = getArray(n)\n    for i in ans:\n        print(i, end=\" \u2581 \")\n    DEDENT\n"}
{"text": "Count the number of subsequences of length k having equal LCM and HCF ", "java": "import java.util.*;\n\nclass GFG {\n  static long fact(int n) {\n    long res = 1;\n    for (int i = 2; i <= n; i++) res = res * i;\n    return res;\n  }\n\n  static long nCr(int n, int r) {\n    return fact(n) / (1 * fact(r) * fact(n - r));\n  }\n\n  static long number_of_subsequences(int arr[], int k, int n) {\n    long s = 0;\n    HashMap<Integer, Integer> mp = new HashMap<Integer, Integer>();\n    for (int i = 0; i < n; i++) {\n      if (mp.containsKey(arr[i])) {\n        mp.put(arr[i], mp.get(arr[i]) + 1);\n      } else {\n        mp.put(arr[i], 1);\n      }\n    }\n    for (Map.Entry<Integer, Integer> j : mp.entrySet()) {\n      s = s + 1 * nCr(j.getValue(), k);\n    }\n    return s;\n  }\n\n  public static void main(String[] arg) {\n    int arr[] = {1, 1, 1, 1, 2, 2, 2};\n    int k = 2;\n    int n = arr.length;\n    System.out.println(number_of_subsequences(arr, k, n));\n  }\n}\n", "python": "def fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\n\n\ndef nCr(n, r):\n    return fact(n) // (fact(r) * fact(n - r))\n\n\ndef number_of_subsequences(arr, k, n):\n    s = 0\n    m = dict()\n    for i in arr:\n        m[i] = m.get(i, 0) + 1\n    for j in m:\n        s = s + nCr(m[j], k)\n    return s\n\n\narr = [1, 1, 1, 1, 2, 2, 2]\nk = 2\nn = len(arr)\nprint(number_of_subsequences(arr, k, n))\n"}
{"text": "Find the sum of all possible pairs in an array of N elements ", "java": "import java.util.*;\n\nclass GFG {\n  static int sumPairs(int arr[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum = sum + (arr[i] * (2 * n));\n    }\n    return sum;\n  }\n\n  public static void main(String[] arg) {\n    int arr[] = {1, 2, 3};\n    int n = arr.length;\n    System.out.println(sumPairs(arr, n));\n  }\n}\n", "python": "def sumPairs(arr, n):\n    sum = 0\n    for i in range(n):\n        sum = sum + (arr[i] * (2 * n))\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3]\n    n = len(arr)\n    print(sumPairs(arr, n))\n"}
{"text": "Summation of floor of harmonic progression ", "java": "class GFG {\n  static long getSum(int n) {\n    long sum = 0;\n    int k = (int) Math.sqrt(n);\n    for (int i = 1; i <= k; i++) {\n      sum += Math.floor(n / i);\n    }\n    sum *= 2;\n    sum -= Math.pow(k, 2);\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(getSum(n));\n  }\n}\n", "python": "from math import floor, sqrt, ceil\n\n\ndef getSum(n):\n    summ = 0\n    k = (n) ** (0.5)\n    for i in range(1, floor(k) + 1):\n        summ += floor(n / i)\n    summ *= 2\n    summ -= pow(floor(k), 2)\n    return summ\n\n\nn = 5\nprint(getSum(n))\n"}
{"text": "Count of distinct remainders when N is divided by all the numbers from the range [ 1 , N ] ", "java": "class GFG {\n  static int distinctRemainders(int n) {\n    if (n % 2 == 0) return (n / 2);\n    return (1 + (n / 2));\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(distinctRemainders(n));\n  }\n}\n", "python": "def distinctRemainders(n):\n    if n % 2 == 0:\n        return n // 2\n    return (n // 2) + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(distinctRemainders(n))\n"}
{"text": "Repeated sum of first N natural numbers ", "java": "class GFG {\n  static int sum(int n) {\n    int sum = (n * (n + 1)) / 2;\n    return sum;\n  }\n\n  static int repeatedSum(int n, int k) {\n    for (int i = 0; i < k; i++) {\n      n = sum(n);\n    }\n    return n;\n  }\n\n  public static void main(String[] args) {\n    int n = 2, k = 2;\n    System.out.println(repeatedSum(n, k));\n  }\n}\n", "python": "def sum(n):\n    sum = (n * (n + 1)) // 2\n    return sum\n\n\ndef repeatedSum(n, k):\n    for i in range(k):\n        n = sum(n)\n    return n\n\n\nn = 2\nk = 2\nprint(repeatedSum(n, k))\n"}
{"text": "Difference between Sum of Cubes and Sum of First N Natural Numbers ", "java": "class GFG {\n  static int difference(int n) {\n    int S, res;\n    S = (n * (n + 1)) / 2;\n    res = S * (S - 1);\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.print(difference(n));\n  }\n}\n", "python": "def difference(n):\n    S = (n * (n + 1)) // 2\n    res = S * (S - 1)\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(difference(n))\n"}
{"text": "Check if the sum of digits of number is divisible by all of its digits ", "java": "class GFG {\n  static boolean isDivisible(long n) {\n    long temp = n;\n    int sum = 0;\n    while (n != 0) {\n      int digit = (int) n % 10;\n      sum += digit;\n      n /= 10;\n    }\n    n = temp;\n    while (n != 0) {\n      int digit = (int) n % 10;\n      if (sum % digit != 0) return false;\n      n /= 10;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    long n = 123;\n    if (isDivisible(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isDivisible(n):\n    temp = n\n    sum = 0\n    while n:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    n = temp\n    while n:\n        digit = n % 10\n        if sum % digit != 0:\n            return False\n        n //= 10\n    return True\n\n\nn = 123\nif isDivisible(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Maximum items that can be bought with the given type of coins ", "java": "import java.io.*;\n\nclass GFG {\n  static int COST = 3;\n\n  static int maxItems(int x, int y, int z) {\n    int type1 = x / COST;\n    x %= COST;\n    int type2 = y / COST;\n    y %= COST;\n    int type3 = z / COST;\n    z %= COST;\n    int type4 = Math.min(x, Math.min(y, z));\n    int maxItems = type1 + type2 + type3 + type4;\n    return maxItems;\n  }\n\n  public static void main(String[] args) {\n    int x = 4, y = 5, z = 6;\n    System.out.println(maxItems(x, y, z));\n  }\n}\n", "python": "COST = 3\n\n\ndef maxItems(x, y, z):\n    type1 = x // COST\n    x %= COST\n    type2 = y // COST\n    y %= COST\n    type3 = z // COST\n    z %= COST\n    type4 = min(x, min(y, z))\n    maxItems = type1 + type2 + type3 + type4\n    return maxItems\n\n\nif __name__ == \" _ _ main _ _ \":\n    x = 4\n    y = 5\n    z = 6\n    print(maxItems(x, y, z))\n"}
{"text": "Count occurrences of a prime number in the prime factorization of every element from the given range ", "java": "class GFG {\n  static int countFactors(int n, int p) {\n    int pwr = 0;\n    while (n > 0 && n % p == 0) {\n      n /= p;\n      pwr++;\n    }\n    return pwr;\n  }\n\n  static int getCount(int l, int r, int p) {\n    int cnt = 0;\n    for (int i = l; i <= r; i++) {\n      cnt += countFactors(i, p);\n    }\n    return cnt;\n  }\n\n  public static void main(String[] args) {\n    int l = 2, r = 8, p = 2;\n    System.out.println(getCount(l, r, p));\n  }\n}\n", "python": "def countFactors(n, p):\n    pwr = 0\n    while n > 0 and n % p == 0:\n        n //= p\n        pwr += 1\n    return pwr\n\n\ndef getCount(l, r, p):\n    cnt = 0\n    for i in range(l, r + 1):\n        cnt += countFactors(i, p)\n    return cnt\n\n\nif __name__ == \" _ _ main _ _ \":\n    l = 2\n    r = 8\n    p = 2\n    print(getCount(l, r, p))\n"}
{"text": "Count occurrences of a prime number in the prime factorization of every element from the given range ", "java": "import java.util.*;\n\nclass GFG {\n  static int getCount(int l, int r, int p) {\n    int cnt = 0;\n    int val = p;\n    while (true) {\n      int a = r / val;\n      int b = (l - 1) / val;\n      val *= p;\n      if ((a - b) > 0) {\n        cnt += (a - b);\n      } else break;\n    }\n    return cnt;\n  }\n\n  public static void main(String[] args) {\n    int l = 2, r = 8, p = 2;\n    System.out.println(getCount(l, r, p));\n  }\n}\n", "python": "def countFactors(n, p):\n    pwr = 0\n    while n > 0 and n % p == 0:\n        n //= p\n        pwr += 1\n    return pwr\n\n\ndef getCount(l, r, p):\n    cnt = 0\n    for i in range(l, r + 1):\n        cnt += countFactors(i, p)\n    return cnt\n\n\nif __name__ == \" _ _ main _ _ \":\n    l = 2\n    r = 8\n    p = 2\n    print(getCount(l, r, p))\n"}
{"text": "Find the Nth element of the modified Fibonacci series ", "java": "import java.util.*;\n\nclass GFG {\n  static int findNthNumber(int A, int B, int N) {\n    int sum = 0;\n    for (int i = 2; i < N; i++) {\n      sum = A + B;\n      A = B;\n      B = sum;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int A = 5, B = 7, N = 10;\n    System.out.println(findNthNumber(A, B, N));\n  }\n}\n", "python": "def findNthNumber(A, B, N):\n    sum = 0\n    for i in range(2, N):\n        sum = A + B\n        A = B\n        B = sum\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = 5\n    B = 7\n    N = 10\n    print(findNthNumber(A, B, N))\n"}
{"text": "Calculate the IST : Indian Standard Time ", "java": "import java.math.*;\n\nclass GFG {\n  public static void cal_IST(int h, double r) {\n    double IST = (h * r * 1.0) / 360;\n    int int_IST = (int) IST;\n    int float_IST = (int) Math.ceil((int) ((IST - int_IST) * 60));\n    System.out.println(int_IST + \" : \" + float_IST);\n  }\n\n  public static void main(String[] args) {\n    int h = 20;\n    double r = 150;\n    cal_IST(h, r);\n  }\n}\n", "python": "from math import ceil\n\n\ndef cal_IST(h, r):\n    IST = round((h * r * 1.0) / 360, 3)\n    int_IST = int(IST)\n    float_IST = ceil((IST - int_IST) * 60)\n    print(int_IST, \" : \", float_IST)\n\n\nif __name__ == \" _ _ main _ _ \":\n    h = 20\n    r = 150\n    cal_IST(h, r)\n"}
{"text": "Check if it is possible to perform the given Grid Division ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isPossible(int arr[], int p, int n, int m) {\n    int sum = 0;\n    for (int i = 0; i < p; i++) sum += arr[i];\n    if (sum == (n * m)) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 3, m = 4;\n    int arr[] = {6, 3, 2, 1};\n    int p = arr.length;\n    if (isPossible(arr, p, n, m)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isPossible(arr, p, n, m):\n    sum = 0\n    for i in range(p):\n        sum += arr[i]\n    if sum == (n * m):\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    m = 4\n    arr = [6, 3, 2, 1]\n    p = len(arr)\n    if isPossible(arr, p, n, m):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Sum of last digit of all integers from 1 to N divisible by M ", "java": "import java.io.*;\n\nclass GFG {\n  static long sumOfLastDig(long n, long m) {\n    long sum = 0, k;\n    k = n / m;\n    long[] arr = new long[10];\n    for (int i = 0; i < 10; i++) {\n      arr[i] = m * (i + 1) % 10;\n      sum += arr[i];\n    }\n    long rem = k % 10;\n    long ans = (k / 10) * sum;\n    for (int i = 0; i < rem; i++) {\n      ans += arr[i];\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    long n = 100, m = 3;\n    System.out.println(sumOfLastDig(n, m));\n  }\n}\n", "python": "def sumOfLastDig(n, m):\n    sum = 0\n    k = n // m\n    arr = [0] * 10\n    for i in range(10):\n        arr[i] = m * (i + 1) % 10\n        sum += arr[i]\n    rem = k % 10\n    ans = (k // 10) * sum\n    for i in range(rem):\n        ans += arr[i]\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 100\n    m = 3\n    print(sumOfLastDig(n, m))\n"}
{"text": "Nth XOR Fibonacci number ", "java": "class GFG {\n  static int nthXorFib(int n, int a, int b) {\n    if (n == 0) return a;\n    if (n == 1) return b;\n    if (n == 2) return (a ^ b);\n    return nthXorFib(n % 3, a, b);\n  }\n\n  public static void main(String[] args) {\n    int a = 1, b = 2, n = 10;\n    System.out.println(nthXorFib(n, a, b));\n  }\n}\n", "python": "def nthXorFib(n, a, b):\n    if n == 0:\n        return a\n    if n == 1:\n        return b\n    if n == 2:\n        return a ^ b\n    return nthXorFib(n % 3, a, b)\n\n\na = 1\nb = 2\nn = 10\nprint(nthXorFib(n, a, b))\n"}
{"text": "Sand Timer Flip Counting Problem ", "java": "class GFG {\n  static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n  }\n\n  static void flip(int a, int b) {\n    int lcm = (a * b) / gcd(a, b);\n    a = lcm / a;\n    b = lcm / b;\n    System.out.print((a - 1) + \" \u2581 \" + (b - 1));\n  }\n\n  public static void main(String[] args) {\n    int a = 10;\n    int b = 5;\n    flip(a, b);\n  }\n}\n", "python": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef flip(a, b):\n    lcm = (a * b) // gcd(a, b)\n    a = lcm // a\n    b = lcm // b\n    print(a - 1, b - 1)\n\n\na = 10\nb = 5\nflip(a, b)\n"}
{"text": "Sum of N terms in the expansion of Arcsin ( x ) ", "java": "import java.io.*;\n\nclass GFG {\n  static void find_Solution(double x, int n) {\n    double sum = x, e = 2, o = 1, p = 1;\n    for (int i = 2; i <= n; i++) {\n      p += 2;\n      sum += (double) (o / e) * (double) (Math.pow(x, p) / p);\n      o = o * (o + 2);\n      e = e * (e + 2);\n    }\n    System.out.println(sum);\n  }\n\n  public static void main(String[] args) {\n    double x = -0.5;\n    if (Math.abs(x) >= 1) {\n      System.out.println(\" Invalid \u2581 Input \");\n    }\n    int n = 8;\n    find_Solution(x, n);\n  }\n}\n", "python": "def find_Solution(x, n):\n    Sum = x\n    e = 2\n    o = 1\n    p = 1\n    for i in range(2, n + 1):\n        p += 2\n        Sum += (o / e) * (pow(x, p) / p)\n        o = o * (o + 2)\n        e = e * (e + 2)\n    print(round(Sum, 10))\n\n\nx = -0.5\nif abs(x) >= 1:\n    print(\" Invalid Input \")\nn = 8\nfind_Solution(x, n)\n"}
{"text": "Minimize the cost of buying the Objects ", "java": "class GFG {\n  static int totalPay(int totalItems, int priceOfOneItem, int N, int M) {\n    int freeItems = 0, actual = 0;\n    freeItems = totalItems / (N + M);\n    actual = totalItems - freeItems;\n    int amount = actual * priceOfOneItem;\n    return amount;\n  }\n\n  public static void main(String[] args) {\n    int T = 12, P = 8;\n    int N = 2, M = 1;\n    System.out.print(\" Amount \u2581 = \u2581 \" + totalPay(T, P, N, M));\n  }\n}\n", "python": "def totalPay(totalItems, priceOfOneItem, N, M):\n    freeItems = 0\n    actual = 0\n    freeItems = totalItems // (N + M)\n    actual = totalItems - freeItems\n    amount = actual * priceOfOneItem\n    return amount\n\n\nT = 12\nP = 8\nN = 2\nM = 1\nprint(\" Amount \u2581 = \u2581 \", totalPay(T, P, N, M))\n"}
{"text": "Count of all possible pairs of disjoint subsets of integers from 1 to N ", "java": "class GFG {\n  static int p = 1000000007;\n\n  static long power(long x, long y) {\n    long res = 1;\n    x = x % p;\n    while (y > 0) {\n      if (y % 2 == 1) res = (res * x) % p;\n      y = y >> 1;\n      x = (x * x) % p;\n    }\n    return res % p;\n  }\n\n  public static void main(String[] args) {\n    long n = 3;\n    long x = (power(3, n) % p + 1) % p;\n    x = (x - power(2, n + 1) + p) % p;\n    x = (x * power(2, p - 2)) % p;\n    System.out.println(x);\n  }\n}\n", "python": "p = 1000000007\n\n\ndef power(x, y):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res % p\n\n\nn = 3\nx = (power(3, n) % p + 1) % p\nx = (x - power(2, n + 1) + p) % p\nx = (x * power(2, p - 2)) % p\nprint(x)\n"}
{"text": "Find the remainder when First digit of a number is divided by its Last digit ", "java": "class GFG {\n  static void findRemainder(int n) {\n    int l = n % 10;\n    while (n >= 10) n /= 10;\n    int f = n;\n    int remainder = f % l;\n    System.out.println(remainder);\n  }\n\n  public static void main(String[] args) {\n    int n = 5223;\n    findRemainder(n);\n  }\n}\n", "python": "def findRemainder(n):\n    l = n % 10\n    while n >= 10:\n        n //= 10\n    f = n\n    remainder = f % l\n    print(remainder)\n\n\nn = 5223\nfindRemainder(n)\n"}
{"text": "Percentage increase in the volume of cuboid if length , breadth and height are increased by fixed percentages ", "java": "class GFG {\n  static double increaseInVol(double l, double b, double h) {\n    double percentInc = (1 + (l / 100)) * (1 + (b / 100)) * (1 + (h / 100));\n    percentInc -= 1;\n    percentInc *= 100;\n    return percentInc;\n  }\n\n  public static void main(String[] args) {\n    double l = 50, b = 20, h = 10;\n    System.out.println(increaseInVol(l, b, h) + \" % \");\n  }\n}\n", "python": "def increaseInVol(l, b, h):\n    percentInc = (1 + (l / 100)) * (1 + (b / 100)) * (1 + (h / 100))\n    percentInc -= 1\n    percentInc *= 100\n    return percentInc\n\n\nl = 50\nb = 20\nh = 10\nprint(increaseInVol(l, b, h), \" % \")\n"}
{"text": "Count the number of occurrences of a particular digit in a number ", "java": "import java.util.*;\n\nclass GFG {\n  static int countOccurrances(int n, int d) {\n    int count = 0;\n    while (n > 0) {\n      count = (n % 10 == d) ? count + 1 : count;\n      n = n / 10;\n    }\n    return count;\n  }\n\n  public static void main(String args[]) {\n    int d = 2;\n    int n = 214215421;\n    System.out.println(countOccurrances(n, d));\n  }\n}\n", "python": "def countOccurrances(n, d):\n    count = 0\n    while n > 0:\n        if n % 10 == d:\n            count = count + 1\n        n = n // 10\n    return count\n\n\nd = 2\nn = 214215421\nprint(countOccurrances(n, d))\n"}
{"text": "Find number of factors of N when location of its two factors whose product is N is given ", "java": "class GFG {\n  static void findFactors(int a, int b) {\n    int c;\n    c = a + b - 1;\n    System.out.print(c);\n  }\n\n  public static void main(String[] args) {\n    int a, b;\n    a = 13;\n    b = 36;\n    findFactors(a, b);\n  }\n}\n", "python": "def findFactors(a, b):\n    c = a + b - 1\n    print(c)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 13\n    b = 36\n    findFactors(a, b)\n"}
{"text": "Find the average of k digits from the beginning and l digits from the end of the given number ", "java": "class GFG {\n  public static int countDigits(int num) {\n    int cnt = 0;\n    while (num > 0) {\n      cnt++;\n      num /= 10;\n    }\n    return cnt;\n  }\n\n  public static int sumFromStart(int num, int n, int rem) {\n    num /= ((int) Math.pow(10, rem));\n    int sum = 0;\n    while (num > 0) {\n      sum += (num % 10);\n      num /= 10;\n    }\n    return sum;\n  }\n\n  public static int sumFromEnd(int num, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += (num % 10);\n      num /= 10;\n    }\n    return sum;\n  }\n\n  public static float getAverage(int n, int k, int l) {\n    int totalDigits = countDigits(n);\n    if (totalDigits < (k + l)) return -1;\n    int sum1 = sumFromEnd(n, l);\n    int sum2 = sumFromStart(n, k, totalDigits - k);\n    return ((float) (sum1 + sum2) / (float) (k + l));\n  }\n\n  public static void main(String args[]) {\n    int n = 123456, k = 2, l = 3;\n    System.out.print(getAverage(n, k, l));\n  }\n}\n", "python": "from math import pow\n\n\ndef countDigits(num):\n    cnt = 0\n    while num > 0:\n        cnt += 1\n        num //= 10\n    return cnt\n\n\ndef sumFromStart(num, n, rem):\n    num //= pow(10, rem)\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return sum\n\n\ndef sumFromEnd(num, n):\n    sum = 0\n    for i in range(n):\n        sum += num % 10\n        num //= 10\n    return sum\n\n\ndef getAverage(n, k, l):\n    totalDigits = countDigits(n)\n    if totalDigits < (k + l):\n        return -1\n    sum1 = sumFromEnd(n, l)\n    sum2 = sumFromStart(n, k, totalDigits - k)\n    return (sum1 + sum2) / (k + l)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 123456\n    k = 2\n    l = 3\n    print(getAverage(n, k, l))\n"}
{"text": "Sum of two numbers if the original ratio and new ratio obtained by adding a given number to each number is given ", "java": "class GFG {\n  static double sum(double a, double b, double c, double d, double x) {\n    double ans = (x * (a + b) * (c - d)) / ((a * d) - (b * c));\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    double a = 1, b = 2, c = 9, d = 13, x = 5;\n    System.out.println(sum(a, b, c, d, x));\n  }\n}\n", "python": "def sum(a, b, c, d, x):\n    ans = (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    a, b, c, d, x = 1, 2, 9, 13, 5\n    print(sum(a, b, c, d, x))\n"}
{"text": "Roots of the quadratic equation when a + b + c = 0 without using Shridharacharya formula ", "java": "class GFG {\n  static void printRoots(long a, long b, long c) {\n    System.out.println(1 + \" , \u2581 \" + c / (a * 1.0));\n  }\n\n  public static void main(String[] args) {\n    long a = 2;\n    long b = 3;\n    long c = -5;\n    printRoots(a, b, c);\n  }\n}\n", "python": "def printRoots(a, b, c):\n    print(1, \" , \", c / (a * 1.0))\n\n\na = 2\nb = 3\nc = -5\nprintRoots(a, b, c)\n"}
{"text": "Nambiar Number Generator ", "java": "class GFG {\n  static String nambiarNumber(String str, int i) {\n    if (i >= str.length()) return \" \";\n    int firstDigit = (str.charAt(i) - '0');\n    int digitParity = firstDigit % 2;\n    int sumDigits = 0;\n    while (i < str.length()) {\n      sumDigits += (str.charAt(i) - '0');\n      int sumParity = sumDigits % 2;\n      if (digitParity != sumParity) {\n        break;\n      }\n      i++;\n    }\n    return (\" \" + sumDigits + nambiarNumber(str, i + 1));\n  }\n\n  public static void main(String[] args) {\n    String str = \"9880127431\";\n    System.out.println(nambiarNumber(str, 0));\n  }\n}\n", "python": "def nambiarNumber(Str, i):\n    if i >= len(Str):\n        return \" \"\n    firstDigit = ord(Str[i]) - ord(\"0\")\n    digitParity = firstDigit % 2\n    sumDigits = 0\n    while i < len(Str):\n        sumDigits += ord(Str[i]) - ord(\"0\")\n        sumParity = sumDigits % 2\n        if digitParity != sumParity:\n            break\n        i += 1\n    return \" \" + str(sumDigits) + nambiarNumber(Str, i + 1)\n\n\nStr = \"9880127431\"\nprint(nambiarNumber(Str, 0))\n"}
{"text": "Program to find the Depreciation of Value ", "java": "import java.io.*;\n\nclass GFG {\n  static float Depreciation(float v, float r, float t) {\n    float D = (float) (v * Math.pow((1 - r / 100), t));\n    return D;\n  }\n\n  public static void main(String[] args) {\n    float V1 = 200, R = 10, T = 2;\n    System.out.print(Depreciation(V1, R, T));\n  }\n}\n", "python": "from math import pow\n\n\ndef Depreciation(v, r, t):\n    D = v * pow((1 - r / 100), t)\n    return D\n\n\nif __name__ == \" _ _ main _ _ \":\n    V1 = 200\n    R = 10\n    T = 2\n    print(int(Depreciation(V1, R, T)))\n"}
{"text": "Program to find the Speed of train as per speed of sound ", "java": "class GFG {\n  static int speedOfTrain(float X, float Y) {\n    float Speed;\n    Speed = 1188 * ((X - Y) / Y);\n    return (int) Speed;\n  }\n\n  public static void main(String[] args) {\n    float X = 8f, Y = 7.2f;\n    int result = (speedOfTrain(X, Y));\n    System.out.println(result + \" \u2581 km / hr \");\n  }\n}\n", "python": "from math import ceil\n\n\ndef speedOfTrain(X, Y):\n    Speed = 0\n    Speed = 1188 * ((X - Y) / Y)\n    return Speed\n\n\nif __name__ == \" _ _ main _ _ \":\n    X = 8\n    Y = 7.2\n    print(ceil(speedOfTrain(X, Y)), end=\" \u2581 km / hr \")\n"}
{"text": "Maximum value of division of two numbers in an Array ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int Division(int a[], int n) {\n    int maxi = Integer.MIN_VALUE, mini = Integer.MAX_VALUE;\n    for (int i = 0; i < n; i++) {\n      maxi = Math.max(a[i], maxi);\n      mini = Math.min(a[i], mini);\n    }\n    return maxi / mini;\n  }\n\n  public static void main(String[] args) throws java.lang.Exception {\n    int a[] = {3, 7, 9, 3, 11};\n    int n = a.length;\n    System.out.print(Division(a, n));\n  }\n}\n", "python": "def Division(a, n):\n    maxi = -(10 ** 9)\n    mini = 10 ** 9\n    for i in a:\n        maxi = max(i, maxi)\n        mini = min(i, mini)\n    return maxi // mini\n\n\na = [3, 7, 9, 3, 11]\nn = len(a)\nprint(Division(a, n))\n"}
{"text": "Find the number of words of X vowels and Y consonants that can be formed from M vowels and N consonants ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int fact(int n) {\n    int res = 1;\n    for (int i = 2; i <= n; i++) res = res * i;\n    return res;\n  }\n\n  static int nCr(int n, int r) {\n    return fact(n) / (fact(r) * fact(n - r));\n  }\n\n  static int NumberOfWays(int X, int Y, int M, int N) {\n    return fact(X + Y) * nCr(M, X) * nCr(N, Y);\n  }\n\n  public static void main(String[] args) throws java.lang.Exception {\n    int X = 2, Y = 2, M = 3, N = 3;\n    System.out.println(NumberOfWays(X, Y, M, N));\n  }\n}\n", "python": "def fact(n):\n    res = 1\n    for i in range(2, n + 1, 1):\n        res = res * i\n    return res\n\n\ndef nCr(n, r):\n    return fact(n) // (fact(r) * fact(n - r))\n\n\ndef NumberOfWays(X, Y, M, N):\n    return fact(X + Y) * nCr(M, X) * nCr(N, Y)\n\n\nif __name__ == \" _ _ main _ _ \":\n    X = 2\n    Y = 2\n    M = 3\n    N = 3\n    print(NumberOfWays(X, Y, M, N))\n"}
{"text": "Program for sum of cosh ( x ) series upto Nth term ", "java": "import java.util.*;\n\nclass GFG {\n  static int fact(int n) {\n    int i = 1, fac = 1;\n    for (i = 1; i <= n; i++) fac = fac * i;\n    return fac;\n  }\n\n  static double log_Expansion(double x, int n) {\n    double sum = 0;\n    int i = 0;\n    for (i = 0; i < n; i++) {\n      sum = sum + Math.pow(x, 2 * i) / fact(2 * i);\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    double x = 1;\n    int n = 10;\n    System.out.println(log_Expansion(x, n));\n  }\n}\n", "python": "def fact(n):\n    i, fac = 1, 1\n    for i in range(1, n + 1):\n        fac = fac * i\n    return fac\n\n\ndef log_Expansion(x, n):\n    Sum = 0\n    i = 0\n    for i in range(n):\n        Sum = Sum + pow(x, 2 * i) / fact(2 * i)\n    return Sum\n\n\nx = 1\nn = 10\nprint(log_Expansion(x, n))\n"}
{"text": "Time taken per hour for stoppage of Car ", "java": "import java.util.*;\n\nclass GFG {\n  static int numberOfMinutes(int S, int S1) {\n    int Min = 0;\n    Min = (int) (((S - S1) / Math.floor(S)) * 60);\n    return Min;\n  }\n\n  public static void main(String[] args) {\n    int S = 30, S1 = 10;\n    System.out.println(numberOfMinutes(S, S1) + \" \u2581 min \");\n  }\n}\n", "python": "import math\n\n\ndef numberOfMinutes(S, S1):\n    Min = 0\n    Min = ((S - S1) / math.floor(S)) * 60\n    return int(Min)\n\n\nif __name__ == \" _ _ main _ _ \":\n    S, S1 = 30, 10\n    print(numberOfMinutes(S, S1), \" min \")\n"}
{"text": "Sum of the Tan ( x ) expansion upto N terms ", "java": "class GFG {\n  static int fac(int num) {\n    if (num == 0) return 1;\n    int fact = 1;\n    for (int i = 1; i <= num; i++) fact = fact * i;\n    return fact;\n  }\n\n  static void Tanx_expansion(int terms, int x) {\n    double sum = 0;\n    for (int i = 1; i <= terms; i += 1) {\n      double B = 0;\n      int Bn = 2 * i;\n      for (int k = 0; k <= Bn; k++) {\n        double temp = 0;\n        for (int r = 0; r <= k; r++)\n          temp = temp + Math.pow(-1, r) * fac(k) * Math.pow(r, Bn) / (fac(r) * fac(k - r));\n        B = B + temp / ((double) (k + 1));\n      }\n      sum = sum + Math.pow(-4, i) * (1 - Math.pow(4, i)) * B * Math.pow(x, 2 * i - 1) / fac(2 * i);\n    }\n    System.out.printf(\" % .9f \", sum);\n  }\n\n  public static void main(String[] args) {\n    int n = 6, x = 1;\n    Tanx_expansion(n, x);\n  }\n}\n", "python": "def fac(num):\n    if num == 0:\n        return 1\n    fact = 1\n    for i in range(1, num + 1):\n        fact = fact * i\n    return fact\n\n\ndef Tanx_expansion(terms, x):\n    sum = 0\n    for i in range(1, terms + 1):\n        B = 0\n        Bn = 2 * i\n        for k in range(Bn + 1):\n            temp = 0\n            for r in range(0, k + 1):\n                temp = temp + pow(-1, r) * fac(k) * pow(r, Bn) / (fac(r) * fac(k - r))\n            B = B + temp / ((k + 1))\n        sum = sum + pow(-4, i) * (1 - pow(4, i)) * B * pow(x, 2 * i - 1) / fac(2 * i)\n    print(\" % .9f \" % (sum))\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, x = 6, 1\n    Tanx_expansion(n, x)\n"}
{"text": "Minimum elements to be inserted in Array to make adjacent differences equal ", "java": "import java.io.*;\n\nclass GFG {\n  static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n  }\n\n  static int minimum_elements(int n, int arr[]) {\n    if (n < 3) return 0;\n    int g, ans = 0, diff, cnt;\n    diff = arr[1] - arr[0];\n    g = diff;\n    for (int i = 2; i < n; i++) {\n      diff = arr[i] - arr[i - 1];\n      g = gcd(g, diff);\n    }\n    for (int i = 1; i < n; i++) {\n      diff = arr[i] - arr[i - 1];\n      cnt = diff / g;\n      ans += (cnt - 1);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 5, 8, 10, 12, 16};\n    int n = arr.length;\n    System.out.println(minimum_elements(n, arr));\n  }\n}\n", "python": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef minimum_elements(n, arr):\n    if n < 3:\n        return 0\n    ans = 0\n    diff = arr[1] - arr[0]\n    g = diff\n    for i in range(2, n):\n        diff = arr[i] - arr[i - 1]\n        g = gcd(g, diff)\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        cnt = diff // g\n        ans += cnt - 1\n    return ans\n\n\narr = [1, 5, 8, 10, 12, 16]\nn = len(arr)\nprint(minimum_elements(n, arr))\n"}
{"text": "Largest and smallest digit of a number ", "java": "import java.io.*;\nimport java.util.*;\n\nclass Gfg {\n  static void Digits(int n) {\n    int largest = 0;\n    int smallest = 9;\n    while (n != 0) {\n      int r = n % 10;\n      largest = Math.max(r, largest);\n      smallest = Math.min(r, smallest);\n      n = n / 10;\n    }\n    System.out.println(largest + \" \u2581 \" + smallest);\n  }\n\n  public static void main(String[] args) throws java.lang.Exception {\n    int n = 2346;\n    Digits(n);\n  }\n}\n", "python": "def Digits(n):\n    largest = 0\n    smallest = 9\n    while n:\n        r = n % 10\n        largest = max(r, largest)\n        smallest = min(r, smallest)\n        n = n // 10\n    print(largest, smallest)\n\n\nn = 2346\nDigits(n)\n"}
{"text": "Probability of distributing M items among X bags such that first bag contains N items ", "java": "class GFG {\n  public static int factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n  }\n\n  public static int nCr(int n, int r) {\n    return factorial(n) / (factorial(r) * factorial(n - r));\n  }\n\n  public static float Probability(int M, int N, int X) {\n    return (float) (nCr(M - N - 1, X - 2) / (nCr(M - 1, X - 1) * 1.0));\n  }\n\n  public static void main(String[] args) {\n    int M = 9, X = 3, N = 4;\n    System.out.println(Probability(M, N, X));\n  }\n}\n", "python": "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\n\ndef nCr(n, r):\n    return factorial(n) / (factorial(r) * factorial(n - r))\n\n\ndef Probability(M, N, X):\n    return float(nCr(M - N - 1, X - 2) / (nCr(M - 1, X - 1) * 1.0))\n\n\nif __name__ == \" _ _ main _ _ \":\n    M = 9\n    X = 3\n    N = 4\n    print(Probability(M, N, X))\n"}
{"text": "Count of N digit numbers possible which satisfy the given conditions ", "java": "import java.io.*;\n\nclass GFG {\n  static int fact(int n) {\n    int res = 1;\n    for (int i = 2; i <= n; i++) res = res * i;\n    return res;\n  }\n\n  static int Count_number(int N) {\n    return (N * fact(N));\n  }\n\n  public static void main(String[] args) {\n    int N = 2;\n    System.out.print(Count_number(N));\n  }\n}\n", "python": "def fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\n\n\ndef Count_number(N):\n    return N * fact(N)\n\n\nN = 2\nprint(Count_number(N))\n"}
{"text": "Find the count of M character words which have at least one character repeated ", "java": "class GFG {\n  static int fact(int n) {\n    if (n <= 1) return 1;\n    return n * fact(n - 1);\n  }\n\n  static int nPr(int n, int r) {\n    return fact(n) / fact(n - r);\n  }\n\n  static int countWords(int N, int M) {\n    return (int) Math.pow(N, M) - nPr(N, M);\n  }\n\n  public static void main(String[] args) {\n    int N = 10, M = 5;\n    System.out.print(countWords(N, M));\n  }\n}\n", "python": "def fact(n):\n    if n <= 1:\n        return 1\n    return n * fact(n - 1)\n\n\ndef nPr(n, r):\n    return fact(n) // fact(n - r)\n\n\ndef countWords(N, M):\n    return pow(N, M) - nPr(N, M)\n\n\nN = 10\nM = 5\nprint(countWords(N, M))\n"}
{"text": "Number formed by the rightmost set bit in N ", "java": "class geeks {\n  public static int firstSetBit(int n) {\n    int x = n & (n - 1);\n    return (n ^ x);\n  }\n\n  public static void main(String[] args) {\n    int n = 12;\n    System.out.println(firstSetBit(n));\n  }\n}\n", "python": "def firstSetBit(n):\n    x = n & (n - 1)\n    return n ^ x\n\n\nn = 12\nprint(firstSetBit(n))\n"}
{"text": "Number of hours after which the second person moves ahead of the first person if they travel at a given speed ", "java": "import java.io.*;\n\nclass GFG {\n  static int findHours(int a, int b, int k) {\n    if (a >= b) return -1;\n    int time = k / (b - a);\n    time = time + 1;\n    return time;\n  }\n\n  public static void main(String[] args) {\n    int a = 4, b = 5, k = 1;\n    System.out.println(findHours(a, b, k));\n  }\n}\n", "python": "def findHours(a, b, k):\n    if a >= b:\n        return -1\n    time = k // (b - a)\n    time = time + 1\n    return time\n\n\na = 4\nb = 5\nk = 1\nprint(findHours(a, b, k))\n"}
{"text": "Number of ways of distributing N identical objects in R distinct groups with no groups empty ", "java": "import java.io.*;\n\nclass GFG {\n  static int ncr(int n, int r) {\n    int ans = 1;\n    for (int i = 1; i <= r; i += 1) {\n      ans *= (n - r + i);\n      ans /= i;\n    }\n    return ans;\n  }\n\n  static int NoOfDistributions(int N, int R) {\n    return ncr(N - 1, R - 1);\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    int R = 3;\n    System.out.println(NoOfDistributions(N, R));\n  }\n}\n", "python": "def ncr(n, r):\n    ans = 1\n    for i in range(1, r + 1):\n        ans *= n - r + i\n        ans //= i\n    return ans\n\n\ndef NoOfDistributions(N, R):\n    return ncr(N - 1, R - 1)\n\n\nN = 4\nR = 3\nprint(NoOfDistributions(N, R))\n"}
{"text": "Number of ways of distributing N identical objects in R distinct groups ", "java": "import java.util.*;\n\nclass GFG {\n  static int ncr(int n, int r) {\n    int ans = 1;\n    for (int i = 1; i <= r; i += 1) {\n      ans *= (n - r + i);\n      ans /= i;\n    }\n    return ans;\n  }\n\n  static int NoOfDistributions(int N, int R) {\n    return ncr(N + R - 1, R - 1);\n  }\n\n  public static void main(String[] args) {\n    int N = 4, R = 3;\n    System.out.println(NoOfDistributions(N, R));\n  }\n}\n", "python": "def ncr(n, r):\n    ans = 1\n    for i in range(1, r + 1):\n        ans *= n - r + i\n        ans //= i\n    return ans\n\n\ndef NoOfDistributions(N, R):\n    return ncr(N + R - 1, R - 1)\n\n\nN = 4\nR = 3\nprint(NoOfDistributions(N, R))\n"}
{"text": "Find two vertices of an isosceles triangle in which there is rectangle with opposite corners ( 0 , 0 ) and ( X , Y ) ", "java": "class GFG {\n  static void Vertices(int x, int y) {\n    int val = Math.abs(x) + Math.abs(y);\n    System.out.print(val * (x < 0 ? -1 : 1) + \" \u2581 0 \u2581 \");\n    System.out.print(\"0 \u2581 \" + val * (y < 0 ? -1 : 1));\n  }\n\n  public static void main(String[] args) {\n    int x = 3, y = 3;\n    Vertices(x, y);\n  }\n}\n", "python": "def Vertices(x, y):\n    val = abs(x) + abs(y)\n    if x < 0:\n        x = -1\n    else:\n        x = 1\n    print(val * x, \"0\", end=\" \u2581 \")\n    if y < 0:\n        y = -1\n    else:\n        y = 1\n    print(\"0\", val * y)\n\n\nif __name__ == \" _ _ main _ _ \":\n    x = 3\n    y = 3\n    Vertices(x, y)\n"}
{"text": "Count of numbers whose 0 th and Nth bits are set ", "java": "import java.io.*;\n\nclass GFG {\n  static int countNum(int n) {\n    if (n == 1) return 1;\n    int count = (int) Math.pow(2, n - 2);\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(countNum(n));\n  }\n}\n", "python": "def countNum(n):\n    if n == 1:\n        return 1\n    count = pow(2, n - 2)\n    return count\n\n\nn = 3\nprint(countNum(n))\n"}
{"text": "Find a number containing N ", "java": "import java.util.*;\n\nclass GFG {\n  static String constructString(int n) {\n    String s = \" \";\n    for (int i = 0; i < n; i++) {\n      s += \"10\";\n    }\n    return s;\n  }\n\n  static int binaryToDecimal(String n) {\n    String num = n;\n    int dec_value = 0;\n    int base = 1;\n    int len = num.length();\n    for (int i = len - 1; i >= 0; i--) {\n      if (num.charAt(i) == '1') dec_value += base;\n      base = base * 2;\n    }\n    return dec_value;\n  }\n\n  static int findNumber(int n) {\n    String s = constructString(n - 1);\n    int num = binaryToDecimal(s);\n    return num;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(findNumber(n));\n  }\n}\n", "python": "def findNumber(n):\n    num = n - 1\n    num = 2 * (4 ** num)\n    num = num // 3\n    return num\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(findNumber(n))\n"}
{"text": "Seating arrangement of N boys sitting around a round table such that two particular boys sit together ", "java": "import java.io.*;\n\nclass GFG {\n  static int Total_Ways(int n) {\n    int fac = 1;\n    for (int i = 2; i <= n - 1; i++) {\n      fac = fac * i;\n    }\n    return (fac * 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(Total_Ways(n));\n  }\n}\n", "python": "def Total_Ways(n):\n    fac = 1\n    for i in range(2, n):\n        fac = fac * i\n    return fac * 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(Total_Ways(n))\n"}
{"text": "Find the maximum number of elements divisible by 3 ", "java": "import java.io.*;\n\nclass GFG {\n  static int MaxNumbers(int a[], int n) {\n    int[] fre = {0, 0, 0};\n    for (int i = 0; i < n; i++) {\n      a[i] %= 3;\n      fre[a[i]]++;\n    }\n    int ans = fre[0];\n    int k = Math.min(fre[1], fre[2]);\n    ans += k;\n    fre[1] -= k;\n    fre[2] -= k;\n    ans += fre[1] / 3 + fre[2] / 3;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {1, 4, 10, 7, 11, 2, 8, 5, 9};\n    int n = a.length;\n    System.out.println(MaxNumbers(a, n));\n  }\n}\n", "python": "def MaxNumbers(a, n):\n    fre = [0 for i in range(3)]\n    for i in range(n):\n        a[i] %= 3\n        fre[a[i]] += 1\n    ans = fre[0]\n    k = min(fre[1], fre[2])\n    ans += k\n    fre[1] -= k\n    fre[2] -= k\n    ans += fre[1] // 3 + fre[2] // 3\n    return ans\n\n\na = [1, 4, 10, 7, 11, 2, 8, 5, 9]\nn = len(a)\nprint(MaxNumbers(a, n))\n"}
{"text": "Check if two numbers have same number of digits ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean sameLength(int A, int B) {\n    while ((A > 0) && (B > 0)) {\n      A = A / 10;\n      B = B / 10;\n    }\n    if ((A == 0) && (B == 0)) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int A = 21, B = 1;\n    if (sameLength(A, B)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def sameLength(A, B):\n    while A > 0 and B > 0:\n        A = A / 10\n        B = B / 10\n    if A == 0 and B == 0:\n        return True\n    return False\n\n\nA = 21\nB = 1\nif sameLength(A, B):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to Calculate e ^ x by Recursion ( using Taylor Series ) ", "java": "import java.text.*;\n\nclass GFG {\n  static double p = 1, f = 1;\n\n  static double e(int x, int n) {\n    double r;\n    if (n == 0) return 1;\n    r = e(x, n - 1);\n    p = p * x;\n    f = f * n;\n    return (r + p / f);\n  }\n\n  public static void main(String[] args) {\n    int x = 4, n = 15;\n    DecimalFormat df = new DecimalFormat(\"0 . # # # # # # \");\n    System.out.println(df.format(e(x, n)));\n  }\n}\n", "python": "p = 1.0\nf = 1.0\n\n\ndef e(x, n):\n    global p, f\n    if n == 0:\n        return 1\n    r = e(x, n - 1)\n    p = p * x\n    f = f * n\n    return r + p / f\n\n\nx = 4\nn = 15\nprint(e(x, n))\n"}
{"text": "Find the sum of numbers from 1 to n excluding those which are powers of K ", "java": "import java.io.*;\n\nclass GFG {\n  static long sumPowersK(long n, long k) {\n    long sum = 0, num = 1;\n    while (num <= n) {\n      sum += num;\n      num *= k;\n    }\n    return sum;\n  }\n\n  static long getSum(long n, long k) {\n    long pwrK = sumPowersK(n, k);\n    long sumAll = (n * (n + 1)) / 2;\n    return (sumAll - pwrK);\n  }\n\n  public static void main(String[] args) {\n    long n = 10, k = 3;\n    System.out.println(getSum(n, k));\n  }\n}\n", "python": "def sumPowersK(n, k):\n    sum = 0\n    num = 1\n    while num <= n:\n        sum += num\n        num *= k\n    return sum\n\n\ndef getSum(n, k):\n    pwrK = sumPowersK(n, k)\n    sumAll = (n * (n + 1)) / 2\n    return sumAll - pwrK\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    k = 3\n    print(getSum(n, k))\n"}
{"text": "Check whether a number can be represented as sum of K distinct positive integers ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean solve(int n, int k) {\n    if (n >= (k * (k + 1)) / 2) {\n      return true;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 12, k = 4;\n    if (solve(n, k)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def solve(n, k):\n    if n >= (k * (k + 1)) // 2:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 12\n    k = 4\n    if solve(n, k):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Program to find the rate percentage from compound interest of consecutive years ", "java": "class GFG {\n  static int Rate(int N1, int N2) {\n    float rate = (N2 - N1) * 100 / N1;\n    return (int) rate;\n  }\n\n  public static void main(String[] args) {\n    int N1 = 100, N2 = 120;\n    System.out.println(Rate(N1, N2) + \" \u2581 % \");\n  }\n}\n", "python": "def Rate(N1, N2):\n    rate = (N2 - N1) * 100 // (N1)\n    return rate\n\n\nif __name__ == \" _ _ main _ _ \":\n    N1 = 100\n    N2 = 120\n    print(Rate(N1, N2), \" \u2581 % \")\n"}
{"text": "Minimum integer such that it leaves a remainder 1 on dividing with any element from the range [ 2 , N ] ", "java": "class GFG {\n  static long getMinNum(int N) {\n    int lcm = 1;\n    for (int i = 2; i <= N; i++) lcm = ((i * lcm) / (__gcd(i, lcm)));\n    return (lcm + 1);\n  }\n\n  static int __gcd(int a, int b) {\n    if (b == 0) return a;\n    return __gcd(b, a % b);\n  }\n\n  public static void main(String args[]) {\n    int N = 5;\n    System.out.println(getMinNum(N));\n  }\n}\n", "python": "from math import gcd\n\n\ndef getMinNum(N):\n    lcm = 1\n    for i in range(2, N + 1):\n        lcm = (i * lcm) // (gcd(i, lcm))\n    return lcm + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    print(getMinNum(N))\n"}
{"text": "Maximum number of edges in Bipartite graph ", "java": "class GFG {\n  public static double maxEdges(double N) {\n    double edges = 0;\n    edges = Math.floor((N * N) / 4);\n    return edges;\n  }\n\n  public static void main(String[] args) {\n    double N = 5;\n    System.out.println(maxEdges(N));\n  }\n}\n", "python": "def maxEdges(N):\n    edges = 0\n    edges = (N * N) // 4\n    return edges\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    print(maxEdges(N))\n"}
{"text": "Count number of 1 s in the array after N moves ", "java": "class GFG {\n  static int countOnes(int arr[], int N) {\n    for (int i = 1; i <= N; i++) {\n      for (int j = i; j <= N; j++) {\n        if (j % i == 0) {\n          if (arr[j - 1] == 0) {\n          } else {\n          }\n        }\n      }\n    }\n    int count = 0;\n    for (int i = 0; i < N; i++) {\n      if (arr[i] == 1) {}\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = new int[10];\n    int ans = countOnes(arr, N);\n    System.out.println(ans);\n  }\n}\n", "python": "from math import sqrt, ceil, floor\n\n\ndef perfectSquares(a, b):\n    return floor(sqrt(b)) - ceil(sqrt(a)) + 1\n\n\ndef countOnes(arr, n):\n    return perfectSquares(1, n)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 10\n    arr = [0] * 10\n    print(countOnes(arr, N))\n"}
{"text": "Count unique numbers that can be generated from N by adding one and removing trailing zeros ", "java": "import java.util.*;\n\nclass GFG {\n  static void count_unique(HashSet<Integer> s, int n) {\n    if (s.contains(n)) return;\n    s.add(n);\n    n += 1;\n    while (n % 10 == 0) {\n      n = n / 10;\n    }\n    count_unique(s, n);\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    HashSet<Integer> s = new HashSet<>();\n    count_unique(s, n);\n    System.out.println(s.size());\n  }\n}\n", "python": "def count_unique(s, n):\n    if s.count(n):\n        return\n    s.append(n)\n    n += 1\n    while n % 10 == 0:\n        n = n // 10\n    count_unique(s, n)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    s = []\n    count_unique(s, n)\n    print(len(s))\n"}
{"text": "Smallest and Largest sum of two n ", "java": "class GFG {\n  static int smallestSum(int n) {\n    if (n == 1) return 0;\n    return (2 * (int) Math.pow(10, n - 1));\n  }\n\n  static int largestSum(int n) {\n    return (2 * ((int) Math.pow(10, n) - 1));\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(\" Largest \u2581 = \u2581 \" + largestSum(n));\n    System.out.print(\" Smallest \u2581 = \u2581 \" + smallestSum(n));\n  }\n}\n", "python": "def smallestSum(n):\n    if n == 1:\n        return 0\n    return 2 * pow(10, n - 1)\n\n\ndef largestSum(n):\n    return 2 * (pow(10, n) - 1)\n\n\nn = 4\nprint(\" Largest \u2581 = \u2581 \", largestSum(n))\nprint(\" Smallest \u2581 = \u2581 \", smallestSum(n))\n"}
{"text": "Find sum of factorials in an array ", "java": "class GFG {\n  static int factorial(int n) {\n    int f = 1;\n    for (int i = 1; i <= n; i++) {\n      f *= i;\n    }\n    return f;\n  }\n\n  static int sumFactorial(int[] arr, int n) {\n    int s = 0;\n    for (int i = 0; i < n; i++) {\n      s += factorial(arr[i]);\n    }\n    return s;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {7, 3, 5, 4, 8};\n    int n = arr.length;\n    System.out.println(sumFactorial(arr, n));\n  }\n}\n", "python": "def factorial(n):\n    f = 1\n    for i in range(1, n + 1):\n        f *= i\n    return f\n\n\ndef sumFactorial(arr, n):\n    s = 0\n    for i in range(0, n):\n        s += factorial(arr[i])\n    return s\n\n\narr = [7, 3, 5, 4, 8]\nn = len(arr)\nprint(sumFactorial(arr, n))\n"}
{"text": "Number of ways to arrange K different objects taking N objects at a time ", "java": "class GFG {\n  static long mod = (long) (1e9 + 7);\n\n  static long factorial(long n, long p) {\n    for (int i = 2; i <= n; i++) res = (res * i) % p;\n    return res;\n  }\n\n  static long power(long x, long y, long p) {\n    while (y > 0) {\n      if ((y & 1) == 1) res = (res * x) % p;\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  static long modInverse(long n, long p) {\n    return power(n, p - 2, p);\n  }\n\n  static long nCrModP(long n, long r, long p) {\n    if (r == 0) return 1;\n    long fac[] = new long[(int) n + 1];\n    fac[0] = 1;\n    for (int i = 1; i <= n; i++) fac[i] = fac[i - 1] * i % p;\n    return (fac[(int) n]\n            * modInverse(fac[(int) r], p)\n            % p\n            * modInverse(fac[(int) n - (int) r], p)\n            % p)\n        % p;\n  }\n\n  static long countArrangements(long n, long k, long p) {\n    return (factorial(n, p) * nCrModP(k, n, p)) % p;\n  }\n\n  public static void main(String[] args) {\n    long N = 5, K = 8;\n    System.out.println(countArrangements(N, K, mod));\n  }\n}\n", "python": "mod = 10 ** 9 + 7\n\n\ndef factorial(n, p):\n    for i in range(2, n + 1):\n        res = (res * i) % p\n    return res\n\n\ndef power(x, y, p):\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        x = (x * x) % p\n    return res\n\n\ndef modInverse(n, p):\n    return power(n, p - 2, p)\n\n\ndef nCrModP(n, r, p):\n    if r == 0:\n        return 1\n    fac = [0 for i in range(n + 1)]\n    fac[0] = 1\n    for i in range(1, n + 1):\n        fac[i] = fac[i - 1] * i % p\n    return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p\n\n\ndef countArrangements(n, k, p):\n    return (factorial(n, p) * nCrModP(k, n, p)) % p\n\n\nN = 5\nK = 8\nprint(countArrangements(N, K, mod))\n"}
{"text": "Find maximum product of digits among numbers less than or equal to N ", "java": "import java.io.*;\n\nclass GFG {\n  static int maxProd(int N) {\n    if (N == 0) return 1;\n    if (N < 10) return N;\n    return Math.max(maxProd(N / 10) * (N % 10), maxProd(N / 10 - 1) * 9);\n  }\n\n  public static void main(String[] args) {\n    int N = 390;\n    System.out.println(maxProd(N));\n  }\n}\n", "python": "def maxProd(N):\n    if N == 0:\n        return 1\n    if N < 10:\n        return N\n    return max(maxProd(N // 10) * (N % 10), maxProd(N // 10 - 1) * 9)\n\n\nN = 390\nprint(maxProd(N))\n"}
{"text": "Sum of the series 1 , 2 , 4 , 3 , 5 , 7 , 9 , 6 , 8 , 10 , 11 , 13. . till N ", "java": "class GFG {\n  static int sumodd(int n) {\n    return (n * n);\n  }\n\n  static int sumeven(int n) {\n    return (n * (n + 1));\n  }\n\n  static int findSum(int num) {\n    int sumo = 0;\n    int sume = 0;\n    int x = 1;\n    int cur = 0;\n    int ans = 0;\n    while (num > 0) {\n      int inc = Math.min(x, num);\n      num -= inc;\n      if (cur == 0) {\n        ans = ans + sumodd(sumo + inc) - sumodd(sumo);\n        sumo += inc;\n      } else {\n        ans = ans + sumeven(sume + inc) - sumeven(sume);\n        sume += inc;\n      }\n      x *= 2;\n      cur ^= 1;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(findSum(n));\n  }\n}\n", "python": "def sumodd(n):\n    return n * n\n\n\ndef sumeven(n):\n    return n * (n + 1)\n\n\ndef findSum(num):\n    sumo = 0\n    sume = 0\n    x = 1\n    cur = 0\n    ans = 0\n    while num > 0:\n        inc = min(x, num)\n        num -= inc\n        if cur == 0:\n            ans = ans + sumodd(sumo + inc) - sumodd(sumo)\n            sumo += inc\n        else:\n            ans = ans + sumeven(sume + inc) - sumeven(sume)\n            sume += inc\n        x *= 2\n        cur ^= 1\n    return ans\n\n\nn = 4\nprint(findSum(n))\n"}
{"text": "Find the nth term of the given series ", "java": "class GFG {\n  static int oddTriangularNumber(int N) {\n    return (N * ((2 * N) - 1));\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    System.out.println(oddTriangularNumber(N));\n  }\n}\n", "python": "def oddTriangularNumber(N):\n    return N * ((2 * N) - 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    print(oddTriangularNumber(N))\n"}
{"text": "Equation of straight line passing through a given point which bisects it into two equal line segments ", "java": "class GFG {\n  static void line(double x0, double y0) {\n    double c = (int) (2 * y0 * x0);\n    System.out.println(y0 + \" x \" + \" \u2581 + \u2581 \" + x0 + \" y \u2581 = \u2581 \" + c);\n  }\n\n  public static void main(String[] args) {\n    double x0 = 4, y0 = 3;\n    line(x0, y0);\n  }\n}\n", "python": "def line(x0, y0):\n    c = 2 * y0 * x0\n    print(y0, \" x \", \" + \", x0, \" y = \", c)\n\n\nif __name__ == \" _ _ main _ _ \":\n    x0 = 4\n    y0 = 3\n    line(x0, y0)\n"}
{"text": "Calculate the loss incurred in selling the given items at discounted price ", "java": "class GFG {\n  static float percent(int n, int x) {\n    float p = n * x;\n    p /= 100;\n    return p;\n  }\n\n  static float getLoss(int price[], int quantity[], int X[], int n) {\n    float loss = 0;\n    for (int i = 0; i < n; i++) {\n      float originalPrice = price[i];\n      float sellingPrice = originalPrice + percent((int) originalPrice, X[i]);\n      float afterDiscount = sellingPrice - percent((int) sellingPrice, X[i]);\n      loss += ((originalPrice - afterDiscount) * quantity[i]);\n    }\n    return loss;\n  }\n\n  public static void main(String args[]) {\n    int price[] = {20, 48, 200, 100};\n    int quantity[] = {20, 48, 1, 1};\n    int X[] = {0, 48, 200, 5};\n    int n = X.length;\n    System.out.print(getLoss(price, quantity, X, n));\n  }\n}\n", "python": "def percent(n, x):\n    p = (int)(n) * x\n    p /= 100\n    return p\n\n\ndef getLoss(price, quantity, X, n):\n    loss = 0\n    for i in range(n):\n        originalPrice = price[i]\n        sellingPrice = originalPrice + percent(originalPrice, X[i])\n        afterDiscount = sellingPrice - percent(sellingPrice, X[i])\n        loss += (originalPrice - afterDiscount) * quantity[i]\n    return round(loss, 2)\n\n\nprice = [20, 48, 200, 100]\nquantity = [20, 48, 1, 1]\nX = [0, 48, 200, 5]\nn = len(X)\nprint(getLoss(price, quantity, X, n))\n"}
{"text": "Maximum difference between two elements in an Array ", "java": "class GFG {\n  static int maxAbsDiff(int arr[], int n) {\n    int minEle = arr[0];\n    int maxEle = arr[0];\n    for (int i = 1; i < n; i++) {\n      minEle = Math.min(minEle, arr[i]);\n      maxEle = Math.max(maxEle, arr[i]);\n    }\n    return (maxEle - minEle);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {2, 1, 5, 3};\n    int n = arr.length;\n    System.out.print(maxAbsDiff(arr, n));\n  }\n}\n", "python": "def maxAbsDiff(arr, n):\n    minEle = arr[0]\n    maxEle = arr[0]\n    for i in range(1, n):\n        minEle = min(minEle, arr[i])\n        maxEle = max(maxEle, arr[i])\n    return maxEle - minEle\n\n\narr = [2, 1, 5, 3]\nn = len(arr)\nprint(maxAbsDiff(arr, n))\n"}
{"text": "3 ", "java": "class GFG {\n  static boolean isOsiris(int n) {\n    int a = n % 10;\n    int b = (n / 10) % 10;\n    int c = n / 100;\n    int digit_sum = a + b + c;\n    if (n == (2 * (digit_sum) * 11)) {\n      return true;\n    }\n    return false;\n  }\n\n  public static void main(String args[]) {\n    int n = 132;\n    if (isOsiris(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isOsiris(n):\n    a = n % 10\n    b = (n // 10) % 10\n    c = n // 100\n    digit_sum = a + b + c\n    if n == (2 * (digit_sum) * 11):\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 132\n    if isOsiris(n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Dudeney Numbers ", "java": "\nclass GFG {\n  static boolean isDudeney(int n) {\n    int cube_rt = (int) (Math.round((Math.pow(n, 1.0 / 3.0))));\n    if (cube_rt * cube_rt * cube_rt != n) return false;\n    int dig_sum = 0;\n    int temp = n;\n    while (temp > 0) {\n      int rem = temp % 10;\n      dig_sum += rem;\n      temp /= 10;\n    }\n    if (cube_rt != dig_sum) return false;\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int n = 17576;\n    if (isDudeney(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isDudeney(n):\n    cube_rt = int(round((pow(n, 1.0 / 3.0))))\n    if cube_rt * cube_rt * cube_rt != n:\n        return False\n    dig_sum = 0\n    temp = n\n    while temp > 0:\n        rem = temp % 10\n        dig_sum += rem\n        temp //= 10\n    if cube_rt != dig_sum:\n        return False\n    return True\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 17576\n    if isDudeney(n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Smallest N digit number which is a multiple of 5 ", "java": "class GFG {\n  static int smallestMultiple(int n) {\n    if (n == 1) return 5;\n    return (int) (Math.pow(10, n - 1));\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(smallestMultiple(n));\n  }\n}\n", "python": "def smallestMultiple(n):\n    if n == 1:\n        return 5\n    return pow(10, n - 1)\n\n\nn = 4\nprint(smallestMultiple(n))\n"}
{"text": "Program to calculate the number of odd days in given number of years ", "java": "class GFG {\n  static int oddDays(int N) {\n    int hund1 = N / 100;\n    int hund4 = N / 400;\n    int leap = N >> 2;\n    int ord = N - leap;\n    if (hund1 > 0) {\n      ord += hund1;\n      leap -= hund1;\n    }\n    if (hund4 > 0) {\n      ord -= hund4;\n      leap += hund4;\n    }\n    int days = ord + leap * 2;\n    int odd = days % 7;\n    return odd;\n  }\n\n  public static void main(String args[]) {\n    int N = 100;\n    System.out.print(oddDays(N));\n  }\n}\n", "python": "def oddDays(N):\n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap\n    if hund1:\n        ordd += hund1\n        leap -= hund1\n    if hund4:\n        ordd -= hund4\n        leap += hund4\n    days = ordd + leap * 2\n    odd = days % 7\n    return odd\n\n\nN = 100\nprint(oddDays(N))\n"}
{"text": "Largest ellipse that can be inscribed within a rectangle which in turn is inscribed within a semicircle ", "java": "class GFG {\n  static float ellipsearea(float r) {\n    if (r < 0) return -1;\n    float a = (float) ((3.14f * r * r) / 4);\n    return a;\n  }\n\n  public static void main(String[] args) {\n    float r = 5;\n    System.out.println(ellipsearea(r));\n  }\n}\n", "python": "def ellipsearea(r):\n    if r < 0:\n        return -1\n    a = (3.14 * r * r) / 4\n    return a\n\n\nif __name__ == \" _ _ main _ _ \":\n    r = 5\n    print(ellipsearea(r))\n"}
{"text": "Find the minimum number of operations required to make all array elements equal ", "java": "import java.util.*;\n\nclass GFG {\n  static int minOperations(int arr[], int n) {\n    HashMap<Integer, Integer> mp = new HashMap<Integer, Integer>();\n    for (int i = 0; i < n; i++) {\n      if (mp.containsKey(arr[i])) {\n        mp.put(arr[i], mp.get(arr[i]) + 1);\n      } else {\n        mp.put(arr[i], 1);\n      }\n    }\n    int maxFreq = Integer.MIN_VALUE;\n    maxFreq = Collections.max(mp.entrySet(), Comparator.comparingInt(Map.Entry::getKey)).getValue();\n    return (n - maxFreq);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 4, 6};\n    int n = arr.length;\n    System.out.println(minOperations(arr, n));\n  }\n}\n", "python": "import sys\n\n\ndef minOperations(arr, n):\n    mp = dict.fromkeys(arr, 0)\n    for i in range(n):\n        mp[arr[i]] += 1\n    maxFreq = -(sys.maxsize - 1)\n    for key in mp:\n        maxFreq = max(maxFreq, mp[key])\n    return n - maxFreq\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 4, 6]\n    n = len(arr)\n    print(minOperations(arr, n))\n"}
{"text": "Reduce the fraction to its lowest form ", "java": "class GFG {\n  static void reduceFraction(int x, int y) {\n    int d;\n    d = __gcd(x, y);\n    x = x / d;\n    y = y / d;\n    System.out.println(\" x \u2581 = \u2581 \" + x + \" , \u2581 y \u2581 = \u2581 \" + y);\n  }\n\n  static int __gcd(int a, int b) {\n    if (b == 0) return a;\n    return __gcd(b, a % b);\n  }\n\n  public static void main(String[] args) {\n    int x = 16;\n    int y = 10;\n    reduceFraction(x, y);\n  }\n}\n", "python": "from math import gcd\n\n\ndef reduceFraction(x, y):\n    d = gcd(x, y)\n    x = x // d\n    y = y // d\n    print(\" x \u2581 = \", x, \" , \u2581 y \u2581 = \", y)\n\n\nif __name__ == \" _ _ main _ _ \":\n    x = 16\n    y = 10\n    reduceFraction(x, y)\n"}
{"text": "Times required by Simple interest for the Principal to become Y times itself ", "java": "class GFG {\n  static float noOfYears(int t1, int n1, int t2) {\n    float years = ((t2 - 1) * n1 / (float) (t1 - 1));\n    return years;\n  }\n\n  public static void main(String[] args) {\n    int T1 = 3, N1 = 5, T2 = 6;\n    System.out.println(noOfYears(T1, N1, T2));\n  }\n}\n", "python": "def noOfYears(t1, n1, t2):\n    years = (t2 - 1) * n1 / (t1 - 1)\n    return years\n\n\nif __name__ == \" _ _ main _ _ \":\n    T1, N1, T2 = 3, 5, 6\n    print(noOfYears(T1, N1, T2))\n"}
{"text": "Check if a given number divides the sum of the factorials of its digits ", "java": "class GFG {\n  static boolean isPossible(int n) {\n    int fac[] = new int[10];\n    fac[0] = fac[1] = 1;\n    for (int i = 2; i < 10; i++) fac[i] = fac[i - 1] * i;\n    int sum = 0;\n    int x = n;\n    while (x != 0) {\n      sum += fac[x % 10];\n      x /= 10;\n    }\n    if (sum % n == 0) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 19;\n    if (isPossible(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isPossible(n):\n    fac = [0 for i in range(10)]\n    fac[0] = 1\n    fac[1] = 1\n    for i in range(2, 10, 1):\n        fac[i] = fac[i - 1] * i\n    sum = 0\n    x = n\n    while x:\n        sum += fac[x % 10]\n        x = int(x / 10)\n    if sum % n == 0:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 19\n    if isPossible(n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Count number of binary strings of length N having only 0 ' s \u2581 and \u2581 1' s ", "java": "import java.util.*;\n\nclass GFG {\n  static int mod = (int) (1e9 + 7);\n\n  static int power(int x, int y, int p) {\n    while (y > 0) {\n      if ((y & 1) == 1) res = (res * x) % p;\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  static int findCount(int N) {\n    int count = power(2, N, mod);\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int N = 25;\n    System.out.println(findCount(N));\n  }\n}\n", "python": "mod = 1000000007\n\n\ndef power(x, y, p):\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        x = (x * x) % p\n    return res\n\n\ndef findCount(N):\n    count = power(2, N, mod)\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 25\n    print(findCount(N))\n"}
{"text": "XOR of all the elements in the given range [ L , R ] ", "java": "class GFG {\n  static int msb(int x) {\n    int ret = 0;\n    while ((x >> (ret + 1)) != 0) ret++;\n    return ret;\n  }\n\n  static int xorRange(int l, int r) {\n    int max_bit = msb(r);\n    int mul = 2;\n    int ans = 0;\n    for (int i = 1; i <= max_bit; i++) {\n      if ((l / mul) * mul == (r / mul) * mul) {\n        if (((l & (1 << i)) != 0) && (r - l + 1) % 2 == 1) ans += mul;\n        mul *= 2;\n        continue;\n      }\n      int odd_c = 0;\n      if (((l & (1 << i)) != 0) && l % 2 == 1) odd_c = (odd_c ^ 1);\n      if (((r & (1 << i)) != 0) && r % 2 == 0) odd_c = (odd_c ^ 1);\n      if (odd_c != 0) ans += mul;\n      mul *= 2;\n    }\n    int zero_bit_cnt = zero_bit_cnt = (r - l + 1) / 2;\n    if (l % 2 == 1 && r % 2 == 1) zero_bit_cnt++;\n    if (zero_bit_cnt % 2 == 1) ans++;\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int l = 1, r = 4;\n    System.out.print(xorRange(l, r));\n  }\n}\n", "python": "def msb(x):\n    ret = 0\n    while (x >> (ret + 1)) != 0:\n        ret = ret + 1\n    return ret\n\n\ndef xorRange(l, r):\n    max_bit = msb(r)\n    mul = 2\n    ans = 0\n    for i in range(1, max_bit + 1):\n        if (l // mul) * mul == (r // mul) * mul:\n            if ((l & (1 << i)) != 0) and (r - l + 1) % 2 == 1:\n                ans = ans + mul\n            mul = mul * 2\n            continue\n        odd_c = 0\n        if ((l & (1 << i)) != 0) and l % 2 == 1:\n            odd_c = odd_c ^ 1\n        if ((r & (1 << i)) != 0) and r % 2 == 0:\n            odd_c = odd_c ^ 1\n        if odd_c:\n            ans = ans + mul\n        mul = mul * 2\n    zero_bit_cnt = (r - l + 1) // 2\n    if (l % 2 == 1) and (r % 2 == 1):\n        zero_bit_cnt = zero_bit_cnt + 1\n    if zero_bit_cnt % 2 == 1:\n        ans = ans + 1\n    return ans\n\n\nl = 1\nr = 4\nprint(xorRange(l, r))\n"}
{"text": "XOR of all the elements in the given range [ L , R ] ", "java": "class GFG {\n  static long computeXOR(int n) {\n    int x = n & 3;\n    switch (x) {\n      case 0:\n        return n;\n      case 1:\n        return 1;\n      case 2:\n        return n + 1;\n      case 3:\n        return 0;\n    }\n    return 0;\n  }\n\n  public static void main(String args[]) {\n    int l = 1, r = 4;\n    System.out.println(computeXOR(r) ^ computeXOR(l - 1));\n  }\n}\n", "python": "def msb(x):\n    ret = 0\n    while (x >> (ret + 1)) != 0:\n        ret = ret + 1\n    return ret\n\n\ndef xorRange(l, r):\n    max_bit = msb(r)\n    mul = 2\n    ans = 0\n    for i in range(1, max_bit + 1):\n        if (l // mul) * mul == (r // mul) * mul:\n            if ((l & (1 << i)) != 0) and (r - l + 1) % 2 == 1:\n                ans = ans + mul\n            mul = mul * 2\n            continue\n        odd_c = 0\n        if ((l & (1 << i)) != 0) and l % 2 == 1:\n            odd_c = odd_c ^ 1\n        if ((r & (1 << i)) != 0) and r % 2 == 0:\n            odd_c = odd_c ^ 1\n        if odd_c:\n            ans = ans + mul\n        mul = mul * 2\n    zero_bit_cnt = (r - l + 1) // 2\n    if (l % 2 == 1) and (r % 2 == 1):\n        zero_bit_cnt = zero_bit_cnt + 1\n    if zero_bit_cnt % 2 == 1:\n        ans = ans + 1\n    return ans\n\n\nl = 1\nr = 4\nprint(xorRange(l, r))\n"}
{"text": "Find the number of integers from 1 to n which contains digits 0 ' s \u2581 and \u2581 1' s only ", "java": "class GFG {\n  static int countNumbers(int x, int n) {\n    if (x > n) return 0;\n    return 1 + countNumbers(x * 10, n) + countNumbers(x * 10 + 1, n);\n  }\n\n  public static void main(String[] args) {\n    int n = 120;\n    System.out.println(countNumbers(1, n));\n  }\n}\n", "python": "def countNumbers(x, n):\n    if x > n:\n        return 0\n    return 1 + countNumbers(x * 10, n) + countNumbers(x * 10 + 1, n)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 120\n    print(countNumbers(1, n))\n"}
{"text": "Minimum number operations required to convert n to m ", "java": "class GFG {\n  static int MAXN = 10000000;\n\n  static int minimumSteps(int n, int m, int a, int b) {\n    if (n > m) return MAXN;\n    if (n == m) return 0;\n    return Math.min(1 + minimumSteps(n * a, m, a, b), 1 + minimumSteps(n * b, m, a, b));\n  }\n\n  public static void main(String[] args) {\n    int n = 120, m = 51840;\n    int a = 2, b = 3;\n    System.out.println(minimumSteps(n, m, a, b));\n  }\n}\n", "python": "MAXN = 10000000\n\n\ndef minimumSteps(n, m, a, b):\n    if n > m:\n        return MAXN\n    if n == m:\n        return 0\n    return min(1 + minimumSteps(n * a, m, a, b), 1 + minimumSteps(n * b, m, a, b))\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 120\n    m = 51840\n    a = 2\n    b = 3\n    print(minimumSteps(n, m, a, b))\n"}
{"text": "Minimum number of given operation required to convert n to m ", "java": "class GfG {\n  static int minOperations(int n, int m) {\n    if (m % n != 0) return -1;\n    int minOperations = 0;\n    int q = m / n;\n    while (q % 2 == 0) {\n      q = q / 2;\n      minOperations++;\n    }\n    while (q % 3 == 0) {\n      q = q / 3;\n      minOperations++;\n    }\n    if (q == 1) return minOperations;\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int n = 120, m = 51840;\n    System.out.println(minOperations(n, m));\n  }\n}\n", "python": "def minOperations(n, m):\n    if m % n != 0:\n        return -1\n    minOperations = 0\n    q = int(m / n)\n    while q % 2 == 0:\n        q = int(q / 2)\n        minOperations += 1\n    while q % 3 == 0:\n        q = int(q / 3)\n        minOperations += 1\n    if q == 1:\n        return minOperations\n    return -1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 120\n    m = 51840\n    print(minOperations(n, m))\n"}
{"text": "Sum of Fibonacci Numbers in a range ", "java": "\nclass GFG {\n  static int fib(int n) {\n    double phi = (1 + Math.sqrt(5)) / 2;\n    return (int) Math.round(Math.pow(phi, n) / Math.sqrt(5));\n  }\n\n  static int calculateSum(int l, int r) {\n    int sum = 0;\n    for (int i = l; i <= r; i++) sum += fib(i);\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int l = 4, r = 8;\n    System.out.println(calculateSum(l, r));\n  }\n}\n", "python": "import math\n\n\ndef fib(n):\n    phi = (1 + math.sqrt(5)) / 2\n    return int(round(pow(phi, n) / math.sqrt(5)))\n\n\ndef calculateSum(l, r):\n    sum = fib(r + 2) - fib(l + 1)\n    return sum\n\n\nl = 4\nr = 8\nprint(calculateSum(l, r))\n"}
{"text": "Largest sphere that can be inscribed within a cube which is in turn inscribed within a right circular cone ", "java": "\nclass GFG {\n  static float sphereSide(float h, float r) {\n    if (h < 0 && r < 0) return -1;\n    float R = (float) ((h * r * Math.sqrt(2)) / (h + Math.sqrt(2) * r)) / 2;\n    return R;\n  }\n\n  public static void main(String[] args) {\n    float h = 5, r = 6;\n    System.out.println(sphereSide(h, r));\n  }\n}\n", "python": "import math\n\n\ndef sphereSide(h, r):\n    if h < 0 and r < 0:\n        return -1\n    R = ((h * r * math.sqrt(2))) / (h + math.sqrt(2) * r) / 2\n    return R\n\n\nh = 5\nr = 6\nprint(sphereSide(h, r))\n"}
{"text": "Find the number of good permutations ", "java": "class GFG {\n  static int Permutations(int n, int k) {\n    int ans = 1;\n    if (k >= 2) ans += (n) * (n - 1) / 2;\n    if (k >= 3) ans += (n) * (n - 1) * (n - 2) * 2 / 6;\n    if (k >= 4) ans += (n) * (n - 1) * (n - 2) * (n - 3) * 9 / 24;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 5, k = 2;\n    System.out.println(Permutations(n, k));\n  }\n}\n", "python": "def Permutations(n, k):\n    ans = 1\n    if k >= 2:\n        ans += (n) * (n - 1) // 2\n    if k >= 3:\n        ans += (n) * (n - 1) * (n - 2) * 2 // 6\n    if k >= 4:\n        ans += (n) * (n - 1) * (n - 2) * (n - 3) * 9 // 24\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, k = 5, 2\n    print(Permutations(n, k))\n"}
{"text": "Count integers in a range which are divisible by their euler totient value ", "java": "class GFG {\n  static long power(long a, long n) {\n    if (n == 0) return 1;\n    long p = power(a, n / 2);\n    p = p * p;\n    if (n % 2 == 1) p = p * a;\n    return p;\n  }\n\n  static int countIntegers(long l, long r) {\n    long ans = 0, i = 1;\n    long v = power(2, i);\n    while (v <= r) {\n      while (v <= r) {\n        if (v >= l) ans++;\n        v = v * 3;\n      }\n      i++;\n      v = power(2, i);\n    }\n    if (l == 1) ans++;\n    return (int) ans;\n  }\n\n  public static void main(String[] args) {\n    long l = 12, r = 21;\n    System.out.println(countIntegers(l, r));\n  }\n}\n", "python": "def power(a, n):\n    if n == 0:\n        return 1\n    p = power(a, n // 2)\n    p = p * p\n    if n & 1:\n        p = p * a\n    return p\n\n\ndef countIntegers(l, r):\n    ans, i = 0, 1\n    v = power(2, i)\n    while v <= r:\n        while v <= r:\n            if v >= l:\n                ans += 1\n            v = v * 3\n        i += 1\n        v = power(2, i)\n    if l == 1:\n        ans += 1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    l, r = 12, 21\n    print(countIntegers(l, r))\n"}
{"text": "Smallest and Largest N ", "java": "class GFG {\n  static void nDigitPerfectSquares(int n) {\n    int smallest = (int) Math.pow(Math.ceil(Math.sqrt(Math.pow(10, n - 1))), 2);\n    System.out.print(smallest + \" \u2581 \");\n    int largest = (int) Math.pow(Math.ceil(Math.sqrt(Math.pow(10, n))) - 1, 2);\n    System.out.print(largest);\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    nDigitPerfectSquares(n);\n  }\n}\n", "python": "from math import ceil\n\n\ndef nDigitPerfectCubes(n):\n    print(pow(ceil((pow(10, (n - 1))) ** (1 / 3)), 3), end=\" \u2581 \")\n    print(pow(ceil((pow(10, (n))) ** (1 / 3)) - 1, 3))\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    nDigitPerfectCubes(n)\n"}
{"text": "Last digit of Product of two Large or Small numbers ( a * b ) ", "java": "class Solution {\n  public static void lastDigit(String a, String b) {\n    int lastDig = (a.charAt(a.length() - 1) - '0') * (b.charAt(b.length() - 1) - '0');\n    System.out.println(lastDig % 10);\n  }\n\n  public static void main(String[] args) {\n    String a = \"1234567891233\", b = \"1234567891233156\";\n    lastDigit(a, b);\n  }\n}\n", "python": "def lastDigit(a, b):\n    lastDig = (int(a[len(a) - 1]) - int(\"0\")) * (int(b[len(b) - 1]) - int(\"0\"))\n    print(lastDig % 10)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a, b = \"1234567891233\", \"1234567891233156\"\n    lastDigit(a, b)\n"}
{"text": "Number of digits before the decimal point in the division of two numbers ", "java": "class GFG {\n  static int countDigits(int a, int b) {\n    int count = 0;\n    int p = Math.abs(a / b);\n    if (p == 0) return 1;\n    while (p > 0) {\n      count++;\n      p = p / 10;\n    }\n    return count;\n  }\n\n  public static void main(String args[]) {\n    int a = 100;\n    int b = 10;\n    System.out.print(countDigits(a, b));\n  }\n}\n", "python": "def countDigits(a, b):\n    count = 0\n    p = abs(a // b)\n    if p == 0:\n        return 1\n    while p > 0:\n        count = count + 1\n        p = p // 10\n    return count\n\n\na = 100\nb = 10\nprint(countDigits(a, b))\n"}
{"text": "Number of digits before the decimal point in the division of two numbers ", "java": "class GFG {\n  public static int countDigits(int a, int b) {\n    double digits = Math.log10(Math.abs(a)) - Math.log10(Math.abs(b)) + 1;\n    return (int) Math.floor(digits);\n  }\n\n  public static void main(String[] args) {\n    int a = 100;\n    int b = 10;\n    System.out.print(countDigits(a, b));\n  }\n}\n", "python": "def countDigits(a, b):\n    count = 0\n    p = abs(a // b)\n    if p == 0:\n        return 1\n    while p > 0:\n        count = count + 1\n        p = p // 10\n    return count\n\n\na = 100\nb = 10\nprint(countDigits(a, b))\n"}
{"text": "Smallest odd number with N digits ", "java": "class Solution {\n  static int smallestOdd(int n) {\n    if (n == 1) return 0;\n    return Math.pow(10, n - 1) + 1;\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(smallestOdd(n));\n  }\n}\n", "python": "def smallestOdd(n):\n    if n == 1:\n        return 1\n    return pow(10, n - 1) + 1\n\n\nn = 4\nprint(smallestOdd(n))\n"}
{"text": "Largest Even and Odd N ", "java": "class GFG {\n  static void findNumbers(int n) {\n    int odd = (int) Math.pow(10, n) - 1;\n    int even = odd - 1;\n    System.out.println(\" Even \u2581 = \u2581 \" + even);\n    System.out.print(\" Odd \u2581 = \u2581 \" + odd);\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    findNumbers(n);\n  }\n}\n", "python": "def findNumbers(n, b):\n    even = 0\n    odd = 0\n    if b % 2 == 0:\n        even = pow(b, n) - 2\n        odd = pow(b, n) - 1\n    else:\n        even = pow(b, n) - 1\n        odd = pow(b, n) - 2\n    print(\" Even \u2581 Number \u2581 = \u2581 \", int(even))\n    print(\" Odd \u2581 Number \u2581 = \u2581 \", int(odd))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 2\n    B = 5\n    findNumbers(N, B)\n"}
{"text": "Smallest Even number with N digits ", "java": "class Solution {\n  static int smallestEven(int n) {\n    if (n == 1) return 0;\n    return Math.pow(10, n - 1);\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(smallestEven(n));\n  }\n}\n", "python": "def smallestEven(n):\n    if n == 1:\n        return 0\n    return pow(10, n - 1)\n\n\nn = 4\nprint(smallestEven(n))\n"}
{"text": "Maximize profit when divisibility by two numbers have associated profits ", "java": "class GFG {\n  static int __gcd(int a, int b) {\n    if (b == 0) return a;\n    return __gcd(b, a % b);\n  }\n\n  static int maxProfit(int n, int a, int b, int x, int y) {\n    int res = x * (n / a);\n    res += y * (n / b);\n    res -= Math.min(x, y) * (n / ((a * b) / __gcd(a, b)));\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int n = 6, a = 6, b = 2, x = 8, y = 2;\n    System.out.println(maxProfit(n, a, b, x, y));\n  }\n}\n", "python": "from math import gcd\n\n\ndef maxProfit(n, a, b, x, y):\n    res = x * (n // a)\n    res += y * (n // b)\n    res -= min(x, y) * (n // ((a * b) // gcd(a, b)))\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 6\n    a = 6\n    b = 2\n    x = 8\n    y = 2\n    print(maxProfit(n, a, b, x, y))\n"}
{"text": "Series summation if T ( n ) is given and n is very large ", "java": "class GFG {\n  public static final int MOD = 1000000007;\n\n  static int sumOfSeries(int n) {\n    int ans = (int) Math.pow(n % MOD, 2);\n    return (ans % MOD);\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "from math import pow\n\nMOD = 1000000007\n\n\ndef sumOfSeries(n):\n    ans = pow(n % MOD, 2)\n    return ans % MOD\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    print(int(sumOfSeries(n)))\n"}
{"text": "Find last five digits of a given five digit number raised to power five ", "java": "class GfG {\n  static void lastFiveDigits(int n) {\n    n =\n        (n / 10000) * 10000\n            + ((n / 100) % 10) * 1000\n            + (n % 10) * 100\n            + ((n / 10) % 10) * 10\n            + (n / 1000) % 10;\n    int ans = 1;\n    for (int i = 0; i < 5; i++) {\n      ans *= n;\n      ans %= 100000;\n    }\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int n = 12345;\n    lastFiveDigits(n);\n  }\n}\n", "python": "def lastFiveDigits(n):\n    n = (\n        (int)(n / 10000) * 10000\n        + ((int)(n / 100) % 10) * 1000\n        + (n % 10) * 100\n        + ((int)(n / 10) % 10) * 10\n        + (int)(n / 1000) % 10\n    )\n    ans = 1\n    for i in range(5):\n        ans *= n\n        ans %= 100000\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 12345\n    lastFiveDigits(n)\n"}
{"text": "Sum of ( maximum element ", "java": "import java.util.*;\n\nclass GFG {\n  static int mod = 1000000007;\n\n  static long power(long a, long n) {\n    if (n == 0) {\n      return 1;\n    }\n    long p = power(a, n / 2) % mod;\n    p = (p * p) % mod;\n    if (n == 1) {\n      p = (p * a) % mod;\n    }\n    return p;\n  }\n\n  static long computeSum(int[] arr, int n) {\n    Arrays.sort(arr);\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n      long maxs = (power(2, i) - 1 + mod) % mod;\n      maxs = (maxs * arr[i]) % mod;\n      long mins = (power(2, n - 1 - i) - 1 + mod) % mod;\n      mins = (mins * arr[i]) % mod;\n      long V = (maxs - mins + mod) % mod;\n      sum = (sum + V) % mod;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 3, 1};\n    int n = arr.length;\n    System.out.println(computeSum(arr, n));\n  }\n}\n", "python": "def power(a, n):\n    if n == 0:\n        return 1\n    p = power(a, n // 2) % mod\n    p = (p * p) % mod\n    if n & 1 == 1:\n        p = (p * a) % mod\n    return p\n\n\ndef computeSum(arr, n):\n    arr.sort()\n    Sum = 0\n    for i in range(0, n):\n        maxs = (power(2, i) - 1 + mod) % mod\n        maxs = (maxs * arr[i]) % mod\n        mins = (power(2, n - 1 - i) - 1 + mod) % mod\n        mins = (mins * arr[i]) % mod\n        V = (maxs - mins + mod) % mod\n        Sum = (Sum + V) % mod\n    return Sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    mod = 1000000007\n    arr = [4, 3, 1]\n    n = len(arr)\n    print(computeSum(arr, n))\n"}
{"text": "Count of all N digit numbers such that num + Rev ( num ) = 10 ^ N ", "java": "class GFG {\n  static int countNumbers(int n) {\n    if (n % 2 == 1) return 0;\n    return (9 * (int) Math.pow(10, n / 2 - 1));\n  }\n\n  public static void main(String args[]) {\n    int n = 2;\n    System.out.print(countNumbers(n));\n  }\n}\n", "python": "def countNumbers(n):\n    if n % 2 == 1:\n        return 0\n    return 9 * pow(10, n // 2 - 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 2\n    print(countNumbers(n))\n"}
{"text": "Count of numbers having only 1 set bit in the range [ 0 , n ] ", "java": "class GFG {\n  static int count(int n) {\n    int cnt = 0;\n    int p = 1;\n    while (p <= n) {\n      cnt++;\n      p *= 2;\n    }\n    return cnt;\n  }\n\n  public static void main(String args[]) {\n    int n = 7;\n    System.out.print(count(n));\n  }\n}\n", "python": "def count(n):\n    cnt = 0\n    p = 1\n    while p <= n:\n        cnt = cnt + 1\n        p *= 2\n    return cnt\n\n\nn = 7\nprint(count(n))\n"}
{"text": "Find the K ", "java": "import java.util.*;\n\nclass GFG1 {\n  static int KthMinValAfterMconcatenate(int[] A, int N, int M, int K) {\n    Arrays.sort(A);\n    return (A[((K - 1) / M)]);\n  }\n\n  public static void main(String[] args) {\n    int[] A = {3, 1, 2};\n    int M = 3, K = 4;\n    int N = A.length;\n    System.out.println(KthMinValAfterMconcatenate(A, N, M, K));\n  }\n}\n", "python": "def findFirstNumIndex(k, n):\n    if n == 1:\n        return 0, k\n    n -= 1\n    first_num_index = 0\n    n_partial_fact = n\n    while k >= n_partial_fact and n > 1:\n        n_partial_fact = n_partial_fact * (n - 1)\n        n -= 1\n    first_num_index = k // n_partial_fact\n    k = k % n_partial_fact\n    return first_num_index, k\n\n\ndef findKthPermutation(n, k):\n    ans = \" \"\n    s = set()\n    for i in range(1, n + 1):\n        s.add(i)\n    k = k - 1\n    for i in range(n):\n        itr = list(s)\n        index, k = findFirstNumIndex(k, n - i)\n        ans += str(itr[index])\n        itr.pop(index)\n        s = set(itr)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    k = 4\n    kth_perm_seq = findKthPermutation(n, k)\n    print(kth_perm_seq)\n"}
{"text": "Sum of all i such that ( 2 ^ i + 1 ) % 3 = 0 where i is in range [ 1 , n ] ", "java": "class GFG {\n  static int sum(int n) {\n    n = (n + 1) / 2;\n    return (n * n);\n  }\n\n  public static void main(String args[]) {\n    int n = 3;\n    System.out.println(sum(n));\n  }\n}\n", "python": "def sumN(n):\n    n = (n + 1) // 2\n    return n * n\n\n\nn = 3\nprint(sumN(n))\n"}
{"text": "Numbers that are not divisible by any number in the range [ 2 , 10 ] ", "java": "class GFG {\n  static int countNumbers(int n) {\n    return n - n / 2 - n / 3 - n / 5 - n / 7 + n / 6 + n / 10 + n / 14 + n / 15 + n / 21 + n / 35\n        - n / 30 - n / 42 - n / 70 - n / 105 + n / 210;\n  }\n\n  public static void main(String[] args) {\n    int n = 20;\n    System.out.println(countNumbers(n));\n  }\n}\n", "python": "def countNumbers(n):\n    return (\n        n\n        - n // 2\n        - n // 3\n        - n // 5\n        - n // 7\n        + n // 6\n        + n // 10\n        + n // 14\n        + n // 15\n        + n // 21\n        + n // 35\n        - n // 30\n        - n // 42\n        - n // 70\n        - n // 105\n        + n // 210\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 20\n    print(countNumbers(n))\n"}
{"text": "Maximum Primes whose sum is equal to given N ", "java": "class GFG {\n  static int maxPrimes(int n) {\n    return n / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 17;\n    System.out.println(maxPrimes(n));\n  }\n}\n", "python": "def maxPrmimes(n):\n    return n // 2\n\n\nn = 17\nprint(maxPrmimes(n))\n"}
{"text": "Sum of the series ( 1 * 2 ) + ( 2 * 3 ) + ( 3 * 4 ) + ... ... upto n terms ", "java": "class GFG {\n  static int sum(int n) {\n    return n * (n + 1) * (n + 2) / 3;\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(sum(n));\n  }\n}\n", "python": "def Sum(n):\n    return n * (n + 1) * (n + 2) // 3\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 2\n    print(Sum(n))\n"}
{"text": "Find Nth term of the series 1 , 5 , 32 , 288 ... ", "java": "\nclass GFG {\n  public static int nthTerm(int N) {\n    int nth = 0, i;\n    for (i = N; i > 0; i--) {\n      nth += Math.pow(i, i);\n    }\n    return nth;\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(N):\n    nth = 0\n    for i in range(N, 0, -1):\n        nth += pow(i, i)\n    return nth\n\n\nN = 3\nprint(nthTerm(N))\n"}
{"text": "Find kth smallest number in range [ 1 , n ] when all the odd numbers are deleted ", "java": "class GFG {\n  static int kthSmallest(int n, int k) {\n    return (2 * k);\n  }\n\n  public static void main(String args[]) {\n    int n = 8, k = 4;\n    System.out.print(kthSmallest(n, k));\n  }\n}\n", "python": "def kthSmallest(n, k):\n    return 2 * k\n\n\nn = 8\nk = 4\nprint(kthSmallest(n, k))\n"}
{"text": "Time until distance gets equal to X between two objects moving in opposite direction ", "java": "class GFG {\n  static double getTime(int u, int v, int x) {\n    double speed = u + v;\n    double time = x / speed;\n    return time;\n  }\n\n  public static void main(String[] args) {\n    int u = 3, v = 3, x = 3;\n    System.out.println(getTime(u, v, x));\n  }\n}\n", "python": "def getTime(u, v, x):\n    speed = u + v\n    time = x / speed\n    return time\n\n\nif __name__ == \" _ _ main _ _ \":\n    u, v, x = 3, 3, 3\n    print(getTime(u, v, x))\n"}
{"text": "Given number of matches played , find number of teams in tournament ", "java": "import java.io.*;\n\nclass GFG {\n  static int number_of_teams(int M) {\n    int N1, N2, sqr;\n    sqr = (int) Math.sqrt(1 + (8 * M));\n    N1 = (1 + sqr) / 2;\n    N2 = (1 - sqr) / 2;\n    if (N1 > 0) return N1;\n    return N2;\n  }\n\n  public static void main(String[] args) {\n    int M = 45;\n    System.out.println(number_of_teams(M));\n  }\n}\n", "python": "import math\n\n\ndef number_of_teams(M):\n    N1, N2, sqr = 0, 0, 0\n    sqr = math.sqrt(1 + (8 * M))\n    N1 = (1 + sqr) / 2\n    N2 = (1 - sqr) / 2\n    if N1 > 0:\n        return int(N1)\n    return int(N2)\n\n\ndef main():\n    M = 45\n    print(number_of_teams(M))\n\n\nif __name__ == \" _ _ main _ _ \":\n    main()\n"}
{"text": "Sum of numbers from 1 to N which are in Lucas Sequence ", "java": "class GFG {\n  static int LucasSum(int N) {\n    int sum = 0;\n    int a = 2, b = 1, c;\n    sum += a;\n    while (b <= N) {\n      sum += b;\n      c = a + b;\n      a = b;\n      b = c;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int N = 20;\n    System.out.println(LucasSum(N));\n  }\n}\n", "python": "def LucasSum(N):\n    Sum = 0\n    a = 2\n    b = 1\n    c = 0\n    Sum += a\n    while b <= N:\n        Sum += b\n        c = a + b\n        a = b\n        b = c\n    return Sum\n\n\nN = 20\nprint(LucasSum(N))\n"}
{"text": "Sum of minimum element of all sub ", "java": "class GfG {\n  static int findMinSum(int arr[], int n) {\n    int occ = n - 1, sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += arr[i] * (int) Math.pow(2, occ);\n      occ--;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 4, 5};\n    int n = arr.length;\n    System.out.println(findMinSum(arr, n));\n  }\n}\n", "python": "def findMinSum(arr, n):\n    occ = n - 1\n    Sum = 0\n    for i in range(n):\n        Sum += arr[i] * pow(2, occ)\n        occ -= 1\n    return Sum\n\n\narr = [1, 2, 4, 5]\nn = len(arr)\nprint(findMinSum(arr, n))\n"}
{"text": "Position of a person diametrically opposite on a circle ", "java": "class Sol {\n  static int getPosition(int n, int m) {\n    if (m > (n / 2)) return (m - (n / 2));\n    return (m + (n / 2));\n  }\n\n  public static void main(String args[]) {\n    int n = 8, m = 5;\n    System.out.println(getPosition(n, m));\n  }\n}\n", "python": "def getPosition(n, m):\n    if m > (n // 2):\n        return m - (n // 2)\n    return m + (n // 2)\n\n\nn = 8\nm = 5\nprint(getPosition(n, m))\n"}
{"text": "Split the array into odd number of segments of odd lengths ", "java": "class GFG {\n  static int checkArray(int[] arr, int n) {\n    return ((arr[0] % 2) > 0 && (arr[n - 1] % 2) > 0 && (n % 2) > 0) ? 1 : 0;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 4, 5};\n    int n = arr.length;\n    System.out.println(checkArray(arr, n));\n  }\n}\n", "python": "def checkArray(arr, n):\n    return (arr[0] % 2) and (arr[n - 1] % 2) and (n % 2)\n\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nif checkArray(arr, n):\n    print(1)\nelse:\n    print(0)\n"}
{"text": "Check whether the number can be made perfect square after adding 1 ", "java": "class GFG {\n  static boolean isPerfectSquare(double x) {\n    double sr = Math.sqrt(x);\n    return ((sr - Math.floor(sr)) == 0);\n  }\n\n  static boolean isSunnyNum(int n) {\n    if (isPerfectSquare(n + 1)) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    if (isSunnyNum(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "import math as mt\n\n\ndef isPerfectSquare(x):\n    sr = mt.sqrt(x)\n    return (sr - mt.floor(sr)) == 0\n\n\ndef isSunnyNum(n):\n    if isPerfectSquare(n + 1):\n        return True\n    return False\n\n\nn = 3\nif isSunnyNum(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Source to destination in 2 ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isPossible(int Sx, int Sy, int Dx, int Dy, int x, int y) {\n    if (Math.abs(Sx - Dx) % x == 0\n        && Math.abs(Sy - Dy) % y == 0\n        && (Math.abs(Sx - Dx) / x) % 2 == (Math.abs(Sy - Dy) / y) % 2) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int Sx = 0, Sy = 0, Dx = 0, Dy = 0;\n    int x = 3, y = 4;\n    if (isPossible(Sx, Sy, Dx, Dy, x, y)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isPossible(Sx, Sy, Dx, Dy, x, y):\n    if (\n        abs(Sx - Dx) % x == 0\n        and abs(Sy - Dy) % y == 0\n        and (abs(Sx - Dx) / x) % 2 == (abs(Sy - Dy) / y) % 2\n    ):\n        return True\n    return False\n\n\nSx = 0\nSy = 0\nDx = 0\nDy = 0\nx = 3\ny = 4\nif isPossible(Sx, Sy, Dx, Dy, x, y):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Count of pairs ( x , y ) in an array such that x < y ", "java": "class GFG {\n  static int getPairs(int a[]) {\n    int count = 0;\n    for (int i = 0; i < a.length; i++) {\n      for (int j = 0; j < a.length; j++) {\n        if (a[i] < a[j]) count++;\n      }\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {2, 4, 3, 1};\n    System.out.println(getPairs(a));\n  }\n}\n", "python": "def getPairs(a):\n    n = len(a)\n    count = (n * (n - 1)) // 2\n    return count\n\n\na = [2, 4, 3, 1]\nprint(getPairs(a))\n"}
{"text": "Determine the count of Leaf nodes in an N ", "java": "class GfG {\n  static int calcNodes(int N, int I) {\n    int result = 0;\n    result = I * (N - 1) + 1;\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int N = 5, I = 2;\n    System.out.println(\" Leaf \u2581 nodes \u2581 = \u2581 \" + calcNodes(N, I));\n  }\n}\n", "python": "def calcNodes(N, I):\n    result = 0\n    result = I * (N - 1) + 1\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    I = 2\n    print(\" Leaf \u2581 nodes \u2581 = \u2581 \", calcNodes(N, I))\n"}
{"text": "Find the values of X and Y in the Given Equations ", "java": "import java.io.*;\n\nclass GFG {\n  static void findValues(int a, int b) {\n    if ((a - b) % 2 == 1) {\n      System.out.println(\" - 1\");\n      return;\n    }\n    System.out.println(((a - b) / 2) + \" \u2581 \" + ((a + b) / 2));\n  }\n\n  public static void main(String[] args) {\n    int a = 12, b = 8;\n    findValues(a, b);\n  }\n}\n", "python": "def findValues(a, b):\n    if (a - b) % 2 == 1:\n        print(\" - 1\")\n        return\n    print((a - b) // 2, (a + b) // 2)\n\n\na = 12\nb = 8\nfindValues(a, b)\n"}
{"text": "Concentration of juice after mixing n glasses in equal proportion ", "java": "class GFG {\n  static double mixtureConcentration(int n, int[] p) {\n    double res = 0;\n    for (int i = 0; i < n; i++) res += p[i];\n    res /= n;\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {0, 20, 20};\n    int n = arr.length;\n    System.out.println(String.format(\" % .4f \", mixtureConcentration(n, arr)));\n  }\n}\n", "python": "def mixtureConcentration(n, p):\n    res = 0\n    for i in range(n):\n        res += p[i]\n    res /= n\n    return res\n\n\narr = [0, 20, 20]\nn = len(arr)\nprint(round(mixtureConcentration(n, arr), 4))\n"}
{"text": "Number of elements with even factors in the given range ", "java": "import java.io.*;\n\nclass GFG {\n  static int countOddSquares(int n, int m) {\n    return (int) Math.pow(m, 0.5) - (int) Math.pow(n - 1, 0.5);\n  }\n\n  public static void main(String[] args) {\n    int n = 5, m = 100;\n    System.out.println(\" Count \u2581 is \u2581 \" + ((m - n + 1) - countOddSquares(n, m)));\n  }\n}\n", "python": "def countOddSquares(n, m):\n    return int(pow(m, 0.5)) - int(pow(n - 1, 0.5))\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    m = 100\n    print(\" Count \u2581 is \", (m - n + 1) - countOddSquares(n, m))\n"}
{"text": "Total position where king can reach on a chessboard in exactly M moves ", "java": "class GFG {\n  static int Square(int row, int column, int moves) {\n    int a = 0, b = 0, c = 0, d = 0, total = 0;\n    a = row - moves;\n    b = row + moves;\n    c = column - moves;\n    d = column + moves;\n    if (a < 1) a = 1;\n    if (c < 1) c = 1;\n    if (b > 8) b = 8;\n    if (d > 8) d = 8;\n    total = (b - a + 1) * (d - c + 1) - 1;\n    return total;\n  }\n\n  public static void main(String[] args) {\n    int R = 4, C = 5, M = 2;\n    System.out.println(Square(R, C, M));\n  }\n}\n", "python": "def Square(row, column, moves):\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    total = 0\n    a = row - moves\n    b = row + moves\n    c = column - moves\n    d = column + moves\n    if a < 1:\n        a = 1\n    if c < 1:\n        c = 1\n    if b > 8:\n        b = 8\n    if d > 8:\n        d = 8\n    total = (b - a + 1) * (d - c + 1) - 1\n    return total\n\n\nif __name__ == \" _ _ main _ _ \":\n    R = 4\n    C = 5\n    M = 2\n    print(Square(R, C, M))\n"}
{"text": "Find M ", "java": "class GFG {\n  static int findNumber(int n, int m) {\n    int num = (m - 1) * 9 + n;\n    return num;\n  }\n\n  public static void main(String args[]) {\n    int n = 2, m = 5;\n    System.out.print(findNumber(n, m));\n  }\n}\n", "python": "def findNumber(n, m):\n    num = (m - 1) * 9 + n\n    return num\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 2\n    m = 5\n    print(findNumber(n, m))\n"}
{"text": "Absolute difference between the first X and last X Digits of N ", "java": "import java.util.*;\n\nclass GFG {\n  static int digitsCount(int n) {\n    int len = 0;\n    while (n > 0) {\n      len++;\n      n /= 10;\n    }\n    return len;\n  }\n\n  static int absoluteFirstLast(int n, int x) {\n    int i = 0, mod = 1;\n    while (i < x) {\n      mod *= 10;\n      i++;\n    }\n    int last = n % mod;\n    int len = digitsCount(n);\n    while (len != x) {\n      n /= 10;\n      len--;\n    }\n    int first = n;\n    return Math.abs(first - last);\n  }\n\n  public static void main(String args[]) {\n    int n = 21546, x = 2;\n    System.out.println(absoluteFirstLast(n, x));\n  }\n}\n", "python": "def digitsCount(n):\n    length = 0\n    while n > 0:\n        length += 1\n        n //= 10\n    return length\n\n\ndef absoluteFirstLast(n, x):\n    i = 0\n    mod = 1\n    while i < x:\n        mod *= 10\n        i += 1\n    last = n % mod\n    length = digitsCount(n)\n    while length != x:\n        n //= 10\n        length -= 1\n    first = n\n    return abs(first - last)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 21546\n    x = 2\n    print(absoluteFirstLast(n, x))\n"}
{"text": "Cost of painting n * m grid ", "java": "class gfg {\n  static int getMinCost(int n, int m) {\n    int cost = (n - 1) * m + (m - 1) * n;\n    return cost;\n  }\n\n  public static void main(String[] args) {\n    int n = 4, m = 5;\n    System.out.println(getMinCost(n, m));\n  }\n}\n", "python": "def getMinCost(n, m):\n    cost = (n - 1) * m + (m - 1) * n\n    return cost\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, m = 4, 5\n    print(getMinCost(n, m))\n"}
{"text": "Number of Simple Graph with N Vertices and M Edges ", "java": "class GFG {\n  static int binomialCoeff(int n, int k) {\n    if (k > n) return 0;\n    int res = 1;\n    if (k > n - k) k = n - k;\n    for (int i = 0; i < k; ++i) {\n      res *= (n - i);\n      res /= (i + 1);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int N = 5, M = 1;\n    int P = (N * (N - 1)) / 2;\n    System.out.println(binomialCoeff(P, M));\n  }\n}\n", "python": "def binomialCoeff(n, k):\n    if k > n:\n        return 0\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= n - i\n        res //= i + 1\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    M = 1\n    P = (N * (N - 1)) // 2\n    print(binomialCoeff(P, M))\n"}
{"text": "Program to check if a number is divisible by sum of its digits ", "java": "class GFG {\n  static String isDivisible(long n) {\n    long temp = n;\n    int sum = 0;\n    while (n != 0) {\n      int k = (int) n % 10;\n      sum += k;\n      n /= 10;\n    }\n    if (temp % sum == 0) return \" YES \";\n    return \" NO \";\n  }\n\n  public static void main(String[] args) {\n    long n = 123;\n    System.out.println(isDivisible(n));\n  }\n}\n", "python": "def isDivisible(n):\n    temp = n\n    sum = 0\n    while n:\n        k = n % 10\n        sum += k\n        n /= 10\n    if temp % sum == 0:\n        return \" YES \"\n    return \" NO \"\n\n\nn = 123\nprint(isDivisible(n))\n"}
{"text": "Program to check if a number is divisible by sum of its digits ", "java": "class GFG {\n  static String getResult(int n) {\n    String st = String.valueOf(n);\n    int sum = 0;\n    for (char i : st.toCharArray()) {\n      sum = sum + (int) i;\n    }\n    if (n % sum == 0) return \" Yes \";\n    else return \" No \";\n  }\n\n  public static void main(String[] args) {\n    int n = 123;\n    System.out.println(getResult(n));\n  }\n}\n", "python": "def isDivisible(n):\n    temp = n\n    sum = 0\n    while n:\n        k = n % 10\n        sum += k\n        n /= 10\n    if temp % sum == 0:\n        return \" YES \"\n    return \" NO \"\n\n\nn = 123\nprint(isDivisible(n))\n"}
{"text": "Minimum multiplications with { 2 , 3 , 7 } to make two numbers equal ", "java": "import java.util.Vector;\n\nclass GFG {\n  static Vector<Integer> Divisors(int x) {\n    int c = 0;\n    Vector<Integer> v = new Vector<Integer>();\n    while (x % 2 == 0) {\n      c++;\n      x /= 2;\n    }\n    v.add(c);\n    c = 0;\n    while (x % 3 == 0) {\n      c++;\n      x /= 3;\n    }\n    v.add(c);\n    c = 0;\n    while (x % 7 == 0) {\n      c++;\n      x /= 7;\n    }\n    v.add(c);\n    v.add(x);\n    return v;\n  }\n\n  static int MinOperations(int a, int b) {\n    Vector<Integer> va = Divisors(a);\n    Vector<Integer> vb = Divisors(b);\n    if (va.get(3) != vb.get(3)) {\n      return -1;\n    }\n    int minOperations =\n        Math.abs(va.get(0) - vb.get(0))\n            + Math.abs(va.get(1) - vb.get(1))\n            + Math.abs(va.get(2) - vb.get(2));\n    return minOperations;\n  }\n\n  public static void main(String[] args) {\n    int a = 14, b = 28;\n    System.out.println(MinOperations(a, b));\n  }\n}\n", "python": "def Divisors(x):\n    c = 0\n    v = []\n    while x % 2 == 0:\n        c += 1\n        x /= 2\n    v.append(c)\n    c = 0\n    while x % 3 == 0:\n        c += 1\n        x /= 3\n    v.append(c)\n    c = 0\n    while x % 7 == 0:\n        c += 1\n        x /= 7\n    v.append(c)\n    v.append(x)\n    return v\n\n\ndef MinOperations(a, b):\n    va = Divisors(a)\n    vb = Divisors(b)\n    if va[3] != vb[3]:\n        return -1\n    minOperations = abs(va[0] - vb[0]) + abs(va[1] - vb[1]) + abs(va[2] - vb[2])\n    return minOperations\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 14\n    b = 28\n    print(MinOperations(a, b))\n"}
{"text": "Product of N with its largest odd digit ", "java": "class GFG {\n  static int largestOddDigit(int n) {\n    int maxOdd = -1;\n    while (n > 0) {\n      int digit = n % 10;\n      if (digit % 2 == 1 && digit > maxOdd) maxOdd = digit;\n      n = n / 10;\n    }\n    return maxOdd;\n  }\n\n  static int getProduct(int n) {\n    int maxOdd = largestOddDigit(n);\n    if (maxOdd == -1) return -1;\n    return (n * maxOdd);\n  }\n\n  public static void main(String[] args) {\n    int n = 12345;\n    System.out.println(getProduct(n));\n  }\n}\n", "python": "def largestOddDigit(n):\n    maxOdd = -1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1 and digit > maxOdd:\n            maxOdd = digit\n        n = n // 10\n    return maxOdd\n\n\ndef getProduct(n):\n    maxOdd = largestOddDigit(n)\n    if maxOdd == -1:\n        return -1\n    return n * maxOdd\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 12345\n    print(getProduct(n))\n"}
{"text": "Find the sum of first N terms of the series 2 * 3 * 5 , 3 * 5 * 7 , 4 * 7 * 9 , ... ", "java": "class GFG {\n  static int calSum(int n) {\n    return (n * (2 * n * n * n + 12 * n * n + 25 * n + 21)) / 2;\n  }\n\n  public static void main(String args[]) {\n    int n = 3;\n    System.out.println(calSum(n));\n  }\n}\n", "python": "def calSum(n):\n    return (n * (2 * n * n * n + 12 * n * n + 25 * n + 21)) / 2\n\n\nn = 3\nprint(calSum(n))\n"}
{"text": "Check if the sum of distinct digits of two integers are equal ", "java": "public class HelloWorld {\n  static int distinctDigitSum(int n) {\n    boolean used[] = new boolean[10];\n    int sum = 0;\n    while (n > 0) {\n      int digit = n % 10;\n      if (!used[digit]) {\n        used[digit] = true;\n        sum += digit;\n      }\n      n = n / 10;\n    }\n    return sum;\n  }\n\n  static String checkSum(int m, int n) {\n    int sumM = distinctDigitSum(m);\n    int sumN = distinctDigitSum(n);\n    if (sumM == sumN) return \" YES \";\n    return \" NO \";\n  }\n\n  public static void main(String[] args) {\n    int m = 2452, n = 9222;\n    System.out.println(checkSum(m, n));\n  }\n}\n", "python": "def distinctDigitSum(n):\n    used = [False] * 10\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        if not used[digit]:\n            used[digit] = True\n            sum += digit\n        n = n // 10\n    return sum\n\n\ndef checkSum(m, n):\n    sumM = distinctDigitSum(m)\n    sumN = distinctDigitSum(n)\n    if sumM == sumN:\n        return \" YES \"\n    return \" NO \"\n\n\nif __name__ == \" _ _ main _ _ \":\n    m = 2452\n    n = 9222\n    print(checkSum(m, n))\n"}
{"text": "Sum of integers upto N with given unit digit ", "java": "import java.util.*;\n\nclass solution {\n  static long getSum(int n, int d) {\n    long sum = 0;\n    for (int i = 1; i <= n; i++) {\n      if (i % 10 == d) sum += i;\n    }\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int n = 30, d = 3;\n    System.out.println(getSum(n, d));\n  }\n}\n", "python": "def getSum(n, d):\n    sum = 0\n    while d <= n:\n        sum += d\n        d += 10\n    return sum\n\n\nn = 30\nd = 3\nprint(getSum(n, d))\n"}
{"text": "Minimum and Maximum number of pairs in m teams of n people ", "java": "import java.io.*;\n\nclass GFG {\n  static void MinimumMaximumPairs(int n, int m) {\n    int max_pairs = ((n - m + 1) * (n - m)) / 2;\n    int min_pairs =\n        m * (((n - m) / m + 1) * ((n - m) / m)) / 2\n            + (int) Math.ceil((double) ((n - m) / (double) (m))) * ((n - m) % m);\n    System.out.println(\" Minimum \u2581 no . \u2581 of \u2581 pairs \u2581 = \u2581 \" + min_pairs);\n    System.out.println(\" Maximum \u2581 no . \u2581 of \u2581 pairs \u2581 = \u2581 \" + max_pairs);\n  }\n\n  public static void main(String[] args) {\n    int n = 5, m = 2;\n    MinimumMaximumPairs(n, m);\n  }\n}\n", "python": "from math import ceil\n\n\ndef MinimumMaximumPairs(n, m):\n    max_pairs = ((n - m + 1) * (n - m)) // 2\n    min_pairs = m * (((n - m) // m + 1) * ((n - m) // m)) // 2 + ceil((n - m) / (m)) * (\n        (n - m) % m\n    )\n    print(\" Minimum \u2581 no . \u2581 of \u2581 pairs \u2581 = \u2581 \", min_pairs)\n    print(\" Maximum \u2581 no . \u2581 of \u2581 pairs \u2581 = \u2581 \", max_pairs)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, m = 5, 2\n    MinimumMaximumPairs(n, m)\n"}
{"text": "Largest number less than N with digit sum greater than the digit sum of N ", "java": "import java.io.*;\n\nclass GFG {\n  static int sumOfDigits(int n) {\n    int res = 0;\n    while (n > 0) {\n      res += n % 10;\n      n /= 10;\n    }\n    return res;\n  }\n\n  static int findNumber(int n) {\n    int i = n - 1;\n    while (i > 0) {\n      if (sumOfDigits(i) > sumOfDigits(n)) return i;\n      i--;\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int n = 824;\n    System.out.println(findNumber(n));\n  }\n}\n", "python": "def sumOfDigits(n):\n    res = 0\n    while n > 0:\n        res += n % 10\n        n /= 10\n    return res\n\n\ndef findNumber(n):\n    i = n - 1\n    while i > 0:\n        if sumOfDigits(i) > sumOfDigits(n):\n            return i\n        i -= 1\n    return -1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 824\n    print(findNumber(n))\n"}
{"text": "Number of moves required to guess a permutation . ", "java": "import java.io.*;\n\nclass GFG {\n  static int countMoves(int n) {\n    int ct = 0;\n    for (int i = 1; i <= n; i++) ct += i * (n - i);\n    ct += n;\n    return ct;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(countMoves(n));\n  }\n}\n", "python": "def countMoves(n):\n    ct = 0\n    for i in range(1, n + 1):\n        ct += i * (n - i)\n    ct += n\n    return ct\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(countMoves(n))\n"}
{"text": "Count Numbers with N digits which consists of even number of 0 \u2019 s ", "java": "import java.util.*;\n\nclass GFG {\n  static double countNumbers(int N) {\n    return (Math.pow(10, N) - 1) - (Math.pow(10, N) - Math.pow(8, N)) / 2;\n  }\n\n  public static void main(String args[]) {\n    int n = 2;\n    System.out.println(countNumbers(n));\n  }\n}\n", "python": "def countNumber(n):\n    return (pow(10, n) - 1) - (pow(10, n) - pow(8, n)) // 2\n\n\nn = 2\nprint(countNumber(n))\n"}
{"text": "Find determinant of matrix generated by array rotation ", "java": "import java.util.*;\n\nclass GFG {\n  static int N = 3;\n\n  static double calcDeterminant(int arr[]) {\n    double determinant = 0;\n    for (int i = 0; i < N; i++) {\n      determinant += Math.pow(arr[i], 3);\n    }\n    determinant -= 3 * arr[0] * arr[1] * arr[2];\n    return determinant;\n  }\n\n  public static void main(String args[]) {\n    int[] arr = {4, 5, 3};\n    System.out.println(calcDeterminant(arr));\n  }\n}\n", "python": "def calcDeterminant(arr, n):\n    determinant = 0\n    for i in range(n):\n        determinant += pow(arr[i], 3)\n    determinant -= 3 * arr[0] * arr[1] * arr[2]\n    return determinant\n\n\narr = [4, 5, 3]\nn = len(arr)\nprint(calcDeterminant(arr, n))\n"}
{"text": "Minimum elements to be added in a range so that count of elements is divisible by K ", "java": "import java.io.*;\n\nclass GFG {\n  static int minimumMoves(int k, int l, int r) {\n    int count = r - l + 1;\n    if (count % k == 0) return 0;\n    return (k - (count % k));\n  }\n\n  public static void main(String[] args) {\n    int k = 3, l = 10, r = 10;\n    System.out.print(minimumMoves(k, l, r));\n  }\n}\n", "python": "def minimumMoves(k, l, r):\n    count = r - l + 1\n    if count % k == 0:\n        return 0\n    return k - (count % k)\n\n\nif __name__ == \" _ _ main _ _ \":\n    k = 3\n    l = 10\n    r = 10\n    print(minimumMoves(k, l, r))\n"}
{"text": "Sum of all even numbers in range L and R ", "java": "import java.io.*;\n\nclass GFG {\n  static int sumNatural(int n) {\n    int sum = (n * (n + 1));\n    return sum;\n  }\n\n  static int sumEven(int l, int r) {\n    return sumNatural(r / 2) - sumNatural((l - 1) / 2);\n  }\n\n  public static void main(String[] args) {\n    int l = 2, r = 5;\n    System.out.println(\" Sum \u2581 of \u2581 Natural \u2581 numbers \u2581 from \u2581 L \u2581 to \u2581 R \u2581 is \u2581 \" + sumEven(l, r));\n  }\n}\n", "python": "def sumNatural(n):\n    sum = n * (n + 1)\n    return int(sum)\n\n\ndef sumEven(l, r):\n    return sumNatural(int(r / 2)) - sumNatural(int((l - 1) / 2))\n\n\nl, r = 2, 5\nprint(\" Sum \u2581 of \u2581 Natural \u2581 numbers \", \" from \u2581 L \u2581 to \u2581 R \u2581 is \", sumEven(l, r))\n"}
{"text": "Sum of all natural numbers in range L to R ", "java": "class GFG {\n  static int sumNatural(int n) {\n    int sum = (n * (n + 1)) / 2;\n    return sum;\n  }\n\n  static int suminRange(int l, int r) {\n    return sumNatural(r) - sumNatural(l - 1);\n  }\n\n  public static void main(String[] args) {\n    int l = 2, r = 5;\n    System.out.println(\n        \" Sum \u2581 of \u2581 Natural \u2581 numbers \u2581 from \u2581 L \u2581 to \u2581 R \u2581 is \u2581 \" + suminRange(l, r));\n  }\n}\n", "python": "def sumNatural(n):\n    sum = (n * (n + 1)) // 2\n    return sum\n\n\ndef suminRange(l, r):\n    return sumNatural(r) - sumNatural(l - 1)\n\n\nl = 2\nr = 5\nprint(\" Sum \u2581 of \u2581 Natural \u2581 numbers \u2581 from \u2581 L \u2581 to \u2581 R \u2581 is \u2581 \", suminRange(l, r))\n"}
{"text": "Check if a large number is divisible by 75 or not ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean divisibleBy3(String number) {\n    int sumOfDigit = 0;\n    for (int i = 0; i < number.length(); i++) sumOfDigit += number.charAt(i) - '0';\n    if (sumOfDigit % 3 == 0) return true;\n    return false;\n  }\n\n  static boolean divisibleBy25(String number) {\n    if (number.length() < 2) return false;\n    int length = number.length();\n    int lastTwo = (number.charAt(length - 2) - '0') * 10 + (number.charAt(length - 1) - '0');\n    if (lastTwo % 25 == 0) return true;\n    return false;\n  }\n\n  static boolean divisibleBy75(String number) {\n    if (divisibleBy3(number) && divisibleBy25(number)) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    String number = \"754586672150\";\n    boolean divisible = divisibleBy75(number);\n    if (divisible) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def divisibleBy3(number):\n    sumOfDigit = 0\n    for i in range(0, len(number), 1):\n        sumOfDigit += ord(number[i]) - ord(\"0\")\n    if sumOfDigit % 3 == 0:\n        return True\n    return False\n\n\ndef divisibleBy25(number):\n    if len(number) < 2:\n        return False\n    length = len(number)\n    lastTwo = (ord(number[length - 2]) - ord(\"0\")) * 10 + (\n        ord(number[length - 1]) - ord(\"0\")\n    )\n    if lastTwo % 25 == 0:\n        return True\n    return False\n\n\ndef divisibleBy75(number):\n    if divisibleBy3(number) and divisibleBy25(number):\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    number = \"754586672150\"\n    divisible = divisibleBy75(number)\n    if divisible:\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Find the other number when LCM and HCF given ", "java": "class GFG {\n  static int otherNumber(int A, int Lcm, int Hcf) {\n    return (Lcm * Hcf) / A;\n  }\n\n  public static void main(String args[]) {\n    int A = 8, Lcm = 8, Hcf = 1;\n    int result = otherNumber(A, Lcm, Hcf);\n    System.out.println(\" B \u2581 = \u2581 \" + result);\n  }\n}\n", "python": "def otherNumber(a, Lcm, Hcf):\n    return (Lcm * Hcf) // A\n\n\nA = 8\nLcm = 8\nHcf = 1\nresult = otherNumber(A, Lcm, Hcf)\nprint(\" B \u2581 = \", result)\n"}
{"text": "Overall percentage change from successive changes ", "java": "import java.io.*;\n\nclass GFG {\n  static float successiveChange(int arr[], int N) {\n    float var1, var2, result = 0;\n    var1 = arr[0];\n    var2 = arr[1];\n    result = var1 + var2 + ((var1 * var2) / 100);\n    for (int i = 2; i < N; i++) result = result + arr[i] + ((result * arr[i]) / 100);\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {10, 20, 30, 10};\n    int N = arr.length;\n    float result = successiveChange(arr, N);\n    System.out.println(\" Percentage \u2581 change \u2581 is \u2581 = \u2581 \" + result + \" \u2581 % \");\n  }\n}\n", "python": "def successiveChange(arr, N):\n    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result = float(var1 + var2 + (float(var1 * var2) / 100))\n    for i in range(2, N):\n        result = result + arr[i] + (float(result * arr[i]) / 100)\n    return result\n\n\narr = [10, 20, 30, 10]\nN = len(arr)\nresult = successiveChange(arr, N)\nprint(\" Percentage \u2581 change \u2581 is \u2581 = \u2581 % .2f \" % (result), \" % \")\n"}
{"text": "Sum of multiples of A and B less than N ", "java": "class GFG {\n  static int __gcd(int a, int b) {\n    if (b == 0) return a;\n    return __gcd(b, a % b);\n  }\n\n  static int sumAP(int n, int d) {\n    n /= d;\n    return (n) * (1 + n) * d / 2;\n  }\n\n  static int sumMultiples(int A, int B, int n) {\n    n--;\n    int common = (A * B) / __gcd(A, B);\n    return sumAP(n, A) + sumAP(n, B) - sumAP(n, common);\n  }\n\n  public static void main(String[] args) {\n    int n = 100, A = 5, B = 10;\n    System.out.println(\" Sum \u2581 = \u2581 \" + sumMultiples(A, B, n));\n  }\n}\n", "python": "from math import gcd, sqrt\n\n\ndef sumAP(n, d):\n    n = int(n / d)\n    return (n) * (1 + n) * d / 2\n\n\ndef sumMultiples(A, B, n):\n    n -= 1\n    common = int((A * B) / gcd(A, B))\n    return sumAP(n, A) + sumAP(n, B) - sumAP(n, common)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 100\n    A = 5\n    B = 10\n    print(\" Sum \u2581 = \", int(sumMultiples(A, B, n)))\n"}
{"text": "Find the value of f ( n ) / f ( r ) * f ( n ", "java": "class GFG {\n  static int calcFunction(int n, int r) {\n    int finalDenominator = 1;\n    int mx = Math.max(r, n - r);\n    for (int i = mx + 1; i <= n; i++) {\n      int denominator = (int) Math.pow(i, i);\n      int numerator = (int) Math.pow(i - mx, i - mx);\n      finalDenominator = (finalDenominator * denominator) / numerator;\n    }\n    return finalDenominator;\n  }\n\n  public static void main(String[] args) {\n    int n = 6, r = 2;\n    System.out.println(\"1 / \" + calcFunction(n, r));\n  }\n}\n", "python": "def calcFunction(n, r):\n    finalDenominator = 1\n    mx = max(r, n - r)\n    for i in range(mx + 1, n + 1):\n        denominator = pow(i, i)\n        numerator = pow(i - mx, i - mx)\n        finalDenominator = (finalDenominator * denominator) // numerator\n    return finalDenominator\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 6\n    r = 2\n    print(\"1 / \", end=\" \")\n    print(calcFunction(n, r))\n"}
{"text": "Find the number after successive division ", "java": "public class GFG {\n  static int findNum(int div[], int rem[], int N) {\n    int num = rem[N - 1];\n    for (int i = N - 2; i >= 0; i--) {\n      num = num * div[i] + rem[i];\n    }\n    return num;\n  }\n\n  public static void main(String[] args) {\n    int div[] = {8, 3};\n    int rem[] = {2, 2};\n    int N = div.length;\n    System.out.println(findNum(div, rem, N));\n  }\n}\n", "python": "def findNum(div, rem, N):\n    num = rem[N - 1]\n    i = N - 2\n    while i >= 0:\n        num = num * div[i] + rem[i]\n        i -= 1\n    return num\n\n\nif __name__ == \" _ _ main _ _ \":\n    div = [8, 3]\n    rem = [2, 2]\n    N = len(div)\n    print(findNum(div, rem, N))\n"}
{"text": "Count pieces of circle after N cuts ", "java": "import java.util.*;\n\nclass solution {\n  static int countPieces(int N) {\n    return 2 * N;\n  }\n\n  public static void main(String args[]) {\n    int N = 100;\n    System.out.println(countPieces(N));\n  }\n}\n", "python": "def countPieces(N):\n    return 2 * N\n\n\nN = 100\nprint(countPieces(N))\n"}
{"text": "Sum of all the multiples of 3 and 7 below N ", "java": "import java.util.*;\n\nclass solution {\n  static long sumAP(long n, long d) {\n    n /= d;\n    return (n) * (1 + n) * d / 2;\n  }\n\n  static long sumMultiples(long n) {\n    n--;\n    return sumAP(n, 3) + sumAP(n, 7) - sumAP(n, 21);\n  }\n\n  public static void main(String args[]) {\n    long n = 24;\n    System.out.println(sumMultiples(n));\n  }\n}\n", "python": "def sumAP(n, d):\n    n = int(n / d)\n    return (n) * (1 + n) * (d / 2)\n\n\ndef sumMultiples(n):\n    n -= 1\n    return int(sumAP(n, 3) + sumAP(n, 7) - sumAP(n, 21))\n\n\nn = 24\nprint(sumMultiples(n))\n"}
{"text": "Check whether product of digits at even places is divisible by sum of digits at odd place of a number ", "java": "class GFG {\n  static boolean productSumDivisible(int n, int size) {\n    int sum = 0, product = 1;\n    while (n > 0) {\n      if (size % 2 == 0) {\n        product *= n % 10;\n      } else {\n        sum += n % 10;\n      }\n      n = n / 10;\n      size--;\n    }\n    if (product % sum == 0) {\n      return true;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 1234;\n    int len = 4;\n    if (productSumDivisible(n, len)) {\n      System.out.println(\" TRUE \");\n    } else {\n      System.out.println(\" FALSE \");\n    }\n  }\n}\n", "python": "def productSumDivisible(n, size):\n    sum = 0\n    product = 1\n    while n > 0:\n        if size % 2 == 0:\n            product *= n % 10\n        else:\n            sum += n % 10\n        n = n // 10\n        size -= 1\n    if product % sum == 0:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 1234\n    len = 4\n    if productSumDivisible(n, len):\n        print(\" TRUE \")\n    else:\n        print(\" FALSE \")\n    DEDENT\n"}
{"text": "Check whether product of digits at even places is divisible by sum of digits at odd place of a number ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean productSumDivisible(int n) {\n    int sum = 0;\n    int product = 1;\n    String num = String.valueOf(n);\n    for (int i = 0; i < num.length(); i++) {\n      if (i % 2 != 0) {\n        product = product * Character.getNumericValue(num.charAt(i));\n      } else {\n        sum = sum + Character.getNumericValue(num.charAt(i));\n      }\n    }\n    if (product % sum == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public static void main(String[] args) {\n    int n = 1234;\n    if (productSumDivisible(n)) {\n      System.out.println(\" TRUE \");\n    } else {\n      System.out.println(\" FALSE \");\n    }\n  }\n}\n", "python": "def productSumDivisible(n, size):\n    sum = 0\n    product = 1\n    while n > 0:\n        if size % 2 == 0:\n            product *= n % 10\n        else:\n            sum += n % 10\n        n = n // 10\n        size -= 1\n    if product % sum == 0:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 1234\n    len = 4\n    if productSumDivisible(n, len):\n        print(\" TRUE \")\n    else:\n        print(\" FALSE \")\n    DEDENT\n"}
{"text": "GCD of a number raised to some power and another number ", "java": "import java.io.*;\n\nclass GFG {\n  static long gcd(long a, long b) {\n    if (a == 0) return b;\n    return gcd(b % a, a);\n  }\n\n  static long powGCD(long a, long n, long b) {\n    for (int i = 0; i < n; i++) a = a * a;\n    return gcd(a, b);\n  }\n\n  public static void main(String[] args) {\n    long a = 10, b = 5, n = 2;\n    System.out.println(powGCD(a, n, b));\n  }\n}\n", "python": "def power(x, y, p):\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        x = (x * x) % p\n    return res\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef powerGCD(a, b, n):\n    e = power(a, n, b)\n    return gcd(e, b)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 5\n    b = 4\n    n = 2\n    print(powerGCD(a, b, n))\n"}
{"text": "Position after taking N steps to the right and left in an alternate manner ", "java": "import java.util.*;\n\nclass solution {\n  static int lastCoordinate(int n, int a, int b) {\n    return ((n + 1) / 2) * a - (n / 2) * b;\n  }\n\n  public static void main(String args[]) {\n    int n = 3, a = 5, b = 2;\n    System.out.println(lastCoordinate(n, a, b));\n  }\n}\n", "python": "def lastCoordinate(n, a, b):\n    return ((n + 1) // 2) * a - (n // 2) * b\n\n\nn = 3\na = 5\nb = 2\nprint(lastCoordinate(n, a, b))\n"}
{"text": "Check whether product of digits at even places of a number is divisible by K ", "java": "class GFG {\n  static boolean productDivisible(int n, int k) {\n    int product = 1, position = 1;\n    while (n > 0) {\n      if (position % 2 == 0) {\n        product *= n % 10;\n      }\n      n = n / 10;\n      position++;\n    }\n    if (product % k == 0) {\n      return true;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 321922;\n    int k = 3;\n    if (productDivisible(n, k)) {\n      System.out.println(\" YES \");\n    } else {\n      System.out.println(\" NO \");\n    }\n  }\n}\n", "python": "def productDivisible(n, k):\n    product = 1\n    position = 1\n    while n > 0:\n        if position % 2 == 0:\n            product *= n % 10\n        n = n / 10\n        position += 1\n    if product % k == 0:\n        return True\n    return False\n\n\nn = 321922\nk = 3\nif productDivisible(n, k) == True:\n    print(\" YES \")\nelse:\n    print(\" NO \")\n"}
{"text": "Permutations of n things taken r at a time with k things together ", "java": "class GFG {\n  static int factorial(int n) {\n    int fact = 1;\n    for (int i = 2; i <= n; i++) fact = fact * i;\n    return fact;\n  }\n\n  static int npr(int n, int r) {\n    int pnr = factorial(n) / factorial(n - r);\n    return pnr;\n  }\n\n  static int countPermutations(int n, int r, int k) {\n    return factorial(k) * (r - k + 1) * npr(n - k, r - k);\n  }\n\n  public static void main(String[] args) {\n    int n = 8;\n    int r = 5;\n    int k = 2;\n    System.out.println(countPermutations(n, r, k));\n  }\n}\n", "python": "def factorial(n):\n    fact = 1\n    for i in range(2, n + 1):\n        fact = fact * i\n    return fact\n\n\ndef npr(n, r):\n    pnr = factorial(n) / factorial(n - r)\n    return pnr\n\n\ndef countPermutations(n, r, k):\n    return int(factorial(k) * (r - k + 1) * npr(n - k, r - k))\n\n\nn = 8\nr = 5\nk = 2\nprint(countPermutations(n, r, k))\n"}
{"text": "Greatest Integer Function ", "java": "class GFG {\n  static int GIF(double n) {\n    return (int) Math.floor(n);\n  }\n\n  public static void main(String[] args) {\n    double n = 2.3;\n    System.out.println(GIF(n));\n  }\n}\n", "python": "import math\n\n\ndef GIF(n):\n    return int(math.floor(n))\n\n\nn = 2.3\nprint(GIF(n))\n"}
{"text": "Number of triangles formed from a set of points on three lines ", "java": "import java.io.*;\n\nclass GFG {\n  static int factorial(int n) {\n    int fact = 1;\n    for (int i = 2; i <= n; i++) fact = fact * i;\n    return fact;\n  }\n\n  static int ncr(int n, int r) {\n    return factorial(n) / (factorial(r) * factorial(n - r));\n  }\n\n  public static void main(String[] args) {\n    int m = 3, n = 4, k = 5;\n    int totalTriangles = ncr(m + n + k, 3) - ncr(m, 3) - ncr(n, 3) - ncr(k, 3);\n    System.out.println(totalTriangles);\n  }\n}\n", "python": "def factorial(n):\n    fact = 1\n    for i in range(2, n + 1):\n        fact = fact * i\n    return fact\n\n\ndef ncr(n, r):\n    return factorial(n) // (factorial(r) * factorial(n - r))\n\n\nif __name__ == \" _ _ main _ _ \":\n    m = 3\n    n = 4\n    k = 5\n    totalTriangles = ncr(m + n + k, 3) - ncr(m, 3) - ncr(n, 3) - ncr(k, 3)\n    print(totalTriangles)\n"}
{"text": "Check whether sum of digits at odd places of a number is divisible by K ", "java": "import java.util.*;\n\nclass solution {\n  static boolean SumDivisible(int n, int k) {\n    int sum = 0, position = 1;\n    while (n > 0) {\n      if (position % 2 == 1) sum += n % 10;\n      n = n / 10;\n      position++;\n    }\n    if (sum % k == 0) return true;\n    return false;\n  }\n\n  public static void main(String arr[]) {\n    int n = 592452;\n    int k = 3;\n    if (SumDivisible(n, k)) System.out.println(\" YES \");\n    else System.out.println(\" NO \");\n  }\n}\n", "python": "def SumDivisible(n, k):\n    sum = 0\n    position = 1\n    while n > 0:\n        if position % 2 == 1:\n            sum += n % 10\n        n = n // 10\n        position += 1\n    if sum % k == 0:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 592452\n    k = 3\n    if SumDivisible(n, k):\n        print(\" YES \")\n    else:\n        print(\" NO \")\n    DEDENT\n"}
{"text": "Check whether sum of digits at odd places of a number is divisible by K ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean sumDivisible(int n, int k) {\n    int sum = 0;\n    String num = Integer.toString(n);\n    int i;\n    for (i = 0; i < num.length(); i++) {\n      if (i % 2 != 0) {\n        sum = sum + (num.charAt(i) - '0');\n      }\n    }\n    if (sum % k == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public static void main(String[] args) {\n    int n = 592452;\n    int k = 3;\n    if (sumDivisible(n, k)) {\n      System.out.println(\" YES \");\n    } else {\n      System.out.println(\" NO \");\n    }\n  }\n}\n", "python": "def SumDivisible(n, k):\n    sum = 0\n    position = 1\n    while n > 0:\n        if position % 2 == 1:\n            sum += n % 10\n        n = n // 10\n        position += 1\n    if sum % k == 0:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 592452\n    k = 3\n    if SumDivisible(n, k):\n        print(\" YES \")\n    else:\n        print(\" NO \")\n    DEDENT\n"}
{"text": "Find maximum value of x such that n ! % ( k ^ x ) = 0 ", "java": "import java.util.*;\n\npublic class GfG {\n  private static int findX(int n, int k) {\n    int r = n, v, u;\n    int m = (int) Math.sqrt(k) + 1;\n    for (int i = 2; i <= m && k > 1; i++) {\n      if (i == m) {\n        i = k;\n      }\n      for (u = v = 0; k % i == 0; v++) {\n        k /= i;\n      }\n      if (v > 0) {\n        int t = n;\n        while (t > 0) {\n          t /= i;\n          u += t;\n        }\n        r = Math.min(r, u / v);\n      }\n    }\n    return r;\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    int k = 2;\n    System.out.println(findX(n, k));\n  }\n}\n", "python": "import math\n\n\ndef findX(n, k):\n    r = n\n    m = int(math.sqrt(k)) + 1\n    i = 2\n    while i <= m and k > 1:\n        if i == m:\n            i = k\n        u = 0\n        v = 0\n        while k % i == 0:\n            k //= i\n            v += 1\n        if v > 0:\n            t = n\n            while t > 0:\n                t //= i\n                u += t\n            r = min(r, u // v)\n        i += 1\n    return r\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    k = 2\n    print(findX(n, k))\n"}
{"text": "Ways of selecting men and women from a group to make a team ", "java": "import java.io.*;\n\nclass GFG {\n  static int fact(int n) {\n    int fact = 1;\n    for (int i = 2; i <= n; i++) fact *= i;\n    return fact;\n  }\n\n  static int ncr(int n, int r) {\n    int ncr = fact(n) / (fact(r) * fact(n - r));\n    return ncr;\n  }\n\n  static int ways(int m, int w, int n, int k) {\n    int ans = 0;\n    while (m >= k) {\n      ans += ncr(m, k) * ncr(w, n - k);\n      k += 1;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int m, w, n, k;\n    m = 7;\n    w = 6;\n    n = 5;\n    k = 3;\n    System.out.println(ways(m, w, n, k));\n  }\n}\n", "python": "def fact(n):\n    fact = 1\n    for i in range(2, n + 1):\n        fact *= i\n    return fact\n\n\ndef ncr(n, r):\n    ncr = fact(n) // (fact(r) * fact(n - r))\n    return ncr\n\n\ndef ways(m, w, n, k):\n    ans = 0\n    while m >= k:\n        ans += ncr(m, k) * ncr(w, n - k)\n        k += 1\n    return ans\n\n\nm = 7\nw = 6\nn = 5\nk = 3\nprint(ways(m, w, n, k))\n"}
{"text": "Minimum numbers needed to express every integer below N as a sum ", "java": "import java.io.*;\n\nclass GFG {\n  static int countBits(int n) {\n    int count = 0;\n    while (n > 0) {\n      count++;\n      n >>= 1;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 32;\n    System.out.println(\" Minimum \u2581 value \u2581 of \u2581 K \u2581 is \u2581 = \u2581 \" + countBits(n));\n  }\n}\n", "python": "def countBits(n):\n    count = 0\n    while n:\n        count += 1\n        n >>= 1\n    return count\n\n\nn = 32\nprint(\" Minimum \u2581 value \u2581 of \u2581 K \u2581 is \u2581 = \", countBits(n))\n"}
{"text": "Find the Nth term of the series 2 + 6 + 13 + 23 + . . . ", "java": "import java.io.*;\n\nclass GFG {\n  static int Nth_Term(int n) {\n    return (int) (3 * Math.pow(n, 2) - n + 2) / (2);\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.println(Nth_Term(N));\n  }\n}\n", "python": "def Nth_Term(n):\n    return (3 * pow(n, 2) - n + 2) // (2)\n\n\nN = 5\nprint(Nth_Term(N))\n"}
{"text": "All possible numbers of N digits and base B without leading zeros ", "java": "class GFG {\n  static void countPermutations(int N, int B) {\n    int x = (int) Math.pow(B, N);\n    int y = (int) Math.pow(B, N - 1);\n    System.out.println(x - y);\n  }\n\n  public static void main(String[] args) {\n    int N = 6;\n    int B = 4;\n    countPermutations(N, B);\n  }\n}\n", "python": "def countPermutations(N, B):\n    x = B ** N\n    y = B ** (N - 1)\n    print(x - y)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N, B = 6, 4\n    countPermutations(N, B)\n"}
{"text": "Maximum count of equal numbers in an array after performing given operations ", "java": "public class GFG {\n  static int EqualNumbers(int a[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum += a[i];\n    if (sum % n != 0) return n - 1;\n    return n;\n  }\n\n  public static void main(String args[]) {\n    int a[] = {1, 4, 1};\n    int n = a.length;\n    System.out.println(EqualNumbers(a, n));\n  }\n}\n", "python": "def EqualNumbers(a, n):\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    if sum % n:\n        return n - 1\n    return n\n\n\na = [1, 4, 1]\nn = len(a)\nprint(EqualNumbers(a, n))\n"}
{"text": "Steps required to visit M points in order on a circular ring of N points ", "java": "class GFG {\n  static int findSteps(int n, int m, int a[]) {\n    int cur = 1;\n    int steps = 0;\n    for (int i = 0; i < m; i++) {\n      if (a[i] >= cur) steps += (a[i] - cur);\n      else steps += (n - cur + a[i]);\n      cur = a[i];\n    }\n    return steps;\n  }\n\n  public static void main(String[] args) {\n    int n = 3, m = 3;\n    int a[] = {2, 1, 2};\n    System.out.println(findSteps(n, m, a));\n  }\n}\n", "python": "def findSteps(n, m, a):\n    cur = 1\n    steps = 0\n    for i in range(0, m):\n        if a[i] >= cur:\n            steps += a[i] - cur\n        else:\n            steps += n - cur + a[i]\n        cur = a[i]\n    return steps\n\n\nn = 3\nm = 3\na = [2, 1, 2]\nprint(findSteps(n, m, a))\n"}
{"text": "Ways of dividing a group into two halves such that two elements are in different groups ", "java": "import java.io.*;\n\nclass GFG {\n  static int factorial(int n) {\n    int result = 1;\n    for (int i = 1; i <= n; i++) result = result * i;\n    return result;\n  }\n\n  static int nCr(int n, int r) {\n    return factorial(n) / (factorial(r) * factorial(n - r));\n  }\n\n  static int calculate_result(int n) {\n    int result = 2 * nCr((n - 2), (n / 2 - 1));\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int a = 2, b = 4;\n    System.out.println(calculate_result(2 * a));\n    System.out.print(calculate_result(2 * b));\n  }\n}\n", "python": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n\ndef nCr(n, r):\n    return factorial(n) // (factorial(r) * factorial(n - r))\n\n\ndef calculate_result(n):\n    result = 2 * nCr((n - 2), (n // 2 - 1))\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    a, b = 2, 4\n    print(calculate_result(2 * a))\n    print(calculate_result(2 * b))\n"}
{"text": "Program to find the nth Kynea number ", "java": "class GFG {\n  static long nthKyneaNumber(int n) {\n    n = (1 << n) + 1;\n    n = n * n;\n    n = n - 2;\n    return n;\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(nthKyneaNumber(n));\n  }\n}\n", "python": "def nthKyneaNumber(n):\n    n = (1 << n) + 1\n    n = n * n\n    n = n - 2\n    return n\n\n\nn = 2\nprint(nthKyneaNumber(n))\n"}
{"text": "Program to find the nth Kynea number ", "java": "class GFG {\n  static long nthKyneaNumber(int n) {\n    return ((1 << (2 * n)) + (1 << (n + 1)) - 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(nthKyneaNumber(n));\n  }\n}\n", "python": "def nthKyneaNumber(n):\n    n = (1 << n) + 1\n    n = n * n\n    n = n - 2\n    return n\n\n\nn = 2\nprint(nthKyneaNumber(n))\n"}
{"text": "Sum of squares of Fibonacci numbers ", "java": "public class Improve {\n  static int calculateSquareSum(int n) {\n    if (n <= 0) return 0;\n    int fibo[] = new int[n + 1];\n    fibo[0] = 0;\n    fibo[1] = 1;\n    int sum = (fibo[0] * fibo[0]) + (fibo[1] * fibo[1]);\n    for (int i = 2; i <= n; i++) {\n      fibo[i] = fibo[i - 1] + fibo[i - 2];\n      sum += (fibo[i] * fibo[i]);\n    }\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int n = 6;\n    System.out.println(\n        \" Sum \u2581 of \u2581 squares \u2581 of \u2581 Fibonacci \u2581 numbers \u2581 is \u2581 : \u2581 \" + calculateSquareSum(n));\n  }\n}\n", "python": "MAX = 1000\nf = [0 for i in range(MAX)]\n\n\ndef fib(n):\n    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    if f[n]:\n        return f[n]\n    if n & 1:\n        k = (n + 1) // 2\n    else:\n        k = n // 2\n    if n & 1:\n        f[n] = fib(k) * fib(k) + fib(k - 1) * fib(k - 1)\n    else:\n        f[n] = (2 * fib(k - 1) + fib(k)) * fib(k)\n    return f[n]\n\n\ndef calculateSumOfSquares(n):\n    return fib(n) * fib(n + 1)\n\n\nn = 6\nprint(\n    \" Sum \u2581 of \u2581 Squares \u2581 of \u2581 \" \" Fibonacci \u2581 numbers \u2581 is \u2581 : \",\n    calculateSumOfSquares(n),\n)\n"}
{"text": "Check if a large number is divisible by 2 , 3 and 5 or not ", "java": "class GFG {\n  static int SumOfDigits(String str, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum += (int) (str.charAt(i) - '0');\n    return sum;\n  }\n\n  static boolean Divisible(String str, int n) {\n    if (SumOfDigits(str, n) % 3 == 0 && str.charAt(n - 1) == '0') return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    String str = \"263730746028908374890\";\n    int n = str.length();\n    if (Divisible(str, n)) System.out.println(\" YES \");\n    else System.out.println(\" NO \");\n  }\n}\n", "python": "def SumOfDigits(str, n):\n    sum = 0\n    for i in range(0, n):\n        sum += int(ord(str[i]) - ord(\"0\"))\n    return sum\n\n\ndef Divisible(str, n):\n    if SumOfDigits(str, n) % 3 == 0 and str[n - 1] == \"0\":\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    str = \"263730746028908374890\"\n    n = len(str)\n    if Divisible(str, n):\n        print(\" YES \")\n    else:\n        print(\" NO \")\n    DEDENT\n"}
{"text": "Minimum value possible of a given function from the given set ", "java": "import java.io.*;\n\nclass GFG {\n  static long findF_N(long n) {\n    long ans = 0;\n    for (long i = 0; i < n; ++i) ans += (i + 1) * (n - i - 1);\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    long n = 3;\n    System.out.println(findF_N(n));\n  }\n}\n", "python": "def findF_N(n):\n    ans = 0\n    for i in range(n):\n        ans = ans + (i + 1) * (n - i - 1)\n    return ans\n\n\nn = 3\nprint(findF_N(n))\n"}
{"text": "Divide an isosceles triangle in two parts with ratio of areas as n : m ", "java": "import java.io.*;\n\nclass GFG {\n  static float heightCalculate(int H, int n, int m) {\n    float N = (float) (n * 1.0);\n    float M = (float) (m * 1.0);\n    float h = H * (float) Math.sqrt(N / (N + M));\n    return h;\n  }\n\n  public static void main(String[] args) {\n    int H = 10, n = 3, m = 4;\n    System.out.print(heightCalculate(H, n, m));\n  }\n}\n", "python": "from math import sqrt\n\n\ndef heightCalculate(H, n, m):\n    N = n * 1.0\n    M = m * 1.0\n    h = H * sqrt(N / (N + M))\n    return h\n\n\nif __name__ == \" _ _ main _ _ \":\n    H = 10\n    n = 3\n    m = 4\n    print(\" { 0 : . 6 } \".format(heightCalculate(H, n, m)))\n"}
{"text": "Number of different positions where a person can stand ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int findPosition(int n, int f, int b) {\n    return n - Math.max(f + 1, n - b) + 1;\n  }\n\n  public static void main(String args[]) {\n    int n = 5, f = 2, b = 3;\n    System.out.print(findPosition(n, f, b));\n  }\n}\n", "python": "def findPosition(n, f, b):\n    return n - max(f + 1, n - b) + 1\n\n\nn, f, b = 5, 2, 3\nprint(findPosition(n, f, b))\n"}
{"text": "Program for n ", "java": "class GFG {\n  static int nthOdd(int n) {\n    return (2 * n - 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(nthOdd(n));\n  }\n}\n", "python": "def nthOdd(n):\n    return 2 * n - 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    print(nthOdd(n))\n"}
{"text": "Program for n ", "java": "class GFG {\n  static int nthEven(int n) {\n    return (2 * n);\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(nthEven(n));\n  }\n}\n", "python": "def nthOdd(n):\n    return 2 * n - 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    print(nthOdd(n))\n"}
{"text": "Program to find the Nth Harmonic Number ", "java": "import java.io.*;\n\nclass GFG {\n  static double nthHarmonic(int N) {\n    float harmonic = 1;\n    for (int i = 2; i <= N; i++) {\n      harmonic += (float) 1 / i;\n    }\n    return harmonic;\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    System.out.print(nthHarmonic(N));\n  }\n}\n", "python": "def nthHarmonic(N):\n    harmonic = 1.00\n    for i in range(2, N + 1):\n        harmonic += 1 / i\n    return harmonic\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    print(round(nthHarmonic(N), 5))\n"}
{"text": "Program to find Nth term of series 0 , 7 , 18 , 33 , 51 , 75 , 102 , 133 , ... . . ", "java": "import java.io.*;\n\nclass GFG {\n  static int nthTerm(int n) {\n    return 2 * (int) Math.pow(n, 2) + n - 3;\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(n):\n    return 2 * pow(n, 2) + n - 3\n\n\nN = 4\nprint(nthTerm(N))\n"}
{"text": "Program to find Nth term of series 0 , 10 , 30 , 60 , 99 , 150 , 210 , 280. ... ... ... . ", "java": "import java.util.*;\n\nclass solution {\n  static int nthTerm(int n) {\n    return 5 * (int) Math.pow(n, 2) - 5 * n;\n  }\n\n  public static void main(String arr[]) {\n    int N = 4;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(n):\n    return 5 * pow(n, 2) - 5 * n\n\n\nN = 4\nprint(nthTerm(N))\n"}
{"text": "Program to find Nth term of series 2 , 12 , 28 , 50 , 77 , 112 , 152 , 198 , ... . . ", "java": "import java.util.*;\n\nclass solution {\n  static int nthTerm(int n) {\n    return 3 * (int) Math.pow(n, 2) + n - 2;\n  }\n\n  public static void main(String arr[]) {\n    int N = 4;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(n):\n    return 3 * pow(n, 2) + n - 2\n\n\nN = 4\nprint(nthTerm(N))\n"}
{"text": "Program to find Nth term of series 4 , 14 , 28 , 46 , 68 , 94 , 124 , 158 , ... . . ", "java": "import java.util.*;\n\nclass solution {\n  static int nthTerm(int n) {\n    return 2 * (int) Math.pow(n, 2) + 4 * n - 2;\n  }\n\n  public static void main(String arr[]) {\n    int N = 4;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(n):\n    return 2 * pow(n, 2) + 4 * n - 2\n\n\nN = 4\nprint(nthTerm(N))\n"}
{"text": "Program to find Nth term of series 0 , 11 , 28 , 51 , 79 , 115 , 156 , 203 , ... . ", "java": "import java.io.*;\n\nclass GFG {\n  static int nthTerm(int n) {\n    return 3 * (int) Math.pow(n, 2) + 2 * n - 5;\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(n):\n    return 3 * pow(n, 2) + 2 * n - 5\n\n\nN = 4\nprint(nthTerm(N))\n"}
{"text": "Program to find Nth term of series 0 , 9 , 22 , 39 , 60 , 85 , 114 , 147 , ... . . ", "java": "public class GFG {\n  static int nthTerm(int n) {\n    return 2 * (int) Math.pow(n, 2) + 3 * n - 5;\n  }\n\n  public static void main(String args[]) {\n    int N = 4;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(n):\n    return 2 * pow(n, 2) + 3 * n - 5\n\n\nN = 4\nprint(nthTerm(N))\n"}
{"text": "Program to find Nth term of series 3 , 12 , 29 , 54 , 86 , 128 , 177 , 234 , ... . . ", "java": "public class GFG {\n  static int nthTerm(int n) {\n    return 4 * (int) Math.pow(n, 2) - 3 * n + 2;\n  }\n\n  public static void main(String args[]) {\n    int N = 4;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(n):\n    return 4 * pow(n, 2) - 3 * n + 2\n\n\nN = 4\nprint(nthTerm(N))\n"}
{"text": "Sum of the first N terms of the series 2 , 6 , 12 , 20 , 30. ... ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int calculateSum(int n) {\n    return n * (n + 1) / 2 + n * (n + 1) * (2 * n + 1) / 6;\n  }\n\n  public static void main(String args[]) {\n    int n = 3;\n    System.out.print(\" Sum \u2581 = \u2581 \" + calculateSum(n));\n  }\n}\n", "python": "def calculateSum(n):\n    return n * (n + 1) // 2 + n * (n + 1) * (2 * n + 1) // 6\n\n\nn = 3\nprint(\" Sum \u2581 = \u2581 \", calculateSum(n))\n"}
{"text": "Program to find the Nth term of the series 0 , 5 , 14 , 27 , 44 , ... ... . . ", "java": "import java.util.*;\n\nclass solution {\n  static int nthTerm(int n) {\n    return 2 * (int) Math.pow(n, 2) - n - 1;\n  }\n\n  public static void main(String arr[]) {\n    int N = 4;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(n):\n    return 2 * pow(n, 2) - n - 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    print(nthTerm(N))\n"}
{"text": "Program to find the Nth term of the series 0 , 5 , 18 , 39 , 67 , 105 , 150 , 203 , ... ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int nthTerm(int n) {\n    return 4 * (int) Math.pow(n, 2) - 7 * n + 3;\n  }\n\n  public static void main(String args[]) {\n    int N = 4;\n    System.out.print(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(n):\n    return 4 * pow(n, 2) - 7 * n + 3\n\n\nN = 4\nprint(nthTerm(N))\n"}
{"text": "Program to find the Nth term of the series 3 , 7 , 13 , 21 , 31. ... . ", "java": "import java.util.*;\n\nclass solution {\n  static long getNthTerm(long N) {\n    return ((int) Math.pow(N, 2) + N + 1);\n  }\n\n  public static void main(String arr[]) {\n    long N = 11;\n    System.out.println(getNthTerm(N));\n  }\n}\n", "python": "def getNthTerm(N):\n    return pow(N, 2) + N + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 11\n    print(getNthTerm(N))\n"}
{"text": "Sum of the numbers upto N that are divisible by 2 or 5 ", "java": "import java.util.*;\n\nclass GFG {\n  static long findSum(int n) {\n    long sum2, sum5, sum10;\n    sum2 = ((n / 2) * (4 + (n / 2 - 1) * 2)) / 2;\n    sum5 = ((n / 5) * (10 + (n / 5 - 1) * 5)) / 2;\n    sum10 = ((n / 10) * (20 + (n / 10 - 1) * 10)) / 2;\n    return sum2 + sum5 - sum10;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(findSum(n));\n  }\n}\n", "python": "def findSum(n):\n    sum2 = ((n // 2) * (4 + (n // 2 - 1) * 2)) // 2\n    sum5 = ((n // 5) * (10 + (n // 5 - 1) * 5)) // 2\n    sum10 = ((n // 10) * (20 + (n // 10 - 1) * 10)) // 2\n    return sum2 + sum5 - sum10\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(int(findSum(n)))\n"}
{"text": "Ratio of mth and nth terms of an A . P . with given ratio of sums ", "java": "import java.io.*;\n\nclass Nth {\n  static float CalculateRatio(float m, float n) {\n    return (2 * m - 1) / (2 * n - 1);\n  }\n}\n\nclass GFG {\n  public static void main(String[] args) {\n    float m = 6, n = 2;\n    Nth a = new Nth();\n    System.out.println(a.CalculateRatio(m, n));\n  }\n}\n", "python": "def CalculateRatio(m, n):\n    return (2 * m - 1) / (2 * n - 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    m = 6\n    n = 2\n    print(float(CalculateRatio(m, n)))\n"}
{"text": "Find the sum of n terms of the series 1 , 8 , 27 , 64 ... . ", "java": "import java.io.*;\n\nclass GFG {\n  static int calculateSum(int n) {\n    return (int) Math.pow(n * (n + 1) / 2, 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(calculateSum(n));\n  }\n}\n", "python": "def calculateSum(n):\n    return (n * (n + 1) / 2) ** 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(calculateSum(n))\n"}
{"text": "Program to find total number of edges in a Complete Graph ", "java": "class GFG {\n  static int totEdge(int n) {\n    int result = 0;\n    result = (n * (n - 1)) / 2;\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    System.out.println(totEdge(n));\n  }\n}\n", "python": "def totEdge(n):\n    result = (n * (n - 1)) // 2\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 6\n    print(totEdge(n))\n"}
{"text": "Program to find the count of coins of each type from the given ratio ", "java": "import java.io.*;\n\nclass GFG {\n  static int coin(int totalRupees, int X, int Y, int Z) {\n    float one = 0, fifty = 0, twentyfive = 0, result = 0, total = 0;\n    one = X * 1;\n    fifty = ((Y * 1) / 2);\n    twentyfive = ((Z * 1) / 4);\n    total = one + fifty + twentyfive;\n    result = ((totalRupees) / total);\n    return (int) result;\n  }\n\n  public static void main(String[] args) {\n    int totalRupees = 1800;\n    int X = 1, Y = 2, Z = 4;\n    int Rupees = coin(totalRupees, X, Y, Z);\n    System.out.println(\"1 \u2581 rupess \u2581 coins \u2581 = \u2581 \" + Rupees * 1);\n    System.out.println(\"50 \u2581 paisa \u2581 coins \u2581 = \u2581 \" + Rupees * 2);\n    System.out.println(\"25 \u2581 paisa \u2581 coins \u2581 = \u2581 \" + Rupees * 4);\n  }\n}\n", "python": "def coin(totalRupees, X, Y, Z):\n    one = X * 1\n    fifty = (Y * 1) / 2.0\n    twentyfive = (Z * 1) / 4.0\n    total = one + fifty + twentyfive\n    result = (totalRupees) / total\n    return int(result)\n\n\nif __name__ == \" _ _ main _ _ \":\n    totalRupees = 1800\n    X, Y, Z = 1, 2, 4\n    Rupees = coin(totalRupees, X, Y, Z)\n    print(\"1 \u2581 rupess \u2581 coins \u2581 = \u2581 \", Rupees * 1)\n    print(\"50 \u2581 paisa \u2581 coins \u2581 = \u2581 \", Rupees * 2)\n    print(\"25 \u2581 paisa \u2581 coins \u2581 = \u2581 \", Rupees * 4)\n"}
{"text": "Find the sum of series 0. X + 0. XX + 0. XXX + ... upto k terms ", "java": "public class GFG {\n  static float sumOfSeries(int x, int k) {\n    float y = (float) (((float) (x) / 81) * (9 * k - 1 + Math.pow(10, (-1) * k)));\n    return y;\n  }\n\n  public static void main(String args[]) {\n    int x = 9;\n    int k = 20;\n    System.out.println(sumOfSeries(x, k));\n  }\n}\n", "python": "def sumOfSeries(x, k):\n    return (float(x) / 81) * (9 * k - 1 + 10 ** ((-1) * k))\n\n\nif __name__ == \" _ _ main _ _ \":\n    x = 9\n    k = 20\n    print(sumOfSeries(x, k))\n"}
{"text": "Check if any large number is divisible by 17 or not ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isDivisible(long n) {\n    while (n / 100 > 0) {\n      long d = n % 10;\n      n /= 10;\n      n -= d * 5;\n    }\n    return (n % 17 == 0);\n  }\n\n  public static void main(String[] args) {\n    long n = 19877658;\n    if (isDivisible(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isDivisible(n):\n    while n // 100:\n        d = n % 10\n        n //= 10\n        n -= d * 5\n    return n % 17 == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 19877658\n    if isDivisible(n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Program to find Length of Bridge using Speed and Length of Train ", "java": "public class GFG {\n  static int bridge_length(int trainLength, int Speed, int Time) {\n    return ((Time * Speed) - trainLength);\n  }\n\n  public static void main(String[] args) {\n    int trainLength = 120;\n    int Speed = 30;\n    int Time = 18;\n    System.out.print(\n        \" Length \u2581 of \u2581 bridge \u2581 = \u2581 \" + bridge_length(trainLength, Speed, Time) + \" \u2581 meters \");\n  }\n}\n", "python": "def bridge_length(trainLength, Speed, Time):\n    return (Time * Speed) - trainLength\n\n\nif __name__ == \" _ _ main _ _ \":\n    trainLength = 120\n    Speed = 30\n    Time = 18\n    print(\n        \" Length \u2581 of \u2581 bridge \u2581 = \u2581 \",\n        bridge_length(trainLength, Speed, Time),\n        \" meters \",\n    )\n"}
{"text": "Program to find sum of the given sequence ", "java": "class GFG {\n  static long MOD = 1000000007;\n\n  static long modInv(long x) {\n    long n = MOD - 2;\n    long result = 1;\n    while (n > 0) {\n      if ((n & 1) > 0) {\n        result = result * x % MOD;\n      }\n      x = x * x % MOD;\n      n = n / 2;\n    }\n    return result;\n  }\n\n  static long getSum(long n, long k) {\n    long ans = 1;\n    for (long i = n + 1; i > n - k; i--) {\n      ans = ans * i % MOD;\n    }\n    ans = ans * modInv(k + 1) % MOD;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    long n = 3, k = 2;\n    System.out.println(getSum(n, k));\n  }\n}\n", "python": "MOD = 1000000007\n\n\ndef modInv(x):\n    n = MOD - 2\n    result = 1\n    while n:\n        if n & 1:\n            result = result * x % MOD\n        x = x * x % MOD\n        n = int(n / 2)\n    return result\n\n\ndef getSum(n, k):\n    ans = 1\n    for i in range(n + 1, n - k, -1):\n        ans = ans * i % MOD\n    ans = ans * modInv(k + 1) % MOD\n    return ans\n\n\nn = 3\nk = 2\nprint(getSum(n, k))\n"}
{"text": "Pairs with GCD equal to one in the given range ", "java": "class GFG {\n  static boolean checkPairs(int l, int r) {\n    if ((l - r) % 2 == 0) return false;\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int l = 1, r = 8;\n    if (checkPairs(l, r)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def checkPairs(l, r):\n    if (l - r) % 2 == 0:\n        return False\n    return True\n\n\nif __name__ == \" _ _ main _ _ \":\n    l, r = 1, 8\n    if checkPairs(l, r):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Check if a number with even number of digits is palindrome or not ", "java": "class GFG {\n  static boolean isPalindrome(int n) {\n    if (n % 11 == 0) {\n      return true;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(isPalindrome(123321) ? \" Palindrome \" : \" Not \u2581 Palindrome \");\n  }\n}\n", "python": "def isPalindrome(n):\n    if n % 11 == 0:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 123321\n    if isPalindrome(n):\n        print(\" Palindrome \")\n    else:\n        print(\" Not \u2581 Palindrome \")\n    DEDENT\n"}
{"text": "Number of Permutations such that no Three Terms forms Increasing Subsequence ", "java": "import java.io.*;\n\nclass GFG {\n  static long binomialCoeff(long n, long k) {\n    long res = 1;\n    if (k > n - k) k = n - k;\n    for (int i = 0; i < k; ++i) {\n      res *= (n - i);\n      res /= (i + 1);\n    }\n    return res;\n  }\n\n  static long catalan(long n) {\n    long c = binomialCoeff(2 * n, n);\n    return c / (n + 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(catalan(n));\n  }\n}\n", "python": "def binomialCoeff(n, k):\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res\n\n\ndef catalan(n):\n    c = binomialCoeff(2 * n, n)\n    return c // (n + 1)\n\n\nn = 3\nprint(catalan(n))\n"}
{"text": "Count ways to distribute m items among n people ", "java": "import java.util.*;\n\nclass GFG {\n  public static int binomial_coefficient(int n, int m) {\n    int res = 1;\n    if (m > n - m) m = n - m;\n    for (int i = 0; i < m; ++i) {\n      res *= (n - i);\n      res /= (i + 1);\n    }\n    return res;\n  }\n\n  public static int calculate_ways(int m, int n) {\n    if (m < n) {\n      return 0;\n    }\n    int ways = binomial_coefficient(n + m - 1, n - 1);\n    return ways;\n  }\n\n  public static void main(String[] args) {\n    int m = 7, n = 5;\n    int result = calculate_ways(m, n);\n    System.out.println(Integer.toString(result));\n    System.exit(0);\n  }\n}\n", "python": "def binomial_coefficient(n, m):\n    res = 1\n    if m > n - m:\n        m = n - m\n    for i in range(0, m):\n        res *= n - i\n        res /= i + 1\n    return res\n\n\ndef calculate_ways(m, n):\n    if m < n:\n        return 0\n    ways = binomial_coefficient(n + m - 1, n - 1)\n    return int(ways)\n\n\nif __name__ == \" _ _ main _ _ \":\n    m = 7\n    n = 5\n    result = calculate_ways(m, n)\n    print(result)\n"}
{"text": "N ", "java": "import java.util.*;\n\nclass GFG {\n  static int binaryToDecimal(String n) {\n    String num = n;\n    int dec_value = 0;\n    int base = 1;\n    int len = num.length();\n    for (int i = len - 1; i >= 0; i--) {\n      if (num.charAt(i) == '1') dec_value += base;\n      base = base * 2;\n    }\n    return dec_value;\n  }\n\n  static int numberSequence(int n) {\n    if (n == 1) return 1;\n    String s = \" \";\n    for (int i = 1; i < n; i++) s += '1';\n    s += '0';\n    for (int i = 1; i <= n; i++) s += '1';\n    int num = binaryToDecimal(s);\n    return num;\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(numberSequence(n));\n  }\n}\n", "python": "def nthElement(a, b, n):\n    seq = []\n    for i in range(1, n + 1):\n        seq.append(a * i)\n    seq.sort()\n    i = 1\n    k = n\n    while i <= n and k > 0:\n        try:\n            z = seq.index(b * i)\n        except ValueError:\n            seq.append(b * i)\n            seq.sort()\n            k -= 1\n        i += 1\n    return seq[n - 1]\n\n\na = 3\nb = 5\nn = 5\nprint(nthElement(a, b, n))\n"}
{"text": "N ", "java": "class GFG {\n  static int numberSequence(int n) {\n    int num = (int) (Math.pow(4, n) - Math.pow(2, n)) - 1;\n    return num;\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(numberSequence(n));\n  }\n}\n", "python": "def nthElement(a, b, n):\n    seq = []\n    for i in range(1, n + 1):\n        seq.append(a * i)\n    seq.sort()\n    i = 1\n    k = n\n    while i <= n and k > 0:\n        try:\n            z = seq.index(b * i)\n        except ValueError:\n            seq.append(b * i)\n            seq.sort()\n            k -= 1\n        i += 1\n    return seq[n - 1]\n\n\na = 3\nb = 5\nn = 5\nprint(nthElement(a, b, n))\n"}
{"text": "Program to find last two digits of 2 ^ n ", "java": "class Geeks {\n  static long LastTwoDigit(long num) {\n    long one = num % 10;\n    num /= 10;\n    long tens = num % 10;\n    tens *= 10;\n    num = tens + one;\n    return num;\n  }\n\n  public static void main(String args[]) {\n    int n = 10;\n    long num = 1;\n    num = (long) Math.pow(2, n);\n    System.out.println(\" Last \u2581 2 \u2581 digits \u2581 of \u2581 2 ^ 10 \u2581 = \u2581 \" + LastTwoDigit(num));\n  }\n}\n", "python": "def LastTwoDigit(num):\n    one = num % 10\n    num //= 10\n    tens = num % 10\n    tens *= 10\n    num = tens + one\n    return num\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    num = 1\n    num = pow(2, n)\n    print(\n        \" Last \u2581 \" + str(2) + \" \u2581 digits \u2581 of \u2581 \" + str(2) + \" ^ \" + str(n) + \" \u2581 = \u2581 \",\n        end=\" \",\n    )\n    print(LastTwoDigit(num))\n"}
{"text": "Program to find last two digits of 2 ^ n ", "java": "class GFG {\n  static int power(long x, long y, long p) {\n    while (y > 0) {\n      long r = y & 1;\n      if (r == 1) res = (res * (int) x) % (int) p;\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  static int numberOfDigits(int x) {\n    int i = 0;\n    while (x != 0) {\n      x /= 10;\n      i++;\n    }\n    return i;\n  }\n\n  static void LastTwoDigit(int n) {\n    System.out.print(\" Last \u2581 \" + 2 + \" \u2581 digits \u2581 of \u2581 \" + 2 + \" ^ \");\n    System.out.print(n + \" \u2581 = \u2581 \");\n    int temp = 1;\n    for (int i = 1; i <= 2; i++) temp *= 10;\n    temp = power(2, n, temp);\n    for (int i = 0; i < (2 - numberOfDigits(temp)); i++) System.out.print(0 + \" \u2581 \");\n    if (temp != 0) System.out.println(temp);\n  }\n\n  public static void main(String[] args) {\n    int n = 72;\n    LastTwoDigit(n);\n  }\n}\n", "python": "def LastTwoDigit(num):\n    one = num % 10\n    num //= 10\n    tens = num % 10\n    tens *= 10\n    num = tens + one\n    return num\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    num = 1\n    num = pow(2, n)\n    print(\n        \" Last \u2581 \" + str(2) + \" \u2581 digits \u2581 of \u2581 \" + str(2) + \" ^ \" + str(n) + \" \u2581 = \u2581 \",\n        end=\" \",\n    )\n    print(LastTwoDigit(num))\n"}
{"text": "Find gcd ( a ^ n , c ) where a , n and c can vary from 1 to 10 ^ 9 ", "java": "class GFG {\n  static long modPower(long x, long y, long p) {\n    while (y > 0) {\n      if ((y & 1) > 0) res = (res * x) % p;\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  static long gcd(long a, long b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n  }\n\n  static long gcdPow(long a, long n, long c) {\n    if (a % c == 0) return c;\n    long modexpo = modPower(a, n, c);\n    return gcd(modexpo, c);\n  }\n\n  public static void main(String[] args) {\n    long a = 10248585, n = 1000000, c = 12564;\n    System.out.println(gcdPow(a, n, c));\n  }\n}\n", "python": "def modPower(x, y, p):\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        x = (x * x) % p\n    return res\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcdPow(a, n, c):\n    if a % c == 0:\n        return c\n    modexpo = modPower(a, n, c)\n    return gcd(modexpo, c)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 10248585\n    n = 1000000\n    c = 12564\n    print(gcdPow(a, n, c))\n"}
{"text": "Sum of elements in range L ", "java": "import java.io.*;\n\npublic class GFG {\n  static int rangesum(int n, int l, int r) {\n    int[] arr = new int[n];\n    int c = 1, i = 0;\n    while (c <= n) {\n      arr[i++] = c;\n      c += 2;\n    }\n    c = 2;\n    while (c <= n) {\n      arr[i++] = c;\n      c += 2;\n    }\n    int sum = 0;\n    for (i = l - 1; i < r; i++) {\n      sum += arr[i];\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 12;\n    int l = 1, r = 11;\n    System.out.println(rangesum(n, l, r));\n  }\n}\n", "python": "def rangesum(n, l, r):\n    arr = [0] * n\n    c = 1\n    i = 0\n    while c <= n:\n        arr[i] = c\n        i += 1\n        c += 2\n    c = 2\n    while c <= n:\n        arr[i] = c\n        i += 1\n        c += 2\n    sum = 0\n    for i in range(l - 1, r, 1):\n        sum += arr[i]\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 12\n    l, r = 1, 11\n    print(rangesum(n, l, r))\n"}
{"text": "Sum of elements in range L ", "java": "import java.io.*;\n\npublic class GFG {\n  static int sumeven(int n, int l, int r) {\n    int sum = 0;\n    int mid = n / 2;\n    if (r <= mid) {\n      int first = (2 * l - 1);\n      int last = (2 * r - 1);\n      int no_of_terms = r - l + 1;\n      sum = ((no_of_terms) * ((first + last))) / 2;\n    } else if (l >= mid) {\n      int first = (2 * (l - n / 2));\n      int last = (2 * (r - n / 2));\n      int no_of_terms = r - l + 1;\n      sum = ((no_of_terms) * ((first + last))) / 2;\n    } else {\n      int sumleft = 0, sumright = 0;\n      int first_term1 = (2 * l - 1);\n      int last_term1 = (2 * (n / 2) - 1);\n      int no_of_terms1 = n / 2 - l + 1;\n      sumleft = ((no_of_terms1) * ((first_term1 + last_term1))) / 2;\n      int first_term2 = 2;\n      int last_term2 = (2 * (r - n / 2));\n      int no_of_terms2 = r - mid;\n      sumright = ((no_of_terms2) * ((first_term2 + last_term2))) / 2;\n      sum = (sumleft + sumright);\n    }\n    return sum;\n  }\n\n  static int sumodd(int n, int l, int r) {\n    int mid = n / 2 + 1;\n    int sum = 0;\n    if (r <= mid) {\n      int first = (2 * l - 1);\n      int last = (2 * r - 1);\n      int no_of_terms = r - l + 1;\n      sum = ((no_of_terms) * ((first + last))) / 2;\n    } else if (l > mid) {\n      int first = (2 * (l - mid));\n      int last = (2 * (r - mid));\n      int no_of_terms = r - l + 1;\n      sum = ((no_of_terms) * ((first + last))) / 2;\n    } else {\n      int sumleft = 0, sumright = 0;\n      int first_term1 = (2 * l - 1);\n      int last_term1 = (2 * mid - 1);\n      int no_of_terms1 = mid - l + 1;\n      sumleft = ((no_of_terms1) * ((first_term1 + last_term1))) / 2;\n      int first_term2 = 2;\n      int last_term2 = (2 * (r - mid));\n      int no_of_terms2 = r - mid;\n      sumright = ((no_of_terms2) * ((first_term2 + last_term2))) / 2;\n      sum = (sumleft + sumright);\n    }\n    return sum;\n  }\n\n  static int rangesum(int n, int l, int r) {\n    int sum = 0;\n    if (n % 2 == 0) return sumeven(n, l, r);\n    else return sumodd(n, l, r);\n  }\n\n  public static void main(String[] args) {\n    int n = 12;\n    int l = 1, r = 11;\n    System.out.println(rangesum(n, l, r));\n  }\n}\n", "python": "def rangesum(n, l, r):\n    arr = [0] * n\n    c = 1\n    i = 0\n    while c <= n:\n        arr[i] = c\n        i += 1\n        c += 2\n    c = 2\n    while c <= n:\n        arr[i] = c\n        i += 1\n        c += 2\n    sum = 0\n    for i in range(l - 1, r, 1):\n        sum += arr[i]\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 12\n    l, r = 1, 11\n    print(rangesum(n, l, r))\n"}
{"text": "Program to find the Interior and Exterior Angle of a Regular Polygon ", "java": "import java.io.*;\n\nclass GFG {\n  static void findAngle(int n) {\n    int interiorAngle, exteriorAngle;\n    interiorAngle = (n - 2) * 180 / n;\n    exteriorAngle = 360 / n;\n    System.out.println(\" Interior \u2581 angle : \u2581 \" + interiorAngle);\n    System.out.println(\" Exterior \u2581 angle : \u2581 \" + exteriorAngle);\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    findAngle(n);\n  }\n}\n", "python": "def findAngle(n):\n    interiorAngle = int((n - 2) * 180 / n)\n    exteriorAngle = int(360 / n)\n    print(\" Interior \u2581 angle : \u2581 \", interiorAngle)\n    print(\" Exterior \u2581 angle : \u2581 \", exteriorAngle)\n\n\nn = 10\nfindAngle(n)\n"}
{"text": "Program to calculate distance between two points in 3 D ", "java": "import java.io.*;\n\nclass GFG {\n  static void distance(float x1, float y1, float z1, float x2, float y2, float z2) {\n    double d =\n        Math.pow((Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) + Math.pow(z2 - z1, 2) * 1.0), 0.5);\n    System.out.println(\" Distance \u2581 is \u2581 \" + d);\n    return;\n  }\n\n  public static void main(String[] args) {\n    float x1 = 2;\n    float y1 = -5;\n    float z1 = 7;\n    float x2 = 3;\n    float y2 = 4;\n    float z2 = 5;\n    distance(x1, y1, z1, x2, y2, z2);\n  }\n}\n", "python": "import math\n\n\ndef distance(x1, y1, z1, x2, y2, z2):\n    d = math.sqrt(\n        math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2) + math.pow(z2 - z1, 2) * 1.0\n    )\n    print(\" Distance \u2581 is \u2581 \")\n    print(d)\n\n\nx1 = 2\ny1 = -5\nz1 = 7\nx2 = 3\ny2 = 4\nz2 = 5\ndistance(x1, y1, z1, x2, y2, z2)\n"}
{"text": "Maximum number of ones in a N * N matrix with given constraints ", "java": "import java.io.*;\n\nclass GFG {\n  static int getMaxOnes(int n, int x) {\n    int zeroes = (n / x);\n    zeroes = zeroes * zeroes;\n    int total = n * n;\n    int ans = total - zeroes;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    int x = 2;\n    System.out.println(getMaxOnes(n, x));\n  }\n}\n", "python": "def getMaxOnes(n, x):\n    zeroes = (int)(n / x)\n    zeroes = zeroes * zeroes\n    total = n * n\n    ans = total - zeroes\n    return ans\n\n\nn = 5\nx = 2\nprint(getMaxOnes(n, x))\n"}
{"text": "Surface Area and Volume of Hexagonal Prism ", "java": "import java.io.*;\n\nclass GFG {\n  static void findSurfaceArea(float a, float h) {\n    float Area;\n    Area = 6 * a * h + 3 * (float) (Math.sqrt(3)) * a * a;\n    System.out.println(\" Surface \u2581 Area : \u2581 \" + Area);\n  }\n\n  static void findVolume(float a, float h) {\n    float Volume;\n    Volume = 3 * (float) (Math.sqrt(3)) * a * a * h / 2;\n    System.out.println(\" Volume : \u2581 \" + Volume);\n  }\n\n  public static void main(String[] args) {\n    float a = 5, h = 10;\n    findSurfaceArea(a, h);\n    findVolume(a, h);\n  }\n}\n", "python": "import math\n\n\ndef findSurfaceArea(a, h):\n    Area = 0\n    Area = 6 * a * h + 3 * math.sqrt(3) * a * a\n    print(\" Surface \u2581 Area : \", round(Area, 3))\n\n\ndef findVolume(a, h):\n    Volume = 0\n    Volume = 3 * math.sqrt(3) * a * a * h / 2\n    print(\" Volume : \", round(Volume, 3))\n\n\na = 5\nh = 10\nfindSurfaceArea(a, h)\nfindVolume(a, h)\n"}
{"text": "Program to find the Area of an Ellipse ", "java": "class GFG {\n  static void findArea(float a, float b) {\n    float Area;\n    Area = (float) 3.142 * a * b;\n    System.out.println(\" Area : \u2581 \" + Area);\n  }\n\n  public static void main(String[] args) {\n    float a = 5, b = 4;\n    findArea(a, b);\n  }\n}\n", "python": "def findArea(a, b):\n    Area = 3.142 * a * b\n    print(\" Area : \", round(Area, 2))\n\n\na = 5\nb = 4\nfindArea(a, b)\n"}
{"text": "Recursive program to check if number is palindrome or not ", "java": "import java.io.*;\n\nclass GFG {\n  static int rev(int n, int temp) {\n    if (n == 0) return temp;\n    temp = (temp * 10) + (n % 10);\n    return rev(n / 10, temp);\n  }\n\n  public static void main(String[] args) {\n    int n = 121;\n    int temp = rev(n, 0);\n    if (temp == n) System.out.println(\" yes \");\n    else System.out.println(\" no \");\n  }\n}\n", "python": "def rev(n, temp):\n    if n == 0:\n        return temp\n    temp = (temp * 10) + (n % 10)\n    return rev(n / 10, temp)\n\n\nn = 121\ntemp = rev(n, 0)\nif temp != n:\n    print(\" yes \")\nelse:\n    print(\" no \")\n"}
{"text": "Centered Hexadecagonal Number ", "java": "import java.io.*;\n\nclass GFG {\n  static int center_hexadecagonal_num(int n) {\n    return 8 * n * n - 8 * n + 1;\n  }\n\n  public static void main(String args[]) {\n    int n = 2;\n    System.out.print(n + \" th \u2581 centered \u2581 \" + \" hexadecagonal \u2581 number : \u2581 \");\n    System.out.println(center_hexadecagonal_num(n));\n    n = 12;\n    System.out.print(n + \" th \u2581 centered \u2581 \" + \" hexadecagonal \u2581 number : \u2581 \");\n    System.out.println(center_hexadecagonal_num(n));\n  }\n}\n", "python": "def center_hexadecagonal_num(n):\n    return 8 * n * n - 8 * n + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 2\n    print(\n        n,\n        \" nd \u2581 centered \u2581 hexadecagonal \u2581 \" + \" number \u2581 : \u2581 \",\n        center_hexadecagonal_num(n),\n    )\n    n = 12\n    print(\n        n,\n        \" th \u2581 centered \u2581 hexadecagonal \u2581 \" + \" number \u2581 : \u2581 \",\n        center_hexadecagonal_num(n),\n    )\n"}
{"text": "LCM of two large numbers ", "java": "import java.math.*;\nimport java.util.*;\n\npublic class GFG {\n  public static BigInteger lcm(String a, String b) {\n    BigInteger s = new BigInteger(a);\n    BigInteger s1 = new BigInteger(b);\n    BigInteger mul = s.multiply(s1);\n    BigInteger gcd = s.gcd(s1);\n    BigInteger lcm = mul.divide(gcd);\n    return lcm;\n  }\n\n  public static void main(String[] args) {\n    String a = \"36594652830916364940473625749407\";\n    String b = \"448507083624364748494746353648484939\";\n    System.out.print(lcm(a, b));\n  }\n}\n", "python": "import math\n\n\ndef lcm(a, b):\n    s = int(a)\n    s1 = int(b)\n    mul = s * s1\n    gcd = math.gcd(s, s1)\n    lcm = mul // gcd\n    return lcm\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = \"36594652830916364940473625749407\"\n    b = \"448507083624364748494746353648484939\"\n    print(lcm(a, b))\n"}
{"text": "Find the GCD that lies in given range ", "java": "import java.io.*;\n\nclass GFG {\n  static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n  }\n\n  static int maxDivisorRange(int a, int b, int l, int h) {\n    int g = gcd(a, b);\n    int res = -1;\n    for (int i = l; i * i <= g && i <= h; i++)\n      if (g % i == 0) res = Math.max(res, Math.max(i, g / i));\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int a = 3, b = 27, l = 1, h = 5;\n    System.out.println(maxDivisorRange(a, b, l, h));\n  }\n}\n", "python": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef maxDivisorRange(a, b, l, h):\n    g = gcd(a, b)\n    res = -1\n    i = l\n    while i * i <= g and i <= h:\n        if g % i == 0:\n            res = max(res, max(i, g / i))\n        i += 1\n    return int(res)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 3\n    b = 27\n    l = 1\n    h = 5\n    print(maxDivisorRange(a, b, l, h))\n"}
{"text": "n ", "java": "import java.io.*;\n\nclass GFG {\n  static int sumOfSeries(int n) {\n    int ans = 0;\n    for (int i = 1; i <= n; i++) ans += i * i * i * i;\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "def ans(n):\n    if n < 6:\n        return n\n    return n % 6 + 10 * (ans(n // 6)) - 1\n\n\ndef getSpecialNumber(N):\n    return ans(N)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 17\n    answer = getSpecialNumber(N)\n    print(answer)\n"}
{"text": "Sum of series 1 * 1 ! + 2 * 2 ! + \u2026\u2026 . . + n * n ! ", "java": "import java.io.*;\n\nclass GFG {\n  static int factorial(int n) {\n    int res = 1;\n    for (int i = 2; i <= n; i++) res = res * i;\n    return res;\n  }\n\n  static int calculateSeries(int n) {\n    return factorial(n + 1) - 1;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(calculateSeries(n));\n  }\n}\n", "python": "def factorial(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\n\n\ndef calculateSeries(n):\n    return factorial(n + 1) - 1\n\n\nn = 3\nprint(calculateSeries(n))\n"}
{"text": "Sum of series 1 * 1 * 2 ! + 2 * 2 * 3 ! + \u2026\u2026 . . + n * n * ( n + 1 ) ! ", "java": "import java.io.*;\n\nclass GFG {\n  static int factorial(int n) {\n    int res = 1;\n    for (int i = 2; i <= n; i++) res = res * i;\n    return res;\n  }\n\n  static int calculateSeries(int n) {\n    return 2 + (n * n + n - 2) * factorial(n + 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(calculateSeries(n));\n  }\n}\n", "python": "import math\n\n\ndef factorial(n):\n    res = 1\n    i = 2\n    for i in n + 1:\n        res = res * i\n    return res\n\n\ndef calculateSeries(n):\n    return 2 + (n * n + n - 2) * math.factorial(n + 1)\n\n\nn = 3\nprint(calculateSeries(n))\n"}
{"text": "Forming smallest array with given constraints ", "java": "import java.io.*;\n\nclass GFG {\n  static int minimumLength(int x, int y, int z) {\n    return 1 + Math.abs(x - y) + Math.abs(y - z);\n  }\n\n  public static void main(String[] args) {\n    int x = 3, y = 1, z = 2;\n    System.out.println(minimumLength(x, y, z));\n  }\n}\n", "python": "def minimumLength(x, y, z):\n    return 1 + abs(x - y) + abs(y - z)\n\n\nx = 3\ny = 1\nz = 2\nprint(minimumLength(x, y, z))\n"}
{"text": "Find the other ", "java": "import java.io.*;\n\nclass GFG {\n  static void endPointOfDiameterofCircle(int x1, int y1, int c1, int c2) {\n    System.out.print(\" x2 \u2581 = \u2581 \" + (2 * c1 - x1) + \" \u2581 \");\n    System.out.print(\" y2 \u2581 = \u2581 \" + (2 * c2 - y1));\n  }\n\n  public static void main(String[] args) {\n    int x1 = -4, y1 = -1;\n    int c1 = 3, c2 = 5;\n    endPointOfDiameterofCircle(x1, y1, c1, c2);\n  }\n}\n", "python": "def endPointOfDiameterofCircle(x1, y1, c1, c2):\n    print(\" x2 \u2581 = \", (2 * c1 - x1), end=\" \u2581 \")\n    print(\" y2 \u2581 = \", (2 * c2 - y1))\n\n\nx1 = -4\ny1 = -1\nc1 = 3\nc2 = 5\nendPointOfDiameterofCircle(x1, y1, c1, c2)\n"}
{"text": "Centered heptagonal number ", "java": "import java.io.*;\n\nclass GFG {\n  static long centered_heptagonal_num(long n) {\n    return (7 * n * n - 7 * n + 2) / 2;\n  }\n\n  public static void main(String[] args) {\n    long n = 5;\n    System.out.println(\n        n + \" th \u2581 Centered \u2581 \" + \" heptagonal \u2581 number \u2581 : \u2581 \" + centered_heptagonal_num(n));\n  }\n}\n", "python": "def centered_heptagonal_num(n):\n    return (7 * n * n - 7 * n + 2) // 2\n\n\nn = 5\nprint(\" % sth \u2581 Centered \u2581 heptagonal \u2581 number \u2581 : \u2581 \" % n, centered_heptagonal_num(n))\n"}
{"text": "Sum of square ", "java": "class GFG {\n  static int findSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) sum += ((i * (i + 1) * (2 * i + 1)) / 6);\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(findSum(n));\n  }\n}\n", "python": "def findSum(n):\n    summ = 0\n    for i in range(1, n + 1):\n        summ = summ + ((i * (i + 1) * (2 * i + 1)) / 6)\n    return summ\n\n\nn = 3\nprint(int(findSum(n)))\n"}
{"text": "Finding n ", "java": "class GFG {\n  public static int magicOfSequence(int N) {\n    int sum = 0;\n    for (int i = 1; i <= N; i++) sum += (i * i * i + i * 2);\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int N = 4;\n    System.out.println(magicOfSequence(N));\n  }\n}\n", "python": "def nthprimedigitsnumber(number):\n    num = \" \"\n    while number > 0:\n        rem = number % 4\n        if rem == 1:\n            num += \"2\"\n        if rem == 2:\n            num += \"3\"\n        if rem == 3:\n            num += \"5\"\n        if rem == 0:\n            num += \"7\"\n        if number % 4 == 0:\n            number = number - 1\n        number = number // 4\n    return num[::-1]\n\n\nnumber = 21\nprint(nthprimedigitsnumber(10))\nprint(nthprimedigitsnumber(number))\n"}
{"text": "Making zero array by decrementing pairs of adjacent ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isPossibleToZero(int a[], int n) {\n    int even = 0, odd = 0;\n    for (int i = 0; i < n; i++) {\n      if ((i & 1) == 0) odd += a[i];\n      else even += a[i];\n    }\n    return (odd == even);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {0, 1, 1, 0};\n    int n = arr.length;\n    if (isPossibleToZero(arr, n)) System.out.println(\" YES \");\n    else System.out.println(\" NO \");\n  }\n}\n", "python": "def isPossibleToZero(a, n):\n    num = 0\n    for i in range(n):\n        num = num * 10 + a[i]\n    return num % 11 == 0\n\n\narr = [0, 1, 1, 0]\nn = len(arr)\nif isPossibleToZero(arr, n):\n    print(\" YES \")\nelse:\n    print(\" NO \")\n"}
{"text": "Program for sum of cos ( x ) series ", "java": "import java.lang.Math.*;\n\nclass GFG {\n  static final double PI = 3.142;\n\n  static double cosXSertiesSum(double x, int n) {\n    x = x * (PI / 180.0);\n    double res = 1;\n    double sign = 1, fact = 1, pow = 1;\n    for (int i = 1; i < 5; i++) {\n      sign = sign * -1;\n      fact = fact * (2 * i - 1) * (2 * i);\n      pow = pow * x * x;\n      res = res + sign * pow / fact;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    float x = 50;\n    int n = 5;\n    System.out.println((float) (cosXSertiesSum(x, 5) * 1000000) / 1000000.00);\n  }\n}\n", "python": "PI = 3.142\n\n\ndef cosXSertiesSum(x, n):\n    x = x * (PI / 180.0)\n    res = 1\n    sign = 1\n    fact = 1\n    pow = 1\n    for i in range(1, 5):\n        sign = sign * (-1)\n        fact = fact * (2 * i - 1) * (2 * i)\n        pow = pow * x * x\n        res = res + sign * pow / fact\n    return res\n\n\nx = 50\nn = 5\nprint(round(cosXSertiesSum(x, 5), 6))\n"}
{"text": "Possible two sets from first N natural numbers difference of sums as D ", "java": "class GFG {\n  static boolean check(int N, int D) {\n    int temp = (N * (N + 1)) / 2 + D;\n    return (temp % 2 == 0);\n  }\n\n  public static void main(String args[]) {\n    int N = 5;\n    int M = 7;\n    if (check(N, M)) System.out.println(\" yes \");\n    else System.out.println(\" no \");\n  }\n}\n", "python": "def check(N, D):\n    temp = N * (N + 1) // 2 + D\n    return bool(temp % 2 == 0)\n\n\nN = 5\nM = 7\nif check(N, M):\n    print(\" yes \")\nelse:\n    print(\" no \")\n"}
{"text": "Number of Digits in a ^ b ", "java": "class GFG {\n  static int no_of_digit(int a, int b) {\n    return ((int) (b * Math.log10(a)) + 1);\n  }\n\n  public static void main(String[] args) {\n    int a = 2, b = 100;\n    System.out.print(\" no . \u2581 of \u2581 digits \u2581 = \u2581 \" + no_of_digit(a, b));\n  }\n}\n", "python": "import math\n\n\ndef no_of_digit(a, b):\n    return (int)(b * math.log10(a)) + 1\n\n\na = 2\nb = 100\nprint(\" no \u2581 of \u2581 digits \u2581 = \u2581 \", no_of_digit(a, b))\n"}
{"text": "N ", "java": "class GFG {\n  static int nthSquareCube(int n) {\n    return n * n * n * n * n * n;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(nthSquareCube(n));\n  }\n}\n", "python": "def nthElement(a, b, n):\n    seq = []\n    for i in range(1, n + 1):\n        seq.append(a * i)\n    seq.sort()\n    i = 1\n    k = n\n    while i <= n and k > 0:\n        try:\n            z = seq.index(b * i)\n        except ValueError:\n            seq.append(b * i)\n            seq.sort()\n            k -= 1\n        i += 1\n    return seq[n - 1]\n\n\na = 3\nb = 5\nn = 5\nprint(nthElement(a, b, n))\n"}
{"text": "Number of digits in 2 raised to power n ", "java": "import java.util.*;\n\nclass Gfg {\n  static int countDigits(int n) {\n    return (int) (n * Math.log10(2) + 1);\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.println(countDigits(n));\n  }\n}\n", "python": "import math\n\n\ndef countDigits(n):\n    return int(n * math.log10(2) + 1)\n\n\nn = 5\nprint(countDigits(n))\n"}
{"text": "Smallest triangular number larger than p ", "java": "import java.lang.System.*;\n\nclass GFG {\n  static int findBucketNo(int p) {\n    return (int) Math.ceil((Math.sqrt(8 * p + 1) - 1) / 2);\n  }\n\n  public static void main(String[] args) {\n    int p = 10;\n    System.out.println(findBucketNo(p));\n  }\n}\n", "python": "import math\n\n\ndef findBucketNo(p):\n    return math.ceil((math.sqrt(8 * p + 1) - 1) / 2)\n\n\np = 10\nprint(findBucketNo(p))\n"}
{"text": "LCM of factorial and its neighbors ", "java": "import java.io.*;\n\nclass GFG {\n  static int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n  }\n\n  static int LCMOfNeighbourFact(int n) {\n    return factorial(n + 1);\n  }\n\n  public static void main(String args[]) {\n    int N = 5;\n    System.out.println(LCMOfNeighbourFact(N));\n  }\n}\n", "python": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\n\ndef LCMOfNeighbourFact(n):\n    return factorial(n + 1)\n\n\nN = 5\nprint(LCMOfNeighbourFact(N))\n"}
{"text": "Probability for three randomly chosen numbers to be in AP ", "java": "class GFG {\n  static double procal(int n) {\n    return (3.0 * n) / (4.0 * (n * n) - 1);\n  }\n\n  public static void main(String arg[]) {\n    int a[] = {1, 2, 3, 4, 5};\n    int n = a.length;\n    System.out.print(Math.round(procal(n) * 1000000.0) / 1000000.0);\n  }\n}\n", "python": "def procal(n):\n    return (3.0 * n) / (4.0 * (n * n) - 1)\n\n\na = [1, 2, 3, 4, 5]\nn = len(a)\nprint(round(procal(n), 6))\n"}
{"text": "Product of given N fractions in reduced form ", "java": "import java.io.*;\n\nclass GFG {\n  static int gcd(int a, int b) {\n    if (a == 0) return b;\n    return gcd(b % a, a);\n  }\n\n  static void productReduce(int n, int num[], int den[]) {\n    int new_num = 1, new_den = 1;\n    for (int i = 0; i < n; i++) {\n      new_num *= num[i];\n      new_den *= den[i];\n    }\n    int GCD = gcd(new_num, new_den);\n    new_num /= GCD;\n    new_den /= GCD;\n    System.out.println(new_num + \" / \" + new_den);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    int num[] = {1, 2, 5};\n    int den[] = {2, 1, 6};\n    productReduce(n, num, den);\n  }\n}\n", "python": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef productReduce(n, num, den):\n    new_num = 1\n    new_den = 1\n    for i in range(n):\n        new_num = new_num * num[i]\n        new_den = new_den * den[i]\n    GCD = gcd(new_num, new_den)\n    new_num = new_num / GCD\n    new_den = new_den / GCD\n    print(int(new_num), \" / \", int(new_den))\n\n\nn = 3\nnum = [1, 2, 5]\nden = [2, 1, 6]\nproductReduce(n, num, den)\n"}
{"text": "Recursive sum of digits of a number formed by repeated appends ", "java": "class GFG {\n  static int digSum(int n) {\n    if (n == 0) return 0;\n    return (n % 9 == 0) ? 9 : (n % 9);\n  }\n\n  static int repeatedNumberSum(int n, int x) {\n    int sum = x * digSum(n);\n    return digSum(sum);\n  }\n\n  public static void main(String[] args) {\n    int n = 24, x = 3;\n    System.out.println(repeatedNumberSum(n, x));\n  }\n}\n", "python": "def digSum(n):\n    if n == 0:\n        return 0\n    return (n % 9 == 0) and 9 or (n % 9)\n\n\ndef repeatedNumberSum(n, x):\n    sum = x * digSum(n)\n    return digSum(sum)\n\n\nn = 24\nx = 3\nprint(repeatedNumberSum(n, x))\n"}
{"text": "Sum of n digit numbers divisible by a given number ", "java": "import java.io.*;\n\nclass GFG {\n  static int totalSumDivisibleByNum(int n, int number) {\n    int firstnum = (int) Math.pow(10, n - 1);\n    int lastnum = (int) Math.pow(10, n);\n    int sum = 0;\n    for (int i = firstnum; i < lastnum; i++) if (i % number == 0) sum += i;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 3, num = 7;\n    System.out.println(totalSumDivisibleByNum(n, num));\n  }\n}\n", "python": "def totalSumDivisibleByNum(digit, number):\n    firstnum = pow(10, digit - 1)\n    lastnum = pow(10, digit)\n    firstnum = (firstnum - firstnum % number) + number\n    lastnum = lastnum - lastnum % number\n    count = (lastnum - firstnum) / number + 1\n    return int(((lastnum + firstnum) * count) / 2)\n\n\ndigit = 3\nnum = 7\nprint(totalSumDivisibleByNum(digit, num))\n"}
{"text": "N ", "java": "import java.io.*;\n\nclass GFG {\n  static void georgeCantor(int n) {\n    int i = 1;\n    int j = 1;\n    int k = 1;\n    while (k < n) {\n      j++;\n      k++;\n      if (k == n) break;\n      while (j > 1 && k < n) {\n        i++;\n        j--;\n        k++;\n      }\n      if (k == n) break;\n      i++;\n      k++;\n      if (k == n) break;\n      while (i > 1 && k < n) {\n        i--;\n        j++;\n        k++;\n      }\n    }\n    System.out.println(\" N - th \u2581 term \u2581 : \u2581 \" + i + \" / \" + j);\n  }\n\n  public static void main(String[] args) {\n    int n = 15;\n    georgeCantor(n);\n  }\n}\n", "python": "def nthElement(a, b, n):\n    seq = []\n    for i in range(1, n + 1):\n        seq.append(a * i)\n    seq.sort()\n    i = 1\n    k = n\n    while i <= n and k > 0:\n        try:\n            z = seq.index(b * i)\n        except ValueError:\n            seq.append(b * i)\n            seq.sort()\n            k -= 1\n        i += 1\n    return seq[n - 1]\n\n\na = 3\nb = 5\nn = 5\nprint(nthElement(a, b, n))\n"}
{"text": "Number is divisible by 29 or not ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isDivisible(long n) {\n    while (n / 100 > 0) {\n      int last_digit = (int) n % 10;\n      n /= 10;\n      n += last_digit * 3;\n    }\n    return (n % 29 == 0);\n  }\n\n  public static void main(String[] args) {\n    long n = 348;\n    if (isDivisible(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isDivisible(n):\n    while int(n / 100):\n        last_digit = int(n % 10)\n        n = int(n / 10)\n        n += last_digit * 3\n    return n % 29 == 0\n\n\nn = 348\nif isDivisible(n) != 0:\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Check if given number is perfect square ", "java": "import java.io.*;\n\nclass GFG {\n  static void checkperfectsquare(int n) {\n    if (Math.ceil((double) Math.sqrt(n)) == Math.floor((double) Math.sqrt(n))) {\n      System.out.print(\" perfect \u2581 square \");\n    } else {\n      System.out.print(\" not \u2581 a \u2581 perfect \u2581 square \");\n    }\n  }\n\n  public static void main(String[] args) {\n    int n = 49;\n    checkperfectsquare(n);\n  }\n}\n", "python": "import math\n\n\ndef isPerfectSquare(x):\n    if x >= 0:\n        sr = math.sqrt(x)\n        return (sr * sr) == float(x)\n    return false\n\n\nx = 2502\nif isPerfectSquare(x):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program to Change RGB color model to HSV color model ", "java": "class GFG {\n  static void rgb_to_hsv(double r, double g, double b) {\n    r = r / 255.0;\n    g = g / 255.0;\n    b = b / 255.0;\n    double h = -1, s = -1;\n    if (cmax == cmin) h = 0;\n    else if (cmax == r) h = (60 * ((g - b) / diff) + 360) % 360;\n    else if (cmax == g) h = (60 * ((b - r) / diff) + 120) % 360;\n    else if (cmax == b) h = (60 * ((r - g) / diff) + 240) % 360;\n    if (cmax == 0) s = 0;\n    else s = (diff / cmax) * 100;\n    double v = cmax * 100;\n    System.out.println(\" ( \" + h + \" \u2581 \" + s + \" \u2581 \" + v + \" ) \");\n  }\n\n  public static void main(String[] args) {\n    rgb_to_hsv(129, 88, 47);\n  }\n}\n", "python": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif cmax == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif cmax == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n    if cmax == 0:\n        s = 0\n    else:\n        s = (diff / cmax) * 100\n    v = cmax * 100\n    return h, s, v\n\n\nprint(rgb_to_hsv(129, 88, 47))\n"}
{"text": "Sum of Series ( n ^ 2 ", "java": "import java.io.*;\n\nclass GFG {\n  static int sum_series(int n) {\n    int nSquare = n * n;\n    return nSquare * (nSquare - 1) / 4;\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(sum_series(n));\n  }\n}\n", "python": "def sum_series(n):\n    nSquare = n * n\n    return int(nSquare * (nSquare - 1) / 4)\n\n\nn = 2\nprint(sum_series(n))\n"}
{"text": "Tomohiko Sakamoto 's Algorithm ", "java": "class tomohiko_sakamoto {\n  public static int day_of_the_week(int y, int m, int d) {\n    int t[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};\n    if (m < 3) y -= 1;\n    return (y + y / 4 - y / 100 + y / 400 + t[m - 1] + d) % 7;\n  }\n\n  public static void main(String args[]) {\n    int day = 13, month = 7, year = 2017;\n    System.out.println(day_of_the_week(year, month, day));\n  }\n}\n", "python": "def day_of_the_week(y, m, d):\n    t = [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4]\n    if m < 3:\n        y = y - 1\n    return (y + y // 4 - y // 100 + y // 400 + t[m - 1] + d) % 7\n\n\nday = 13\nmonth = 7\nyear = 2017\nprint(day_of_the_week(year, month, day))\n"}
{"text": "Recursive program for prime number ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isPrime(int n, int i) {\n    if (n <= 2) return (n == 2) ? true : false;\n    if (n % i == 0) return false;\n    if (i * i > n) return true;\n    return isPrime(n, i + 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 15;\n    if (isPrime(n, 2)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isPrime(n, i=2):\n    if n <= 2:\n        return True if (n == 2) else False\n    if n % i == 0:\n        return False\n    if i * i > n:\n        return true\n    return isPrime(n, i + 1)\n\n\nn = 15\nif isPrime(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Area of a square from diagonal length ", "java": "class GFG {\n  static double findArea(double d) {\n    return (d * d) / 2;\n  }\n\n  public static void main(String[] args) {\n    double d = 10;\n    System.out.println(findArea(d));\n  }\n}\n", "python": "def findArea(d):\n    return (d * d) / 2\n\n\nd = 10\nprint(\" % .2f \" % findArea(d))\n"}
{"text": "Sum of series 1 ^ 2 + 3 ^ 2 + 5 ^ 2 + . . . + ( 2 * n ", "java": "import java.io.*;\n\nclass GFG {\n  static int sumOfSeries(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) sum = sum + (2 * i - 1) * (2 * i - 1);\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "import math\n\n\ndef sumOfSeries(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (2 * i - 1) * (2 * i - 1)\n    return sum\n\n\nn = 10\nprint(sumOfSeries(n))\n"}
{"text": "Sum of series 1 ^ 2 + 3 ^ 2 + 5 ^ 2 + . . . + ( 2 * n ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int sumOfSeries(int n) {\n    return (n * (2 * n - 1) * (2 * n + 1)) / 3;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "import math\n\n\ndef sumOfSeries(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (2 * i - 1) * (2 * i - 1)\n    return sum\n\n\nn = 10\nprint(sumOfSeries(n))\n"}
{"text": "Program to implement standard error of mean ", "java": "class GFG {\n  static float mean(float arr[], int n) {\n    float sum = 0;\n    for (int i = 0; i < n; i++) sum = sum + arr[i];\n    return sum / n;\n  }\n\n  static float SSD(float arr[], int n) {\n    float sum = 0;\n    for (int i = 0; i < n; i++) sum = sum + (arr[i] - mean(arr, n)) * (arr[i] - mean(arr, n));\n    return (float) Math.sqrt(sum / (n - 1));\n  }\n\n  static float sampleError(float arr[], int n) {\n    return SSD(arr, n) / (float) Math.sqrt(n);\n  }\n\n  public static void main(String[] args) {\n    float arr[] = {78.53f, 79.62f, 80.25f, 81.05f, 83.21f, 83.46f};\n    int n = arr.length;\n    System.out.println(sampleError(arr, n));\n  }\n}\n", "python": "import math\n\n\ndef mean(arr, n):\n    sm = 0\n    for i in range(0, n):\n        sm = sm + arr[i]\n    return sm / n\n\n\ndef SSD(arr, n):\n    sm = 0\n    for i in range(0, n):\n        sm = sm + (arr[i] - mean(arr, n)) * (arr[i] - mean(arr, n))\n    return math.sqrt(sm / (n - 1))\n\n\ndef sampleError(arr, n):\n    return SSD(arr, n) / (math.sqrt(n))\n\n\narr = [78.53, 79.62, 80.25, 81.05, 83.21, 83.46]\nn = len(arr)\nprint(sampleError(arr, n))\n"}
{"text": "Number of Symmetric Relations on a Set ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int countSymmetric(int n) {\n    if (n == 0) return 1;\n    return 1 << ((n * (n + 1)) / 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(countSymmetric(n));\n  }\n}\n", "python": "def countSymmetric(n):\n    if n == 0:\n        return 1\n    return 1 << ((n * (n + 1)) // 2)\n\n\nn = 3\nprint(countSymmetric(n))\n"}
{"text": "Program for centered nonagonal number ", "java": "import java.io.*;\n\nclass GFG {\n  static int centeredNonagonal(int n) {\n    return (3 * n - 2) * (3 * n - 1) / 2;\n  }\n\n  public static void main(String args[]) {\n    int n = 10;\n    System.out.println(centeredNonagonal(n));\n  }\n}\n", "python": "def centeredNonagonal(n):\n    return (3 * n - 2) * (3 * n - 1) // 2\n\n\nn = 10\nprint(centeredNonagonal(n))\n"}
{"text": "Program for Mean Absolute Deviation ", "java": "import java.io.*;\n\nclass GFG {\n  static float Mean(float arr[], int n) {\n    float sum = 0;\n    for (int i = 0; i < n; i++) sum = sum + arr[i];\n    return sum / n;\n  }\n\n  static float meanAbsDevtion(float arr[], int n) {\n    float absSum = 0;\n    for (int i = 0; i < n; i++) absSum = absSum + Math.abs(arr[i] - Mean(arr, n));\n    return absSum / n;\n  }\n\n  public static void main(String[] args) {\n    float arr[] = {10, 15, 15, 17, 18, 21};\n    int n = arr.length;\n    System.out.println(meanAbsDevtion(arr, n));\n  }\n}\n", "python": "def Mean(arr, n):\n    sm = 0\n    for i in range(0, n):\n        sm = sm + arr[i]\n    return sm // n\n\n\ndef meanAbsoluteDeviation(arr, n):\n    absSum = 0\n    for i in range(0, n):\n        absSum = absSum + abs(arr[i] - Mean(arr, n))\n    return absSum / n\n\n\narr = [10, 15, 15, 17, 18, 21]\nn = len(arr)\nprint(meanAbsoluteDeviation(arr, n))\n"}
{"text": "Sum of fourth powers of first n odd natural numbers ", "java": "class GFG {\n  static long oddNumSum(int n) {\n    return (n * (2 * n + 1) * (24 * n * n * n - 12 * n * n - 14 * n + 7)) / 15;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(oddNumSum(n));\n  }\n}\n", "python": "def oddNumSum(n):\n    return (n * (2 * n + 1) * (24 * n * n * n - 12 * n * n - 14 * n + 7)) / 15\n\n\nn = 4\nprint(int(oddNumSum(n)))\n"}
{"text": "Trailing number of 0 s in product of two factorials ", "java": "import java.io.*;\n\nclass GFG {\n  static int trailingZero(int x) {\n    int i = 5, count = 0;\n    while (x > i) {\n      count = count + x / i;\n      i = i * 5;\n    }\n    return count;\n  }\n\n  static int countProductTrailing(int M, int N) {\n    return trailingZero(N) + trailingZero(M);\n  }\n\n  public static void main(String args[]) {\n    int N = 67, M = 98;\n    System.out.println(countProductTrailing(N, M));\n  }\n}\n", "python": "def trailingZero(x):\n    i = 5\n    count = 0\n    while x > i:\n        count = count + x // i\n        i = i * 5\n    return count\n\n\ndef countProductTrailing(M, N):\n    return trailingZero(N) + trailingZero(M)\n\n\nN = 67\nM = 98\nprint(countProductTrailing(N, M))\n"}
{"text": "Trimorphic Number ", "java": "class GFG {\n  static boolean isTrimorphic(int N) {\n    int cube = N * N * N;\n    while (N > 0) {\n      if (N % 10 != cube % 10) return false;\n      N /= 10;\n      cube /= 10;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int N = 24;\n    if (isTrimorphic(N) == true) System.out.println(\" trimorphic \");\n    else System.out.println(\" not \u2581 trimorphic \");\n  }\n}\n", "python": "def isTrimorphic(N):\n    cube = N * N * N\n    while N > 0:\n        if N % 10 != cube % 10:\n            return False\n        N = N // 10\n        cube = cube // 10\n    return True\n\n\nN = 24\nif isTrimorphic(N):\n    print(\" trimorphic \")\nelse:\n    print(\" not \u2581 trimporphic \")\n"}
{"text": "Trimorphic Number ", "java": "class GFG {\n  static int INT_MAX = 2147483647;\n\n  static boolean checkTrimorphic(int num) {\n    int cube = num * num * num;\n    while (num > 0) {\n      if (num % 10 != cube % 10) return false;\n      num /= 10;\n      cube /= 10;\n    }\n    return true;\n  }\n\n  static int nthTrimorphic(int n) {\n    int count = 0;\n    for (int i = 0; i < INT_MAX; i++) {\n      if (checkTrimorphic(i)) count++;\n      if (count == n) return i;\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int n = 9;\n    System.out.println(nthTrimorphic(n));\n  }\n}\n", "python": "def isTrimorphic(N):\n    cube = N * N * N\n    while N > 0:\n        if N % 10 != cube % 10:\n            return False\n        N = N // 10\n        cube = cube // 10\n    return True\n\n\nN = 24\nif isTrimorphic(N):\n    print(\" trimorphic \")\nelse:\n    print(\" not \u2581 trimporphic \")\n"}
{"text": "Find minimum moves to reach target on an infinite line ", "java": "import java.io.*;\nimport java.math.*;\n\nclass GFG {\n  static int reachTarget(int target) {\n    target = Math.abs(target);\n    int sum = 0, step = 0;\n    while (sum < target || (sum - target) % 2 != 0) {\n      step++;\n      sum += step;\n    }\n    return step;\n  }\n\n  public static void main(String args[]) {\n    int target = 5;\n    System.out.println(reachTarget(target));\n  }\n}\n", "python": "def reachTarget(target):\n    target = abs(target)\n    sum = 0\n    step = 0\n    while sum < target or (sum - target) % 2 != 0:\n        step = step + 1\n        sum = sum + step\n    return step\n\n\ntarget = 5\nprint(reachTarget(target))\n"}
{"text": "Sum of fifth powers of the first n natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static long fifthPowerSum(int n) {\n    return ((2 * n * n * n * n * n * n) + (6 * n * n * n * n * n) + (5 * n * n * n * n) - (n * n))\n        / 12;\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.println(fifthPowerSum(n));\n  }\n}\n", "python": "def fifthPowerSum(n):\n    return (\n        (2 * n * n * n * n * n * n)\n        + (6 * n * n * n * n * n)\n        + (5 * n * n * n * n)\n        - (n * n)\n    ) // 12\n\n\nn = 5\nprint(fifthPowerSum(n))\n"}
{"text": "Find unit digit of x raised to power y ", "java": "import java.io.*;\n\nclass GFG {\n  static int unitDigitXRaisedY(int x, int y) {\n    int res = 1;\n    for (int i = 0; i < y; i++) res = (res * x) % 10;\n    return res;\n  }\n\n  public static void main(String args[]) throws IOException {\n    System.out.println(unitDigitXRaisedY(4, 2));\n  }\n}\n", "python": "import math\n\n\ndef unitnumber(x, y):\n    x = x % 10\n    if y != 0:\n        y = y % 4 + 4\n    return ((int)(math.pow(x, y))) % 10\n\n\nx = 133\ny = 5\nprint(unitnumber(x, y))\n"}
{"text": "Max occurring divisor in an interval ", "java": "import java.io.*;\n\nclass GFG {\n  static int findDivisor(int x, int y) {\n    if (x == y) return y;\n    return 2;\n  }\n\n  public static void main(String[] args) {\n    int x = 3, y = 16;\n    System.out.println(findDivisor(x, y));\n  }\n}\n", "python": "def findDivisor(x, y):\n    if x == y:\n        return y\n    return 2\n\n\nx = 3\ny = 16\nprint(findDivisor(x, y))\n"}
{"text": "Average of Squares of Natural Numbers ", "java": "import java.io.*;\n\npublic class GFG {\n  static float AvgofSquareN(int n) {\n    float sum = 0;\n    for (int i = 1; i <= n; i++) sum += (i * i);\n    return sum / n;\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(AvgofSquareN(n));\n  }\n}\n", "python": "def AvgofSquareN(n):\n    return ((n + 1) * (2 * n + 1)) / 6\n\n\nn = 2\nprint(AvgofSquareN(n))\n"}
{"text": "Find sum of even factors of a number ", "java": "import java.util.*;\n\npublic class GfG {\n  public static int sumofFactors(int n) {\n    if (n % 2 != 0) return 0;\n    int res = 1;\n    for (int i = 2; i <= Math.sqrt(n); i++) {\n      int count = 0, curr_sum = 1;\n      int curr_term = 1;\n      while (n % i == 0) {\n        count++;\n        n = n / i;\n        if (i == 2 && count == 1) curr_sum = 0;\n        curr_term *= i;\n        curr_sum += curr_term;\n      }\n      res *= curr_sum;\n    }\n    if (n >= 2) res *= (1 + n);\n    return res;\n  }\n\n  public static void main(String argc[]) {\n    int n = 18;\n    System.out.println(sumofFactors(n));\n  }\n}\n", "python": "import math\n\n\ndef sumofFactors(n):\n    if n % 2 != 0:\n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count = count + 1\n            n = n // i\n            if i == 2 and count == 1:\n                curr_sum = 0\n            curr_term = curr_term * i\n            curr_sum = curr_sum + curr_term\n        res = res * curr_sum\n    if n >= 2:\n        res = res * (1 + n)\n    return res\n\n\nn = 18\nprint(sumofFactors(n))\n"}
{"text": "Find LCM of rational numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static class pair {\n    int first, second;\n\n    public pair(int first, int second) {\n      this.first = first;\n      this.second = second;\n    }\n  }\n\n  static int LCM(int a, int b) {\n    return (a * b) / (__gcd(a, b));\n  }\n\n  static int __gcd(int a, int b) {\n    return b == 0 ? a : __gcd(b, a % b);\n  }\n\n  static int lcmOfNumerator(Vector<pair> vect) {\n    int lcm = vect.get(0).first;\n    for (int i = 1; i < vect.size(); i++) lcm = LCM(vect.get(i).first, lcm);\n    return lcm;\n  }\n\n  static int gcdOfDemoninators(Vector<pair> vect) {\n    int gcd = vect.get(0).second;\n    for (int i = 1; i < vect.size(); i++) gcd = __gcd(vect.get(i).second, gcd);\n    return gcd;\n  }\n\n  static void lcmOfRationals(Vector<pair> vect) {\n    System.out.print(lcmOfNumerator(vect) + \" / \" + gcdOfDemoninators(vect));\n  }\n\n  public static void main(String[] args) {\n    Vector<pair> vect = new Vector<pair>();\n    vect.add(new pair(2, 7));\n    vect.add(new pair(3, 14));\n    vect.add(new pair(5, 3));\n    lcmOfRationals(vect);\n  }\n}\n", "python": "import math\n\n\ndef LCM(a, b):\n    return (a * b) // (math.gcd(a, b))\n\n\ndef lcmOfNumerator(vect):\n    lcm = vect[0][0]\n    for i in range(1, len(vect)):\n        lcm = LCM(vect[i][0], lcm)\n    return lcm\n\n\ndef gcdOfDemoninators(vect):\n    gcd = vect[0][1]\n    for i in range(1, len(vect)):\n        gcd = math.gcd(vect[i][1], gcd)\n    return gcd\n\n\ndef lcmOfRationals(vect):\n    print(lcmOfNumerator(vect), \" / \", gcdOfDemoninators(vect), sep=\" \")\n\n\nvect = []\nvect.append((2, 7))\nvect.append((3, 14))\nvect.append((5, 3))\nlcmOfRationals(vect)\n"}
{"text": "Find sum of odd factors of a number ", "java": "import java.io.*;\nimport java.math.*;\n\nclass GFG {\n  static int sumofoddFactors(int n) {\n    int res = 1;\n    while (n % 2 == 0) n = n / 2;\n    for (int i = 3; i <= Math.sqrt(n); i++) {\n      int count = 0, curr_sum = 1;\n      int curr_term = 1;\n      while (n % i == 0) {\n        count++;\n        n = n / i;\n        curr_term *= i;\n        curr_sum += curr_term;\n      }\n      res *= curr_sum;\n    }\n    if (n >= 2) res *= (1 + n);\n    return res;\n  }\n\n  public static void main(String args[]) throws IOException {\n    int n = 30;\n    System.out.println(sumofoddFactors(n));\n  }\n}\n", "python": "import math\n\n\ndef sumofoddFactors(n):\n    res = 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(math.sqrt(n) + 1)):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count += 1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= 1 + n\n    return res\n\n\nn = 30\nprint(sumofoddFactors(n))\n"}
{"text": "Sum of Arithmetic Geometric Sequence ", "java": "import java.io.*;\n\nclass GFG {\n  static int sumofNterm(int a, int d, int b, int r, int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) sum += ((a + (i - 1) * d) * (b * Math.pow(r, i - 1)));\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int a = 1, d = 1, b = 2, r = 2, n = 3;\n    System.out.println(sumofNterm(a, d, b, r, n));\n  }\n}\n", "python": "import math\n\n\ndef sumofNterm(a, d, b, r, n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (a + (i - 1) * d) * (b * math.pow(r, i - 1))\n    return int(sum)\n\n\na = 1\nd = 1\nb = 2\nr = 2\nn = 3\nprint(sumofNterm(a, d, b, r, n))\n"}
{"text": "Program to find sum of series 1 * 2 * 3 + 2 * 3 * 4 + 3 * 4 * 5 + . . . + n * ( n + 1 ) * ( n + 2 ) ", "java": "public class GfG {\n  static int sumOfSeries(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) sum = sum + i * (i + 1) * (i + 2);\n    return sum;\n  }\n\n  public static void main(String s[]) {\n    int n = 10;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "def sumOfSeries(n):\n    sum = 0\n    i = 1\n    while i <= n:\n        sum = sum + i * (i + 1) * (i + 2)\n        i = i + 1\n    return sum\n\n\nn = 10\nprint(sumOfSeries(n))\n"}
{"text": "Program to get the Sum of series : 1 ", "java": "import java.io.*;\n\nclass MathSeries {\n  static double Series(double x, int n) {\n    double sum = 1, term = 1, fct, j, y = 2, m;\n    int i;\n    for (i = 1; i < n; i++) {\n      fct = 1;\n      for (j = 1; j <= y; j++) {\n        fct = fct * j;\n      }\n      term = term * (-1);\n      m = Math.pow(x, y) / fct;\n      m = m * term;\n      sum = sum + m;\n      y += 2;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    double x = 3;\n    int n = 4;\n    System.out.println(Math.round(Series(x, n) * 10000.0) / 10000.0);\n  }\n}\n", "python": "import math\n\n\ndef Series(x, n):\n    sum = 1\n    term = 1\n    y = 2\n    for i in range(1, n):\n        fct = 1\n        for j in range(1, y + 1):\n            fct = fct * j\n        term = term * (-1)\n        m = term * math.pow(x, y) / fct\n        sum = sum + m\n        y += 2\n    return sum\n\n\nx = 9\nn = 10\nprint(\" % .4f \" % Series(x, n))\n"}
{"text": "Program to get the Sum of series : 1 ", "java": "import java.io.*;\n\nclass GFG {\n  static double Series(double x, int n) {\n    double sum = 1, term = 1, fct = 1;\n    double p = 1, multi = 1;\n    for (int i = 1; i < n; i++) {\n      fct = fct * multi * (multi + 1);\n      p = p * x * x;\n      term = (-1) * term;\n      multi += 2;\n      sum = sum + (term * p) / fct;\n    }\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    double x = 9;\n    int n = 10;\n    System.out.printf(\" % .4f \", Series(x, n));\n  }\n}\n", "python": "import math\n\n\ndef Series(x, n):\n    sum = 1\n    term = 1\n    y = 2\n    for i in range(1, n):\n        fct = 1\n        for j in range(1, y + 1):\n            fct = fct * j\n        term = term * (-1)\n        m = term * math.pow(x, y) / fct\n        sum = sum + m\n        y += 2\n    return sum\n\n\nx = 9\nn = 10\nprint(\" % .4f \" % Series(x, n))\n"}
{"text": "First occurrence of a digit in a given fraction ", "java": "import java.util.*;\n\npublic class GfG {\n  public static int first(int a, int b, int c) {\n    a %= b;\n    for (int i = 1; i <= b; i++) {\n      a = a * 10;\n      if (a / b == c) return i;\n      a %= b;\n    }\n    return -1;\n  }\n\n  public static void main(String argc[]) {\n    int a = 1, b = 4, c = 5;\n    System.out.println(first(a, b, c));\n  }\n}\n", "python": "def first(a, b, c):\n    a %= b\n    for i in range(1, b + 1):\n        a = a * 10\n        if int(a / b) == c:\n            return i\n        a %= b\n    return -1\n\n\na = 1\nb = 4\nc = 5\nprint(first(a, b, c))\n"}
{"text": "Time required to meet in equilateral triangle ", "java": "import java.io.*;\n\npublic class GFG {\n  static void timeToMeet(double s, double v) {\n    double V = 3 * v / 2;\n    double time = s / V;\n    System.out.println((float) time);\n  }\n\n  public static void main(String[] args) {\n    double s = 25, v = 56;\n    timeToMeet(s, v);\n  }\n}\n", "python": "def timeToMeet(s, v):\n    V = 3 * v / 2\n    time = s / V\n    print(time)\n\n\ns = 25\nv = 56\ntimeToMeet(s, v)\n"}
{"text": "Sum of fourth power of first n even natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static long evenPowerSum(int n) {\n    long sum = 0;\n    for (int i = 1; i <= n; i++) {\n      int j = 2 * i;\n      sum = sum + (j * j * j * j);\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(evenPowerSum(n));\n  }\n}\n", "python": "def evenPowerSum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        j = 2 * i\n        sum = sum + (j * j * j * j)\n    return sum\n\n\nn = 5\nprint(evenPowerSum(n))\n"}
{"text": "Sum of fourth power of first n even natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static long evenPowerSum(int n) {\n    return (8 * n * (n + 1) * (2 * n + 1) * (3 * n * n + 3 * n - 1)) / 15;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(evenPowerSum(n));\n  }\n}\n", "python": "def evenPowerSum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        j = 2 * i\n        sum = sum + (j * j * j * j)\n    return sum\n\n\nn = 5\nprint(evenPowerSum(n))\n"}
{"text": "Sum of squares of first n natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int squaresum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) sum += (i * i);\n    return sum;\n  }\n\n  public static void main(String args[]) throws IOException {\n    int n = 4;\n    System.out.println(squaresum(n));\n  }\n}\n", "python": "def squaresum(n):\n    return (n * (n + 1) / 2) * (2 * n + 1) / 3\n\n\nn = 4\nprint(squaresum(n))\n"}
{"text": "Break a number such that sum of maximum divisors of all parts is minimum ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isPrime(int n) {\n    int i = 2;\n    while (i * i <= n) {\n      if (n % i == 0) return false;\n      i++;\n    }\n    return true;\n  }\n\n  static int minimumSum(int n) {\n    if (isPrime(n)) return 1;\n    if (n % 2 == 0) return 2;\n    if (isPrime(n - 2)) return 2;\n    return 3;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(minimumSum(n));\n  }\n}\n", "python": "def isPrime(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\n\ndef minimumSum(n):\n    if isPrime(n):\n        return 1\n    if n % 2 == 0:\n        return 2\n    if isPrime(n - 2):\n        return 2\n    return 3\n\n\nn = 27\nprint(minimumSum(n))\n"}
{"text": "Find first and last digits of a number ", "java": "import java.util.*;\n\npublic class GfG {\n  public static int firstDigit(int n) {\n    while (n >= 10) n /= 10;\n    return n;\n  }\n\n  public static int lastDigit(int n) {\n    return (n % 10);\n  }\n\n  public static void main(String argc[]) {\n    int n = 98562;\n    System.out.println(firstDigit(n) + \" \u2581 \" + lastDigit(n));\n  }\n}\n", "python": "def firstDigit(n):\n    while n >= 10:\n        n = n / 10\n    return int(n)\n\n\ndef lastDigit(n):\n    return n % 10\n\n\nn = 98562\nprint(firstDigit(n), end=\" \u2581 \")\nprint(lastDigit(n))\n"}
{"text": "Find first and last digits of a number ", "java": "import java.math.*;\n\nclass GFG {\n  static int firstDigit(int n) {\n    int digits = (int) (Math.log10(n));\n    n = (int) (n / (int) (Math.pow(10, digits)));\n    return n;\n  }\n\n  static int lastDigit(int n) {\n    return (n % 10);\n  }\n\n  public static void main(String args[]) {\n    int n = 98562;\n    System.out.println(firstDigit(n) + \" \u2581 \" + lastDigit(n));\n  }\n}\n", "python": "def firstDigit(n):\n    while n >= 10:\n        n = n / 10\n    return int(n)\n\n\ndef lastDigit(n):\n    return n % 10\n\n\nn = 98562\nprint(firstDigit(n), end=\" \u2581 \")\nprint(lastDigit(n))\n"}
{"text": "Sum of the series 0.6 , 0.06 , 0.006 , 0.0006 , ... to n terms ", "java": "import java.io.*;\n\nclass GFG {\n  static double sumOfSeries(int n) {\n    return (0.666) * (1 - 1 / Math.pow(10, n));\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "import math\n\n\ndef sumOfSeries(n):\n    return (0.666) * (1 - 1 / pow(10, n))\n\n\nn = 2\nprint(sumOfSeries(n))\n"}
{"text": "Sum of squares of first n natural numbers ", "java": "import java.util.*;\n\nclass GFG {\n  public static int summation(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) sum += (i * i);\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int n = 2;\n    System.out.println(summation(n));\n  }\n}\n", "python": "def squaresum(n):\n    return (n * (n + 1) / 2) * (2 * n + 1) / 3\n\n\nn = 4\nprint(squaresum(n))\n"}
{"text": "Nicomachus\u00e2 \u20ac\u2122 s Theorem ( Sum of k ", "java": "\nclass GFG {\n  public static int kthgroupsum(int k) {\n    int cur = (k * (k - 1)) + 1;\n    int sum = 0;\n    while (k-- > 0) {\n      sum += cur;\n      cur += 2;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int k = 3;\n    System.out.print(kthgroupsum(k));\n  }\n}\n", "python": "def kthgroupsum(k):\n    cur = int((k * (k - 1)) + 1)\n    sum = 0\n    while k:\n        sum += cur\n        cur += 2\n        k = k - 1\n    return sum\n\n\nk = 3\nprint(kthgroupsum(k))\n"}
{"text": "n ", "java": "import java.util.*;\n\nclass GFG {\n  public static int nthTerm(int n) {\n    return (n * n) + (n * n * n);\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.print(nthTerm(n));\n  }\n}\n", "python": "def ans(n):\n    if n < 6:\n        return n\n    return n % 6 + 10 * (ans(n // 6)) - 1\n\n\ndef getSpecialNumber(N):\n    return ans(N)\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 17\n    answer = getSpecialNumber(N)\n    print(answer)\n"}
{"text": "Sum of the series 1 , 3 , 6 , 10. . . ( Triangular Numbers ) ", "java": "import java.io.*;\n\nclass GFG {\n  static int seriesSum(int n) {\n    return (n * (n + 1) * (n + 2)) / 6;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(seriesSum(n));\n  }\n}\n", "python": "def seriesSum(n):\n    return int((n * (n + 1) * (n + 2)) / 6)\n\n\nn = 4\nprint(seriesSum(n))\n"}
{"text": "Calculate speed , distance and time ", "java": "class GFG {\n  static double cal_speed(double dist, double time) {\n    System.out.print(\" Distance ( km ) : \" + dist);\n    System.out.print(\" Time ( hr ) : \" + time);\n    return dist / time;\n  }\n\n  static double cal_dis(double speed, double time) {\n    System.out.print(\" Time ( hr ) : \" + time);\n    System.out.print(\" Speed ( km / hr ) : \" + speed);\n    return speed * time;\n  }\n\n  static double cal_time(double dist, double speed) {\n    System.out.print(\" Distance ( km ) : \" + dist);\n    System.out.print(\" Speed ( km / hr ) : \" + speed);\n    return speed * dist;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(\" The calculated Speed ( km / hr ) is : \" + cal_speed(45.9, 2.0));\n    System.out.println(\" The calculated Distance ( km ) : \" + cal_dis(62.9, 2.5));\n    System.out.println(\" The calculated Time ( hr ) : \" + cal_time(48.0, 4.5));\n  }\n}\n", "python": "def cal_speed(dist, time):\n    print(\" \u2581 Distance ( km ) \u2581 : \", dist)\n    print(\" \u2581 Time ( hr ) \u2581 : \", time)\n    return dist / time\n\n\ndef cal_dis(speed, time):\n    print(\" \u2581 Time ( hr ) \u2581 : \", time)\n    print(\" \u2581 Speed ( km \u2581 / \u2581 hr ) \u2581 : \", speed)\n    return speed * time\n\n\ndef cal_time(dist, speed):\n    print(\" \u2581 Distance ( km ) \u2581 : \", dist)\n    print(\" \u2581 Speed ( km \u2581 / \u2581 hr ) \u2581 : \", speed)\n    return speed * dist\n\n\nprint(\" \u2581 The \u2581 calculated \u2581 Speed ( km \u2581 / \u2581 hr ) \u2581 is \u2581 : \", cal_speed(45.9, 2.0))\nprint(\" \")\nprint(\" \u2581 The \u2581 calculated \u2581 Distance ( km ) \u2581 : \", cal_dis(62.9, 2.5))\nprint(\" \")\nprint(\" \u2581 The \u2581 calculated \u2581 Time ( hr ) \u2581 : \", cal_time(48.0, 4.5))\n"}
{"text": "Find n ", "java": "import java.io.*;\n\nclass GFG {\n  static int term(int n) {\n    int ans = 0;\n    for (int i = 1; i <= n; i++) ans += i;\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(term(n));\n  }\n}\n", "python": "import math\n\n\ndef findNumber(n):\n    x = int(math.floor((-1 + math.sqrt(1 + 8 * n - 8)) / 2))\n    base = (x * (x + 1)) / 2 + 1\n    return n - base + 1\n\n\nn = 55\nprint(findNumber(n))\n"}
{"text": "Find the average of first N natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static float avgOfFirstN(int n) {\n    return (float) (1 + n) / 2;\n  }\n\n  public static void main(String args[]) {\n    int n = 20;\n    System.out.println(avgOfFirstN(n));\n  }\n}\n", "python": "def avgOfFirstN(n):\n    return (float)(1 + n) / 2\n\n\nn = 20\nprint(avgOfFirstN(n))\n"}
{"text": "Find the sum of the series 1 + 11 + 111 + 1111 + ... . . upto n terms ", "java": "import java.io.*;\n\nclass GFG {\n  static int summation(int n) {\n    int sum;\n    sum = (int) (Math.pow(10, n + 1) - 10 - (9 * n)) / 81;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(summation(n));\n  }\n}\n", "python": "import math\n\n\ndef summation(n):\n    return int((pow(10, n + 1) - 10 - (9 * n)) / 81)\n\n\nprint(summation(5))\n"}
{"text": "Sum of the Series 1 + x / 1 + x ^ 2 / 2 + x ^ 3 / 3 + . . + x ^ n / n ", "java": "class GFG {\n  static double sum(int x, int n) {\n    double i, total = 1.0, multi = x;\n    for (i = 1; i <= n; i++) {\n      total = total + multi / i;\n      multi = multi * x;\n    }\n    return total;\n  }\n\n  public static void main(String[] args) {\n    int x = 2;\n    int n = 5;\n    System.out.printf(\" % .2f \", sum(x, n));\n  }\n}\n", "python": "def SUM(x, n):\n    total = 1\n    for i in range(1, n + 1):\n        total = total + ((x ** i) / i)\n    return total\n\n\nx = 2\nn = 5\ns = SUM(x, n)\nprint(round(s, 2))\n"}
{"text": "Find n ", "java": "import java.io.*;\n\nclass Series {\n  static int term(int n) {\n    int x = (((1) + (int) Math.sqrt(1 + (8 * n))) / 2);\n    return x;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(term(n));\n  }\n}\n", "python": "import math\n\n\ndef findNumber(n):\n    x = int(math.floor((-1 + math.sqrt(1 + 8 * n - 8)) / 2))\n    base = (x * (x + 1)) / 2 + 1\n    return n - base + 1\n\n\nn = 55\nprint(findNumber(n))\n"}
{"text": "Deserium Number ", "java": "\nclass Deserium {\n  static int countDigits(int n) {\n    int c = 0;\n    do {\n      c++;\n      n = n / 10;\n    } while (n != 0);\n    return c;\n  }\n\n  static boolean isDeserium(int x) {\n    int temp = x;\n    int p = countDigits(x);\n    int sum = 0;\n    while (x != 0) {\n      int digit = x % 10;\n      sum += Math.pow(digit, p);\n      p--;\n      x = x / 10;\n    }\n    return (sum == temp);\n  }\n\n  public static void main(String[] args) {\n    int x = 135;\n    if (isDeserium(x)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def countDigits(n):\n    c = 0\n    while n != 0:\n        c += 1\n        n = int(n / 10)\n    return c\n\n\ndef isDeserium(x):\n    temp = x\n    p = countDigits(x)\n    sum = 0\n    while x != 0:\n        digit = int(x % 10)\n        sum += pow(digit, p)\n        p -= 1\n        x = int(x / 10)\n    return sum == temp\n\n\nx = 135\nif isDeserium(x):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Largest number by which given 3 numbers should be divided such that they leaves same remainder ", "java": "class GFG {\n  static int gcd(int a, int b) {\n    if (a == 0) return b;\n    return gcd(b % a, a);\n  }\n\n  static int sameRemainder(int a, int b, int c) {\n    int a1 = (b - a), b1 = (c - b), c1 = (c - a);\n    return gcd(a1, gcd(b1, c1));\n  }\n\n  public static void main(String[] args) {\n    int a = 62, b = 132, c = 237;\n    System.out.println(sameRemainder(a, b, c));\n  }\n}\n", "python": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef sameRemainder(a, b, c):\n    a1 = b - a\n    b1 = c - b\n    c1 = c - a\n    return gcd(a1, gcd(b1, c1))\n\n\na = 62\nb = 132\nc = 237\nprint(sameRemainder(a, b, c))\n"}
{"text": "Find combined mean and variance of two series ", "java": "import java.io.*;\n\nclass GFG {\n  static float mean(int arr[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum = sum + arr[i];\n    float mean = (float) sum / n;\n    return mean;\n  }\n\n  static float sd(int arr[], int n) {\n    float sum = 0;\n    for (int i = 0; i < n; i++) sum = sum + (arr[i] - mean(arr, n)) * (arr[i] - mean(arr, n));\n    float sdd = sum / n;\n    return sdd;\n  }\n\n  static float combinedVariance(int arr1[], int arr2[], int n, int m) {\n    float mean1 = mean(arr1, n);\n    float mean2 = mean(arr2, m);\n    System.out.print(\" Mean1 : \u2581 \" + mean1 + \" \u2581 \");\n    System.out.println(\" Mean2 : \u2581 \" + mean2);\n    float sd1 = sd(arr1, n);\n    float sd2 = sd(arr2, m);\n    System.out.print(\" StandardDeviation1 : \u2581 \" + sd1 + \" \u2581 \");\n    System.out.println(\" StandardDeviation2 : \u2581 \" + sd2 + \" \u2581 \");\n    float combinedMean = (float) (n * mean1 + m * mean2) / (n + m);\n    System.out.println(\" Combined \u2581 Mean : \u2581 \" + combinedMean + \" \u2581 \");\n    float d1_square = (mean1 - combinedMean) * (mean1 - combinedMean);\n    float d2_square = (mean2 - combinedMean) * (mean2 - combinedMean);\n    System.out.print(\" d1 \u2581 square : \u2581 \" + d1_square + \" \u2581 \");\n    System.out.println(\" d2 _ square : \u2581 \" + d2_square);\n    float combinedVar = (n * (sd1 + d1_square) + m * (sd2 + d2_square)) / (n + m);\n    return combinedVar;\n  }\n\n  public static void main(String[] args) {\n    int arr1[] = {23, 45, 34, 78, 12, 76, 34};\n    int arr2[] = {65, 67, 34, 23, 45};\n    int n = arr1.length;\n    int m = arr2.length;\n    System.out.println(\" Combined \u2581 Variance : \u2581 \" + combinedVariance(arr1, arr2, n, m));\n  }\n}\n", "python": "def mean(arr, n):\n    sum = 0\n    for i in range(n):\n        sum = sum + arr[i]\n    mean = sum / n\n    return mean\n\n\ndef sd(arr, n):\n    sum = 0\n    for i in range(n):\n        sum = sum + ((arr[i] - mean(arr, n)) * (arr[i] - mean(arr, n)))\n    sdd = sum / n\n    return sdd\n\n\ndef combinedVariance(arr1, arr2, n, m):\n    mean1 = mean(arr1, n)\n    mean2 = mean(arr2, m)\n    print(\" Mean1 : \u2581 \", round(mean1, 2), \" \u2581 mean2 : \u2581 \", round(mean2, 2))\n    sd1 = sd(arr1, n)\n    sd2 = sd(arr2, m)\n    print(\n        \" StandardDeviation1 : \u2581 \",\n        round(sd1, 2),\n        \" \u2581 StandardDeviation2 : \u2581 \",\n        round(sd2, 2),\n    )\n    combinedMean = (n * mean1 + m * mean2) / (n + m)\n    print(\" Combined \u2581 Mean : \u2581 \", round(combinedMean, 2))\n    d1_square = (mean1 - combinedMean) * (mean1 - combinedMean)\n    d2_square = (mean2 - combinedMean) * (mean2 - combinedMean)\n    print(\n        \" d1 \u2581 square : \u2581 \",\n        round(d1_square, 2),\n        \" \u2581 d2 _ square : \u2581 \",\n        round(d2_square, 2),\n    )\n    combinedVar = (n * (sd1 + d1_square) + m * (sd2 + d2_square)) / (n + m)\n    print(\" Combined \u2581 Variance : \u2581 \", round(combinedVar, 2))\n\n\narr1 = [23, 45, 34, 78, 12, 76, 34]\narr2 = [65, 67, 34, 23, 45]\nn = len(arr1)\nm = len(arr2)\ncombinedVariance(arr1, arr2, n, m)\n"}
{"text": "Check if a large number is divisible by 13 or not ", "java": "class GFG {\n  static boolean checkDivisibility(String num) {\n    int length = num.length();\n    if (length == 1 && num.charAt(0) == '0') return true;\n    if (length % 3 == 1) {\n      num += \"00\";\n      length += 2;\n    } else if (length % 3 == 2) {\n      num += \"0\";\n      length += 1;\n    }\n    int sum = 0, p = 1;\n    for (int i = length - 1; i >= 0; i--) {\n      int group = 0;\n      group += num.charAt(i--) - '0';\n      group += (num.charAt(i--) - '0') * 10;\n      group += (num.charAt(i) - '0') * 100;\n      sum = sum + group * p;\n      p *= (-1);\n    }\n    sum = Math.abs(sum);\n    return (sum % 13 == 0);\n  }\n\n  public static void main(String[] args) {\n    String number = \"83959092724\";\n    if (checkDivisibility(number)) System.out.println(number + \" \u2581 is \u2581 divisible \u2581 by \u2581 13 . \");\n    else System.out.println(number + \" \u2581 is \u2581 not \u2581 divisible \u2581 by \u2581 13 . \");\n  }\n}\n", "python": "def checkDivisibility(num):\n    length = len(num)\n    if length == 1 and num[0] == \"0\":\n        return True\n    if length % 3 == 1:\n        num = str(num) + \"00\"\n        length += 2\n    elif length % 3 == 2:\n        num = str(num) + \"0\"\n        length += 1\n    sum = 0\n    p = 1\n    for i in range(length - 1, -1, -1):\n        group = 0\n        group += ord(num[i]) - ord(\"0\")\n        i -= 1\n        group += (ord(num[i]) - ord(\"0\")) * 10\n        i -= 1\n        group += (ord(num[i]) - ord(\"0\")) * 100\n        sum = sum + group * p\n        p *= -1\n    sum = abs(sum)\n    return sum % 13 == 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    number = \"83959092724\"\n    if checkDivisibility(number):\n        print(number, \" is \u2581 divisible \u2581 by \u2581 13 . \")\n    else:\n        print(number, \" is \u2581 not \u2581 divisible \u2581 by \u2581 13 . \")\n    DEDENT\n"}
{"text": "Check whether a number can be represented by sum of two squares ", "java": "import java.util.*;\n\nclass GFG {\n  public static boolean judgeSquareSum(int n) {\n    for (int i = 2; i * i <= n; i++) {\n      int count = 0;\n      if (n % i == 0) {\n        while (n % i == 0) {\n          count++;\n          n /= i;\n        }\n        if (i % 4 == 3 && count % 2 != 0) return false;\n      }\n    }\n    return n % 4 != 3;\n  }\n\n  public static void main(String argc[]) {\n    int n = 17;\n    if (judgeSquareSum(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def sumSquare(n):\n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if i * i + j * j == n:\n                print(i, \" ^ 2 \u2581 + \u2581 \", j, \" ^ 2\")\n                return True\n            j = j + 1\n        i = i + 1\n    return False\n\n\nn = 25\nif sumSquare(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Total no of 1 's in numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int countDigitOne(int n) {\n    int countr = 0;\n    for (int i = 1; i <= n; i *= 10) {\n      int divider = i * 10;\n      countr += (n / divider) * i + Math.min(Math.max(n % divider - i + 1, 0), i);\n    }\n    return countr;\n  }\n\n  public static void main(String[] args) {\n    int n = 13;\n    System.out.println(countDigitOne(n));\n    n = 113;\n    System.out.println(countDigitOne(n));\n    n = 205;\n    System.out.println(countDigitOne(n));\n  }\n}\n", "python": "def countDigitOne(n):\n    countr = 0\n    for i in range(1, n + 1):\n        str1 = str(i)\n        countr += str1.count(\"1\")\n    return countr\n\n\nn = 13\nprint(countDigitOne(n))\nn = 131\nprint(countDigitOne(n))\nn = 159\nprint(countDigitOne(n))\n"}
{"text": "Program for dot product and cross product of two vectors ", "java": "import java.io.*;\n\nclass GFG {\n  static int n = 3;\n\n  static int dotProduct(int vect_A[], int vect_B[]) {\n    int product = 0;\n    for (int i = 0; i < n; i++) product = product + vect_A[i] * vect_B[i];\n    return product;\n  }\n\n  static void crossProduct(int vect_A[], int vect_B[], int cross_P[]) {\n    cross_P[0] = vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1];\n    cross_P[1] = vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2];\n    cross_P[2] = vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0];\n  }\n\n  public static void main(String[] args) {\n    int vect_A[] = {3, -5, 4};\n    int vect_B[] = {2, 6, 5};\n    int cross_P[] = new int[n];\n    System.out.print(\" Dot \u2581 product : \");\n    System.out.println(dotProduct(vect_A, vect_B));\n    System.out.print(\" Cross \u2581 product : \");\n    crossProduct(vect_A, vect_B, cross_P);\n    for (int i = 0; i < n; i++) System.out.print(cross_P[i] + \" \u2581 \");\n  }\n}\n", "python": "n = 3\n\n\ndef dotProduct(vect_A, vect_B):\n    product = 0\n    for i in range(0, n):\n        product = product + vect_A[i] * vect_B[i]\n    return product\n\n\ndef crossProduct(vect_A, vect_B, cross_P):\n    cross_P.append(vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1])\n    cross_P.append(vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2])\n    cross_P.append(vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0])\n\n\nif __name__ == \" _ _ main _ _ \":\n    vect_A = [3, -5, 4]\n    vect_B = [2, 6, 5]\n    cross_P = []\n    print(\" Dot \u2581 product : \", end=\" \u2581 \")\n    print(dotProduct(vect_A, vect_B))\n    print(\" Cross \u2581 product : \", end=\" \u2581 \")\n    crossProduct(vect_A, vect_B, cross_P)\n    for i in range(0, n):\n        print(cross_P[i], end=\" \u2581 \")\n    DEDENT\n"}
{"text": "Number of n digit numbers that do not contain 9 ", "java": "import java.io.*;\n\npublic class GFG {\n  static int totalNumber(int n) {\n    return 8 * (int) Math.pow(9, n - 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(totalNumber(n));\n  }\n}\n", "python": "def totalNumber(n):\n    return 8 * pow(9, n - 1)\n\n\nn = 3\nprint(totalNumber(n))\n"}
{"text": "Count ways to express even number \u00e2 \u20ac\u02dc n\u00e2 \u20ac\u2122 as sum of even integers ", "java": "class GFG {\n  static int MOD = 1000000007;\n\n  static int power(int x, int y, int p) {\n    int res = 1;\n    x = x % p;\n    while (y > 0) {\n      if (y % 2 == 1) res = (1 * res * x) % p;\n      x = (1 * x * x) % p;\n    }\n    return res;\n  }\n\n  static int countEvenWays(int n) {\n    return power(2, n / 2 - 1, MOD);\n  }\n\n  public static void main(String args[]) {\n    int n = 6;\n    System.out.println(countEvenWays(n));\n    n = 8;\n    System.out.println(countEvenWays(n));\n  }\n}\n", "python": "MOD = 1e9 + 7\n\n\ndef power(x, y, p):\n    while y > 0:\n        if y & 1:\n            res = (1 * res * x) % p\n        x = (1 * x * x) % p\n    return res\n\n\ndef countEvenWays(n):\n    return power(2, n / 2 - 1, MOD)\n\n\nn = 6\nprint(int(countEvenWays(n)))\nn = 8\nprint(int(countEvenWays(n)))\n"}
{"text": "Find n ", "java": "\nclass GFG {\n  static int findTerm(int n) {\n    if (n == 1) return n;\n    else {\n      int term = 7;\n      for (int i = 2; i <= n; i++) term = term * 2 + (i - 1);\n      return term;\n    }\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.print(findTerm(n));\n  }\n}\n", "python": "import math\n\n\ndef findNumber(n):\n    x = int(math.floor((-1 + math.sqrt(1 + 8 * n - 8)) / 2))\n    base = (x * (x + 1)) / 2 + 1\n    return n - base + 1\n\n\nn = 55\nprint(findNumber(n))\n"}
{"text": "Find n ", "java": "import java.io.*;\n\nclass GFG {\n  static int findNumber(int n) {\n    n--;\n    int i = 1;\n    while (n >= 0) {\n      n -= i;\n      ++i;\n    }\n    return (n + i);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(findNumber(n));\n  }\n}\n", "python": "import math\n\n\ndef findNumber(n):\n    x = int(math.floor((-1 + math.sqrt(1 + 8 * n - 8)) / 2))\n    base = (x * (x + 1)) / 2 + 1\n    return n - base + 1\n\n\nn = 55\nprint(findNumber(n))\n"}
{"text": "Program for weighted mean of natural numbers . ", "java": "class GFG {\n  static float weightedMean(int X[], int W[], int n) {\n    int sum = 0, numWeight = 0;\n    for (int i = 0; i < n; i++) {\n      numWeight = numWeight + X[i] * W[i];\n      sum = sum + W[i];\n    }\n    return (float) (numWeight) / sum;\n  }\n\n  public static void main(String args[]) {\n    int X[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int W[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int n = X.length;\n    int m = W.length;\n    if (n == m) System.out.println(weightedMean(X, W, n));\n    else System.out.println(\" - 1\");\n  }\n}\n", "python": "def weightedMean(n):\n    return (2 * n + 1) / 3\n\n\nn = 10\nprint(int(weightedMean(n)))\n"}
{"text": "Program for harmonic mean of numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static float harmonicMean(float arr[], int n) {\n    float sum = 0;\n    for (int i = 0; i < n; i++) sum = sum + (float) 1 / arr[i];\n    return (float) n / sum;\n  }\n\n  public static void main(String args[]) {\n    float arr[] = {13.5f, 14.5f, 14.8f, 15.2f, 16.1f};\n    int n = arr.length;\n    System.out.println(harmonicMean(arr, n));\n  }\n}\n", "python": "def harmonicMean(arr, n):\n    sm = 0\n    for i in range(0, n):\n        sm = sm + (1) / arr[i]\n    return n / sm\n\n\narr = [13.5, 14.5, 14.8, 15.2, 16.1]\nn = len(arr)\nprint(harmonicMean(arr, n))\n"}
{"text": "Program for harmonic mean of numbers ", "java": "class GFG {\n  static float harmonicMean(int arr[], int freq[], int n) {\n    float sum = 0, frequency_sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum = sum + (float) freq[i] / arr[i];\n      frequency_sum = frequency_sum + freq[i];\n    }\n    return (frequency_sum / sum);\n  }\n\n  public static void main(String args[]) {\n    int num[] = {13, 14, 15, 16, 17};\n    int freq[] = {2, 5, 13, 7, 3};\n    int n = num.length;\n    System.out.println(harmonicMean(num, freq, n));\n  }\n}\n", "python": "def harmonicMean(arr, n):\n    sm = 0\n    for i in range(0, n):\n        sm = sm + (1) / arr[i]\n    return n / sm\n\n\narr = [13.5, 14.5, 14.8, 15.2, 16.1]\nn = len(arr)\nprint(harmonicMean(arr, n))\n"}
{"text": "Smallest x such that 1 * n , 2 * n , ... x * n have all digits from 1 to 9 ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int smallestX(int n) {\n    int[] temp = new int[10];\n    for (int i = 0; i < 10; i++) temp[i] = 0;\n    if (n == 0) return -1;\n    int count = 0, x = 0;\n    for (x = 1; count < 10; x++) {\n      int y = x * n;\n      while (y > 0) {\n        if (temp[y % 10] == 0) {\n          count++;\n          temp[y % 10] = 1;\n        }\n        y /= 10;\n      }\n    }\n    return x - 1;\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.print(smallestX(n));\n  }\n}\n", "python": "def smallestX(n):\n    temp = [0] * 10\n    if n == 0:\n        return -1\n    count = 0\n    x = 1\n    while count < 10:\n        y = x * n\n        while y > 0:\n            if temp[y % 10] == 0:\n                count += 1\n                temp[y % 10] = 1\n            y = int(y / 10)\n        x += 1\n    return x - 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 5\n    print(smallestX(n))\n"}
{"text": "Ways to express a number as product of two different factors ", "java": "public class Main {\n  static int countWays(int n) {\n    int count = 0;\n    for (int i = 1; i * i < n; i++) if (n % i == 0) count++;\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 12;\n    System.out.println(countWays(n));\n  }\n}\n", "python": "def countWays(n):\n    count = 0\n    i = 1\n    while (i * i) < n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n\n\nn = 12\nprint(countWays(n))\n"}
{"text": "Check if a number is power of k using base changing method ", "java": "class GFG {\n  static boolean isPowerOfK(int n, int k) {\n    boolean oneSeen = false;\n    while (n > 0) {\n      int digit = n % k;\n      if (digit > 1) return false;\n      if (digit == 1) {\n        if (oneSeen) return false;\n        oneSeen = true;\n      }\n      n /= k;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int n = 64, k = 4;\n    if (isPowerOfK(n, k)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def isPowerOfK(n, k):\n    oneSeen = False\n    while n > 0:\n        digit = n % k\n        if digit > 1:\n            return False\n        if digit == 1:\n            if oneSeen:\n                return False\n            oneSeen = True\n        n //= k\n    return True\n\n\nn = 64\nk = 4\nif isPowerOfK(n, k):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Program for sum of arithmetic series ", "java": "class GFG {\n  static float sumOfAP(float a, float d, int n) {\n    float sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum = sum + a;\n      a = a + d;\n    }\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int n = 20;\n    float a = 2.5f, d = 1.5f;\n    System.out.println(sumOfAP(a, d, n));\n  }\n}\n", "python": "def sumOfAP(a, d, n):\n    sum = (n / 2) * (2 * a + (n - 1) * d)\n    return sum\n\n\nn = 20\na = 2.5\nd = 1.5\nprint(sumOfAP(a, d, n))\n"}
{"text": "Count trailing zeroes present in binary representation of a given number using XOR ", "java": "import java.io.*;\n\nclass GFG {\n  public static int countTrailingZeroes(int N) {\n    int res = N ^ (N - 1);\n    return (int) (Math.log(temp) / Math.log(2));\n  }\n\n  public static void main(String[] args) {\n    int N = 12;\n    System.out.println(countTrailingZeroes(N));\n  }\n}\n", "python": "from math import log2\n\n\ndef countTrailingZeroes(N):\n    res = int(log2(N ^ (N - 1)))\n    return res if res >= 0 else 0\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 12\n    print(countTrailingZeroes(N))\n"}
{"text": "Second decagonal numbers ", "java": "class GFG {\n  static void findNthTerm(int n) {\n    System.out.println(n * (4 * n + 3));\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    findNthTerm(N);\n  }\n}\n", "python": "def findNthTerm(n):\n    print(n * (4 * n + 3))\n\n\nN = 4\nfindNthTerm(N)\n"}
{"text": "65537 ", "java": "class GFG {\n  static int gonNum65537(int n) {\n    return (65535 * n * n - 65533 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(gonNum65537(n));\n  }\n}\n", "python": "def gonNum65537(n):\n    return (65535 * n * n - 65533 * n) // 2\n\n\nn = 3\nprint(gonNum65537(n))\n"}
{"text": "Hexacontatetragon numbers ", "java": "class GFG {\n  static int HexacontatetragonNum(int n) {\n    return (62 * n * n - 60 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(HexacontatetragonNum(n));\n  }\n}\n", "python": "def HexacontatetragonNum(n):\n    return (62 * n * n - 60 * n) / 2\n\n\nn = 3\nprint(HexacontatetragonNum(n))\n"}
{"text": "Icosikaipentagon Number ", "java": "class GFG {\n  static int icosikaipentagonNum(int N) {\n    return (23 * N * N - 21 * N) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(\"3rd \u2581 icosikaipentagon \u2581 Number \u2581 is \u2581 \" + icosikaipentagonNum(n));\n  }\n}\n", "python": "def icosikaipentagonNum(N):\n    return (23 * N * N - 21 * N) // 2\n\n\nn = 3\nprint(\"3rd \u2581 icosikaipentagon \u2581 Number \u2581 is \u2581 \", icosikaipentagonNum(n))\n"}
{"text": "Chiliagon Number ", "java": "class GFG {\n  static int chiliagonNum(int n) {\n    return (998 * n * n - 996 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(\"3rd \u2581 chiliagon \u2581 Number \u2581 is \u2581 = \u2581 \" + chiliagonNum(n));\n  }\n}\n", "python": "def chiliagonNum(n):\n    return (998 * n * n - 996 * n) // 2\n\n\nn = 3\nprint(\"3rd \u2581 chiliagon \u2581 Number \u2581 is \u2581 = \u2581 \", chiliagonNum(n))\n"}
{"text": "Pentacontagon number ", "java": "import java.util.*;\n\nclass GFG {\n  static int pentacontagonNum(int n) {\n    return (48 * n * n - 46 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(\"3rd \u2581 pentacontagon \u2581 Number \u2581 is \u2581 = \u2581 \" + pentacontagonNum(n));\n  }\n}\n", "python": "def pentacontagonNum(n):\n    return (48 * n * n - 46 * n) // 2\n\n\nn = 3\nprint(\"3rd \u2581 pentacontagon \u2581 Number \u2581 is \u2581 = \u2581 \", pentacontagonNum(n))\n"}
{"text": "Number formed by adding product of its max and min digit K times ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int formed_no(int N, int K) {\n    if (K == 1) {\n      return N;\n    }\n    int answer = N;\n    while (K != 0) {\n      int a_current = prod_of_max_min(answer);\n      if (a_current == 0) break;\n      answer += a_current;\n    }\n    return answer;\n  }\n\n  static int prod_of_max_min(int n) {\n    int largest = 0;\n    int smallest = 10;\n    while (n != 0) {\n      int r = n % 10;\n      largest = Math.max(r, largest);\n      smallest = Math.min(r, smallest);\n      n = n / 10;\n    }\n    return largest * smallest;\n  }\n\n  public static void main(String[] args) {\n    int N = 487, K = 100000000;\n    System.out.println(formed_no(N, K));\n  }\n}\n", "python": "def formed_no(N, K):\n    if K == 1:\n        return N\n    answer = N\n    while K != 0:\n        a_current = prod_of_max_min(answer)\n        if a_current == 0:\n            break\n        answer += a_current\n        K -= 1\n    return answer\n\n\ndef prod_of_max_min(n):\n    largest = 0\n    smallest = 10\n    while n != 0:\n        r = n % 10\n        largest = max(r, largest)\n        smallest = min(r, smallest)\n        n = n // 10\n    return largest * smallest\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 487\n    K = 100000000\n    print(formed_no(N, K))\n"}
{"text": "Logarithm tricks for Competitive Programming ", "java": "class GFG {\n  static int countDigit(double n) {\n    return ((int) Math.floor(Math.log10(n) + 1));\n  }\n\n  public static void main(String[] args) {\n    double N = 80;\n    System.out.println(countDigit(N));\n  }\n}\n", "python": "import math\n\n\ndef isPowerOfTwo(n):\n    return math.ceil(math.log(n) // math.log(2)) == math.floor(\n        math.log(n) // math.log(2)\n    )\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    if isPowerOfTwo(N):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Program to find the sum of the series 1 + x + x ^ 2 + x ^ 3 + . . + x ^ n ", "java": "class GFG {\n  static double sum(int x, int n) {\n    double i, total = 1.0, multi = x;\n    System.out.print(\"1 \u2581 \");\n    for (i = 1; i < n; i++) {\n      total = total + multi;\n      System.out.print(multi);\n      System.out.print(\" \u2581 \");\n      multi = multi * x;\n    }\n    System.out.println();\n    return total;\n  }\n\n  public static void main(String[] args) {\n    int x = 2;\n    int n = 5;\n    System.out.printf(\" % .2f \", sum(x, n));\n  }\n}\n", "python": "def sum(x, n):\n    total = 1.0\n    multi = x\n    print(1, end=\" \u2581 \")\n    for i in range(1, n):\n        total = total + multi\n        print(\" % .1f \" % multi, end=\" \u2581 \")\n        multi = multi * x\n    print(\" \")\n    return total\n\n\nx = 2\nn = 5\nprint(\" % .2f \" % sum(x, n))\n"}
{"text": "Find the remainder when N is divided by 4 using Bitwise AND operator ", "java": "class Main {\n  public static void main(String[] args) {\n    int N = 43;\n    int ans = findRemainder(N);\n    System.out.println(ans);\n  }\n\n  public static int findRemainder(int n) {\n    int x = n & 3;\n    return x;\n  }\n}\n", "python": "def findRemainder(n):\n    x = n & 3\n    return x\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 43\n    ans = findRemainder(N)\n    print(ans)\n"}
{"text": "Check whether the number can be made palindromic after adding K ", "java": "import java.util.*;\n\nclass GFG {\n  static void checkPalindrome(int num) {\n    String str = Integer.toString(num);\n    int l = 0, r = str.length() - 1;\n    while (l < r) {\n      if (str.charAt(l) != str.charAt(r)) {\n        System.out.print(\" No \");\n        return;\n      }\n      l++;\n      r--;\n    }\n    System.out.print(\" Yes \");\n    return;\n  }\n\n  public static void main(String args[]) {\n    int n = 19, k = 3;\n    checkPalindrome(n + k);\n  }\n}\n", "python": "def checkPalindrome(num):\n    string = str(num)\n    l = 0\n    r = len(string) - 1\n    while l < r:\n        if string[l] != string[r]:\n            print(\" No \")\n            return\n        l = l + 1\n        r = r - 1\n    print(\" Yes \")\n    return\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 19\n    k = 3\n    checkPalindrome(n + k)\n"}
{"text": "Count of subsets with sum equal to X using Recursion ", "java": "import java.util.*;\n\nclass GFG {\n  static int subsetSum(int arr[], int n, int sum, int s, int count) {\n    if (n == 0) {\n      if (sum == s) {\n        count++;\n      }\n      return count;\n    }\n    count = subsetSum(arr, n - 1, sum, s, count);\n    count = subsetSum(arr, n - 1, sum, s + arr[n - 1], count);\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4, 5};\n    int sum = 10;\n    int n = arr.length;\n    System.out.print(subsetSum(arr, n, sum, s, 0));\n  }\n}\n", "python": "def subsetSum(arr, n, i, sum, count):\n    if i == n:\n        if sum == 0:\n            count += 1\n        return count\n    count = subsetSum(arr, n, i + 1, sum - arr[i], count)\n    count = subsetSum(arr, n, i + 1, sum, count)\n    return count\n\n\narr = [1, 2, 3, 4, 5]\nsum = 10\nn = len(arr)\nprint(subsetSum(arr, n, 0, sum, 0))\n"}
{"text": "Sum of the count of number of adjacent squares in an M X N grid ", "java": "class GFG {\n  static int sum(int m, int n) {\n    return 8 * m * n - 6 * m - 6 * n + 4;\n  }\n\n  public static void main(String[] args) {\n    int m = 3, n = 2;\n    System.out.println(sum(m, n));\n  }\n}\n", "python": "def summ(m, n):\n    return 8 * m * n - 6 * m - 6 * n + 4\n\n\nm = 3\nn = 2\nprint(summ(m, n))\n"}
{"text": "Find the volume of rectangular right wedge ", "java": "class GFG {\n  static double volumeRec(double a, double b, double e, double h) {\n    return (((b * h) / 6) * (2 * a + e));\n  }\n\n  public static void main(String[] args) throws java.lang.Exception {\n    double a = 2, b = 5, e = 5, h = 6;\n    System.out.print(\" Volume \u2581 = \u2581 \" + volumeRec(a, b, e, h));\n  }\n}\n", "python": "def volumeRec(a, b, e, h):\n    return ((b * h) / 6) * (2 * a + e)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 2\n    b = 5\n    e = 5\n    h = 6\n    print(\" Volume \u2581 = \u2581 \", volumeRec(a, b, e, h))\n"}
{"text": "Count squares with odd side length in Chessboard ", "java": "class GFG {\n  static int count_square(int n) {\n    int count = 0;\n    for (int i = 1; i <= n; i = i + 2) {\n      int k = n - i + 1;\n      count += (k * k);\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int N = 8;\n    System.out.println(count_square(N));\n  }\n}\n", "python": "def count_square(n):\n    count = 0\n    for i in range(1, n + 1, 2):\n        k = n - i + 1\n        count += k * k\n    return count\n\n\nN = 8\nprint(count_square(N))\n"}
{"text": "Find if the given number is present in the infinite sequence or not ", "java": "class GFG {\n  static boolean doesContainB(int a, int b, int c) {\n    if (a == b) {\n      return true;\n    }\n    if ((b - a) * c > 0 && (b - a) % c == 0) {\n      return true;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int a = 1, b = 7, c = 3;\n    if (doesContainB(a, b, c)) {\n      System.out.println(\" Yes \");\n    } else {\n      System.out.println(\" No \");\n    }\n  }\n}\n", "python": "def doesContainB(a, b, c):\n    if a == b:\n        return True\n    if (b - a) * c > 0 and (b - a) % c == 0:\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    a, b, c = 1, 7, 3\n    if doesContainB(a, b, c):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Natural Numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int findSum(int n) {\n    int sum = 0;\n    for (int x = 1; x <= n; x++) sum = sum + x;\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.println(findSum(n));\n  }\n}\n", "python": "def findSum(n):\n    sum = 0\n    x = 1\n    while x <= n:\n        sum = sum + x\n        x = x + 1\n    return sum\n\n\nn = 5\nprint findSum(n)\n"}
{"text": "Median ", "java": "import java.util.*;\n\nclass GFG {\n  public static double findMedian(int a[], int n) {\n    Arrays.sort(a);\n    if (n % 2 != 0) return (double) a[n / 2];\n    return (double) (a[(n - 1) / 2] + a[n / 2]) / 2.0;\n  }\n\n  public static void main(String args[]) {\n    int a[] = {1, 3, 4, 2, 7, 5, 8, 6};\n    int n = a.length;\n    System.out.println(\" Median \u2581 = \u2581 \" + findMedian(a, n));\n  }\n}\n", "python": "def findMedian(a, n):\n    sorted(a)\n    if n % 2 != 0:\n        return float(a[n // 2])\n    return float((a[int((n - 1) / 2)] + a[int(n / 2)]) / 2.0)\n\n\na = [1, 3, 4, 2, 7, 5, 8, 6]\nn = len(a)\nprint(\" Median \u2581 = \", findMedian(a, n))\n"}
{"text": "Mean ", "java": "import java.util.*;\n\nclass GFG {\n  public static double findMean(int a[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum += a[i];\n    return (double) sum / (double) n;\n  }\n\n  public static void main(String args[]) {\n    int a[] = {1, 3, 4, 2, 7, 5, 8, 6};\n    int n = a.length;\n    System.out.println(\" Mean \u2581 = \u2581 \" + findMean(a, n));\n  }\n}\n", "python": "def findMean(a, n):\n    sum = 0\n    for i in range(0, n):\n        sum += a[i]\n    return float(sum / n)\n\n\na = [1, 3, 4, 2, 7, 5, 8, 6]\nn = len(a)\nprint(\" Mean \u2581 = \", findMean(a, n))\n"}
{"text": "Smallest prime divisor of a number ", "java": "import java.io.*;\n\nclass GFG {\n  static int smallestDivisor(int n) {\n    if (n % 2 == 0) return 2;\n    for (int i = 3; i * i <= n; i += 2) {\n      if (n % i == 0) return i;\n    }\n    return n;\n  }\n\n  public static void main(String[] args) {\n    int n = 31;\n    System.out.println(smallestDivisor(n));\n  }\n}\n", "python": "def smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\n\nn = 31\nprint(smallestDivisor(n))\n"}
{"text": "Count Number of animals in a zoo from given number of head and legs ", "java": "import java.util.*;\n\nclass GFG {\n  static int countRabbits(int Heads, int Legs) {\n    int count = 0;\n    count = (Legs) - 2 * (Heads);\n    count = count / 2;\n    return count;\n  }\n\n  public static void main(String args[]) {\n    int Heads = 100, Legs = 300;\n    int Rabbits = countRabbits(Heads, Legs);\n    System.out.println(\" Rabbits \u2581 = \u2581 \" + Rabbits);\n    System.out.println(\" Pigeons \u2581 = \u2581 \" + (Heads - Rabbits));\n  }\n}\n", "python": "def countRabbits(Heads, Legs):\n    count = 0\n    count = (Legs) - 2 * (Heads)\n    count = count / 2\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    Heads = 100\n    Legs = 300\n    Rabbits = countRabbits(Heads, Legs)\n    print(\" Rabbits \u2581 = \", Rabbits)\n    print(\" Pigeons \u2581 = \", Heads - Rabbits)\n"}
{"text": "Program to evaluate the expression ( \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u00a2 \u00e2 \u20ac \u017e \u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00be\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2 \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122\u00a2 \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u2026\u00a1\u00ac \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u2026\u00be\u00a2\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u00a2 \u00e2 \u20ac \u017e \u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00be\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122\u00a2 \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192\u00e2 \u20ac\u00a6\u00a1\u00ac\u00b9 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u00a2 \u00e2 \u20ac \u017e \u00a2\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122\u00a2 \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u2026\u00a1\u00ac \u00c3\u0192\u00c6 \u2019 \u00c3 \u00a2 \u00e2 \u201a\u00ac\u00a6\u00a1\u00ac \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u00a2 \u00e2 \u20ac \u017e \u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00be\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122\u00a2 \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192\u00e2 \u20ac\u00a6\u00a1\u00ac\u00a6\u00a1 X + 1 ) ^ 6 + ( \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u00a2 \u00e2 \u20ac \u017e \u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00be\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2 \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122\u00a2 \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u2026\u00a1\u00ac \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u2026\u00be\u00a2\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u00a2 \u00e2 \u20ac \u017e \u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00be\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122\u00a2 \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192\u00e2 \u20ac\u00a6\u00a1\u00ac\u00b9 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u00a2 \u00e2 \u20ac \u017e \u00a2\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122\u00a2 \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u2026\u00a1\u00ac \u00c3\u0192\u00c6 \u2019 \u00c3 \u00a2 \u00e2 \u201a\u00ac\u00a6\u00a1\u00ac \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3 \u00a2 \u00e2 \u20ac \u017e \u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u20ac \u0161 \u00ac \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00be\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122\u00a2 \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192\u00e2 \u20ac\u00a6\u00a1\u00ac\u00a6\u00a1 X ", "java": "import java.util.*;\n\nclass gfg {\n  public static double calculateSum(double n) {\n    return 2 * (Math.pow(n, 6) + 15 * Math.pow(n, 4) + 15 * Math.pow(n, 2) + 1);\n  }\n\n  public static void main(String[] args) {\n    double n = 1.4142;\n    System.out.println((int) Math.ceil(calculateSum(n)));\n  }\n}\n", "python": "import math\n\n\ndef calculateSum(n):\n    a = int(n)\n    return 2 * (pow(n, 6) + 15 * pow(n, 4) + 15 * pow(n, 2) + 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 1.4142\nprint(math.ceil(calculateSum(n)))\n"}
{"text": "Find the sum of series 3 , ", "java": "import java.util.*;\n\nclass solution {\n  static int Sum_upto_nth_Term(int n) {\n    return (1 - (int) Math.pow(-2, n));\n  }\n\n  public static void main(String arr[]) {\n    int N = 5;\n    System.out.println(Sum_upto_nth_Term(N));\n  }\n}\n", "python": "def Sum_upto_nth_Term(n):\n    return 1 - pow(-2, n)\n\n\nN = 5\nprint(Sum_upto_nth_Term(N))\n"}
{"text": "Count numbers whose XOR with N is equal to OR with N ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int xorEqualsOrCount(int N) {\n    int count = 0;\n    int bit;\n    while (N > 0) {\n      bit = N % 2;\n      if (bit == 0) count++;\n      N = N / 2;\n    }\n    return (int) Math.pow(2, count);\n  }\n\n  public static void main(String args[]) {\n    int N = 7;\n    System.out.println(xorEqualsOrCount(N));\n  }\n}\n", "python": "def xorEqualsOrCount(N):\n    count = 0\n    while N > 0:\n        bit = N % 2\n        if bit == 0:\n            count += 1\n        N //= 2\n    return int(pow(2, count))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 7\n    print(xorEqualsOrCount(N))\n"}
{"text": "Program to find sum of 1 + x / 2 ! + x ^ 2 / 3 ! + ... + x ^ n / ( n + 1 ) ! ", "java": "public class SumOfSeries {\n  static int fact(int n) {\n    if (n == 1) return 1;\n    return n * fact(n - 1);\n  }\n\n  static double sum(int x, int n) {\n    double total = 1.0;\n    for (int i = 1; i <= n; i++) {\n      total = total + (Math.pow(x, i) / fact(i + 1));\n    }\n    return total;\n  }\n\n  public static void main(String[] args) {\n    int x = 5, n = 4;\n    System.out.print(\" Sum \u2581 is : \u2581 \" + sum(x, n));\n  }\n}\n", "python": "def sum(x, n):\n    total = 1.0\n    previous = 1.0\n    for i in range(1, n + 1):\n        previous = (previous * x) / (i + 1)\n        total = total + previous\n    return total\n\n\nif __name__ == \" _ _ main _ _ \":\n    x = 5\n    n = 4\n    print(\" Sum \u2581 is : \u2581 \", sum(x, n))\n"}
{"text": "Find Sum of Series 1 ^ 2 ", "java": "import java.util.*;\n\nclass GFG {\n  static int sum_of_series(int n) {\n    int result = 0;\n    for (int i = 1; i <= n; i++) {\n      if (i % 2 == 0) result = result - (int) Math.pow(i, 2);\n      else result = result + (int) Math.pow(i, 2);\n    }\n    return result;\n  }\n\n  public static void main(String args[]) {\n    int n = 3;\n    System.out.println(sum_of_series(n));\n    n = 10;\n    System.out.println(sum_of_series(n));\n  }\n}\n", "python": "def sum_of_series(n):\n    result = 0\n    if n % 2 == 0:\n        result = -(n * (n + 1)) // 2\n    else:\n        result = (n * (n + 1)) // 2\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(sum_of_series(n))\n    n = 10\n    print(sum_of_series(n))\n"}
{"text": "Program to find the sum of the series 23 + 45 + 75 + ... . . upto N terms ", "java": "import java.util.*;\n\nclass solution {\n  static int findSum(int N) {\n    return (2 * N * (N + 1) * (4 * N + 17) + 54 * N) / 6;\n  }\n\n  public static void main(String arr[]) {\n    int N = 4;\n    System.out.println(findSum(N));\n  }\n}\n", "python": "def findSum(N):\n    return (2 * N * (N + 1) * (4 * N + 17) + 54 * N) / 6\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 4\n    print(findSum(N))\n"}
{"text": "Program to find Nth term of series 9 , 23 , 45 , 75 , 113. . . ", "java": "class GFG {\n  static int nthTerm(int N) {\n    return (2 * N + 3) * (2 * N + 3) - 2 * N;\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    System.out.println(nthTerm(N));\n  }\n}\n", "python": "def nthTerm(N):\n    return (2 * N + 3) * (2 * N + 3) - 2 * N\n\n\nn = 4\nprint(nthTerm(n))\n"}
{"text": "Find sum of the series 1 + 22 + 333 + 4444 + ... ... upto n terms ", "java": "import java.util.*;\n\nclass solution {\n  static int calculateSum(int n) {\n    return ((int) Math.pow(10, n + 1) * (9 * n - 1) + 10) / (int) Math.pow(9, 3) - n * (n + 1) / 18;\n  }\n\n  public static void main(String ar[]) {\n    int n = 3;\n    System.out.println(\" Sum = \u2581 \" + calculateSum(n));\n  }\n}\n", "python": "def solve_sum(n):\n    return (pow(10, n + 1) * (9 * n - 1) + 10) / pow(9, 3) - n * (n + 1) / 18\n\n\nn = 3\nprint(int(solve_sum(n)))\n"}
{"text": "Find sum of the series 1 ", "java": "import java.util.*;\n\nclass GFG {\n  static int calculateSum(int n) {\n    if (n % 2 == 1) return (n + 1) / 2;\n    return -n / 2;\n  }\n\n  public static void main(String ar[]) {\n    int n = 8;\n    System.out.println(calculateSum(n));\n  }\n}\n", "python": "def solve_sum(n):\n    if n % 2 == 1:\n        return (n + 1) / 2\n    return -n / 2\n\n\nn = 8\nprint(int(solve_sum(n)))\n"}
{"text": "Program to calculate Root Mean Square ", "java": "class GFG {\n  static float rmsValue(int arr[], int n) {\n    int square = 0;\n    float mean = 0;\n    float root = 0;\n    for (int i = 0; i < n; i++) {\n      square += Math.pow(arr[i], 2);\n    }\n    mean = (square / (float) (n));\n    root = (float) Math.sqrt(mean);\n    return root;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {10, 4, 6, 8};\n    int n = arr.length;\n    System.out.println(rmsValue(arr, n));\n  }\n}\n", "python": "import math\n\n\ndef rmsValue(arr, n):\n    square = 0\n    mean = 0.0\n    root = 0.0\n    for i in range(0, n):\n        square += arr[i] ** 2\n    mean = square / (float)(n)\n    root = math.sqrt(mean)\n    return root\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [10, 4, 6, 8]\n    n = len(arr)\n    print(rmsValue(arr, n))\n"}
{"text": "Program to find the quantity after mixture replacement ", "java": "import java.io.*;\n\nclass GFG {\n  static double Mixture(int X, int Y, int Z) {\n    double result1 = 0.0, result = 0.0;\n    result1 = ((X - Y) / (float) X);\n    result = Math.pow(result1, Z);\n    result = result * X;\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int X = 10, Y = 2, Z = 2;\n    System.out.println((float) Mixture(X, Y, Z) + \" \u2581 litres \");\n  }\n}\n", "python": "def Mixture(X, Y, Z):\n    result = 0.0\n    result1 = 0.0\n    result1 = (X - Y) / X\n    result = pow(result1, Z)\n    result = result * X\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    X = 10\n    Y = 2\n    Z = 2\n    print(\" { : . 1f } \".format(Mixture(X, Y, Z)) + \" \u2581 litres \")\n"}
{"text": "Sum of sum of all subsets of a set formed by first N natural numbers ", "java": "class Geeks {\n  static int power(int x, int y, int p) {\n    int res = 1;\n    x = x % p;\n    while (y > 0) {\n      if (y != 0) res = (res * x) % p;\n      y = y >> 1;\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  static int check(int n) {\n    int mod = (int) (1e9 + 7);\n    n--;\n    int ans = n * n;\n    if (ans >= mod) ans %= mod;\n    ans += n + 2;\n    if (ans >= mod) ans %= mod;\n    ans = (power(2, n, mod) % mod * ans % mod) % mod;\n    ans = (ans - 1 + mod) % mod;\n    return ans;\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(check(n));\n  }\n}\n", "python": "mod = (int)(1e9 + 7)\n\n\ndef power(x, y, p):\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        x = (x * x) % p\n    return res\n\n\ndef check(n):\n    n = n - 1\n    ans = n * n\n    if ans >= mod:\n        ans %= mod\n    ans += n + 2\n    if ans >= mod:\n        ans %= mod\n    ans = (pow(2, n, mod) % mod * ans % mod) % mod\n    ans = (ans - 1 + mod) % mod\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(check(n))\n"}
{"text": "Pentatope number ", "java": "import java.io.*;\n\nclass GFG {\n  static int Pentatope_number(int n) {\n    return n * (n + 1) * (n + 2) * (n + 3) / 24;\n  }\n\n  public static void main(String[] args) {\n    int n = 7;\n    System.out.println(n + \" th \u2581 \" + \" Pentatope \u2581 number \u2581 : \" + Pentatope_number(n));\n    n = 12;\n    System.out.println(n + \" th \u2581 \" + \" Pentatope \u2581 number \u2581 : \" + Pentatope_number(n));\n  }\n}\n", "python": "def Pentatope_number(n):\n    return n * (n + 1) * (n + 2) * (n + 3) // 24\n\n\nn = 7\nprint(\" % sth \u2581 Pentatope \u2581 number \u2581 : \u2581 \" % n, Pentatope_number(n))\nn = 12\nprint(\" % sth \u2581 Pentatope \u2581 number \u2581 : \u2581 \" % n, Pentatope_number(n))\n"}
{"text": "Program for Centered Icosahedral Number ", "java": "import java.io.*;\n\nclass GFG {\n  static int centeredIcosahedralNum(int n) {\n    return (2 * n + 1) * (5 * n * n + 5 * n + 3) / 3;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(centeredIcosahedralNum(n));\n    n = 12;\n    System.out.println(centeredIcosahedralNum(n));\n  }\n}\n", "python": "def centeredIcosahedralNum(n):\n    return (2 * n + 1) * (5 * n * n + 5 * n + 3) // 3\n\n\nn = 10\nprint(centeredIcosahedralNum(n))\nn = 12\nprint(centeredIcosahedralNum(n))\n"}
{"text": "Centered Square Number ", "java": "import java.io.*;\n\nclass GFG {\n  static int centered_square_num(int n) {\n    return n * n + ((n - 1) * (n - 1));\n  }\n\n  public static void main(String[] args) {\n    int n = 7;\n    System.out.print(n + \" th \u2581 Centered \" + \" \u2581 square \u2581 number : \u2581 \" + centered_square_num(n));\n  }\n}\n", "python": "def centered_square_num(n):\n    return n * n + ((n - 1) * (n - 1))\n\n\nn = 7\nprint(\" % sth \u2581 Centered \u2581 square \u2581 number : \u2581 \" % n, centered_square_num(n))\n"}
{"text": "Sum of first n natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int seriesSum(int n) {\n    return (n * (n + 1) * (n + 2)) / 6;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(seriesSum(n));\n  }\n}\n", "python": "def seriessum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * (i + 1) / 2\n    return sum\n\n\nn = 4\nprint(seriessum(n))\n"}
{"text": "Dodecagonal number ", "java": "import java.util.*;\n\nclass GFG {\n  static int Dodecagonal_number(int n) {\n    return 5 * n * n - 4 * n;\n  }\n\n  public static void main(String[] args) {\n    int n = 7;\n    System.out.println(Dodecagonal_number(n));\n    n = 12;\n    System.out.println(Dodecagonal_number(n));\n  }\n}\n", "python": "def Dodecagonal_number(n):\n    return 5 * n * n - 4 * n\n\n\nn = 7\nprint(Dodecagonal_number(n))\nn = 12\nprint(Dodecagonal_number(n))\n"}
{"text": "Finding n ", "java": "class GFG {\n  static int magicOfSequence(int N) {\n    return (N * (N + 1) / 2) + 2 * N;\n  }\n\n  public static void main(String[] args) {\n    int N = 6;\n    System.out.println(magicOfSequence(N));\n  }\n}\n", "python": "def nthprimedigitsnumber(number):\n    num = \" \"\n    while number > 0:\n        rem = number % 4\n        if rem == 1:\n            num += \"2\"\n        if rem == 2:\n            num += \"3\"\n        if rem == 3:\n            num += \"5\"\n        if rem == 0:\n            num += \"7\"\n        if number % 4 == 0:\n            number = number - 1\n        number = number // 4\n    return num[::-1]\n\n\nnumber = 21\nprint(nthprimedigitsnumber(10))\nprint(nthprimedigitsnumber(number))\n"}
{"text": "Sum of the series 1.2 . 3 + 2.3 . 4 + ... + n ( n + 1 ) ( n + 2 ) ", "java": "import java.io.*;\nimport java.math.*;\n\nclass GFG {\n  static int sumofseries(int n) {\n    int res = 0;\n    for (int i = 1; i <= n; i++) res += (i) * (i + 1) * (i + 2);\n    return res;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(sumofseries(3));\n  }\n}\n", "python": "def sumofseries(n):\n    return int(n * (n + 1) * (n + 2) * (n + 3) / 4)\n\n\nprint(sumofseries(3))\n"}
{"text": "Nonagonal number ", "java": "import java.io.*;\n\nclass GFG {\n  static void Nonagonal(int n) {\n    for (int i = 1; i <= n; i++) {\n      System.out.print(i * (7 * i - 5) / 2);\n      System.out.print(\" \u2581 \");\n    }\n  }\n\n  public static void main(String args[]) {\n    int n = 10;\n    Nonagonal(n);\n  }\n}\n", "python": "def Nonagonal(n):\n    return int(n * (7 * n - 5) / 2)\n\n\nn = 10\nprint(Nonagonal(n))\n"}
{"text": "Find n ", "java": "import java.io.*;\n\nclass GFG {\n  static int seriesFunc(int n) {\n    int sumSquare = (n * (n + 1) * (2 * n + 1)) / 6;\n    int sumNatural = (n * (n + 1) / 2);\n    return (sumSquare + sumNatural + 1);\n  }\n\n  public static void main(String args[]) {\n    int n = 8;\n    System.out.println(seriesFunc(n));\n    n = 13;\n    System.out.println(seriesFunc(13));\n  }\n}\n", "python": "import math\n\n\ndef findNumber(n):\n    x = int(math.floor((-1 + math.sqrt(1 + 8 * n - 8)) / 2))\n    base = (x * (x + 1)) / 2 + 1\n    return n - base + 1\n\n\nn = 55\nprint(findNumber(n))\n"}
{"text": "Program to check Plus Perfect Number ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean checkplusperfect(int x) {\n    int temp = x;\n    int n = 0;\n    while (x != 0) {\n      x /= 10;\n      n++;\n    }\n    x = temp;\n    int sum = 0;\n    while (x != 0) {\n      sum += Math.pow(x % 10, n);\n      x /= 10;\n    }\n    return (sum == temp);\n  }\n\n  public static void main(String[] args) {\n    int x = 9474;\n    if (checkplusperfect(x)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "import math\n\n\ndef checkplusperfect(x):\n    temp = x\n    n = 0\n    while x != 0:\n        x = x // 10\n        n = n + 1\n    x = temp\n    sm = 0\n    while x != 0:\n        sm = sm + (int)(math.pow(x % 10, n))\n        x = x // 10\n    return sm == temp\n\n\nx = 9474\nif checkplusperfect(x):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Number of distinct subsets of a set ", "java": "class GFG {\n  static int subsetCount(int arr[], int n) {\n    return 1 << n;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {1, 2, 3};\n    int n = A.length;\n    System.out.println(subsetCount(A, n));\n  }\n}\n", "python": "import math\n\n\ndef subsetCount(arr, n):\n    return 1 << n\n\n\nA = [1, 2, 3]\nn = len(A)\nprint(subsetCount(A, n))\n"}
{"text": "Program to calculate GST from original and net prices ", "java": "import java.io.*;\n\nclass GFG {\n  static float Calculate_GST(float org_cost, float N_price) {\n    return (((N_price - org_cost) * 100) / org_cost);\n  }\n\n  public static void main(String[] args) {\n    float org_cost = 100;\n    float N_price = 120;\n    System.out.print(\" \u2581 GST \u2581 = \u2581 \" + Calculate_GST(org_cost, N_price) + \" % \");\n  }\n}\n", "python": "def Calculate_GST(org_cost, N_price):\n    return ((N_price - org_cost) * 100) / org_cost\n\n\norg_cost = 100\nN_price = 120\nprint(\" GST \u2581 = \u2581 \", end=\" \")\nprint(round(Calculate_GST(org_cost, N_price)), end=\" \")\nprint(\" % \")\n"}
{"text": "Find the distance covered to collect items at equal distances ", "java": "class demo {\n  public static int find_distance(int n) {\n    return n * (3 * n + 7);\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.print(\" Distance \u2581 = \u2581 \");\n    System.out.println(find_distance(n));\n  }\n}\n", "python": "def find_distance(n):\n    return n * ((3 * n) + 7)\n\n\nn = 5\nans = find_distance(n)\nprint(ans)\n"}
{"text": "Sum of the sequence 2 , 22 , 222 , ... ... ... ", "java": "import java.util.*;\n\nclass GFG {\n  static double sumOfSeries(int n) {\n    return 0.0246 * (Math.pow(10, n) - 1 - (9 * n));\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "import math\n\n\ndef sumOfSeries(n):\n    return 0.0246 * (math.pow(10, n) - 1 - (9 * n))\n\n\nn = 3\nprint(sumOfSeries(n))\n"}
{"text": "Sum of the series 1 + ( 1 + 3 ) + ( 1 + 3 + 5 ) + ( 1 + 3 + 5 + 7 ) + \u00c3 \u00a2 \u00e2 \u201a\u00ac\u00a6 \u00c3 \u00a2 \u00e2 \u201a\u00ac\u00a6 + ( 1 + 3 + 5 + 7 + \u00c3 \u00a2 \u00e2 \u201a\u00ac\u00a6 + ( 2 n ", "java": "import java.io.*;\n\nclass GfG {\n  static int sumOfTheSeries(int n) {\n    return (n * (n + 1) / 2) * (2 * n + 1) / 3;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(\" Sum \u2581 = \u2581 \" + sumOfTheSeries(n));\n  }\n}\n", "python": "def sumOfTheSeries(n):\n    return int((n * (n + 1) / 2) * (2 * n + 1) / 3)\n\n\nn = 5\nprint(\" Sum \u2581 = \", sumOfTheSeries(n))\n"}
{"text": "Sum of the series 1 + ( 1 + 2 ) + ( 1 + 2 + 3 ) + ( 1 + 2 + 3 + 4 ) + ... ... + ( 1 + 2 + 3 + 4 + ... + n ) ", "java": "import java.util.*;\n\nclass GFG {\n  static int sumOfSeries(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) for (int j = 1; j <= i; j++) sum += j;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(sumOfSeries(n));\n  }\n}\n", "python": "def sumOfSeries(n):\n    return sum([i * (i + 1) / 2 for i in range(1, n + 1)])\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 10\n    print(sumOfSeries(n))\n"}
{"text": "Number of triangles after N moves ", "java": "import static java.lang.Math.pow;\n\nimport java.util.*;\n\nclass Triangle {\n  public static double numberOfTriangles(int n) {\n    double ans = 2 * (pow(3, n)) - 1;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 2;\n    System.out.println(numberOfTriangles(n));\n  }\n}\n", "python": "def numberOfTriangles(n):\n    ans = 2 * (pow(3, n)) - 1\n    return ans\n\n\nn = 2\nprint(numberOfTriangles(n))\n"}
{"text": "Motzkin number ", "java": "import java.util.*;\n\nclass Digits {\n  public static int motzkin(int n) {\n    int[] dp = new int[n + 1];\n    dp[0] = dp[1] = 1;\n    for (int i = 2; i <= n; i++)\n      dp[i] = ((2 * i + 1) * dp[i - 1] + (3 * i - 3) * dp[i - 2]) / (i + 2);\n    return dp[n];\n  }\n\n  public static void main(String[] args) {\n    int n = 8;\n    System.out.print(motzkin(n));\n  }\n}\n", "python": "def motzkin(n):\n    if n == 0 or n == 1:\n        return 1\n    return ((2 * n + 1) * motzkin(n - 1) + (3 * n - 3) * motzkin(n - 2)) / (n + 2)\n\n\nn = 8\nprint(motzkin(n))\n"}
{"text": "Nicomachus\u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122 \u00c3\u0192\u00e2 \u20ac \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00e2 \u201e\u00a2\u00a2 \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122\u00a2 \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192\u00e2 \u20ac\u00a6\u00a1\u00ac \u00c3\u0192\u00c6 \u2019 \u00c3 \u2020 \u00e2 \u20ac\u2122\u00a2 \u00c3\u0192\u00c6 \u2019\u00a2 \u00c3\u0192 \u00a2 \u00c3 \u00a2 \u00e2 \u201a\u00ac \u00c5 \u00a1\u00ac \u00c3\u0192\u00e2 \u20ac\u00a6\u00be\u00a2 s Theorem ( Sum of k ", "java": "\nclass GFG {\n  public static int kthgroupsum(int k) {\n    return k * k * k;\n  }\n\n  public static void main(String[] args) {\n    int k = 3;\n    System.out.print(kthgroupsum(k));\n  }\n}\n", "python": "def kthgroupsum(k):\n    return k * k * k\n\n\nk = 3\nprint(kthgroupsum(k))\n"}
{"text": "Find n ", "java": "import java.io.*;\n\nclass Series {\n  static int term(int n) {\n    return n * (n + 1) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(term(n));\n  }\n}\n", "python": "import math\n\n\ndef findNumber(n):\n    x = int(math.floor((-1 + math.sqrt(1 + 8 * n - 8)) / 2))\n    base = (x * (x + 1)) / 2 + 1\n    return n - base + 1\n\n\nn = 55\nprint(findNumber(n))\n"}
{"text": "Find Harmonic mean using Arithmetic mean and Geometric mean ", "java": "import java.io.*;\n\nclass GeeksforGeeks {\n  static double compute(int a, int b) {\n    double AM, GM, HM;\n    AM = (a + b) / 2;\n    GM = Math.sqrt(a * b);\n    HM = (GM * GM) / AM;\n    return HM;\n  }\n\n  public static void main(String args[]) {\n    int a = 5, b = 15;\n    double HM = compute(a, b);\n    String str = \" \";\n    str = str + HM;\n    System.out.print(\n        \" Harmonic \u2581 Mean \u2581 between \u2581 \" + a + \" \u2581 and \u2581 \" + b + \" \u2581 is \u2581 \" + str.substring(0, 5));\n  }\n}\n", "python": "import math\n\n\ndef compute(a, b):\n    AM = (a + b) / 2\n    GM = math.sqrt(a * b)\n    HM = (GM * GM) / AM\n    return HM\n\n\na = 5\nb = 15\nHM = compute(a, b)\nprint(\" Harmonic \u2581 Mean \u2581 between \u2581 \", a, \" \u2581 and \u2581 \", b, \" \u2581 is \u2581 \", HM)\n"}
{"text": "Find n ", "java": "import java.io.*;\n\nclass GFG {\n  static int series(int n) {\n    return (8 * n * n) + 1;\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.println(series(n));\n  }\n}\n", "python": "import math\n\n\ndef findNumber(n):\n    x = int(math.floor((-1 + math.sqrt(1 + 8 * n - 8)) / 2))\n    base = (x * (x + 1)) / 2 + 1\n    return n - base + 1\n\n\nn = 55\nprint(findNumber(n))\n"}
{"text": "Program to find Sum of a Series a ^ 1 / 1 ! + a ^ 2 / 2 ! + a ^ 3 / 3 ! + a ^ 4 / 4 ! + \u00c3 \u00a2 \u00e2 \u201a\u00ac\u00a6 \u00c3 \u00a2 \u00e2 \u201a\u00ac\u00a6 . + a ^ n / n ! ", "java": "import java.io.*;\n\nclass GFG {\n  public static void main(String[] args) {\n    double n = 5, a = 2;\n    System.out.println(sumOfSeries(a, n));\n  }\n\n  static double sumOfSeries(double a, double n) {\n    double res = 0, prev = 1;\n    for (int i = 1; i <= n; i++) {\n      prev *= (a / i);\n      res = res + prev;\n    }\n    return (res);\n  }\n}\n", "python": "from __future__ import division\n\n\ndef sumOfSeries(a, num):\n    res = 0\n    prev = 1\n    for i in range(1, n + 1):\n        prev *= a / i\n        res = res + prev\n    return res\n\n\nn = 5\na = 2\nprint(round(sumOfSeries(a, n), 4))\n"}
{"text": "Program for Celsius To Fahrenheit conversion ", "java": "class GFG {\n  static float Cel_To_Fah(float n) {\n    return ((n * 9.0f / 5.0f) + 32.0f);\n  }\n\n  public static void main(String[] args) {\n    float n = 20.0f;\n    System.out.println(Cel_To_Fah(n));\n  }\n}\n", "python": "def Cel_To_Fah(n):\n    return (n * 1.8) + 32\n\n\nn = 20\nprint(int(Cel_To_Fah(n)))\n"}
{"text": "Number of compositions of a natural number ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int countCompositions(int n) {\n    return 1 << (n - 1);\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.print(countCompositions(n));\n  }\n}\n", "python": "def countCompositions(n):\n    return 2 ** (n - 1)\n\n\nprint(countCompositions(4))\n"}
{"text": "Program to count digits in an integer ( 4 Different Methods ) ", "java": "import java.util.*;\n\nclass GFG {\n  static int countDigit(long n) {\n    if (n / 10 == 0) return 1;\n    return 1 + countDigit(n / 10);\n  }\n\n  public static void main(String[] args) {\n    long n = 345289467;\n    System.out.print(\" Number \u2581 of \u2581 digits \u2581 : \u2581 \" + countDigit(n));\n  }\n}\n", "python": "def countDigit(n):\n    if n / 10 == 0:\n        return 1\n    return 1 + countDigit(n // 10)\n\n\nn = 345289467\nprint(\" Number \u2581 of \u2581 digits \u2581 : \u2581 % \u2581 d \" % (countDigit(n)))\n"}
{"text": "Geometric mean ( Two Methods ) ", "java": "import java.io.*;\n\nclass GFG {\n  static float geometricMean(int[] arr, int n) {\n    float sum = 0;\n    for (int i = 0; i < n; i++) sum = sum + (float) Math.log(arr[i]);\n    sum = sum / n;\n    return (float) Math.exp(sum);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 4, 5, 6, 7, 8};\n    int n = arr.length;\n    System.out.println(geometricMean(arr, n));\n  }\n}\n", "python": "import math\n\n\ndef geometricMean(arr, n):\n    product = 1\n    for i in range(0, n):\n        product = product * arr[i]\n    gm = (float)(math.pow(product, (1 / n)))\n    return (float)(gm)\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nn = len(arr)\nprint(\" { 0 : . 6f } \".format(geometricMean(arr, n)))\n"}
{"text": "Check if a number is magic ( Recursive sum of digits is 1 ) ", "java": "class GFG {\n  public static void main(String[] args) {\n    int x = 1234;\n    if (x % 9 == 1) System.out.printf(\" Magic \u2581 Number \");\n    else System.out.printf(\" Not \u2581 a \u2581 Magic \u2581 Number \");\n  }\n}\n", "python": "def isMagic(n):\n    sum = 0\n    while n > 0 or sum > 9:\n        if n == 0:\n            n = sum\n            sum = 0\n        sum = sum + n % 10\n        n = int(n / 10)\n    return True if (sum == 1) else False\n\n\nn = 1234\nif isMagic(n):\n    print(\" Magic \u2581 Number \")\nelse:\n    print(\" Not \u2581 a \u2581 magic \u2581 Number \")\n"}
{"text": "Program to find sum of first n natural numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int findSum(int n) {\n    int sum = 0;\n    for (int x = 1; x <= n; x++) sum = sum + x;\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.println(findSum(n));\n  }\n}\n", "python": "def findSum(n):\n    return n * (n + 1) / 2\n\n\nn = 5\nprint findSum(n)\n"}
{"text": "Hailstone Numbers ", "java": "import java.util.*;\n\nclass GFG {\n  static int c;\n\n  static int HailstoneNumbers(int N) {\n    System.out.print(N + \" \u2581 \");\n    if (N == 1 && c == 0) {\n      return c;\n    } else if (N == 1 && c != 0) {\n      c++;\n      return c;\n    } else if (N % 2 == 0) {\n      c++;\n      HailstoneNumbers(N / 2);\n    } else if (N % 2 != 0) {\n      c++;\n      HailstoneNumbers(3 * N + 1);\n    }\n    return c;\n  }\n\n  public static void main(String[] args) {\n    int N = 7;\n    int x;\n    x = HailstoneNumbers(N);\n    System.out.println();\n    System.out.println(\" Number \u2581 of \u2581 Steps : \u2581 \" + x);\n  }\n}\n", "python": "def HailstoneNumbers(N, c):\n    print(N, end=\" \u2581 \")\n    if N == 1 and c == 0:\n        return c\n    elif N == 1 and c != 0:\n        c = c + 1\n    elif N % 2 == 0:\n        c = c + 1\n        c = HailstoneNumbers(int(N / 2), c)\n    elif N % 2 != 0:\n        c = c + 1\n        c = HailstoneNumbers(3 * N + 1, c)\n    return c\n\n\nN = 7\nx = HailstoneNumbers(N, 0)\nprint(\" Number of Steps :   \", x)\n"}
{"text": "Count number of digits after decimal on dividing a number ", "java": "import java.util.*;\n\nclass GFG {\n  static int count(int x, int y) {\n    Map<Integer, Integer> m = new HashMap<>();\n    while (x % y != 0) {\n      x = x % y;\n      ans++;\n      if (m.containsKey(x)) return -1;\n      m.put(x, 1);\n      x = x * 10;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int res = count(1, 2);\n    if ((res == -1)) System.out.println(\" INF \");\n    else System.out.println(res);\n    res = count(5, 3);\n    if ((res == -1)) System.out.println(\" INF \");\n    else System.out.println(res);\n    res = count(3, 5);\n    if ((res == -1)) System.out.println(\" INF \");\n    else System.out.println(res);\n  }\n}\n", "python": "def count(x, y):\n    m = dict()\n    while x % y != 0:\n        x %= y\n        ans += 1\n        if x in m:\n            return -1\n        m[x] = 1\n        x *= 10\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    res = count(1, 2)\n    print(\" INF \") if res == -1 else print(res)\n    res = count(5, 3)\n    print(\" INF \") if res == -1 else print(res)\n    res = count(3, 5)\n    print(\" INF \") if res == -1 else print(res)\n"}
{"text": "Find smallest number n such that n XOR n + 1 equals to given k . ", "java": "class GFG {\n  static int xorCalc(int k) {\n    if (k == 1) return 2;\n    if (((k + 1) & k) == 0) return k / 2;\n    return 1;\n  }\n\n  public static void main(String[] args) {\n    int k = 31;\n    System.out.println(xorCalc(k));\n  }\n}\n", "python": "def xorCalc(k):\n    if k == 1:\n        return 2\n    if ((k + 1) & k) == 0:\n        return k / 2\n    return 1\n\n\nk = 31\nprint(int(xorCalc(k)))\n"}
{"text": "Find n ", "java": "public class GFG {\n  static String findNthNo(int n) {\n    String res = \" \";\n    while (n >= 1) {\n      if ((n & 1) == 1) {\n        res = res + \"4\";\n        n = (n - 1) / 2;\n      } else {\n        res = res + \"7\";\n        n = (n - 2) / 2;\n      }\n    }\n    StringBuilder sb = new StringBuilder(res);\n    sb.reverse();\n    return new String(sb);\n  }\n\n  public static void main(String args[]) {\n    int n = 13;\n    System.out.print(findNthNo(n));\n  }\n}\n", "python": "import math\n\n\ndef findNumber(n):\n    x = int(math.floor((-1 + math.sqrt(1 + 8 * n - 8)) / 2))\n    base = (x * (x + 1)) / 2 + 1\n    return n - base + 1\n\n\nn = 55\nprint(findNumber(n))\n"}
{"text": "Maximum number of unique prime factors ", "java": "class GFG {\n  static int getMax(int[] Arr) {\n    int max = Arr[0];\n    for (int i = 1; i < Arr.length; i++) if (Arr[i] > max) max = Arr[i];\n    return max;\n  }\n\n  static int maxPrimefactorNum(int N) {\n    int[] arr = new int[N + 1];\n    for (int i = 2; i * i <= N; i++) {\n      if (arr[i] == 0) for (int j = 2 * i; j <= N; j += i) arr[j]++;\n      arr[i] = 1;\n    }\n    return getMax(arr);\n  }\n\n  public static void main(String[] args) {\n    int N = 40;\n    System.out.println(maxPrimefactorNum(N));\n  }\n}\n", "python": "def maxPrimefactorNum(N):\n    if N < 2:\n        return 0\n    arr = [True] * (N + 1)\n    prod = 1\n    res = 0\n    p = 2\n    while p * p <= N:\n        if arr[p] == True:\n            for i in range(p * 2, N + 1, p):\n                arr[i] = False\n            prod *= p\n            if prod > N:\n                return res\n            res += 1\n        p += 1\n    return res\n\n\nN = 500\nprint(maxPrimefactorNum(N))\n"}
{"text": "Sum of array elements that is first continuously increasing then decreasing ", "java": "class GFG {\n  public static int arraySum(int arr[], int n) {\n    int x = (n + 1) / 2;\n    return (arr[0] - 1) * n + x * x;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {10, 11, 12, 13, 12, 11, 10};\n    int n = arr.length;\n    System.out.print(arraySum(arr, n));\n  }\n}\n", "python": "def arraySum(arr, n):\n    x = (n + 1) / 2\n    return (arr[0] - 1) * n + x * x\n\n\narr = [10, 11, 12, 13, 12, 11, 10]\nn = len(arr)\nprint(arraySum(arr, n))\n"}
{"text": "A product array puzzle ", "java": "public class Array_puzzle_2 {\n  static final double EPS = 1e-9;\n\n  static void productPuzzle(int a[], int n) {\n    double sum = 0;\n    for (int i = 0; i < n; i++) sum += Math.log10(a[i]);\n    for (int i = 0; i < n; i++)\n      System.out.print((int) (EPS + Math.pow(10.00, sum - Math.log10(a[i]))) + \" \u2581 \");\n  }\n\n  public static void main(String args[]) {\n    int a[] = {10, 3, 5, 6, 2};\n    int n = a.length;\n    System.out.println(\" The \u2581 product \u2581 array \u2581 is : \u2581 \");\n    productPuzzle(a, n);\n  }\n}\n", "python": "import math\n\nEPS = 1e-9\n\n\ndef productPuzzle(a, n):\n    sum = 0\n    for i in range(n):\n        sum += math.log10(a[i])\n    for i in range(n):\n        print int((EPS + pow(10.00, sum - math.log10(a[i])))),\n    return\n\n\na = [10, 3, 5, 6, 2]\nn = len(a)\nprint \" The \u2581 product \u2581 array \u2581 is : \u2581 \"\nproductPuzzle(a, n)\n"}
{"text": "Change all even bits in a number to 0 ", "java": "import java.util.*;\n\nclass GFG {\n  static int changeEvenBits(int n) {\n    int to_subtract = 0;\n    int m = 0;\n    for (int x = n; x > 0; x >>= 2) {\n      if ((x & 1) > 0) to_subtract += (1 << m);\n      m += 2;\n    }\n    return n - to_subtract;\n  }\n\n  public static void main(String[] args) {\n    int n = 30;\n    System.out.println(changeEvenBits(n));\n  }\n}\n", "python": "def changeEvenBits(n):\n    to_subtract = 0\n    m = 0\n    x = n\n    while x:\n        if x & 1:\n            to_subtract += 1 << m\n        m += 2\n        x >>= 2\n    return n - to_subtract\n\n\nn = 30\nprint changeEvenBits(n)\n"}
{"text": "Find the number closest to n and divisible by m ", "java": "public class close_to_n_divisible_m {\n  static int closestNumber(int n, int m) {\n    int q = n / m;\n    int n1 = m * q;\n    int n2 = (n * m) > 0 ? (m * (q + 1)) : (m * (q - 1));\n    if (Math.abs(n - n1) < Math.abs(n - n2)) return n1;\n    return n2;\n  }\n\n  public static void main(String args[]) {\n    int n = 13, m = 4;\n    System.out.println(closestNumber(n, m));\n    n = -15;\n    m = 6;\n    System.out.println(closestNumber(n, m));\n    n = 0;\n    m = 8;\n    System.out.println(closestNumber(n, m));\n    n = 18;\n    m = -7;\n    System.out.println(closestNumber(n, m));\n  }\n}\n", "python": "def closestNumber(n, m):\n    q = int(n / m)\n    n1 = m * q\n    if (n * m) > 0:\n        n2 = m * (q + 1)\n    else:\n        n2 = m * (q - 1)\n    if abs(n - n1) < abs(n - n2):\n        return n1\n    return n2\n\n\nn = 13\nm = 4\nprint(closestNumber(n, m))\nn = -15\nm = 6\nprint(closestNumber(n, m))\nn = 0\nm = 8\nprint(closestNumber(n, m))\nn = 18\nm = -7\nprint(closestNumber(n, m))\n"}
{"text": "Find minimum sum of factors of number ", "java": "public class Main {\n  static int findMinSum(int num) {\n    int sum = 0;\n    for (int i = 2; i * i <= num; i++) {\n      while (num % i == 0) {\n        sum += i;\n        num /= i;\n      }\n    }\n    sum += num;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int num = 12;\n    System.out.println(findMinSum(num));\n  }\n}\n", "python": "def findMinSum(num):\n    sum = 0\n    i = 2\n    while i * i <= num:\n        while num % i == 0:\n            sum += i\n            num /= i\n        i += 1\n    sum += num\n    return sum\n\n\nnum = 12\nprint findMinSum(num)\n"}
{"text": "Binomial Random Variables ", "java": "import java.util.*;\n\nclass GFG {\n  static int nCr(int n, int r) {\n    if (r > n / 2) r = n - r;\n    int answer = 1;\n    for (int i = 1; i <= r; i++) {\n      answer *= (n - r + i);\n      answer /= i;\n    }\n    return answer;\n  }\n\n  static float binomialProbability(int n, int k, float p) {\n    return nCr(n, k) * (float) Math.pow(p, k) * (float) Math.pow(1 - p, n - k);\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    int k = 5;\n    float p = (float) 1.0 / 3;\n    float probability = binomialProbability(n, k, p);\n    System.out.print(\" Probability \u2581 of \u2581 \" + k);\n    System.out.print(\" \u2581 heads \u2581 when \u2581 a \u2581 coin \u2581 is \u2581 tossed \u2581 \" + n);\n    System.out.println(\" \u2581 times \u2581 where \u2581 probability \u2581 of \u2581 each \u2581 head \u2581 is \u2581 \" + p);\n    System.out.println(\" \u2581 is \u2581 = \u2581 \" + probability);\n  }\n}\n", "python": "def nCr(n, r):\n    if r > n / 2:\n        r = n - r\n    answer = 1\n    for i in range(1, r + 1):\n        answer *= n - r + i\n        answer /= i\n    return answer\n\n\ndef binomialProbability(n, k, p):\n    return nCr(n, k) * pow(p, k) * pow(1 - p, n - k)\n\n\nn = 10\nk = 5\np = 1.0 / 3\nprobability = binomialProbability(n, k, p)\nprint(\" Probability \u2581 of \", k, \" heads \u2581 when \u2581 a \u2581 coin \u2581 is \u2581 tossed \", end=\" \u2581 \")\nprint(n, \" times \u2581 where \u2581 probability \u2581 of \u2581 each \u2581 head \u2581 is \", round(p, 6))\nprint(\" is \u2581 = \u2581 \", round(probability, 6))\n"}
{"text": "Evil Number ", "java": "class GFG {\n  static int count_one(int n) {\n    int c_one = 0;\n    while (n != 0) {\n      int rem = n % 10;\n      if (rem == 1) c_one = c_one + 1;\n      n = n / 10;\n    }\n    return c_one;\n  }\n\n  static int checkEvil(int n) {\n    int i = 0, bin = 0, n_one = 0;\n    while (n != 0) {\n      int r = n % 2;\n      bin = bin + r * (int) (Math.pow(10, i));\n      n = n / 2;\n    }\n    n_one = count_one(bin);\n    if (n_one % 2 == 0) return 1;\n    else return 0;\n  }\n\n  public static void main(String[] args) {\n    int i, check, num;\n    num = 32;\n    check = checkEvil(num);\n    if (check == 1) System.out.println(num + \" \u2581 is \u2581 Evil \u2581 Number \");\n    else System.out.println(num + \" \u2581 is \u2581 Odious \u2581 Number \");\n  }\n}\n", "python": "def count_one(n):\n    c_one = 0\n    while n != 0:\n        rem = n % 10\n        if rem == 1:\n            c_one = c_one + 1\n        n = n / 10\n    return c_one\n\n\ndef checkEvil(n):\n    i = 0\n    binary = 0\n    while n != 0:\n        r = n % 2\n        binary = binary + r * (int(10 ** i))\n        n = n / 2\n    n_one = count_one(binary)\n    if n_one % 2 == 0:\n        return True\n    return False\n\n\nnum = 32\ncheck = checkEvil(num)\nif check:\n    print num, \" is \u2581 Evil \u2581 Number \"\nelse:\n    print num, \" is \u2581 Odious \u2581 Number \"\n"}
{"text": "Count number of pairs ( A <= N , B <= N ) such that gcd ( A , B ) is B ", "java": "class GFG {\n  static int CountPairs(int n) {\n    int k = n;\n    int imin = 1;\n    int ans = 0;\n    while (imin <= n) {\n      int imax = n / k;\n      ans += k * (imax - imin + 1);\n      imin = imax + 1;\n      k = n / imin;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(CountPairs(1));\n    System.out.println(CountPairs(2));\n    System.out.println(CountPairs(3));\n  }\n}\n", "python": "def CountPairs(n):\n    k = n\n    imin = 1\n    ans = 0\n    while imin <= n:\n        imax = n / k\n        ans += k * (imax - imin + 1)\n        imin = imax + 1\n        k = n / imin\n    return ans\n\n\nprint(CountPairs(1))\nprint(CountPairs(2))\nprint(CountPairs(3))\n"}
{"text": "Find the last digit of given series ", "java": "class GFG {\n  static long powermod(long x, long y, long p) {\n    while (y > 0) {\n      if ((y & 1L) > 0) res = (res * x) % p;\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  static long modInverse(long a, long m) {\n    long m0 = m, t, q;\n    long x0 = 0, x1 = 1;\n    if (m == 1) return 0;\n    while (a > 1) {\n      q = a / m;\n      t = m;\n      m = a % m;\n      a = t;\n      t = x0;\n      x0 = x1 - q * x0;\n      x1 = t;\n    }\n    if (x1 < 0) x1 += m0;\n    return x1;\n  }\n\n  static long evaluteExpression(long n) {\n    long firstsum = 0, mod = 10;\n    for (long i = 2, j = 0; (1L << j) <= n; i *= i, ++j) firstsum = (firstsum + i) % mod;\n    long secondsum = (powermod(4L, n + 1, mod) - 1) * modInverse(3L, mod);\n    return (firstsum * secondsum) % mod;\n  }\n\n  public static void main(String[] args) {\n    long n = 3;\n    System.out.println(evaluteExpression(n));\n    n = 10;\n    System.out.println(evaluteExpression(n));\n  }\n}\n", "python": "def powermod(x, y, p):\n    while y > 0:\n        if (y & 1) > 0:\n            res = (res * x) % p\n        x = (x * x) % p\n    return res\n\n\ndef modInverse(a, m):\n    m0 = m\n    x0 = 0\n    x1 = 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = int(a / m)\n        t = m\n        m = a % m\n        a = t\n        t = x0\n        x0 = x1 - q * x0\n        x1 = t\n    if x1 < 0:\n        x1 += m0\n    return x1\n\n\ndef evaluteExpression(n):\n    firstsum = 0\n    mod = 10\n    i = 2\n    j = 0\n    while (1 << j) <= n:\n        firstsum = (firstsum + i) % mod\n        i *= i\n        j += 1\n    secondsum = (powermod(4, n + 1, mod) - 1) * modInverse(3, mod)\n    return (firstsum * secondsum) % mod\n\n\nn = 3\nprint(evaluteExpression(n))\nn = 10\nprint(evaluteExpression(n))\n"}
{"text": "Finding power of prime number p in n ! ", "java": "public class GFG {\n  static int PowerOFPINnfactorial(int n, int p) {\n    int ans = 0;\n    int temp = p;\n    while (temp <= n) {\n      ans += n / temp;\n      temp = temp * p;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(PowerOFPINnfactorial(4, 2));\n  }\n}\n", "python": "def PowerOFPINnfactorial(n, p):\n    ans = 0\n    temp = p\n    while temp <= n:\n        ans += n / temp\n        temp = temp * p\n    return int(ans)\n\n\nprint(PowerOFPINnfactorial(4, 2))\n"}
{"text": "Program for Binary To Decimal Conversion ", "java": "class GFG {\n  static int binaryToDecimal(int n) {\n    int num = n;\n    int dec_value = 0;\n    int base = 1;\n    int temp = num;\n    while (temp > 0) {\n      int last_digit = temp % 10;\n      temp = temp / 10;\n      dec_value += last_digit * base;\n      base = base * 2;\n    }\n    return dec_value;\n  }\n\n  public static void main(String[] args) {\n    int num = 10101001;\n    System.out.println(binaryToDecimal(num));\n  }\n}\n", "python": "def binaryToDecimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 2\n    return dec_value\n\n\nnum = 10101001\nprint(binaryToDecimal(num))\n"}
{"text": "Calculating Factorials using Stirling Approximation ", "java": "class GFG {\n  public static int stirlingFactorial(double n) {\n    if (n == 1) return 1;\n    double z;\n    z = Math.sqrt(2 * 3.14 * n) * Math.pow((n / e), n);\n    return (int) (z);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(stirlingFactorial(1));\n    System.out.println(stirlingFactorial(2));\n    System.out.println(stirlingFactorial(3));\n    System.out.println(stirlingFactorial(4));\n    System.out.println(stirlingFactorial(5));\n    System.out.println(stirlingFactorial(6));\n    System.out.println(stirlingFactorial(7));\n  }\n}\n", "python": "import math\n\n\ndef stirlingFactorial(n):\n    if n == 1:\n        return 1\n    e = 2.71\n    z = math.sqrt(2 * 3.14 * n) * math.pow((n / e), n)\n    return math.floor(z)\n\n\nprint(stirlingFactorial(1))\nprint(stirlingFactorial(2))\nprint(stirlingFactorial(3))\nprint(stirlingFactorial(4))\nprint(stirlingFactorial(5))\nprint(stirlingFactorial(6))\nprint(stirlingFactorial(7))\n"}
{"text": "Rectangular ( or Pronic ) Numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int findRectNum(int n) {\n    return n * (n + 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    System.out.println(findRectNum(n));\n  }\n}\n", "python": "def findRectNum(n):\n    return n * (n + 1)\n\n\nn = 6\nprint(findRectNum(n))\n"}
{"text": "Finding n ", "java": "import static java.lang.Math.pow;\n\nclass Test {\n  static void nthprimedigitsnumber(long n) {\n    long len = 1;\n    long prev_count = 0;\n    while (true) {\n      long curr_count = (long) (prev_count + pow(4, len));\n      if (prev_count < n && curr_count >= n) break;\n      len++;\n      prev_count = curr_count;\n    }\n    for (int i = 1; i <= len; i++) {\n      for (long j = 1; j <= 4; j++) {\n        if (prev_count + pow(4, len - i) < n) prev_count += pow(4, len - i);\n        else {\n          if (j == 1) System.out.print(\"2\");\n          else if (j == 2) System.out.print(\"3\");\n          else if (j == 3) System.out.print(\"5\");\n          else if (j == 4) System.out.print(\"7\");\n          break;\n        }\n      }\n    }\n    System.out.println();\n  }\n\n  public static void main(String args[]) {\n    nthprimedigitsnumber(10);\n    nthprimedigitsnumber(21);\n  }\n}\n", "python": "def nthprimedigitsnumber(number):\n    num = \" \"\n    while number > 0:\n        rem = number % 4\n        if rem == 1:\n            num += \"2\"\n        if rem == 2:\n            num += \"3\"\n        if rem == 3:\n            num += \"5\"\n        if rem == 0:\n            num += \"7\"\n        if number % 4 == 0:\n            number = number - 1\n        number = number // 4\n    return num[::-1]\n\n\nnumber = 21\nprint(nthprimedigitsnumber(10))\nprint(nthprimedigitsnumber(number))\n"}
{"text": "Cassini\u00e2 \u20ac\u2122 s Identity ", "java": "class Gfg {\n  static int cassini(int n) {\n    return (n & 1) != 0 ? -1 : 1;\n  }\n\n  public static void main(String args[]) {\n    int n = 5;\n    System.out.println(cassini(n));\n  }\n}\n", "python": "def cassini(n):\n    return -1 if (n & 1) else 1\n\n\nn = 5\nprint(cassini(n))\n"}
{"text": "Find a range of composite numbers of given length ", "java": "class Test {\n  static int factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n  }\n\n  static void printRange(int n) {\n    int a = factorial(n + 2) + 2;\n    int b = a + n - 1;\n    System.out.println(\" [ \" + a + \" , \u2581 \" + b + \" ] \");\n  }\n\n  public static void main(String args[]) throws Exception {\n    int n = 3;\n    printRange(n);\n  }\n}\n", "python": "def factorial(n):\n    a = 1\n    for i in range(2, n + 1):\n        a *= i\n    return a\n\n\ndef printRange(n):\n    a = factorial(n + 2) + 2\n    b = a + n - 1\n    print(\" [ \" + str(a) + \" , \u2581 \" + str(b) + \" ] \")\n\n\nn = 3\nprintRange(n)\n"}
{"text": "Find the sum of all the terms in the n ", "java": "import static java.lang.Math.pow;\n\nclass Test {\n  static int sumOfTermsInNthRow(int n) {\n    int sum = (int) (n * (2 * pow(n, 2) + 1));\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(\n        \" Sum \u2581 of \u2581 all \u2581 the \u2581 terms \u2581 in \u2581 nth \u2581 row \u2581 = \u2581 \" + sumOfTermsInNthRow(n));\n  }\n}\n", "python": "from math import pow\n\n\ndef sumOfTermsInNthRow(n):\n    sum = n * (2 * pow(n, 2) + 1)\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(\n        \" Sum \u2581 of \u2581 all \u2581 the \u2581 terms \u2581 in \u2581 nth \u2581 row \u2581 = \",\n        int(sumOfTermsInNthRow(n)),\n    )\n"}
{"text": "First digit in product of an array of numbers ", "java": "class Test {\n  static int firstDigit(int x) {\n    while (x >= 10) x = x / 10;\n    return x;\n  }\n\n  public static void main(String args[]) {\n    System.out.println(firstDigit(12345));\n    System.out.println(firstDigit(5432));\n  }\n}\n", "python": "import math\n\n\ndef FirstDigit(arr, n):\n    S = 0\n    for i in range(n):\n        S = S + math.log10(arr[i] * 1.0)\n    fract_S = S - math.floor(S)\n    ans = math.pow(10, fract_S)\n    return ans\n\n\narr = [5, 8, 3, 7]\nn = len(arr)\nprint((int)(FirstDigit(arr, n)))\n"}
{"text": "Program to calculate the value of sin ( x ) and cos ( x ) using Expansion ", "java": "import static java.lang.Math.cos;\n\nclass GFG {\n  static void cal_cos(float n) {\n    float accuracy = (float) 0.0001, x1, denominator, cosx, cosval;\n    n = n * (float) (3.142 / 180.0);\n    x1 = 1;\n    cosx = x1;\n    cosval = (float) cos(n);\n    int i = 1;\n    do {\n      denominator = 2 * i * (2 * i - 1);\n      x1 = -x1 * n * n / denominator;\n      cosx = cosx + x1;\n      i = i + 1;\n    } while (accuracy <= cosval - cosx);\n    System.out.println(cosx);\n  }\n\n  public static void main(String[] args) {\n    float n = 30;\n    cal_cos(n);\n  }\n}\n", "python": "from math import fabs, cos\n\n\ndef cal_cos(n):\n    accuracy = 0.0001\n    n = n * (3.142 / 180.0)\n    x1 = 1\n    cosx = x1\n    cosval = cos(n)\n    i = 1\n    denominator = 2 * i * (2 * i - 1)\n    x1 = -x1 * n * n / denominator\n    cosx = cosx + x1\n    i = i + 1\n    while accuracy <= fabs(cosval - cosx):\n        denominator = 2 * i * (2 * i - 1)\n        x1 = -x1 * n * n / denominator\n        cosx = cosx + x1\n        i = i + 1\n    print(\" { 0 : . 6 } \".format(cosx))\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 30\n    cal_cos(n)\n"}
{"text": "Minimum positive integer to divide a number such that the result is an odd ", "java": "import java.io.*;\n\nclass GFG {\n  static int makeOdd(int n) {\n    if (n % 2 != 0) return 1;\n    int i;\n    for (i = 2; i <= n; i++) if ((n % i == 0) && ((n / i) % 2 == 1)) break;\n    return i;\n  }\n\n  public static void main(String[] args) {\n    int n = 36;\n    int res = makeOdd(n);\n    System.out.println(res);\n  }\n}\n", "python": "def makeOdd(n):\n    if n % 2 != 0:\n        return 1\n    resul = 1\n    while n % 2 == 0:\n        n = n / 2\n        resul = resul * 2\n    return resul\n\n\nn = 36\nprint(makeOdd(n))\n"}
{"text": "Fill array with 1 's using minimum iterations of filling neighbors ", "java": "class Test {\n  static int countIterations(int arr[], int n) {\n    boolean oneFound = false;\n    int res = 0;\n    for (int i = 0; i < n; ) {\n      if (arr[i] == 1) oneFound = true;\n      while (i < n && arr[i] == 1) i++;\n      int count_zero = 0;\n      while (i < n && arr[i] == 0) {\n        count_zero++;\n        i++;\n      }\n      if (oneFound == false && i == n) return -1;\n      int curr_count;\n      if (i < n && oneFound == true) {\n        if ((count_zero & 1) == 0) curr_count = count_zero / 2;\n        else curr_count = (count_zero + 1) / 2;\n        count_zero = 0;\n      } else {\n        curr_count = count_zero;\n        count_zero = 0;\n      }\n      res = Math.max(res, curr_count);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0};\n    System.out.println(countIterations(arr, arr.length));\n  }\n}\n", "python": "def countIterations(arr, n):\n    oneFound = False\n    res = 0\n    i = 0\n    while i < n:\n        if arr[i] == 1:\n            oneFound = True\n        while i < n and arr[i] == 1:\n            i += 1\n        count_zero = 0\n        while i < n and arr[i] == 0:\n            count_zero += 1\n            i += 1\n        if oneFound == False and i == n:\n            return -1\n        curr_count = 0\n        if i < n and oneFound == True:\n            if (count_zero & 1) == 0:\n                curr_count = count_zero // 2\n            else:\n                curr_count = (count_zero + 1) // 2\n            count_zero = 0\n        else:\n            curr_count = count_zero\n            count_zero = 0\n        res = max(res, curr_count)\n    return res\n\n\narr = [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0]\nn = len(arr)\nprint(countIterations(arr, n))\n"}
{"text": "Find n ", "java": "class FindNth {\n  static int printNthElement(int n) {\n    int arr[] = new int[n + 1];\n    arr[1] = 4;\n    arr[2] = 7;\n    for (int i = 3; i <= n; i++) {\n      if (i % 2 != 0) arr[i] = arr[i / 2] * 10 + 4;\n      else arr[i] = arr[(i / 2) - 1] * 10 + 7;\n    }\n    return arr[n];\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    System.out.println(printNthElement(n));\n  }\n}\n", "python": "import math\n\n\ndef findNumber(n):\n    x = int(math.floor((-1 + math.sqrt(1 + 8 * n - 8)) / 2))\n    base = (x * (x + 1)) / 2 + 1\n    return n - base + 1\n\n\nn = 55\nprint(findNumber(n))\n"}
{"text": "Square root of a number using log ", "java": "import java.io.*;\n\nclass GFG {\n  public static void main(String[] args) {\n    double n = 12;\n    System.out.println(Math.sqrt(n));\n  }\n}\n", "python": "import math\n\nif __name__ == \" _ _ main _ _ \":\n    n = 12\n    print(math.sqrt(n))\n"}
{"text": "Maximum value of an integer for which factorial can be calculated on a machine ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static int findMaxValue() {\n    int res = 2;\n    long fact = 2;\n    while (true) {\n      if (fact < 0) break;\n      res++;\n      fact = fact * res;\n    }\n    return res - 1;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(\" Maximum \u2581 value \u2581 of \" + \" \u2581 integer \u2581 \" + findMaxValue());\n  }\n}\n", "python": "import sys\n\n\ndef findMaxValue():\n    res = 2\n    fact = 2\n    while True:\n        if fact < 0 or fact > sys.maxsize:\n            break\n        res += 1\n        fact = fact * res\n    return res - 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    print(\" Maximum \u2581 value \u2581 of \u2581 integer : \", findMaxValue())\n"}
{"text": "Count of m digit integers that are divisible by an integer n ", "java": "class Main {\n  static int findCount(int m, int n) {\n    int num1 = 0;\n    for (int i = 0; i < m; i++) num1 = (num1 * 10) + 9;\n    int num2 = 0;\n    for (int i = 0; i < (m - 1); i++) num2 = (num2 * 10) + 9;\n    return ((num1 / n) - (num2 / n));\n  }\n\n  public static void main(String[] args) {\n    int m = 2, n = 6;\n    System.out.println(findCount(m, n));\n  }\n}\n", "python": "def findCount(m, n):\n    num1 = 0\n    for i in range(0, m):\n        num1 = (num1 * 10) + 9\n    num2 = 0\n    for i in range(0, (m - 1)):\n        num2 = (num2 * 10) + 9\n    return int((num1 / n) - (num2 / n))\n\n\nm = 2\nn = 6\nprint(findCount(m, n))\n"}
{"text": "Check if a large number is divisible by 25 or not ", "java": "class IsDivisible {\n  static boolean isDivisibleBy25(String str) {\n    int n = str.length();\n    if (n == 1) return false;\n    return ((str.charAt(n - 1) - '0' == 0 && str.charAt(n - 2) - '0' == 0)\n        || ((str.charAt(n - 2) - '0') * 10 + (str.charAt(n - 1) - '0')) % 25 == 0);\n  }\n\n  public static void main(String[] args) {\n    String str = \"76955\";\n    if (isDivisibleBy25(str)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isDivisibleBy25(st):\n    n = len(st)\n    if n == 1:\n        return False\n    return (\n        (int)(st[n - 1]) == 0\n        and ((int)(st[n - 2]) == 0)\n        or ((int)(st[n - 2]) * 10 + (int)(st[n - 1]) % 25 == 0)\n    )\n\n\nst = \"76955\"\nif isDivisibleBy25(st):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Check a large number is divisible by 16 or not ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean check(String str) {\n    int n = str.length();\n    if (n == 0 && n == 1) return false;\n    if (n == 2) return (((str.charAt(n - 2) - '0') * 10 + (str.charAt(n - 1) - '0')) % 16 == 0);\n    if (n == 3)\n      return (((str.charAt(n - 3) - '0') * 100\n                  + (str.charAt(n - 2) - '0') * 10\n                  + (str.charAt(n - 1) - '0'))\n              % 16\n          == 0);\n    int last = str.charAt(n - 1) - '0';\n    int second_last = str.charAt(n - 2) - '0';\n    int third_last = str.charAt(n - 3) - '0';\n    int fourth_last = str.charAt(n - 4) - '0';\n    return ((fourth_last * 1000 + third_last * 100 + second_last * 10 + last) % 16 == 0);\n  }\n\n  public static void main(String args[]) {\n    String str = \"769528\";\n    if (check(str)) System.out.println(\" Yes \");\n    else System.out.println(\" No \u2581 \");\n  }\n}\n", "python": "def check(st):\n    n = len(st)\n    if n == 0 and n == 1:\n        return False\n    if n == 2:\n        return (int)(st[n - 2]) * 10 + ((int)(st[n - 1]) % 16 == 0)\n    if n == 3:\n        return (\n            (int)(st[n - 3]) * 100 + (int)(st[n - 2]) * 10 + (int)(st[n - 1])\n        ) % 16 == 0\n    last = (int)(st[n - 1])\n    second_last = (int)(st[n - 2])\n    third_last = (int)(st[n - 3])\n    fourth_last = (int)(st[n - 4])\n    return (fourth_last * 1000 + third_last * 100 + second_last * 10 + last) % 16 == 0\n\n\nst = \"769528\"\nif check(st):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Find Index of given fibonacci number in constant time ", "java": "import java.io.*;\n\nclass GFG {\n  static int findIndex(int n) {\n    if (n <= 1) return n;\n    int a = 0, b = 1, c = 1;\n    int res = 1;\n    while (c < n) {\n      c = a + b;\n      res++;\n      a = b;\n      b = c;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int result = findIndex(21);\n    System.out.println(result);\n  }\n}\n", "python": "def findIndex(n):\n    if n <= 1:\n        return n\n    a = 0\n    b = 1\n    c = 1\n    res = 1\n    while c < n:\n        c = a + b\n        res = res + 1\n        a = b\n        b = c\n    return res\n\n\nresult = findIndex(21)\nprint(result)\n"}
{"text": "Given a number n , find the first k digits of n ^ n ", "java": "import java.io.*;\nimport java.util.*;\n\nclass KDigitSquare {\n  public static long firstkdigits(int n, int k) {\n    double product = n * Math.log10(n);\n    double decimal_part = product - Math.floor(product);\n    decimal_part = Math.pow(10, decimal_part);\n    double digits = Math.pow(10, k - 1), i = 0;\n    return ((long) (decimal_part * digits));\n  }\n\n  public static void main(String[] args) {\n    int n = 1450;\n    int k = 6;\n    System.out.println(firstkdigits(n, k));\n  }\n}\n", "python": "def firstkdigits(n, k):\n    product = 1\n    for i in range(n):\n        product *= n\n    while (product // pow(10, k)) != 0:\n        product = product // 10\n    return product\n\n\nn = 15\nk = 4\nprint(firstkdigits(n, k))\n"}
{"text": "Multiply large integers under large modulo ", "java": "class GFG {\n  static long moduloMultiplication(long a, long b, long mod) {\n    long res = 0;\n    a %= mod;\n    while (b > 0) {\n      if ((b & 1) > 0) {\n        res = (res + a) % mod;\n      }\n      a = (2 * a) % mod;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    long a = 10123465234878998L;\n    long b = 65746311545646431L;\n    long m = 10005412336548794L;\n    System.out.print(moduloMultiplication(a, b, m));\n  }\n}\n", "python": "def moduloMultiplication(a, b, mod):\n    a = a % mod\n    while b:\n        if b & 1:\n            res = (res + a) % mod\n        a = (2 * a) % mod\n    return res\n\n\na = 10123465234878998\nb = 65746311545646431\nm = 10005412336548794\nprint(moduloMultiplication(a, b, m))\n"}
{"text": "Number of occurrences of 2 as a digit in numbers from 0 to n ", "java": "class GFG {\n  static int numberOf2sinRange(int n) {\n    String s = \" \";\n    for (int i = 0; i < n + 1; i++) s += String.valueOf(i);\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n      if (s.charAt(i) == '2') {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int n = 30;\n    System.out.println(numberOf2sinRange(n));\n  }\n}\n", "python": "def number0f2s(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 2:\n            count = count + 1\n        n = n // 10\n    return count\n\n\ndef numberOf2sinRange(n):\n    count = 0\n    for i in range(2, n + 1):\n        count = count + number0f2s(i)\n    return count\n\n\nprint(numberOf2sinRange(22))\nprint(numberOf2sinRange(100))\n"}
{"text": "Number of occurrences of 2 as a digit in numbers from 0 to n ", "java": "class GFG {\n  static int count2sinRangeAtDigit(int number, int d) {\n    int powerOf10 = (int) Math.pow(10, d);\n    int nextPowerOf10 = powerOf10 * 10;\n    int right = number % powerOf10;\n    int roundDown = number - number % nextPowerOf10;\n    int roundup = roundDown + nextPowerOf10;\n    int digit = (number / powerOf10) % 10;\n    if (digit < 2) {\n      return roundDown / 10;\n    }\n    if (digit == 2) {\n      return roundDown / 10 + right + 1;\n    }\n    return roundup / 10;\n  }\n\n  static int numberOf2sinRange(int number) {\n    String convert;\n    convert = String.valueOf(number);\n    String s = convert;\n    int len = s.length();\n    int count = 0;\n    for (int digit = 0; digit < len; digit++) {\n      count += count2sinRangeAtDigit(number, digit);\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(numberOf2sinRange(22));\n    System.out.println(numberOf2sinRange(100));\n  }\n}\n", "python": "def number0f2s(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 2:\n            count = count + 1\n        n = n // 10\n    return count\n\n\ndef numberOf2sinRange(n):\n    count = 0\n    for i in range(2, n + 1):\n        count = count + number0f2s(i)\n    return count\n\n\nprint(numberOf2sinRange(22))\nprint(numberOf2sinRange(100))\n"}
{"text": "Program to find Star number ", "java": "import java.io.*;\n\nclass GFG {\n  static int findStarNum(int n) {\n    return (6 * n * (n - 1) + 1);\n  }\n\n  public static void main(String args[]) {\n    int n = 3;\n    System.out.println(findStarNum(n));\n  }\n}\n", "python": "def findStarNum(n):\n    return 6 * n * (n - 1) + 1\n\n\nn = 3\nprint(findStarNum(n))\n"}
{"text": "Check if a large number is divisible by 5 or not ", "java": "class IsDivisible {\n  static boolean isDivisibleBy5(String str) {\n    int n = str.length();\n    return (((str.charAt(n - 1) - '0') == 0) || ((str.charAt(n - 1) - '0') == 5));\n  }\n\n  public static void main(String[] args) {\n    String str = \"76955\";\n    if (isDivisibleBy5(str)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isDivisibleBy5(st):\n    n = len(st)\n    return (st[n - 1] == \"0\") or (st[n - 1] == \"5\")\n\n\nst = \"76955\"\nif isDivisibleBy5(st):\n    print \" Yes \"\nelse:\n    print \" No \u2581 \"\n"}
{"text": "Tidy Number ( Digits in non ", "java": "class Test {\n  static boolean isTidy(int num) {\n    int prev = 10;\n    while (num != 0) {\n      int rem = num % 10;\n      num /= 10;\n      if (rem > prev) return false;\n      prev = rem;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    int num = 1556;\n    System.out.println(isTidy(num) ? \" Yes \" : \" No \");\n  }\n}\n", "python": "def isTidy(num):\n    prev = 10\n    while num:\n        rem = num % 10\n        num /= 10\n        if rem > prev:\n            return False\n        prev = rem\n    return True\n\n\nnum = 1556\nif isTidy(num):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Check if a larger number divisible by 36 ", "java": "class IsDivisible {\n  static boolean divisibleBy36(String num) {\n    int l = num.length();\n    if (l == 0) return false;\n    if (l == 1 && num.charAt(0) != '0') return false;\n    int two_digit_num = (num.charAt(l - 2) - '0') * 10 + (num.charAt(l - 1) - '0');\n    if (two_digit_num % 4 != 0) return false;\n    int sum = 0;\n    for (int i = 0; i < l; i++) sum += (num.charAt(i) - '0');\n    if (sum % 9 != 0) return false;\n    return true;\n  }\n\n  public static void main(String[] args) {\n    String num = \"92567812197966231384\";\n    if (divisibleBy36(num)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def divisibleBy36(num):\n    l = len(num)\n    if l == 0:\n        return \" No \"\n    if l == 1 and num[0] != \"0\":\n        return \" No \"\n    two_digit_num = ((int)(num[l - 2])) * 10 + (int)(num[l - 1])\n    if two_digit_num % 4 != 0:\n        return \" No \"\n    sm = 0\n    for i in range(0, l):\n        sm = sm + (int)(num[i])\n    if sm % 9 != 0:\n        return \" No \"\n    return \" Yes \"\n\n\nnum = \"92567812197966231384\"\nprint(divisibleBy36(num))\n"}
{"text": "Check if a large number is divisible by 8 or not ", "java": "class IsDivisible {\n  static boolean check(String str) {\n    int n = str.length();\n    if (n == 0) return false;\n    if (n == 1) return ((str.charAt(0) - '0') % 8 == 0);\n    if (n == 2) return (((str.charAt(n - 2) - '0') * 10 + (str.charAt(n - 1) - '0')) % 8 == 0);\n    int last = str.charAt(n - 1) - '0';\n    int second_last = str.charAt(n - 2) - '0';\n    int third_last = str.charAt(n - 3) - '0';\n    return ((third_last * 100 + second_last * 10 + last) % 8 == 0);\n  }\n\n  public static void main(String[] args) {\n    String str = \"76952\";\n    if (check(str)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def check(st):\n    n = len(st)\n    if n == 0:\n        return False\n    if n == 1:\n        return (int)(st[0]) % 8 == 0\n    if n == 2:\n        return (int)(st[n - 2]) * 10 + ((int)(str[n - 1]) % 8 == 0)\n    last = (int)(st[n - 1])\n    second_last = (int)(st[n - 2])\n    third_last = (int)(st[n - 3])\n    return (third_last * 100 + second_last * 10 + last) % 8 == 0\n\n\nst = \"76952\"\nif check(st):\n    print(\" Yes \")\nelse:\n    print(\" No \u2581 \")\n"}
{"text": "Check if a large number is divisible by 3 or not ", "java": "class IsDivisible {\n  static boolean check(String str) {\n    int n = str.length();\n    int digitSum = 0;\n    for (int i = 0; i < n; i++) digitSum += (str.charAt(i) - '0');\n    return (digitSum % 3 == 0);\n  }\n\n  public static void main(String[] args) {\n    String str = \"1332\";\n    if (check(str)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def check(num):\n    digitSum = 0\n    while num > 0:\n        rem = num % 10\n        digitSum = digitSum + rem\n        num = num / 10\n    return digitSum % 3 == 0\n\n\nnum = 1332\nif check(num):\n    print \" Yes \"\nelse:\n    print \" No \"\n"}
{"text": "Multiplicative order ", "java": "import java.io.*;\n\nclass GFG {\n  static int GCD(int a, int b) {\n    if (b == 0) return a;\n    return GCD(b, a % b);\n  }\n\n  static int multiplicativeOrder(int A, int N) {\n    if (GCD(A, N) != 1) return -1;\n    int result = 1;\n    int K = 1;\n    while (K < N) {\n      result = (result * A) % N;\n      if (result == 1) return K;\n      K++;\n    }\n    return -1;\n  }\n\n  public static void main(String args[]) {\n    int A = 4, N = 7;\n    System.out.println(multiplicativeOrder(A, N));\n  }\n}\n", "python": "def GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\n\n\ndef multiplicativeOrder(A, N):\n    if GCD(A, N) != 1:\n        return -1\n    result = 1\n    K = 1\n    while K < N:\n        result = (result * A) % N\n        if result == 1:\n            return K\n        K = K + 1\n    return -1\n\n\nA = 4\nN = 7\nprint(multiplicativeOrder(A, N))\n"}
{"text": "Sum of product of x and y such that floor ( n / x ) = y ", "java": "import java.io.*;\n\nclass GFG {\n  static int sumOfRange(int a, int b) {\n    int i = (a * (a + 1)) >> 1;\n    int j = (b * (b + 1)) >> 1;\n    return (i - j);\n  }\n\n  static int sumofproduct(int n) {\n    int sum = 0;\n    int root = (int) Math.sqrt(n);\n    for (int i = 1; i <= root; i++) {\n      int up = n / i;\n      int low = Math.max(n / (i + 1), root);\n      sum += (i * sumOfRange(up, low));\n      sum += (i * (n / i));\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(sumofproduct(n));\n  }\n}\n", "python": "def sumofproduct(n):\n    ans = 0\n    for x in range(1, n + 1):\n        y = int(n / x)\n        ans += y * x\n    return ans\n\n\nn = 10\nprint(sumofproduct(n))\n"}
{"text": "Minimum number of power terms with sum equal to n ", "java": "class GFG {\n  static int minPower(int n, int x) {\n    if (x == 1) return n;\n    int ans = 0;\n    while (n > 0) {\n      ans += (n % x);\n      n /= x;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 5, x = 3;\n    System.out.println(minPower(n, x));\n  }\n}\n", "python": "def minPower(n, x):\n    if x == 1:\n        return n\n    ans = 0\n    while n > 0:\n        ans += n % x\n        n //= x\n    return ans\n\n\nn = 5\nx = 3\nprint(minPower(n, x))\n"}
{"text": "Count numbers with same first and last digits ", "java": "import java.util.*;\n\nclass Digits {\n  public static int getFirstDigit(int x) {\n    while (x >= 10) x /= 10;\n    return x;\n  }\n\n  public static int getCountWithSameStartAndEndFrom1(int x) {\n    if (x < 10) return x;\n    int tens = x / 10;\n    int res = tens + 9;\n    int firstDigit = getFirstDigit(x);\n    int lastDigit = x % 10;\n    if (lastDigit < firstDigit) res--;\n    return res;\n  }\n\n  public static int getCountWithSameStartAndEnd(int start, int end) {\n    return getCountWithSameStartAndEndFrom1(end) - getCountWithSameStartAndEndFrom1(start - 1);\n  }\n\n  public static void main(String[] args) {\n    int start = 5, end = 40;\n    System.out.print(getCountWithSameStartAndEnd(start, end));\n  }\n}\n", "python": "def getFirstDigit(x):\n    while x >= 10:\n        x //= 10\n    return x\n\n\ndef getCountWithSameStartAndEndFrom1(x):\n    if x < 10:\n        return x\n    tens = x // 10\n    res = tens + 9\n    firstDigit = getFirstDigit(x)\n    lastDigit = x % 10\n    if lastDigit < firstDigit:\n        res = res - 1\n    return res\n\n\ndef getCountWithSameStartAndEnd(start, end):\n    return getCountWithSameStartAndEndFrom1(end) - getCountWithSameStartAndEndFrom1(\n        start - 1\n    )\n\n\nstart = 5\nend = 40\nprint(getCountWithSameStartAndEnd(start, end))\n"}
{"text": "Find sum of modulo K of first N natural number ", "java": "import java.io.*;\n\nclass GFG {\n  static int findSum(int N, int K) {\n    int ans = 0;\n    for (int i = 1; i <= N; i++) ans += (i % K);\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 10, K = 2;\n    System.out.println(findSum(N, K));\n  }\n}\n", "python": "def findSum(N, K):\n    ans = 0\n    for i in range(1, N + 1):\n        ans += i % K\n    return ans\n\n\nN = 10\nK = 2\nprint(findSum(N, K))\n"}
{"text": "Find sum of modulo K of first N natural number ", "java": "import java.io.*;\n\nclass GFG {\n  static int findSum(int N, int K) {\n    int ans = 0;\n    int y = N / K;\n    int x = N % K;\n    ans = (K * (K - 1) / 2) * y + (x * (x + 1)) / 2;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 10, K = 2;\n    System.out.println(findSum(N, K));\n  }\n}\n", "python": "def findSum(N, K):\n    ans = 0\n    for i in range(1, N + 1):\n        ans += i % K\n    return ans\n\n\nN = 10\nK = 2\nprint(findSum(N, K))\n"}
{"text": "Find the maximum number of handshakes ", "java": "class GFG {\n  static int maxHandshake(int n) {\n    return (n * (n - 1)) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(maxHandshake(n));\n  }\n}\n", "python": "def maxHandshake(n):\n    return int((n * (n - 1)) / 2)\n\n\nn = 10\nprint(maxHandshake(n))\n"}
{"text": "Keith Number ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static boolean isKeith(int x) {\n    ArrayList<Integer> terms = new ArrayList<Integer>();\n    while (temp > 0) {\n      terms.add(temp % 10);\n      temp = temp / 10;\n      n++;\n    }\n    Collections.reverse(terms);\n    int next_term = 0, i = n;\n    while (next_term < x) {\n      next_term = 0;\n      for (int j = 1; j <= n; j++) next_term += terms.get(i - j);\n      terms.add(next_term);\n      i++;\n    }\n    return (next_term == x);\n  }\n\n  public static void main(String[] args) {\n    if (isKeith(14)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n    if (isKeith(12)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n    if (isKeith(197)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isKeith(x):\n    terms = []\n    temp = x\n    while temp > 0:\n        terms.append(temp % 10)\n        temp = int(temp / 10)\n        n += 1\n    terms.reverse()\n    next_term = 0\n    i = n\n    while next_term < x:\n        next_term = 0\n        for j in range(1, n + 1):\n            next_term += terms[i - j]\n        terms.append(next_term)\n        i += 1\n    return next_term == x\n\n\nprint(\" Yes \") if (isKeith(14)) else print(\" No \")\nprint(\" Yes \") if (isKeith(12)) else print(\" No \")\nprint(\" Yes \") if (isKeith(197)) else print(\" No \")\n"}
{"text": "Check if a number can be expressed as a sum of consecutive numbers ", "java": "class Test {\n  static boolean canBeSumofConsec(int n) {\n    return (((n & (n - 1)) != 0) && n != 0);\n  }\n\n  public static void main(String[] args) {\n    int n = 15;\n    System.out.println(canBeSumofConsec(n) ? \" true \" : \" false \");\n  }\n}\n", "python": "def canBeSumofConsec(n):\n    return (n & (n - 1)) and n\n\n\nn = 15\nif canBeSumofConsec(n):\n    print(\" true \")\nelse:\n    print(\" false \")\n"}
{"text": "Even Fibonacci Numbers Sum ", "java": "import java.io.*;\n\nclass GFG {\n  static int evenFibSum(int limit) {\n    if (limit < 2) return 0;\n    long ef1 = 0, ef2 = 2;\n    long sum = ef1 + ef2;\n    while (ef2 <= limit) {\n      long ef3 = 4 * ef2 + ef1;\n      if (ef3 > limit) break;\n      ef1 = ef2;\n      ef2 = ef3;\n      sum += ef2;\n    }\n    return (int) sum;\n  }\n\n  public static void main(String[] args) {\n    int limit = 400;\n    System.out.println(evenFibSum(limit));\n  }\n}\n", "python": "def evenFibSum(limit):\n    if limit < 2:\n        return 0\n    ef1 = 0\n    ef2 = 2\n    sm = ef1 + ef2\n    while ef2 <= limit:\n        ef3 = 4 * ef2 + ef1\n        if ef3 > limit:\n            break\n        ef1 = ef2\n        ef2 = ef3\n        sm = sm + ef2\n    return sm\n\n\nlimit = 400\nprint(evenFibSum(limit))\n"}
{"text": "Nth Even Fibonacci Number ", "java": "class GFG {\n  static long evenFib(int n) {\n    if (n < 1) return n;\n    if (n == 1) return 2;\n    return ((4 * evenFib(n - 1)) + evenFib(n - 2));\n  }\n\n  public static void main(String[] args) {\n    int n = 7;\n    System.out.println(evenFib(n));\n  }\n}\n", "python": "def evenFib(n):\n    if n < 1:\n        return n\n    if n == 1:\n        return 2\n    return (4 * evenFib(n - 1)) + evenFib(n - 2)\n\n\nn = 7\nprint(evenFib(n))\n"}
{"text": "Repeated subtraction among two numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int countSteps(int x, int y) {\n    if (x % y == 0) return x / y;\n    return x / y + countSteps(y, x % y);\n  }\n\n  public static void main(String[] args) {\n    int x = 100, y = 19;\n    System.out.println(countSteps(x, y));\n  }\n}\n", "python": "import math\n\n\ndef countSteps(x, y):\n    if x % y == 0:\n        return math.floor(x / y)\n    return math.floor((x / y) + countSteps(y, x % y))\n\n\nx = 100\ny = 19\nprint(countSteps(x, y))\n"}
{"text": "Kaprekar Constant ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int kaprekarRec(int n, int prev) {\n    if (n == 0) return 0;\n    prev = n;\n    int[] digits = new int[4];\n    for (int i = 0; i < 4; i++) {\n      digits[i] = n % 10;\n      n = n / 10;\n    }\n    Arrays.sort(digits);\n    int asc = 0;\n    for (int i = 0; i < 4; i++) asc = asc * 10 + digits[i];\n    Arrays.sort(digits);\n    int desc = 0;\n    for (int i = 3; i >= 0; i--) desc = desc * 10 + digits[i];\n    int diff = Math.abs(asc - desc);\n    if (diff == prev) return diff;\n    return kaprekarRec(diff, prev);\n  }\n\n  static int kaprekar(int n) {\n    int prev = 0;\n    return kaprekarRec(n, prev);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(kaprekar(1000));\n    System.out.println(kaprekar(1112));\n    System.out.println(kaprekar(9812));\n  }\n}\n", "python": "def kaprekarRec(n, prev):\n    if n == 0:\n        return 0\n    prev = n\n    digits = [0] * 4\n    for i in range(4):\n        digits[i] = n % 10\n        n = int(n / 10)\n    digits.sort()\n    asc = 0\n    for i in range(4):\n        asc = asc * 10 + digits[i]\n    digits.sort()\n    desc = 0\n    for i in range(3, -1, -1):\n        desc = desc * 10 + digits[i]\n    diff = abs(asc - desc)\n    if diff == prev:\n        return diff\n    return kaprekarRec(diff, prev)\n\n\ndef kaprekar(n):\n    rev = 0\n    return kaprekarRec(n, rev)\n\n\nprint(kaprekar(1000))\nprint(kaprekar(1112))\nprint(kaprekar(9812))\n"}
{"text": "Breaking an Integer to get Maximum Product ", "java": "class GFG {\n  static int power(int x, int a) {\n    int res = 1;\n    while (a > 0) {\n      if ((a & 1) > 0) res = res * x;\n      x = x * x;\n      a >>= 1;\n    }\n    return res;\n  }\n\n  static int breakInteger(int N) {\n    if (N == 2) return 1;\n    if (N == 3) return 2;\n    int maxProduct = -1;\n    switch (N % 3) {\n      case 0:\n        maxProduct = power(3, N / 3);\n        break;\n      case 1:\n        maxProduct = 2 * 2 * power(3, (N / 3) - 1);\n        break;\n      case 2:\n        maxProduct = 2 * power(3, N / 3);\n        break;\n    }\n    return maxProduct;\n  }\n\n  public static void main(String[] args) {\n    int maxProduct = breakInteger(10);\n    System.out.println(maxProduct);\n  }\n}\n", "python": "def maxProd(n):\n    if n == 2 or n == 3:\n        return n - 1\n    res = 1\n    while n > 4:\n        n -= 3\n        res *= 3\n    return n * res\n\n\nif __name__ == \" _ _ main _ _ \":\n    print(\" Maximum \u2581 Product \u2581 is \", maxProd(45))\n"}
{"text": "Finding sum of digits of a number until sum becomes single digit ", "java": "import java.io.*;\n\nclass GFG {\n  static int digSum(int n) {\n    if (n == 0) return 0;\n    return (n % 9 == 0) ? 9 : (n % 9);\n  }\n\n  public static void main(String[] args) {\n    int n = 9999;\n    System.out.println(digSum(n));\n  }\n}\n", "python": "import math\n\n\ndef digSum(n):\n    sum = 0\n    while n > 0 or sum > 9:\n        if n == 0:\n            n = sum\n            sum = 0\n        sum += n % 10\n        n /= 10\n    return sum\n\n\nn = 1234\nprint(digSum(n))\n"}
{"text": "Multiples of 3 or 7 ", "java": "import java.io.*;\n\nclass GFG {\n  static int countMultiples(int n) {\n    return n / 3 + n / 7 - n / 21;\n  }\n\n  public static void main(String args[]) {\n    System.out.println(\" Count \u2581 = \u2581 \" + countMultiples(25));\n  }\n}\n", "python": "def countMultiples(n):\n    return n / 3 + n / 7 - n / 21\n\n\nn = (int)(countMultiples(25))\nprint(\" Count \u2581 = \", n)\n"}
{"text": "Almost Prime Numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int countPrimeFactors(int n) {\n    int count = 0;\n    while (n % 2 == 0) {\n      n = n / 2;\n      count++;\n    }\n    for (int i = 3; i <= Math.sqrt(n); i = i + 2) {\n      while (n % i == 0) {\n        n = n / i;\n        count++;\n      }\n    }\n    if (n > 2) count++;\n    return (count);\n  }\n\n  static void printKAlmostPrimes(int k, int n) {\n    for (int i = 1, num = 2; i <= n; num++) {\n      if (countPrimeFactors(num) == k) {\n        System.out.print(num + \" \u2581 \");\n        i++;\n      }\n    }\n    return;\n  }\n\n  public static void main(String[] args) {\n    int n = 10, k = 2;\n    System.out.println(\" First \u2581 \" + n + \" \u2581 \" + k + \" - almost \u2581 prime \u2581 numbers \u2581 : \u2581 \");\n    printKAlmostPrimes(k, n);\n  }\n}\n", "python": "import math\n\n\ndef countPrimeFactors(n):\n    count = 0\n    while n % 2 == 0:\n        n = n / 2\n        count += 1\n    i = 3\n    while i <= math.sqrt(n):\n        while n % i == 0:\n            n = n / i\n            count += 1\n        i = i + 2\n    if n > 2:\n        count += 1\n    return count\n\n\ndef printKAlmostPrimes(k, n):\n    i = 1\n    num = 2\n    while i <= n:\n        if countPrimeFactors(num) == k:\n            print(num, end=\" \")\n            print(\" \u2581 \", end=\" \")\n            i += 1\n        num += 1\n    return\n\n\nn = 10\nk = 2\nprint(\" First \u2581 n \u2581 k - almost \u2581 prime \u2581 numbers : \")\nprintKAlmostPrimes(k, n)\n"}
{"text": "Program to add two fractions ", "java": "class GFG {\n  static int gcd(int a, int b) {\n    if (a == 0) return b;\n    return gcd(b % a, a);\n  }\n\n  static void lowest(int den3, int num3) {\n    int common_factor = gcd(num3, den3);\n    den3 = den3 / common_factor;\n    num3 = num3 / common_factor;\n    System.out.println(num3 + \" / \" + den3);\n  }\n\n  static void addFraction(int num1, int den1, int num2, int den2) {\n    int den3 = gcd(den1, den2);\n    den3 = (den1 * den2) / den3;\n    int num3 = (num1) * (den3 / den1) + (num2) * (den3 / den2);\n    lowest(den3, num3);\n  }\n\n  public static void main(String[] args) {\n    int num1 = 1, den1 = 500, num2 = 2, den2 = 1500;\n    System.out.print(\n        num1 + \" / \" + den1 + \" \u2581 + \u2581 \" + num2 + \" / \" + den2 + \" \u2581 is \u2581 equal \u2581 to \u2581 \");\n    addFraction(num1, den1, num2, den2);\n  }\n}\n", "python": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef lowest(den3, num3):\n    common_factor = gcd(num3, den3)\n    den3 = int(den3 / common_factor)\n    num3 = int(num3 / common_factor)\n    print(num3, \" / \", den3)\n\n\ndef addFraction(num1, den1, num2, den2):\n    den3 = gcd(den1, den2)\n    den3 = (den1 * den2) / den3\n    num3 = (num1) * (den3 / den1) + (num2) * (den3 / den2)\n    lowest(den3, num3)\n\n\nnum1 = 1\nden1 = 500\nnum2 = 2\nden2 = 1500\nprint(num1, \" / \", den1, \" \u2581 + \u2581 \", num2, \" / \", den2, \" \u2581 is \u2581 equal \u2581 to \u2581 \", end=\" \")\naddFraction(num1, den1, num2, den2)\n"}
{"text": "The Lazy Caterer 's Problem ", "java": "import java.io.*;\n\nclass GFG {\n  static int findPieces(int n) {\n    return (n * (n + 1)) / 2 + 1;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(findPieces(1));\n    System.out.println(findPieces(2));\n    System.out.println(findPieces(3));\n    System.out.println(findPieces(50));\n  }\n}\n", "python": "def findPieces(n):\n    return (n * (n + 1)) // 2 + 1\n\n\nprint(findPieces(1))\nprint(findPieces(2))\nprint(findPieces(3))\nprint(findPieces(50))\n"}
{"text": "Count digits in a factorial ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static double M_E = 2.71828182845904523536;\n  public static double M_PI = 3.141592654;\n\n  static long findDigits(int n) {\n    if (n < 0) return 0;\n    if (n <= 1) return 1;\n    double x = (n * Math.log10(n / M_E) + Math.log10(2 * M_PI * n) / 2.0);\n    return (long) Math.floor(x) + 1;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(findDigits(1));\n    System.out.println(findDigits(50000000));\n    System.out.println(findDigits(1000000000));\n    System.out.println(findDigits(120));\n  }\n}\n", "python": "import math\n\n\ndef findDigits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    x = n * math.log10(n / math.e) + math.log10(2 * math.pi * n) / 2.0\n    return math.floor(x) + 1\n\n\nprint(findDigits(1))\nprint(findDigits(50000000))\nprint(findDigits(1000000000))\nprint(findDigits(120))\n"}
{"text": "Count digits in a factorial ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int findDigits(int n) {\n    if (n < 0) return 0;\n    if (n <= 1) return 1;\n    double digits = 0;\n    for (int i = 2; i <= n; i++) digits += Math.log10(i);\n    return (int) (Math.floor(digits)) + 1;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(findDigits(1));\n    System.out.println(findDigits(5));\n    System.out.println(findDigits(10));\n    System.out.println(findDigits(120));\n  }\n}\n", "python": "import math\n\n\ndef findDigits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    x = n * math.log10(n / math.e) + math.log10(2 * math.pi * n) / 2.0\n    return math.floor(x) + 1\n\n\nprint(findDigits(1))\nprint(findDigits(50000000))\nprint(findDigits(1000000000))\nprint(findDigits(120))\n"}
{"text": "Find number of subarrays with even sum ", "java": "import java.io.*;\n\nclass GFG {\n  static int countEvenSum(int arr[], int n) {\n    int result = 0;\n    for (int i = 0; i <= n - 1; i++) {\n      int sum = 0;\n      for (int j = i; j <= n - 1; j++) {\n        sum = sum + arr[j];\n        if (sum % 2 == 0) result++;\n      }\n    }\n    return (result);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 2, 3, 4, 1};\n    int n = arr.length;\n    System.out.print(\" The \u2581 Number \u2581 of \u2581 Subarrays \" + \" \u2581 with \u2581 even \u2581 sum \u2581 is \u2581 \");\n    System.out.println(countEvenSum(arr, n));\n  }\n}\n", "python": "def countEvenSum(arr, n):\n    res = 0\n    s = 0\n    for i in reversed(range(n)):\n        if arr[i] % 2 == 1:\n            s = n - i - 1 - s\n        else:\n            s = s + 1\n        res = res + s\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 2, 3, 4, 1]\n    n = len(arr)\n    print(\n        \" The \u2581 Number \u2581 of \u2581 Subarrays \u2581 with \u2581 even \" \" \u2581 sum \u2581 is \",\n        countEvenSum(arr, n),\n    )\n"}
{"text": "Find number of subarrays with even sum ", "java": "import java.io.*;\n\nclass GFG {\n  static int countEvenSum(int arr[], int n) {\n    int temp[] = {1, 0};\n    int result = 0, sum = 0;\n    for (int i = 0; i <= n - 1; i++) {\n      sum = ((sum + arr[i]) % 2 + 2) % 2;\n      temp[sum]++;\n    }\n    result = result + (temp[0] * (temp[0] - 1) / 2);\n    result = result + (temp[1] * (temp[1] - 1) / 2);\n    return (result);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 2, 3, 4, 1};\n    int n = arr.length;\n    System.out.println(\n        \" The \u2581 Number \u2581 of \u2581 Subarrays \" + \" \u2581 with \u2581 even \u2581 sum \u2581 is \u2581 \" + countEvenSum(arr, n));\n  }\n}\n", "python": "def countEvenSum(arr, n):\n    res = 0\n    s = 0\n    for i in reversed(range(n)):\n        if arr[i] % 2 == 1:\n            s = n - i - 1 - s\n        else:\n            s = s + 1\n        res = res + s\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 2, 3, 4, 1]\n    n = len(arr)\n    print(\n        \" The \u2581 Number \u2581 of \u2581 Subarrays \u2581 with \u2581 even \" \" \u2581 sum \u2581 is \",\n        countEvenSum(arr, n),\n    )\n"}
{"text": "Check if a number is a power of another number ", "java": "class GFG {\n  static boolean isPower(int x, int y) {\n    int res1 = (int) Math.log(y) / (int) Math.log(x);\n    double res2 = Math.log(y) / Math.log(x);\n    return (res1 == res2);\n  }\n\n  public static void main(String args[]) {\n    if (isPower(27, 729)) System.out.println(\"1\");\n    else System.out.println(\"0\");\n  }\n}\n", "python": "def isPower(x, y):\n    if x == 1:\n        return y == 1\n    pow = 1\n    while pow < y:\n        pow = pow * x\n    return pow == y\n\n\nif isPower(10, 1):\n    print(1)\nelse:\n    print(0)\nif isPower(1, 20):\n    print(1)\nelse:\n    print(0)\nif isPower(2, 128):\n    print(1)\nelse:\n    print(0)\nif isPower(2, 30):\n    print(1)\nelse:\n    print(0)\n"}
{"text": "Check perfect square using addition / subtraction ", "java": "public class GFG {\n  static boolean isPerfectSquare(int n) {\n    for (int sum = 0, i = 1; sum < n; i += 2) {\n      sum += i;\n      if (sum == n) return true;\n    }\n    return false;\n  }\n\n  public static void main(String args[]) {\n    if (isPerfectSquare(35)) System.out.println(\" Yes \");\n    else System.out.println(\" NO \");\n    if (isPerfectSquare(49)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isPerfectSquare(n):\n    i = 1\n    the_sum = 0\n    while the_sum < n:\n        the_sum += i\n        if the_sum == n:\n            return True\n        i += 2\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    print(\" Yes \") if isPerfectSquare(35) else print(\" NO \")\n    print(\" Yes \") if isPerfectSquare(49) else print(\" NO \")\n"}
{"text": "Count ' d ' digit positive integers with 0 as a digit ", "java": "import java.io.*;\n\nclass GFG {\n  static int findCount(int d) {\n    return 9 * ((int) (Math.pow(10, d - 1)) - (int) (Math.pow(9, d - 1)));\n  }\n\n  public static void main(String args[]) {\n    int d = 1;\n    System.out.println(findCount(d));\n    d = 2;\n    System.out.println(findCount(d));\n    d = 4;\n    System.out.println(findCount(d));\n  }\n}\n", "python": "import math\n\n\ndef findCount(d):\n    return 9 * ((int)(math.pow(10, d - 1)) - (int)(math.pow(9, d - 1)))\n\n\nd = 1\nprint(findCount(d))\nd = 2\nprint(findCount(d))\nd = 4\nprint(findCount(d))\n"}
{"text": "Dyck path ", "java": "class GFG {\n  public static int countDyckPaths(int n) {\n    int res = 1;\n    for (int i = 0; i < n; ++i) {\n      res *= (2 * n - i);\n      res /= (i + 1);\n    }\n    return res / (n + 1);\n  }\n\n  public static void main(String args[]) {\n    int n = 4;\n    System.out.println(\" Number \u2581 of \u2581 Dyck \u2581 Paths \u2581 is \u2581 \" + countDyckPaths(n));\n  }\n}\n", "python": "def countDyckPaths(n):\n    res = 1\n    for i in range(0, n):\n        res *= 2 * n - i\n        res /= i + 1\n    return res / (n + 1)\n\n\nn = 4\nprint(\" Number \u2581 of \u2581 Dyck \u2581 Paths \u2581 is \u2581 \", str(int(countDyckPaths(n))))\n"}
{"text": "Triangular Numbers ", "java": "class GFG {\n  static boolean isTriangular(int num) {\n    if (num < 0) return false;\n    int sum = 0;\n    for (int n = 1; sum <= num; n++) {\n      sum = sum + n;\n      if (sum == num) return true;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 55;\n    if (isTriangular(n)) System.out.print(\" The \u2581 number \u2581 \" + \" is \u2581 a \u2581 triangular \u2581 number \");\n    else System.out.print(\" The \u2581 number \" + \" \u2581 is \u2581 NOT \u2581 a \u2581 triangular \u2581 number \");\n  }\n}\n", "python": "def isTriangular(num):\n    if num < 0:\n        return False\n    sum, n = 0, 1\n    while sum <= num:\n        sum = sum + n\n        if sum == num:\n            return True\n        n += 1\n    return False\n\n\nn = 55\nif isTriangular(n):\n    print(\" The \u2581 number \u2581 is \u2581 a \u2581 triangular \u2581 number \")\nelse:\n    print(\" The \u2581 number \u2581 is \u2581 NOT \u2581 a \u2581 triangular \u2581 number \")\n"}
{"text": "Triangular Numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean isTriangular(int num) {\n    if (num < 0) return false;\n    int c = (-2 * num);\n    int b = 1, a = 1;\n    int d = (b * b) - (4 * a * c);\n    if (d < 0) return false;\n    float root1 = (-b + (float) Math.sqrt(d)) / (2 * a);\n    float root2 = (-b - (float) Math.sqrt(d)) / (2 * a);\n    if (root1 > 0 && Math.floor(root1) == root1) return true;\n    if (root2 > 0 && Math.floor(root2) == root2) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int num = 55;\n    if (isTriangular(num))\n      System.out.println(\" The \u2581 number \u2581 is \" + \" \u2581 a \u2581 triangular \u2581 number \");\n    else System.out.println(\" The \u2581 number \u2581 \" + \" is \u2581 NOT \u2581 a \u2581 triangular \u2581 number \");\n  }\n}\n", "python": "def isTriangular(num):\n    if num < 0:\n        return False\n    sum, n = 0, 1\n    while sum <= num:\n        sum = sum + n\n        if sum == num:\n            return True\n        n += 1\n    return False\n\n\nn = 55\nif isTriangular(n):\n    print(\" The \u2581 number \u2581 is \u2581 a \u2581 triangular \u2581 number \")\nelse:\n    print(\" The \u2581 number \u2581 is \u2581 NOT \u2581 a \u2581 triangular \u2581 number \")\n"}
{"text": "Frobenius coin problem ", "java": "import java.io.*;\n\nclass GFG {\n  static int gcd(int a, int b) {\n    int c;\n    while (a != 0) {\n      c = a;\n      a = b % a;\n      b = c;\n    }\n    return b;\n  }\n\n  static void forbenius(int X, int Y) {\n    if (gcd(X, Y) != 1) {\n      System.out.println(\" NA \");\n      return;\n    }\n    int A = (X * Y) - (X + Y);\n    int N = (X - 1) * (Y - 1) / 2;\n    System.out.println(\" Largest \u2581 Amount \u2581 = \u2581 \" + A);\n    System.out.println(\" Total \u2581 Count \u2581 = \u2581 \" + N);\n  }\n\n  public static void main(String[] args) {\n    int X = 2, Y = 5;\n    forbenius(X, Y);\n    X = 5;\n    Y = 10;\n    System.out.println();\n    forbenius(X, Y);\n  }\n}\n", "python": "def gcd(a, b):\n    while a != 0:\n        c = a\n        a = b % a\n        b = c\n    return b\n\n\ndef forbenius(X, Y):\n    if gcd(X, Y) != 1:\n        print(\" NA \")\n        return\n    A = (X * Y) - (X + Y)\n    N = (X - 1) * (Y - 1) // 2\n    print(\" Largest \u2581 Amount \u2581 = \", A)\n    print(\" Total \u2581 Count \u2581 = \", N)\n\n\nX = 2\nY = 5\nforbenius(X, Y)\nX = 5\nY = 10\nprint(\" \")\nforbenius(X, Y)\n"}
{"text": "Gray to Binary and Binary to Gray conversion ", "java": "import java.io.*;\n\nclass code_conversion {\n  char xor_c(char a, char b) {\n    return (a == b) ? '0' : '1';\n  }\n\n  char flip(char c) {\n    return (c == '0') ? '1' : '0';\n  }\n\n  String binarytoGray(String binary) {\n    String gray = \" \";\n    gray += binary.charAt(0);\n    for (int i = 1; i < binary.length(); i++) {\n      gray += xor_c(binary.charAt(i - 1), binary.charAt(i));\n    }\n    return gray;\n  }\n\n  String graytoBinary(String gray) {\n    String binary = \" \";\n    binary += gray.charAt(0);\n    for (int i = 1; i < gray.length(); i++) {\n      if (gray.charAt(i) == '0') binary += binary.charAt(i - 1);\n      else binary += flip(binary.charAt(i - 1));\n    }\n    return binary;\n  }\n\n  public static void main(String args[]) throws IOException {\n    code_conversion ob = new code_conversion();\n    String binary = \"01001\";\n    System.out.println(\" Gray \u2581 code \u2581 of \u2581 \" + binary + \" \u2581 is \u2581 \" + ob.binarytoGray(binary));\n    String gray = \"01101\";\n    System.out.println(\" Binary \u2581 code \u2581 of \u2581 \" + gray + \" \u2581 is \u2581 \" + ob.graytoBinary(gray));\n  }\n}\n", "python": "def greyConverter(n):\n    return n ^ (n >> 1)\n\n\nn = 3\nprint(greyConverter(n))\nn = 9\nprint(greyConverter(n))\n"}
{"text": "Solving f ( n ) = ( 1 ) + ( 2 * 3 ) + ( 4 * 5 * 6 ) . . . n using Recursion ", "java": "class GFG {\n  static int seriesSum(int calculated, int current, int N) {\n    int i, cur = 1;\n    if (current == N + 1) return 0;\n    for (i = calculated; i < calculated + current; i++) cur *= i;\n    return cur + seriesSum(i, current + 1, N);\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.println(seriesSum(1, 1, N));\n  }\n}\n", "python": "def seriesSum(calculated, current, N):\n    i = calculated\n    cur = 1\n    if current == N + 1:\n        return 0\n    while i < calculated + current:\n        cur *= i\n        i += 1\n    return cur + seriesSum(i, current + 1, N)\n\n\nN = 5\nprint(seriesSum(1, 1, N))\n"}
{"text": "How to avoid overflow in modular multiplication ? ", "java": "class GFG {\n  static long mulmod(long a, long b, long mod) {\n    a = a % mod;\n    while (b > 0) {\n      if (b % 2 == 1) {\n        res = (res + a) % mod;\n      }\n      a = (a * 2) % mod;\n      b /= 2;\n    }\n    return res % mod;\n  }\n\n  public static void main(String[] args) {\n    long a = 9223372036854775807L, b = 9223372036854775807L;\n    System.out.println(mulmod(a, b, 100000000000L));\n  }\n}\n", "python": "def mulmod(a, b, mod):\n    a = a % mod\n    while b > 0:\n        if b % 2 == 1:\n            res = (res + a) % mod\n        a = (a * 2) % mod\n        b //= 2\n    return res % mod\n\n\na = 9223372036854775807\nb = 9223372036854775807\nprint(mulmod(a, b, 100000000000))\n"}
{"text": "Compute n ! under modulo p ", "java": "import java.io.*;\n\nclass GFG {\n  static int modFact(int n, int p) {\n    if (n >= p) return 0;\n    int result = 1;\n    for (int i = 1; i <= n; i++) result = (result * i) % p;\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int n = 25, p = 29;\n    System.out.print(modFact(n, p));\n  }\n}\n", "python": "def power(x, y, p):\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        x = (x * x) % p\n    return res\n\n\ndef modInverse(a, p):\n    return power(a, p - 2, p)\n\n\ndef modFact(n, p):\n    if p <= n:\n        return 0\n    res = p - 1\n    for i in range(n + 1, p):\n        res = (res * modInverse(i, p)) % p\n    return res\n\n\nn = 25\np = 29\nprint(modFact(n, p))\n"}
{"text": "Chinese Remainder Theorem ", "java": "import java.io.*;\n\nclass GFG {\n  static int inv(int a, int m) {\n    int m0 = m, t, q;\n    int x0 = 0, x1 = 1;\n    if (m == 1) return 0;\n    while (a > 1) {\n      q = a / m;\n      t = m;\n      m = a % m;\n      a = t;\n      t = x0;\n      x0 = x1 - q * x0;\n      x1 = t;\n    }\n    if (x1 < 0) x1 += m0;\n    return x1;\n  }\n\n  static int findMinX(int num[], int rem[], int k) {\n    int prod = 1;\n    for (int i = 0; i < k; i++) prod *= num[i];\n    int result = 0;\n    for (int i = 0; i < k; i++) {\n      int pp = prod / num[i];\n      result += rem[i] * inv(pp, num[i]) * pp;\n    }\n    return result % prod;\n  }\n\n  public static void main(String args[]) {\n    int num[] = {3, 4, 5};\n    int rem[] = {2, 3, 1};\n    int k = num.length;\n    System.out.println(\" x \u2581 is \u2581 \" + findMinX(num, rem, k));\n  }\n}\n", "python": "def inv(a, m):\n    m0 = m\n    x0 = 0\n    x1 = 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = x0\n        x0 = x1 - q * x0\n        x1 = t\n    if x1 < 0:\n        x1 = x1 + m0\n    return x1\n\n\ndef findMinX(num, rem, k):\n    prod = 1\n    for i in range(0, k):\n        prod = prod * num[i]\n    result = 0\n    for i in range(0, k):\n        pp = prod // num[i]\n        result = result + rem[i] * inv(pp, num[i]) * pp\n    return result % prod\n\n\nnum = [3, 4, 5]\nrem = [2, 3, 1]\nk = len(num)\nprint(\" x \u2581 is \u2581 \", findMinX(num, rem, k))\n"}
{"text": "Chinese Remainder Theorem ", "java": "import java.io.*;\n\nclass GFG {\n  static int findMinX(int num[], int rem[], int k) {\n    while (true) {\n      int j;\n      for (j = 0; j < k; j++) if (x % num[j] != rem[j]) break;\n      if (j == k) return x;\n      x++;\n    }\n  }\n\n  public static void main(String args[]) {\n    int num[] = {3, 4, 5};\n    int rem[] = {2, 3, 1};\n    int k = num.length;\n    System.out.println(\" x \u2581 is \u2581 \" + findMinX(num, rem, k));\n  }\n}\n", "python": "def inv(a, m):\n    m0 = m\n    x0 = 0\n    x1 = 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = x0\n        x0 = x1 - q * x0\n        x1 = t\n    if x1 < 0:\n        x1 = x1 + m0\n    return x1\n\n\ndef findMinX(num, rem, k):\n    prod = 1\n    for i in range(0, k):\n        prod = prod * num[i]\n    result = 0\n    for i in range(0, k):\n        pp = prod // num[i]\n        result = result + rem[i] * inv(pp, num[i]) * pp\n    return result % prod\n\n\nnum = [3, 4, 5]\nrem = [2, 3, 1]\nk = len(num)\nprint(\" x \u2581 is \u2581 \", findMinX(num, rem, k))\n"}
{"text": "Count number of squares in a rectangle ", "java": "import java.util.*;\n\nclass GFG {\n  static int countSquares(int m, int n) {\n    if (n < m) {\n      int temp = m;\n      m = n;\n      n = temp;\n    }\n    return n * (n + 1) * (3 * m - n + 1) / 6;\n  }\n\n  public static void main(String[] args) {\n    int m = 4;\n    int n = 3;\n    System.out.print(\" Count \u2581 of \u2581 squares \u2581 is \u2581 \" + countSquares(m, n));\n  }\n}\n", "python": "def countSquares(m, n):\n    if n < m:\n        temp = m\n        m = n\n        n = temp\n    return m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    m = 4\n    n = 3\n    print(\" Count \u2581 of \u2581 squares \u2581 is \u2581 \", countSquares(m, n))\n"}
{"text": "Check if a given number is Fancy ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isFancy(String num) {\n    Map<Character, Character> fp = new HashMap<Character, Character>();\n    fp.put('0', '0');\n    fp.put('1', '1');\n    fp.put('6', '9');\n    fp.put('8', '8');\n    fp.put('9', '6');\n    int n = num.length();\n    int l = 0, r = n - 1;\n    while (l <= r) {\n      if (!fp.containsKey(num.charAt(l)) || fp.get(num.charAt(l)) != num.charAt(r)) return false;\n      l++;\n      r--;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    String str = \"9088806\";\n    if (isFancy(str)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isFancy(num):\n    fp = {}\n    fp[\"0\"] = \"0\"\n    fp[\"1\"] = \"1\"\n    fp[\"6\"] = \"9\"\n    fp[\"8\"] = \"8\"\n    fp[\"9\"] = \"6\"\n    n = len(num)\n    l = 0\n    r = n - 1\n    while l <= r:\n        if num[l] not in fp or fp[num[l]] != num[r]:\n            return False\n        l += 1\n        r -= 1\n    return True\n\n\nif __name__ == \" _ _ main _ _ \":\n    st = \"9088806\"\n    if isFancy(st):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Perfect Number ", "java": "class GFG {\n  static boolean isPerfect(int n) {\n    int sum = 1;\n    for (int i = 2; i * i <= n; i++) {\n      if (n % i == 0) {\n        if (i * i != n) sum = sum + i + n / i;\n        else sum = sum + i;\n      }\n    }\n    if (sum == n && n != 1) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(\" Below \u2581 are \u2581 all \u2581 perfect \" + \" numbers \u2581 till \u2581 10000\");\n    for (int n = 2; n < 10000; n++)\n      if (isPerfect(n)) System.out.println(n + \" \u2581 is \u2581 a \u2581 perfect \u2581 number \");\n  }\n}\n", "python": "def isPerfect(n):\n    sum = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            sum = sum + i + n / i\n        i += 1\n    return True if sum == n and n != 1 else False\n\n\nprint(\" Below \u2581 are \u2581 all \u2581 perfect \u2581 numbers \u2581 till \u2581 10000\")\nn = 2\nfor n in range(10000):\n    if isPerfect(n):\n        print(n, \" \u2581 is \u2581 a \u2581 perfect \u2581 number \")\n    DEDENT\n"}
{"text": "Program to find remainder without using modulo or % operator ", "java": "import java.util.*;\n\nclass GFG {\n  static int getRemainder(int num, int divisor) {\n    while (num >= divisor) num -= divisor;\n    return num;\n  }\n\n  public static void main(String[] args) {\n    int num = 100, divisor = 7;\n    System.out.println(getRemainder(num, divisor));\n  }\n}\n", "python": "def getRemainder(num, divisor):\n    return num - divisor * (num // divisor)\n\n\nnum = 100\ndivisor = 7\nprint(getRemainder(num, divisor))\n"}
{"text": "Efficient Program to Compute Sum of Series 1 / 1 ! + 1 / 2 ! + 1 / 3 ! + 1 / 4 ! + . . + 1 / n ! ", "java": "import java.io.*;\n\nclass GFG {\n  static int factorial(int n) {\n    int res = 1;\n    for (int i = 2; i <= n; i++) res *= i;\n    return res;\n  }\n\n  static double sum(int n) {\n    double sum = 0;\n    for (int i = 1; i <= n; i++) sum += 1.0 / factorial(i);\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    System.out.println(sum(n));\n  }\n}\n", "python": "def sum(n):\n    sum = 0\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n        sum += 1.0 / fact\n    print(sum)\n\n\nn = 5\nsum(n)\n"}
{"text": "Find the number of valid parentheses expressions of given length ", "java": "class GFG {\n  static long binomialCoeff(int n, int k) {\n    long res = 1;\n    if (k > n - k) k = n - k;\n    for (int i = 0; i < k; ++i) {\n      res *= (n - i);\n      res /= (i + 1);\n    }\n    return res;\n  }\n\n  static long catalan(int n) {\n    long c = binomialCoeff(2 * n, n);\n    return c / (n + 1);\n  }\n\n  static long findWays(int n) {\n    if ((n & 1) != 0) return 0;\n    return catalan(n / 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    System.out.println(\n        \" Total \u2581 possible \u2581 expressions \u2581 of \u2581 length \u2581 \" + n + \" \u2581 is \u2581 \" + findWays(6));\n  }\n}\n", "python": "def binomialCoeff(n, k):\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= n - i\n        res /= i + 1\n    return int(res)\n\n\ndef catalan(n):\n    c = binomialCoeff(2 * n, n)\n    return int(c / (n + 1))\n\n\ndef findWays(n):\n    if n & 1:\n        return 0\n    return catalan(int(n / 2))\n\n\nn = 6\nprint(\" Total \u2581 possible \u2581 expressions \u2581 of \u2581 length \", n, \" is \", findWays(6))\n"}
{"text": "Program to find LCM of two numbers ", "java": "class Test {\n  static int gcd(int a, int b) {\n    if (a == 0) return b;\n    return gcd(b % a, a);\n  }\n\n  static int lcm(int a, int b) {\n    return (a / gcd(a, b)) * b;\n  }\n\n  public static void main(String[] args) {\n    int a = 15, b = 20;\n    System.out.println(\" LCM \u2581 of \u2581 \" + a + \" \u2581 and \u2581 \" + b + \" \u2581 is \u2581 \" + lcm(a, b));\n  }\n}\n", "python": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef lcm(a, b):\n    return (a / gcd(a, b)) * b\n\n\na = 15\nb = 20\nprint(\" LCM \u2581 of \", a, \" and \", b, \" is \", lcm(a, b))\n"}
{"text": "Program to convert a given number to words ", "java": "class GFG {\n  static void convert_to_words(char[] num) {\n    int len = num.length;\n    if (len == 0) {\n      System.out.println(\" empty \u2581 string \");\n      return;\n    }\n    if (len > 4) {\n      System.out.println(\" Length \u2581 more \u2581 than \u2581 4 \u2581 is \u2581 not \u2581 supported \");\n      return;\n    }\n    String[] single_digits =\n        new String[] {\n          \" zero \", \" one \", \" two \", \" three \", \" four \", \" five \", \" six \", \" seven \", \" eight \",\n          \" nine \"\n        };\n    String[] two_digits =\n        new String[] {\n          \" \",\n          \" ten \",\n          \" eleven \",\n          \" twelve \",\n          \" thirteen \",\n          \" fourteen \",\n          \" fifteen \",\n          \" sixteen \",\n          \" seventeen \",\n          \" eighteen \",\n          \" nineteen \"\n        };\n    String[] tens_multiple =\n        new String[] {\n          \" \",\n          \" \",\n          \" twenty \",\n          \" thirty \",\n          \" forty \",\n          \" fifty \",\n          \" sixty \",\n          \" seventy \",\n          \" eighty \",\n          \" ninety \"\n        };\n    String[] tens_power = new String[] {\" hundred \", \" thousand \"};\n    System.out.print(String.valueOf(num) + \" : \u2581 \");\n    if (len == 1) {\n      System.out.println(single_digits[num[0] - '0']);\n      return;\n    }\n    int x = 0;\n    while (x < num.length) {\n      if (len >= 3) {\n        if (num[x] - '0' != 0) {\n          System.out.print(single_digits[num[x] - '0'] + \" \u2581 \");\n          System.out.print(tens_power[len - 3] + \" \u2581 \");\n        }\n        --len;\n      } else {\n        if (num[x] - '0' == 1) {\n          int sum = num[x] - '0' + num[x + 1] - '0';\n          System.out.println(two_digits[sum]);\n          return;\n        } else if (num[x] - '0' == 2 && num[x + 1] - '0' == 0) {\n          System.out.println(\" twenty \");\n          return;\n        } else {\n          int i = (num[x] - '0');\n          if (i > 0) System.out.print(tens_multiple[i] + \" \u2581 \");\n          else System.out.print(\" \");\n          ++x;\n          if (num[x] - '0' != 0) System.out.println(single_digits[num[x] - '0']);\n        }\n      }\n      ++x;\n    }\n  }\n\n  public static void main(String[] args) {\n    convert_to_words(\"9923\".toCharArray());\n    convert_to_words(\"523\".toCharArray());\n    convert_to_words(\"89\".toCharArray());\n    convert_to_words(\"8\".toCharArray());\n  }\n}\n", "python": "one = [\n    \" \",\n    \" one \u2581 \",\n    \" two \u2581 \",\n    \" three \u2581 \",\n    \" four \u2581 \",\n    \" five \u2581 \",\n    \" six \u2581 \",\n    \" seven \u2581 \",\n    \" eight \u2581 \",\n    \" nine \u2581 \",\n    \" ten \u2581 \",\n    \" eleven \u2581 \",\n    \" twelve \u2581 \",\n    \" thirteen \u2581 \",\n    \" fourteen \u2581 \",\n    \" fifteen \u2581 \",\n    \" sixteen \u2581 \",\n    \" seventeen \u2581 \",\n    \" eighteen \u2581 \",\n    \" nineteen \u2581 \",\n]\nten = [\n    \" \",\n    \" \",\n    \" twenty \u2581 \",\n    \" thirty \u2581 \",\n    \" forty \u2581 \",\n    \" fifty \u2581 \",\n    \" sixty \u2581 \",\n    \" seventy \u2581 \",\n    \" eighty \u2581 \",\n    \" ninety \u2581 \",\n]\n\n\ndef numToWords(n, s):\n    str = \" \"\n    if n > 19:\n        str += ten[n // 10] + one[n % 10]\n    else:\n        str += one[n]\n    if n:\n        str += s\n    return str\n\n\ndef convertToWords(n):\n    out = \" \"\n    out += numToWords((n // 10000000), \" crore \u2581 \")\n    out += numToWords(((n // 100000) % 100), \" lakh \u2581 \")\n    out += numToWords(((n // 1000) % 100), \" thousand \u2581 \")\n    out += numToWords(((n // 100) % 10), \" hundred \u2581 \")\n    if n > 100 and n % 100:\n        out += \" and \u2581 \"\n    out += numToWords((n % 100), \" \")\n    return out\n\n\nn = 438237764\nprint(convertToWords(n))\n"}
{"text": "Find XOR sum of Bitwise AND of all pairs from given two Arrays ", "java": "import java.io.*;\n\nclass GFG {\n  public static int XorSum(int A[], int B[], int N, int M) {\n    int ans = -1;\n    for (int i = 0; i < N; i++) {\n      for (int j = 0; j < M; j++) {\n        if (ans == -1) ans = (A[i] & B[j]);\n        else ans ^= (A[i] & B[j]);\n      }\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {3, 5};\n    int B[] = {2, 3};\n    int N = A.length;\n    int M = B.length;\n    System.out.println(XorSum(A, B, N, M));\n  }\n}\n", "python": "def XorSum(A, B, N, M):\n    ans1 = 0\n    ans2 = 0\n    for i in range(N):\n        ans1 = ans1 ^ A[i]\n    for i in range(M):\n        ans2 = ans2 ^ B[i]\n    return ans1 & ans2\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [3, 5]\n    B = [2, 3]\n    N = len(A)\n    M = len(B)\n    print(XorSum(A, B, N, M))\n"}
{"text": "Count subarrays made up of elements having exactly K set bits ", "java": "import java.util.*;\n\nclass GFG {\n  static int countSet(int N) {\n    int ans = 0;\n    while (N > 0) {\n      ans += N & 1;\n      N >>= 1;\n    }\n    return ans;\n  }\n\n  static int countSub(int[] arr, int k) {\n    int ans = 0;\n    int setK = 0;\n    for (int i = 0; i < 5; i++) {\n      if (countSet(arr[i]) == k) setK += 1;\n      else setK = 0;\n      ans += setK;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 2, 1, 5, 6};\n    int K = 2;\n    System.out.print(countSub(arr, K));\n  }\n}\n", "python": "def countSet(N):\n    ans = 0\n    while N:\n        ans += N & 1\n        N >>= 1\n    return ans\n\n\ndef countSub(arr, k):\n    ans = 0\n    setK = 0\n    for i in arr:\n        if countSet(i) == k:\n            setK += 1\n        else:\n            setK = 0\n        ans += setK\n    return ans\n\n\narr = [4, 2, 1, 5, 6]\nK = 2\nprint(countSub(arr, K))\n"}
{"text": "Maximum number of consecutive 1 s after flipping all 0 s in a K length subarray ", "java": "import java.util.*;\n\nclass GFG {\n  static int findmax(int arr[], int n, int k) {\n    int trav, i;\n    int c = 0, maximum = 0;\n    for (i = 0; i < n - k + 1; i++) {\n      trav = i - 1;\n      c = 0;\n      while (trav >= 0 && arr[trav] == 1) {\n        trav--;\n        c++;\n      }\n      trav = i + k;\n      while (trav < n && arr[trav] == 1) {\n        trav++;\n        c++;\n      }\n      c += k;\n      if (c > maximum) maximum = c;\n    }\n    return maximum;\n  }\n\n  public static void main(String args[]) {\n    int k = 3;\n    int arr[] = {0, 0, 1, 1, 0, 0, 0, 0};\n    int n = arr.length;\n    int ans = findmax(arr, n, k);\n    System.out.println(ans);\n  }\n}\n", "python": "def findmax(arr, n, k):\n    trav, i = 0, 0\n    c = 0\n    maximum = 0\n    while i < n - k + 1:\n        trav = i - 1\n        c = 0\n        while trav >= 0 and arr[trav] == 1:\n            trav -= 1\n            c += 1\n        trav = i + k\n        while trav < n and arr[trav] == 1:\n            trav += 1\n            c += 1\n        c += k\n        if c > maximum:\n            maximum = c\n        i += 1\n    return maximum\n\n\nif __name__ == \" _ _ main _ _ \":\n    k = 3\n    arr = [0, 0, 1, 1, 0, 0, 0, 0]\n    n = len(arr)\n    ans = findmax(arr, n, k)\n    print(ans)\n"}
{"text": "Minimum XOR of OR and AND of any pair in the Array ", "java": "import java.io.*;\nimport java.util.Arrays;\n\nclass GFG {\n  static int maxAndXor(int arr[], int n) {\n    int ans = Integer.MAX_VALUE;\n    Arrays.sort(arr);\n    for (int i = 0; i < n - 1; i++) {\n      ans = Math.min(ans, arr[i] ^ arr[i + 1]);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = new int[] {1, 2, 3, 4, 5};\n    int N = arr.length;\n    System.out.println(maxAndXor(arr, N));\n  }\n}\n", "python": "def maxAndXor(arr, n):\n    ans = float(\" inf \")\n    arr.sort()\n    for i in range(n - 1):\n        ans = min(ans, arr[i] ^ arr[i + 1])\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4, 5]\n    N = len(arr)\n    print(maxAndXor(arr, N))\n"}
{"text": "Count of subarrays of size K with elements having even frequencies ", "java": "import java.util.*;\n\nclass GFG {\n  static int countSubarray(int[] arr, int K, int N) {\n    if (K % 2 != 0) return 0;\n    if (N < K) return 0;\n    int start = 0;\n    int i = 0;\n    int count = 0;\n    int currXor = arr[i++];\n    while (i < K) {\n      currXor ^= arr[i];\n      i++;\n    }\n    if (currXor == 0) count++;\n    currXor ^= arr[start++];\n    while (i < N) {\n      currXor ^= arr[i];\n      i++;\n      if (currXor == 0) count++;\n      currXor ^= arr[start++];\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {2, 4, 4, 2, 2, 4};\n    int K = 4;\n    int N = arr.length;\n    System.out.println(countSubarray(arr, K, N));\n  }\n}\n", "python": "def countSubarray(arr, K, N):\n    if K % 2 != 0:\n        return 0\n    if N < K:\n        return 0\n    start = 0\n    i = 0\n    count = 0\n    currXor = arr[i]\n    i += 1\n    while i < K:\n        currXor ^= arr[i]\n        i += 1\n    if currXor == 0:\n        count += 1\n    currXor ^= arr[start]\n    start += 1\n    while i < N:\n        currXor ^= arr[i]\n        i += 1\n        if currXor == 0:\n            count += 1\n        currXor ^= arr[start]\n        start += 1\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 4, 4, 2, 2, 4]\n    K = 4\n    N = len(arr)\n    print(countSubarray(arr, K, N))\n"}
{"text": "Convert numbers into binary representation and add them without carry ", "java": "import java.util.*;\n\nclass GFG {\n  static int NoCarrySum(int N, int M) {\n    return N ^ M;\n  }\n\n  public static void main(String[] args) {\n    int N = 37;\n    int M = 12;\n    System.out.print(NoCarrySum(N, M));\n  }\n}\n", "python": "def NoCarrySum(N, M):\n    return N ^ M\n\n\nN = 37\nM = 12\nprint(NoCarrySum(N, M))\n"}
{"text": "Find XOR of all elements in an Array ", "java": "class GFG {\n  static int xorOfArray(int arr[], int n) {\n    int xor_arr = 0;\n    for (int i = 0; i < n; i++) {\n      xor_arr = xor_arr ^ arr[i];\n    }\n    return xor_arr;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 9, 12, 13, 15};\n    int n = arr.length;\n    System.out.println(xorOfArray(arr, n));\n  }\n}\n", "python": "def xorOfArray(arr, n):\n    xor_arr = 0\n    for i in range(n):\n        xor_arr = xor_arr ^ arr[i]\n    return xor_arr\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 9, 12, 13, 15]\n    n = len(arr)\n    print(xorOfArray(arr, n))\n"}
{"text": "Bitwise OR ( ", "java": "class GFG {\n  static int bitwiseOrTillN(int n) {\n    int result = 2;\n    for (int i = 4; i <= n; i = i + 2) {\n      result = result | i;\n    }\n    return result;\n  }\n\n  public static void main(String args[]) {\n    int n = 10;\n    System.out.println(bitwiseOrTillN(n));\n  }\n}\n", "python": "def bitwiseOrTillN(n):\n    result = 2\n    for i in range(4, n + 1, 2):\n        result = result | i\n    return result\n\n\nn = 10\nprint(bitwiseOrTillN(n))\n"}
{"text": "Bitwise OR ( ", "java": "class GFG {\n  static int bitwiseOrTillN(int n) {\n    if (n < 2) return 0;\n    int bitCount = (int) (Math.log(n) / Math.log(2)) + 1;\n    return (int) Math.pow(2, bitCount) - 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(bitwiseOrTillN(n));\n  }\n}\n", "python": "def bitwiseOrTillN(n):\n    result = 2\n    for i in range(4, n + 1, 2):\n        result = result | i\n    return result\n\n\nn = 10\nprint(bitwiseOrTillN(n))\n"}
{"text": "Maximum number of consecutive 1 's in binary representation of all the array elements ", "java": "class GFG {\n  static int maxConsecutiveOnes(int x) {\n    int count = 0;\n    while (x != 0) {\n      x = (x & (x << 1));\n      count++;\n    }\n    return count;\n  }\n\n  static int maxOnes(int arr[], int n) {\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n      int currMax = maxConsecutiveOnes(arr[i]);\n      ans = Math.max(ans, currMax);\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 3, 4};\n    int n = arr.length;\n    System.out.println(maxOnes(arr, n));\n  }\n}\n", "python": "def maxConsecutiveOnes(x):\n    count = 0\n    while x != 0:\n        x = x & (x << 1)\n        count += 1\n    return count\n\n\ndef maxOnes(arr, n):\n    ans = 0\n    for i in range(n):\n        currMax = maxConsecutiveOnes(arr[i])\n        ans = max(ans, currMax)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 3, 4]\n    n = len(arr)\n    print(maxOnes(arr, n))\n"}
{"text": "Program to clear K ", "java": "class GFG {\n  static int clearBit(int n, int k) {\n    return (n & (~(1 << (k - 1))));\n  }\n\n  public static void main(String[] args) {\n    int n = 5, k = 1;\n    System.out.println(clearBit(n, k));\n  }\n}\n", "python": "def clearBit(n, k):\n    return n & (~(1 << (k - 1)))\n\n\nn = 5\nk = 1\nprint(clearBit(n, k))\n"}
{"text": "Multiply a number by 15 without using * and / operators ", "java": "class GFG {\n  static long multiplyByFifteen(long n) {\n    long prod = (n << 4);\n    prod = prod - n;\n    return prod;\n  }\n\n  public static void main(String[] args) {\n    long n = 7;\n    System.out.print(multiplyByFifteen(n));\n  }\n}\n", "python": "def multiplyByFifteen(n):\n    prod = n << 4\n    prod = prod - n\n    return prod\n\n\nn = 7\nprint(multiplyByFifteen(n))\n"}
{"text": "Multiply a number by 15 without using * and / operators ", "java": "class GFG {\n  static long multiplyByFifteen(long n) {\n    long prod = (n << 3);\n    prod += (n << 2);\n    prod += (n << 1);\n    prod += n;\n    return prod;\n  }\n\n  public static void main(String[] args) {\n    long n = 7;\n    System.out.print(multiplyByFifteen(n));\n  }\n}\n", "python": "def multiplyByFifteen(n):\n    prod = n << 4\n    prod = prod - n\n    return prod\n\n\nn = 7\nprint(multiplyByFifteen(n))\n"}
{"text": "Minimum value among AND of elements of every subset of an array ", "java": "class GFG {\n  static void minAND(int[] arr, int n) {\n    int s = arr[0];\n    for (int i = 1; i < n; i++) {\n      s = s & arr[i];\n    }\n    System.out.println(s);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3};\n    int n = arr.length;\n    minAND(arr, n);\n  }\n}\n", "python": "def minAND(arr, n):\n    s = arr[0]\n    for i in range(1, n):\n        s = s & arr[i]\n    print(s)\n\n\narr = [1, 2, 3]\nn = len(arr)\nminAND(arr, n)\n"}
{"text": "First and Last Three Bits ", "java": "import java.math.*;\n\npublic class GFG {\n  static void binToDecimal3(int n) {\n    int a[] = new int[64];\n    int x = 0, i;\n    for (i = 0; n > 0; i++) {\n      a[i] = n % 2;\n      n /= 2;\n    }\n    x = (i < 3) ? 3 : i;\n    int d = 0, p = 0;\n    for (int j = x - 3; j < x; j++) d += a[j] * Math.pow(2, p++);\n    System.out.print(d + \" \u2581 \");\n    d = 0;\n    p = 0;\n    for (int k = 0; k < 3; k++) d += a[k] * Math.pow(2, p++);\n    System.out.print(d);\n  }\n\n  public static void main(String[] args) {\n    int n = 86;\n    binToDecimal3(n);\n  }\n}\n", "python": "from math import pow\n\n\ndef binToDecimal3(n):\n    a = [0 for i in range(64)]\n    x = 0\n    i = 0\n    while n > 0:\n        a[i] = n % 2\n        n = int(n / 2)\n        i += 1\n    if i < 3:\n        x = 3\n    else:\n        x = i\n    d = 0\n    p = 0\n    for i in range(x - 3, x, 1):\n        d += a[i] * pow(2, p)\n        p += 1\n    print(int(d), end=\" \u2581 \")\n    d = 0\n    p = 0\n    for i in range(0, 3, 1):\n        d += a[i] * pow(2, p)\n        p += 1\n    print(int(d), end=\" \u2581 \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 86\n    binToDecimal3(n)\n"}
{"text": "First and Last Three Bits ", "java": "import java.util.*;\n\nclass GFG {\n  static void binToDecimal3(int n) {\n    int last_3 = ((n & 4) + (n & 2) + (n & 1));\n    n = n >> 3;\n    while (n > 7) n = n >> 1;\n    int first_3 = ((n & 4) + (n & 2) + (n & 1));\n    System.out.println(first_3 + \" \u2581 \" + last_3);\n  }\n\n  public static void main(String args[]) {\n    int n = 86;\n    binToDecimal3(n);\n  }\n}\n", "python": "from math import pow\n\n\ndef binToDecimal3(n):\n    a = [0 for i in range(64)]\n    x = 0\n    i = 0\n    while n > 0:\n        a[i] = n % 2\n        n = int(n / 2)\n        i += 1\n    if i < 3:\n        x = 3\n    else:\n        x = i\n    d = 0\n    p = 0\n    for i in range(x - 3, x, 1):\n        d += a[i] * pow(2, p)\n        p += 1\n    print(int(d), end=\" \u2581 \")\n    d = 0\n    p = 0\n    for i in range(0, 3, 1):\n        d += a[i] * pow(2, p)\n        p += 1\n    print(int(d), end=\" \u2581 \")\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 86\n    binToDecimal3(n)\n"}
{"text": "Find a value whose XOR with given number is maximum ", "java": "import java.io.*;\n\nclass GFG {\n  static int calculate(int X) {\n    int number_of_bits = 8;\n    return ((1 << number_of_bits) - 1) ^ X;\n  }\n\n  public static void main(String[] args) {\n    int X = 4;\n    System.out.println(\" Required \u2581 Number \u2581 is \u2581 : \u2581 \" + calculate(X));\n  }\n}\n", "python": "def calculate(X):\n    number_of_bits = 8\n    return ((1 << number_of_bits) - 1) ^ X\n\n\nif __name__ == \" _ _ main _ _ \":\n    X = 4\n    print(\" Required \u2581 Number \u2581 is : \", calculate(X))\n"}
{"text": "Assign other value to a variable from two possible values ", "java": "class GFG {\n  static int alternate(int a, int b, int x) {\n    return x = a ^ b ^ x;\n  }\n\n  public static void main(String[] args) {\n    int a = -10;\n    int b = 15;\n    int x = a;\n    System.out.print(\" x \u2581 is \u2581 : \u2581 \" + x);\n    x = alternate(a, b, x);\n    System.out.print(\" After exchange \");\n    System.out.print(\" x is : \" + x);\n  }\n}\n", "python": "def alternate(a, b, x):\n    x = a + b - x\n    print(\" After \u2581 change \u2581 x \u2581 is : \", x)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = -10\n    b = 15\n    x = a\n    print(\" x \u2581 is : \", x)\n    alternate(a, b, x)\n"}
{"text": "Number of leading zeros in binary representation of a given number ", "java": "class GFG {\n  static byte sizeofInt = 8;\n\n  static int countZeros(int x) {\n    int total_bits = sizeofInt * 8;\n    int res = 0;\n    while ((x & (1 << (total_bits - 1))) == 0) {\n      x = (x << 1);\n      res++;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int x = 101;\n    System.out.println(countZeros(x));\n  }\n}\n", "python": "def countZeros(x):\n    total_bits = 32\n    res = 0\n    while (x & (1 << (total_bits - 1))) == 0:\n        x = x << 1\n        res += 1\n    return res\n\n\nx = 101\nprint(countZeros(x))\n"}
{"text": "Number of leading zeros in binary representation of a given number ", "java": "import java.io.*;\n\nclass GFG {\n  static int countZeros(int x) {\n    int y;\n    int n = 32;\n    y = x >> 16;\n    if (y != 0) {\n      n = n - 16;\n      x = y;\n    }\n    y = x >> 8;\n    if (y != 0) {\n      n = n - 8;\n      x = y;\n    }\n    y = x >> 4;\n    if (y != 0) {\n      n = n - 4;\n      x = y;\n    }\n    y = x >> 2;\n    if (y != 0) {\n      n = n - 2;\n      x = y;\n    }\n    y = x >> 1;\n    if (y != 0) return n - 2;\n    return n - x;\n  }\n\n  public static void main(String[] args) {\n    int x = 101;\n    System.out.println(countZeros(x));\n  }\n}\n", "python": "def countZeros(x):\n    total_bits = 32\n    res = 0\n    while (x & (1 << (total_bits - 1))) == 0:\n        x = x << 1\n        res += 1\n    return res\n\n\nx = 101\nprint(countZeros(x))\n"}
{"text": "Set the rightmost off bit ", "java": "public class GFG {\n  static int setRightmostUnsetBit(int n) {\n    if ((n & (n + 1)) == 0) return n;\n    return n | (n + 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 21;\n    System.out.println(setRightmostUnsetBit(n));\n  }\n}\n", "python": "def setRightmostUnsetBit(n):\n    if n & (n + 1) == 0:\n        return n\n    return n | (n + 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 21\n    print(setRightmostUnsetBit(n))\n"}
{"text": "Find bitwise AND ( & ) of all possible sub ", "java": "public class GFG {\n  static int AND(int a[], int n) {\n    int ans = a[0];\n    for (int i = 0; i < n; ++i) ans &= a[i];\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int a[] = {1, 2, 3};\n    int n = a.length;\n    System.out.println(AND(a, n));\n  }\n}\n", "python": "def AND(a, n):\n    ans = a[0]\n    for i in range(n):\n        ans &= a[i]\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [1, 2, 3]\n    n = len(a)\n    print(AND(a, n))\n"}
{"text": "Increment a number without using ++ or + ", "java": "import java.io.*;\n\nclass GFG {\n  static long increment(long i) {\n    i = -(~i);\n    return i;\n  }\n\n  public static void main(String[] args) {\n    long n = 3;\n    System.out.print(increment(n));\n  }\n}\n", "python": "def increment(i):\n    i = -(~ord(i))\n    return chr(i)\n\n\nn = \" a \"\nprint(increment(n))\n"}
{"text": "Maximum sum by adding numbers with same number of set bits ", "java": "class GFG {\n  static int bit_count(int n) {\n    int count = 0;\n    while (n > 0) {\n      count++;\n      n = n & (n - 1);\n    }\n    return count;\n  }\n\n  static int maxsum(int[] arr, int n) {\n    int[] bits = new int[n];\n    for (int i = 0; i < n; i++) {\n      bits[i] = bit_count(arr[i]);\n    }\n    int[] sum = new int[32];\n    for (int i = 0; i < n; i++) {\n      sum[bits[i]] += arr[i];\n    }\n    int maximum = 0;\n    for (int i = 0; i < 32; i++) {\n      maximum = Math.max(sum[i], maximum);\n    }\n    return maximum;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {2, 3, 8, 5, 6, 7};\n    int n = arr.length;\n    System.out.println(maxsum(arr, n));\n  }\n}\n", "python": "def bit_count(n):\n    count = 0\n    while n > 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n\n\ndef maxsum(arr, n):\n    bits = [0] * n\n    for i in range(n):\n        bits[i] = bit_count(arr[i])\n    sum = [0] * 32\n    for i in range(n):\n        sum[bits[i]] += arr[i]\n    maximum = 0\n    for i in range(32):\n        maximum = max(sum[i], maximum)\n    return maximum\n\n\narr = [2, 3, 8, 5, 6, 7]\nn = len(arr)\nprint(maxsum(arr, n))\n"}
{"text": "Sum of XOR of sum of all pairs in an array ", "java": "class GFG {\n  static int xorPairSum(int ar[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) sum = sum ^ ar[i];\n    return 2 * sum;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 2, 3};\n    int n = arr.length;\n    System.out.println(xorPairSum(arr, n));\n  }\n}\n", "python": "def xor_pair_sum(ar, n):\n    total = 0\n    for i in range(n):\n        total = total ^ ar[i]\n    return 2 * total\n\n\nif __name__ == \" _ _ main _ _ \":\n    data = [1, 2, 3]\n    print(xor_pair_sum(data, len(data)))\n"}
{"text": "Check whether all the bits are unset in the given range ", "java": "class GFG {\n  static boolean allBitsSetInTheGivenRange(int n, int l, int r) {\n    int num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1);\n    int new_num = n & num;\n    if (new_num == 0) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 17;\n    int l = 2, r = 4;\n    if (allBitsSetInTheGivenRange(n, l, r)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def allBitsSetInTheGivenRange(n, l, r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if new_num == 0:\n        return True\n    return false\n\n\nn = 17\nl = 2\nr = 4\nif allBitsSetInTheGivenRange(n, l, r):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Check whether the number has only first and last bits set ", "java": "class GFG {\n  static boolean onlyFirstAndLastAreSet(int n) {\n    if (n == 1) return true;\n    if (n == 2) return false;\n    return (((n - 1) & (n - 2)) == 0);\n  }\n\n  public static void main(String[] args) {\n    int n = 9;\n    if (onlyFirstAndLastAreSet(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def onlyFirstAndLastAreSet(n):\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    return ((n - 1) & (n - 2)) == 0\n\n\nn = 9\nif onlyFirstAndLastAreSet(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Number with set bits only between L ", "java": "import java.io.*;\n\nclass GFG {\n  static int getInteger(int L, int R) {\n    int number = 0;\n    for (int i = L; i <= R; i++) number += Math.pow(2, i);\n    return number;\n  }\n\n  public static void main(String[] args) {\n    int L = 2, R = 5;\n    System.out.println(getInteger(L, R));\n  }\n}\n", "python": "from math import pow\n\n\ndef getInteger(L, R):\n    number = 0\n    for i in range(L, R + 1, 1):\n        number += pow(2, i)\n    return number\n\n\nif __name__ == \" _ _ main _ _ \":\n    L = 2\n    R = 5\n    print(int(getInteger(L, R)))\n"}
{"text": "Number with set bits only between L ", "java": "import java.io.*;\n\nclass GFG {\n  static int setbitsfromLtoR(int L, int R) {\n    return (1 << (R + 1)) - (1 << L);\n  }\n\n  public static void main(String[] args) {\n    int L = 2, R = 5;\n    System.out.println(setbitsfromLtoR(L, R));\n  }\n}\n", "python": "from math import pow\n\n\ndef getInteger(L, R):\n    number = 0\n    for i in range(L, R + 1, 1):\n        number += pow(2, i)\n    return number\n\n\nif __name__ == \" _ _ main _ _ \":\n    L = 2\n    R = 5\n    print(int(getInteger(L, R)))\n"}
{"text": "XOR of Sum of every possible pair of an array ", "java": "import java.io.*;\n\nclass GFG {\n  static int findXor(int arr[], int n) {\n    int xoR = 0;\n    for (int i = 0; i < n; i++) {\n      xoR = xoR ^ arr[i];\n    }\n    return xoR * 2;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 5, 6};\n    int n = arr.length;\n    System.out.println(findXor(arr, n));\n  }\n}\n", "python": "def findXor(arr, n):\n    xoR = 0\n    for i in range(0, n):\n        xoR = xoR ^ arr[i]\n    return xoR * 2\n\n\narr = [1, 5, 6]\nn = len(arr)\nprint(findXor(arr, n))\n"}
{"text": "Generate n ", "java": "import java.io.*;\n\nclass GFG {\n  static void decimalToBinaryNumber(int x, int n) {\n    int[] binaryNumber = new int[x];\n    int i = 0;\n    while (x > 0) {\n      binaryNumber[i] = x % 2;\n      x = x / 2;\n      i++;\n    }\n    for (int j = 0; j < n - i; j++) System.out.print('0');\n    for (int j = i - 1; j >= 0; j--) System.out.print(binaryNumber[j]);\n  }\n\n  static void generateGrayarr(int n) {\n    int N = 1 << n;\n    for (int i = 0; i < N; i++) {\n      int x = i ^ (i >> 1);\n      decimalToBinaryNumber(x, n);\n      System.out.println();\n    }\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    generateGrayarr(n);\n  }\n}\n", "python": "def generateGray(n):\n    if n <= 0:\n        return [\"0\"]\n    if n == 1:\n        return [\"0\", \"1\"]\n    recAns = generateGray(n - 1)\n    mainAns = []\n    for i in range(len(recAns)):\n        s = recAns[i]\n        mainAns.append(\"0\" + s)\n    for i in range(len(recAns) - 1, -1, -1):\n        s = recAns[i]\n        mainAns.append(\"1\" + s)\n    return mainAns\n\n\ndef generateGrayarr(n):\n    arr = generateGray(n)\n    print(*arr, sep=\" \")\n\n\ngenerateGrayarr(3)\n"}
{"text": "Maximize the number by rearranging bits ", "java": "import java.io.*;\n\nclass GFG {\n  static long _popcnt32(long n) {\n    long count = 0;\n    while (n != 0) {\n      n = n & (n - 1);\n      count++;\n    }\n    return count;\n  }\n\n  static long maximize(long a) {\n    long n = _popcnt32(a);\n    if (n == 32) return a;\n    long res = (1 << n) - 1;\n    return (res << (32 - n));\n  }\n\n  public static void main(String args[]) {\n    long a = 3;\n    System.out.print(maximize(a));\n  }\n}\n", "python": "def _popcnt32(n):\n    count = 0\n    while n != 0:\n        n = n & (n - 1)\n        count = count + 1\n    return count\n\n\ndef maximize(a):\n    n = _popcnt32(a)\n    if n == 32:\n        return a\n    res = (1 << n) - 1\n    return res << (32 - n)\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 3\n    print(maximize(a))\n"}
{"text": "Minimum number using set bits of a given number ", "java": "import java.io.*;\n\nclass GFG {\n  public static int _popcnt32(long number) {\n    int count = 0;\n    while (number > 0) {\n      count += number & 1L;\n      number >>= 1L;\n    }\n    return count;\n  }\n\n  static long minimize(long a) {\n    int n = _popcnt32(a);\n    return ((long) Math.pow(2, n) - 1);\n  }\n\n  public static void main(String args[]) {\n    long a = 11;\n    System.out.print(minimize(a));\n  }\n}\n", "python": "def minimize(a):\n    n = bin(a).count(\"1\")\n    return pow(2, n) - 1\n\n\na = 11\nprint(minimize(a))\n"}
{"text": "Maximum steps to transform 0 to X with bitwise AND ", "java": "class GFG {\n  static int countSetBits(int n) {\n    int count = 0;\n    while (n != 0) {\n      count += n & 1;\n      n >>= 1;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int i = 3;\n    System.out.print(countSetBits(i));\n  }\n}\n", "python": "def countSetBits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\ni = 3\nprint(countSetBits(i))\n"}
{"text": "Bitwise recursive addition of two integers ", "java": "import java.io.*;\n\nclass GFG {\n  static int add(int x, int y) {\n    int keep = (x & y) << 1;\n    int res = x ^ y;\n    if (keep == 0) return res;\n    return add(keep, res);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(add(15, 38));\n  }\n}\n", "python": "def add(x, y):\n    keep = (x & y) << 1\n    res = x ^ y\n    if keep == 0:\n        return res\n    return add(keep, res)\n\n\nprint(add(15, 38))\n"}
{"text": "Fibbinary Numbers ( No consecutive 1 s in binary ) ", "java": "class GFG {\n  static boolean isFibbinaryNum(int n) {\n    if ((n & (n >> 1)) == 0) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    if (isFibbinaryNum(n) == true) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def checkFibinnary(n):\n    prev_last = 0\n    while n:\n        if (n & 1) and prev_last:\n            return False\n        prev_last = n & 1\n        n >>= 1\n    return True\n\n\nn = 10\nif checkFibinnary(n):\n    print(\" YES \")\nelse:\n    print(\" NO \")\n"}
{"text": "Maximum XOR ", "java": "\nclass GFG {\n  static int maxXOR(int n, int k) {\n    int c = (int) (Math.log(n) / Math.log(2)) + 1;\n    return ((1 << c) - 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 12;\n    int k = 3;\n    System.out.println(maxXOR(n, k));\n  }\n}\n", "python": "import math\n\n\ndef maxXOR(n, k):\n    c = int(math.log(n, 2)) + 1\n    return (1 << c) - 1\n\n\nn = 12\nk = 3\nprint(maxXOR(n, k))\n"}
{"text": "Divide two integers without using multiplication , division and mod operator ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static long divide(long dividend, long divisor) {\n    long sign = ((dividend < 0) ^ (divisor < 0)) ? -1 : 1;\n    dividend = Math.abs(dividend);\n    divisor = Math.abs(divisor);\n    long quotient = 0, temp = 0;\n    for (int i = 31; i >= 0; --i) {\n      if (temp + (divisor << i) <= dividend) {\n        temp += divisor << i;\n        quotient |= 1L << i;\n      }\n    }\n    if (sign == -1) quotient = -quotient;\n    return quotient;\n  }\n\n  public static void main(String args[]) {\n    int a = 10, b = 3;\n    System.out.println(divide(a, b));\n    int a1 = 43, b1 = -8;\n    System.out.println(divide(a1, b1));\n  }\n}\n", "python": "import math\n\n\ndef Divide(a, b):\n    dividend = a\n    divisor = b\n    sign = -1 if ((dividend < 0) ^ (divisor < 0)) else 1\n    dividend = abs(dividend)\n    divisor = abs(divisor)\n    if divisor == 0:\n        print(\" Cannot \u2581 Divide \u2581 by \u2581 0\")\n    if dividend == 0:\n        print(a, \" / \", b, \" is \u2581 equal \u2581 to \u2581 : \", 0)\n    if divisor == 1:\n        print(a, \" / \", b, \" is \u2581 equal \u2581 to \u2581 : \", (sign * dividend))\n    print(\n        a,\n        \" / \",\n        b,\n        \" is \u2581 equal \u2581 to \u2581 : \",\n        math.floor(sign * math.exp(math.log(dividend) - math.log(divisor))),\n    )\n\n\na = 10\nb = 5\nDivide(a, b)\na = 49\nb = -7\nDivide(a, b)\n"}
{"text": "XOR of two numbers after making length of their binary representations equal ", "java": "import java.io.*;\n\nclass GFG {\n  static int count(int n) {\n    int c = 0;\n    while (n != 0) {\n      c++;\n      n = n >> 1;\n    }\n    return c;\n  }\n\n  static int XOR(int a, int b) {\n    int c = Math.min(a, b);\n    int d = Math.max(a, b);\n    if (count(c) < count(d)) c = c << (count(d) - count(c));\n    return (c ^ d);\n  }\n\n  public static void main(String args[]) {\n    int a = 13, b = 5;\n    System.out.println(XOR(a, b));\n  }\n}\n", "python": "def count(n):\n    c = 0\n    while n != 0:\n        c += 1\n        n = n >> 1\n    return c\n\n\ndef XOR(a, b):\n    c = min(a, b)\n    d = max(a, b)\n    if count(c) < count(d):\n        c = c << (count(d) - count(c))\n    return c ^ d\n\n\na = 13\nb = 5\nprint(XOR(a, b))\n"}
{"text": "Swap every two bits in bytes ", "java": "import java.util.*;\n\nclass GFG {\n  static int swapBitsInPair(int x) {\n    return ((x & 0b10101010) >> 1) | ((x & 0b01010101) << 1);\n  }\n\n  public static void main(String[] args) {\n    int x = 4;\n    System.out.print(swapBitsInPair(x));\n  }\n}\n", "python": "import math\n\n\ndef swapBitsInPair(x):\n    return ((x & 0b10101010) >> 1) or ((x & 0b01010101) << 1)\n\n\nx = 4\nprint(swapBitsInPair(x))\n"}
{"text": "For every set bit of a number toggle bits of other ", "java": "import java.io.*;\n\nclass GFG {\n  static int toggleBits(int n1, int n2) {\n    return (n1 ^ n2);\n  }\n\n  public static void main(String args[]) {\n    int n1 = 2, n2 = 5;\n    System.out.println(toggleBits(n1, n2));\n  }\n}\n", "python": "def toggleBits(n1, n2):\n    return n1 ^ n2\n\n\nn1 = 2\nn2 = 5\nprint(toggleBits(n1, n2))\n"}
{"text": "Toggle all even bits of a number ", "java": "import java.io.*;\n\nclass GFG {\n  static int evenbittogglenumber(int n) {\n    int res = 0, count = 0;\n    for (int temp = n; temp > 0; temp >>= 1) {\n      if (count % 2 == 1) res |= (1 << count);\n      count++;\n    }\n    return n ^ res;\n  }\n\n  public static void main(String args[]) {\n    int n = 11;\n    System.out.println(evenbittogglenumber(n));\n  }\n}\n", "python": "def evenbittogglenumber(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 1:\n            res = res | (1 << count)\n        count = count + 1\n        temp >>= 1\n    return n ^ res\n\n\nn = 11\nprint(evenbittogglenumber(n))\n"}
{"text": "Toggle first and last bits of a number ", "java": "import java.io.*;\n\nclass GFG {\n  static int takeLandFsetbits(int n) {\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return ((n + 1) >> 1) + 1;\n  }\n\n  static int toggleFandLbits(int n) {\n    if (n == 1) return 0;\n    return n ^ takeLandFsetbits(n);\n  }\n\n  public static void main(String args[]) {\n    int n = 10;\n    System.out.println(toggleFandLbits(n));\n  }\n}\n", "python": "def takeLandFsetbits(n):\n    n = n | n >> 1\n    n = n | n >> 2\n    n = n | n >> 4\n    n = n | n >> 8\n    n = n | n >> 16\n    return ((n + 1) >> 1) + 1\n\n\ndef toggleFandLbits(n):\n    if n == 1:\n        return 0\n    return n ^ takeLandFsetbits(n)\n\n\nn = 10\nprint(toggleFandLbits(n))\n"}
{"text": "Odious number ", "java": "import java.io.*;\nimport java.math.*;\n\nclass GFG {\n  static int countSetBits(int n) {\n    int count = 0;\n    while (n != 0) {\n      n &= (n - 1);\n      count++;\n    }\n    return count;\n  }\n\n  static boolean checkOdious(int n) {\n    return (countSetBits(n) % 2 == 1);\n  }\n\n  public static void main(String args[]) {\n    int num = 32;\n    if (checkOdious(num)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def countSetBits(n):\n    count = 0\n    while n:\n        n = n & (n - 1)\n        count = count + 1\n    return count\n\n\ndef checkOdious(n):\n    return countSetBits(n) % 2 == 1\n\n\nnum = 32\nif checkOdious(num):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Set the Left most unset bit ", "java": "import java.io.*;\n\nclass GFG {\n  static int setleftmostunsetbit(int n) {\n    if ((n & (n + 1)) == 0) return n;\n    int pos = 0;\n    for (int temp = n, count = 0; temp > 0; temp >>= 1, count++) if ((temp & 1) == 0) pos = count;\n    return (n | (1 << (pos)));\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.println(setleftmostunsetbit(n));\n  }\n}\n", "python": "def setleftmostunsetbit(n):\n    if not (n & (n + 1)):\n        return n\n    pos, temp, count = 0, n, 0\n    while temp:\n        if not (temp & 1):\n            pos = count\n        count += 1\n        temp >>= 1\n    return n | (1 << (pos))\n\n\nn = 10\nprint(setleftmostunsetbit(n))\n"}
{"text": "Maximum XOR using K numbers from 1 to n ", "java": "public class Main {\n  static int maxXorSum(int n, int k) {\n    if (k == 1) return n;\n    int res = 1;\n    while (res <= n) res <<= 1;\n    return res - 1;\n  }\n\n  public static void main(String[] args) {\n    int n = 4, k = 3;\n    System.out.print(maxXorSum(n, k));\n  }\n}\n", "python": "def maxXorSum(n, k):\n    if k == 1:\n        return n\n    res = 1\n    while res <= n:\n        res <<= 1\n    return res - 1\n\n\nn = 4\nk = 3\nprint(maxXorSum(n, k))\n"}
{"text": "XNOR of two numbers ", "java": "import java.util.*;\n\npublic class GfG {\n  public static int xnor(int a, int b) {\n    if (a < b) {\n      int t = a;\n      a = b;\n      b = t;\n    }\n    if (a == 0 && b == 0) return 1;\n    int a_rem = 0;\n    int b_rem = 0;\n    int count = 0;\n    int xnornum = 0;\n    while (true) {\n      a_rem = a & 1;\n      b_rem = b & 1;\n      if (a_rem == b_rem) xnornum |= (1 << count);\n      count++;\n      a = a >> 1;\n      b = b >> 1;\n      if (a < 1) break;\n    }\n    return xnornum;\n  }\n\n  public static void main(String argc[]) {\n    int a = 10, b = 50;\n    System.out.println(xnor(a, b));\n  }\n}\n", "python": "import math\n\n\ndef swap(a, b):\n    temp = a\n    a = b\n    b = temp\n\n\ndef xnor(a, b):\n    if a < b:\n        swap(a, b)\n    if a == 0 and b == 0:\n        return 1\n    a_rem = 0\n    b_rem = 0\n    count = 0\n    xnornum = 0\n    while a != 0:\n        a_rem = a & 1\n        b_rem = b & 1\n        if a_rem == b_rem:\n            xnornum |= 1 << count\n        count = count + 1\n        a = a >> 1\n        b = b >> 1\n    return xnornum\n\n\na = 10\nb = 50\nprint(xnor(a, b))\n"}
{"text": "XNOR of two numbers ", "java": "import java.io.*;\n\nclass GFG {\n  static int togglebit(int n) {\n    if (n == 0) return 1;\n    int i = n;\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return i ^ n;\n  }\n\n  static int xnor(int num1, int num2) {\n    if (num1 < num2) {\n      int temp = num1;\n      num1 = num2;\n      num2 = temp;\n    }\n    num1 = togglebit(num1);\n    return num1 ^ num2;\n  }\n\n  public static void main(String[] args) {\n    int a = 10, b = 20;\n    System.out.println(xnor(a, b));\n  }\n}\n", "python": "import math\n\n\ndef swap(a, b):\n    temp = a\n    a = b\n    b = temp\n\n\ndef xnor(a, b):\n    if a < b:\n        swap(a, b)\n    if a == 0 and b == 0:\n        return 1\n    a_rem = 0\n    b_rem = 0\n    count = 0\n    xnornum = 0\n    while a != 0:\n        a_rem = a & 1\n        b_rem = b & 1\n        if a_rem == b_rem:\n            xnornum |= 1 << count\n        count = count + 1\n        a = a >> 1\n        b = b >> 1\n    return xnornum\n\n\na = 10\nb = 50\nprint(xnor(a, b))\n"}
{"text": "Maximum OR sum of sub ", "java": "class GFG {\n  static void MaximumSum(int a[], int b[], int n) {\n    int sum1 = 0, sum2 = 0;\n    for (int i = 0; i < n; i++) {\n      sum1 |= a[i];\n      sum2 |= b[i];\n    }\n    System.out.println(sum1 + sum2);\n  }\n\n  public static void main(String arg[]) {\n    int A[] = {1, 2, 4, 3, 2};\n    int B[] = {2, 3, 3, 12, 1};\n    int n = A.length;\n    MaximumSum(A, B, n);\n  }\n}\n", "python": "def MaximumSum(a, b, n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(0, n):\n        sum1 |= a[i]\n        sum2 |= b[i]\n    print(sum1 + sum2)\n\n\nA = [1, 2, 4, 3, 2]\nB = [2, 3, 3, 12, 1]\nn = len(A)\nMaximumSum(A, B, n)\n"}
{"text": "Check whether the two numbers differ at one bit position only ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static boolean isPowerOfTwo(int x) {\n    return x != 0 && ((x & (x - 1)) == 0);\n  }\n\n  static boolean differAtOneBitPos(int a, int b) {\n    return isPowerOfTwo(a ^ b);\n  }\n\n  public static void main(String args[]) {\n    int a = 13, b = 9;\n    if (differAtOneBitPos(a, b) == true) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isPowerOfTwo(x):\n    return x and (not (x & (x - 1)))\n\n\ndef differAtOneBitPos(a, b):\n    return isPowerOfTwo(a ^ b)\n\n\na = 13\nb = 9\nif differAtOneBitPos(a, b):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Check if n is divisible by power of 2 without using arithmetic operators ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean isDivBy2PowerM(int n, int m) {\n    if ((n & ((1 << m) - 1)) == 0) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int n = 8, m = 2;\n    if (isDivBy2PowerM(n, m)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def isDivBy2PowerM(n, m):\n    if (n & ((1 << m) - 1)) == 0:\n        return True\n    return False\n\n\nn = 8\nm = 2\nif isDivBy2PowerM(n, m):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Game of Nim with removal of one stone allowed ", "java": "import java.util.*;\n\nclass GFG {\n  static int findWinner(int N) {\n    return N & 1;\n  }\n\n  public static void main(String[] args) {\n    int N = 15;\n    if (findWinner(N) == 1) System.out.println(\" Player \u2581 A \");\n    else System.out.println(\" Player \u2581 B \");\n  }\n}\n", "python": "def findWinner(N):\n    return N & 1\n\n\nN = 15\nprint(\" Player \u2581 A \" if findWinner(N) else \" Player \u2581 B \")\n"}
{"text": "Toggle all odd bits of a number ", "java": "import java.io.*;\n\nclass GFG {\n  static int evenbittogglenumber(int n) {\n    int res = 0, count = 0;\n    for (int temp = n; temp > 0; temp >>= 1) {\n      if (count % 2 == 0) res |= (1 << count);\n      count++;\n    }\n    return n ^ res;\n  }\n\n  public static void main(String args[]) {\n    int n = 11;\n    System.out.println(evenbittogglenumber(n));\n  }\n}\n", "python": "def evenbittogglenumber(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res = res | (1 << count)\n        count = count + 1\n        temp >>= 1\n    return n ^ res\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 11\n    print(evenbittogglenumber(n))\n"}
{"text": "Quotient and remainder dividing by 2 ^ k ( a power of 2 ) ", "java": "import java.io.*;\n\npublic class GFG {\n  static void divide(int n, int m) {\n    System.out.println(\" Remainder \u2581 = \u2581 \" + ((n) & (m - 1)));\n    System.out.println(\" Quotient \u2581 = \u2581 \" + (n >> (int) (Math.log(m) / Math.log(2))));\n  }\n\n  public static void main(String[] args) {\n    int n = 43, m = 8;\n    divide(n, m);\n  }\n}\n", "python": "import math\n\n\ndef divide(n, m):\n    print(\" Remainder \u2581 = \u2581 \", ((n) & (m - 1)))\n    print(\" Quotient \u2581 = \u2581 \", (n >> (int)(math.log2(m))))\n\n\nn = 43\nm = 8\ndivide(n, m)\n"}
{"text": "Check if a number is positive , negative or zero using bit operators ", "java": "class GFG {\n  static int index(int i) {\n    return 1 + (i >> 31) - (-i >> 31);\n  }\n\n  static void check(int n) {\n    String s[] = {\" negative \", \" zero \", \" positive \"};\n    int val = index(n);\n    System.out.println(n + \" \u2581 is \u2581 \" + s[val]);\n  }\n\n  public static void main(String[] args) {\n    check(30);\n    check(-20);\n    check(0);\n  }\n}\n", "python": "def index(i):\n    return 1 + (i >> 31) - (-i >> 31)\n\n\ndef check(n):\n    s = \" negative \", \" zero \", \" positive \"\n    val = index(n)\n    print(n, \" is \", s[val])\n\n\ncheck(30)\ncheck(-20)\ncheck(0)\n"}
{"text": "Divisibility by 64 with removal of bits allowed ", "java": "import java.io.*;\n\nclass GFG {\n  static boolean checking(String s) {\n    int c = 0;\n    int n = s.length();\n    for (int i = n - 1; i >= 0; i--) {\n      if (s.charAt(i) == '0') c++;\n      if (c >= 6 && s.charAt(i) == '1') return true;\n    }\n    return false;\n  }\n\n  public static void main(String[] args) {\n    String s = \"100010001\";\n    if (checking(s)) System.out.println(\" Possible \");\n    else System.out.println(\" Not \u2581 possible \");\n  }\n}\n", "python": "def checking(s):\n    c = 0\n    n = len(s)\n    i = n - 1\n    while i >= 0:\n        if s[i] == \"0\":\n            c += 1\n        if c >= 6 and s[i] == \"1\":\n            return True\n        i -= 1\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    s = \"100010001\"\n    if checking(s):\n        print(\" Possible \")\n    else:\n        print(\" Not \u2581 possible \")\n    DEDENT\n"}
{"text": "Modify a bit at a given position ", "java": "import java.io.*;\n\nclass GFG {\n  public static int modifyBit(int n, int p, int b) {\n    int mask = 1 << p;\n    return (n & ~mask) | ((b << p) & mask);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(modifyBit(6, 2, 0));\n    System.out.println(modifyBit(6, 5, 1));\n  }\n}\n", "python": "def modifyBit(n, p, b):\n    mask = 1 << p\n    return (n & ~mask) | ((b << p) & mask)\n\n\ndef main():\n    print(modifyBit(6, 2, 0))\n    print(modifyBit(6, 5, 1))\n\n\nif __name__ == \" _ _ main _ _ \":\n    main()\n"}
{"text": "Check whether the number has only first and last bits set ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean powerOfTwo(int n) {\n    return ((n & n - 1) == 0);\n  }\n\n  static boolean onlyFirstAndLastAreSet(int n) {\n    if (n == 1) return true;\n    return powerOfTwo(n - 1);\n  }\n\n  public static void main(String[] args) {\n    int n = Integer.parseUnsignedInt(\"9\");\n    if (onlyFirstAndLastAreSet(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def onlyFirstAndLastAreSet(n):\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    return ((n - 1) & (n - 2)) == 0\n\n\nn = 9\nif onlyFirstAndLastAreSet(n):\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Minimum flips required to maximize a number with k set bits ", "java": "import java.util.*;\n\nclass GFG {\n  static int setBit(int xorValue) {\n    int count = 0;\n    while (xorValue >= 1) {\n      if (xorValue % 2 == 1) count++;\n      xorValue /= 2;\n    }\n    return count;\n  }\n\n  static int minFlip(int n, int k) {\n    int size = (int) (Math.log(n) / Math.log(2)) + 1;\n    int max = (int) Math.pow(2, k) - 1;\n    max = max << (size - k);\n    int xorValue = (n ^ max);\n    return (setBit(xorValue));\n  }\n\n  public static void main(String[] args) {\n    int n = 27, k = 3;\n    System.out.println(\" Min \u2581 Flips \u2581 = \u2581 \" + minFlip(n, k));\n  }\n}\n", "python": "import math\n\n\ndef setBit(xorValue):\n    count = 0\n    while xorValue:\n        if xorValue % 2:\n            count += 1\n        xorValue = int(xorValue / 2)\n    return count\n\n\ndef minFlip(n, k):\n    size = int(math.log(n) / math.log(2) + 1)\n    max = pow(2, k) - 1\n    max = max << (size - k)\n    xorValue = n ^ max\n    return setBit(xorValue)\n\n\nn = 27\nk = 3\nprint(\" Min \u2581 Flips \u2581 = \u2581 \", minFlip(n, k))\n"}
{"text": "Count total bits in a number ", "java": "import java.io.*;\n\nclass GFG {\n  static int countBits(int number) {\n    return (int) (Math.log(number) / Math.log(2) + 1);\n  }\n\n  public static void main(String[] args) {\n    int num = 65;\n    System.out.println(countBits(num));\n  }\n}\n", "python": "def countBits(n):\n    count = 0\n    while n:\n        count += 1\n        n >>= 1\n    return count\n\n\ni = 65\nprint(countBits(i))\n"}
{"text": "Check whether all the bits are unset in the given range or not ", "java": "import java.io.*;\n\nclass GFG {\n  static String allBitsSetInTheGivenRange(int n, int l, int r) {\n    int num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1);\n    int new_num = n & num;\n    if (new_num == 0) return \" Yes \";\n    return \" No \";\n  }\n\n  public static void main(String[] args) {\n    int n = 17;\n    int l = 2;\n    int r = 4;\n    System.out.println(allBitsSetInTheGivenRange(n, l, r));\n  }\n}\n", "python": "def allBitsSetInTheGivenRange(n, l, r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if new_num == 0:\n        return \" Yes \"\n    return \" No \"\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 17\n    l = 2\n    r = 4\n    print(allBitsSetInTheGivenRange(n, l, r))\n"}
{"text": "Toggle all bits after most significant bit ", "java": "class GFG {\n  static int setAllBitsAfterMSB(int n) {\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return n;\n  }\n\n  static int toggle(int n) {\n    n = n ^ setAllBitsAfterMSB(n);\n    return n;\n  }\n\n  public static void main(String arg[]) {\n    int n = 10;\n    n = toggle(n);\n    System.out.print(n);\n  }\n}\n", "python": "def toggle(n):\n    temp = 1\n    while temp <= n:\n        n = n ^ temp\n        temp = temp << 1\n    return n\n\n\nn = 10\nn = toggle(n)\nprint(n)\n"}
{"text": "Check if a number has two adjacent set bits ", "java": "class GFG {\n  static boolean adjacentSet(int n) {\n    int x = (n & (n >> 1));\n    if (x > 0) return true;\n    else return false;\n  }\n\n  public static void main(String args[]) {\n    int n = 3;\n    if (adjacentSet(n)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def adjacentSet(n):\n    return n & (n >> 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    if adjacentSet(n):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Check whether all the bits are set in the given range ", "java": "class GFG {\n  static String allBitsSetInTheGivenRange(int n, int l, int r) {\n    int num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1);\n    int new_num = n & num;\n    if (num == new_num) return \" Yes \";\n    return \" No \";\n  }\n\n  public static void main(String[] args) {\n    int n = 22;\n    int l = 2, r = 3;\n    System.out.print(allBitsSetInTheGivenRange(n, l, r));\n  }\n}\n", "python": "def allBitsSetInTheGivenRange(n, l, r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if num == new_num:\n        return \" Yes \"\n    return \" No \"\n\n\nn, l, r = 22, 2, 3\nprint(allBitsSetInTheGivenRange(n, l, r))\n"}
{"text": "Toggle the last m bits ", "java": "import java.util.*;\n\npublic class GfG {\n  public static int toggleLastMBits(int n, int m) {\n    int num = (1 << m) - 1;\n    return (n ^ num);\n  }\n\n  public static void main(String argc[]) {\n    int n = 107;\n    int m = 4;\n    n = toggleLastMBits(n, m);\n    System.out.println(n);\n  }\n}\n", "python": "def toggleLastMBits(n, m):\n    num = (1 << m) - 1\n    return n ^ num\n\n\nn = 107\nm = 4\nprint(toggleLastMBits(n, m))\n"}
{"text": "Next greater integer having one more number of set bits ", "java": "class GFG {\n  static int getFirstSetBitPos(int n) {\n    return ((int) (Math.log(n & -n) / Math.log(2)) + 1) - 1;\n  }\n\n  static int nextGreaterWithOneMoreSetBit(int n) {\n    int pos = getFirstSetBitPos(~n);\n    if (pos > -1) return (1 << pos) | n;\n    return ((n << 1) + 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 10;\n    System.out.print(\" Next \u2581 greater \u2581 integer \u2581 = \u2581 \" + nextGreaterWithOneMoreSetBit(n));\n  }\n}\n", "python": "import math\n\n\ndef getFirstSetBitPos(n):\n    return ((int)(math.log(n & -n) / math.log(2)) + 1) - 1\n\n\ndef nextGreaterWithOneMoreSetBit(n):\n    pos = getFirstSetBitPos(~n)\n    if pos > -1:\n        return (1 << pos) | n\n    return (n << 1) + 1\n\n\nn = 10\nprint(\" Next \u2581 greater \u2581 integer \u2581 = \u2581 \", nextGreaterWithOneMoreSetBit(n))\n"}
{"text": "Count numbers whose sum with x is equal to XOR with x ", "java": "import java.io.*;\n\nclass GFG {\n  static long CountZeroBit(long x) {\n    long count = 0;\n    while (x > 0) {\n      if ((x & 1L) == 0) count++;\n      x >>= 1L;\n    }\n    return count;\n  }\n\n  static long CountXORandSumEqual(long x) {\n    long count = CountZeroBit(x);\n    return (1L << count);\n  }\n\n  public static void main(String[] args) {\n    long x = 10;\n    System.out.println(CountXORandSumEqual(x));\n  }\n}\n", "python": "def CountZeroBit(x):\n    count = 0\n    while x:\n        if (x & 1) == 0:\n            count += 1\n        x >>= 1\n    return count\n\n\ndef CountXORandSumEqual(x):\n    count = CountZeroBit(x)\n    return 1 << count\n\n\nif __name__ == \" _ _ main _ _ \":\n    x = 10\n    print(CountXORandSumEqual(x))\n"}
{"text": "Count smaller values whose XOR with x is greater than x ", "java": "class GFG {\n  static int countValues(int x) {\n    int count = 0, n = 1;\n    while (x != 0) {\n      if (x % 2 == 0) count += n;\n      n *= 2;\n      x /= 2;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int x = 10;\n    System.out.println(countValues(x));\n  }\n}\n", "python": "def countValues(x):\n    count = 0\n    n = 1\n    while x > 0:\n        if x % 2 == 0:\n            count += n\n        n *= 2\n        x /= 2\n        x = int(x)\n    return count\n\n\nx = 10\nprint(countValues(x))\n"}
{"text": "Multiplication of two numbers with shift operator ", "java": "class GFG {\n  static int multiply(int n, int m) {\n    int ans = 0, count = 0;\n    while (m > 0) {\n      if (m % 2 == 1) ans += n << count;\n      count++;\n      m /= 2;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 20, m = 13;\n    System.out.print(multiply(n, m));\n  }\n}\n", "python": "def multiply(n, m):\n    ans = 0\n    count = 0\n    while m:\n        if m % 2 == 1:\n            ans += n << count\n        count += 1\n        m = int(m / 2)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 20\n    m = 13\n    print(multiply(n, m))\n"}
{"text": "Compare two integers without using any Comparison operator ", "java": "import java.util.*;\n\nclass solution {\n  static boolean EqualNumber(int A, int B) {\n    if ((A ^ B) != 0) return true;\n    else return false;\n  }\n\n  public static void main(String args[]) {\n    int A = 5, B = 6;\n    if (EqualNumber(A, B) == false) System.out.println(1);\n    else System.out.println(0);\n  }\n}\n", "python": "def EqualNumber(A, B):\n    return A ^ B\n\n\nA = 5\nB = 6\nprint(int(not (EqualNumber(A, B))))\n"}
{"text": "XOR counts of 0 s and 1 s in binary representation ", "java": "class GFG {\n  static int countXOR(int n) {\n    int count0 = 0, count1 = 0;\n    while (n != 0) {\n      if (n % 2 == 0) count0++;\n      else count1++;\n      n /= 2;\n    }\n    return (count0 ^ count1);\n  }\n\n  public static void main(String[] args) {\n    int n = 31;\n    System.out.println(countXOR(n));\n  }\n}\n", "python": "def countXOR(n):\n    count0, count1 = 0, 0\n    while n != 0:\n        if n % 2 == 0:\n            count0 += 1\n        else:\n            count1 += 1\n        n //= 2\n    return count0 ^ count1\n\n\nn = 31\nprint(countXOR(n))\n"}
{"text": "Count all pairs with given XOR ", "java": "import java.util.*;\n\nclass GFG {\n  static int xorPairCount(int arr[], int n, int x) {\n    Map<Integer, Integer> m = new HashMap<>();\n    for (int i = 0; i < n; i++) {\n      int curr_xor = x ^ arr[i];\n      if (m.containsKey(curr_xor)) result += m.get(curr_xor);\n      if (m.containsKey(arr[i])) {\n        m.put(arr[i], m.get(arr[i]) + 1);\n      } else {\n        m.put(arr[i], 1);\n      }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 5, 2};\n    int n = arr.length;\n    int x = 0;\n    System.out.println(\" Count \u2581 of \u2581 pairs \u2581 with \u2581 given \u2581 XOR \u2581 = \u2581 \" + xorPairCount(arr, n, x));\n  }\n}\n", "python": "def xorPairCount(arr, n, x):\n    s = set()\n    for i in range(0, n):\n        if x ^ arr[i] in s:\n            result = result + 1\n        s.add(arr[i])\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [5, 4, 10, 15, 7, 6]\n    n = len(arr)\n    x = 5\n    print(\n        \" Count \u2581 of \u2581 pair \u2581 with \u2581 given \u2581 XOR \u2581 = \u2581 \" + str(xorPairCount(arr, n, x))\n    )\n"}
{"text": "Bitwise and ( or & ) of a range ", "java": "class GFG {\n  static int msbPos(long n) {\n    int msb_p = -1;\n    while (n > 0) {\n      n = n >> 1;\n      msb_p++;\n    }\n    return msb_p;\n  }\n\n  static long andOperator(long x, long y) {\n    while (x > 0 && y > 0) {\n      int msb_p1 = msbPos(x);\n      int msb_p2 = msbPos(y);\n      if (msb_p1 != msb_p2) break;\n      long msb_val = (1 << msb_p1);\n      res = res + msb_val;\n      x = x - msb_val;\n      y = y - msb_val;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    long x = 10, y = 15;\n    System.out.print(andOperator(x, y));\n  }\n}\n", "python": "def msbPos(n):\n    msb_p = -1\n    while n > 0:\n        n = n >> 1\n        msb_p += 1\n    return msb_p\n\n\ndef andOperator(x, y):\n    while x > 0 and y > 0:\n        msb_p1 = msbPos(x)\n        msb_p2 = msbPos(y)\n        if msb_p1 != msb_p2:\n            break\n        msb_val = 1 << msb_p1\n        res = res + msb_val\n        x = x - msb_val\n        y = y - msb_val\n    return res\n\n\nx, y = 10, 15\nprint(andOperator(x, y))\n"}
{"text": "Multiply a number with 10 without using multiplication operator ", "java": "import java.util.*;\n\nclass GFG {\n  public static int multiplyTen(int n) {\n    return (n << 1) + (n << 3);\n  }\n\n  public static void main(String[] args) {\n    int n = 50;\n    System.out.println(multiplyTen(n));\n  }\n}\n", "python": "def multiplyTen(n):\n    return (n << 1) + (n << 3)\n\n\nn = 50\nprint(multiplyTen(n))\n"}
{"text": "How to swap two bits in a given integer ? ", "java": "import java.io.*;\n\nclass GFG {\n  static int swapBits(int n, int p1, int p2) {\n    int bit1 = (n >> p1) & 1;\n    int bit2 = (n >> p2) & 1;\n    int x = (bit1 ^ bit2);\n    x = (x << p1) | (x << p2);\n    int result = n ^ x;\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int res = swapBits(28, 0, 3);\n    System.out.println(\" Result \u2581 = \u2581 \" + res);\n  }\n}\n", "python": "def swapBits(n, p1, p2):\n    n ^= 1 << p1\n    n ^= 1 << p2\n    return n\n\n\nprint(\" Result \u2581 = \", swapBits(28, 0, 3))\n"}
{"text": "Maximum length sub ", "java": "class GFG {\n  static int maxLength(int arr[], int n) {\n    int maxLen = 0;\n    int i = 0;\n    int j = i + 1;\n    while (j < n) {\n      if (arr[i] != arr[j]) {\n        maxLen = Math.max(maxLen, 2);\n        int l = i - 1;\n        int r = j + 1;\n        while (l >= 0 && r < n && arr[l] == arr[i] && arr[r] == arr[j]) {\n          l--;\n          r++;\n        }\n        maxLen = Math.max(maxLen, 2 * (r - j));\n      }\n      i++;\n      j = i + 1;\n    }\n    return maxLen;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 1, 1, 0, 0, 1, 1};\n    int n = arr.length;\n    System.out.println(maxLength(arr, n));\n  }\n}\n", "python": "def maxLength(a, n):\n    maxLen = 0\n    prev_cnt = 0\n    curr_cnt = 1\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            curr_cnt += 1\n        else:\n            prev_cnt = curr_cnt\n            curr_cnt = 1\n        maxLen = max(maxLen, min(prev_cnt, curr_cnt))\n    return 2 * maxLen\n\n\narr = [1, 1, 1, 0, 0, 1, 1]\nn = len(arr)\nprint(maxLength(arr, n))\n"}
{"text": "Expectation or expected value of an array ", "java": "import java.io.*;\n\nclass GFG {\n  static float calc_Expectation(float a[], float n) {\n    float prb = (1 / n);\n    float sum = 0;\n    for (int i = 0; i < n; i++) sum += a[i] * prb;\n    return sum;\n  }\n\n  public static void main(String args[]) {\n    float expect, n = 6f;\n    float a[] = {1f, 2f, 3f, 4f, 5f, 6f};\n    expect = calc_Expectation(a, n);\n    System.out.println(\" Expectation \u2581 of \u2581 array \u2581 E ( X ) \u2581 is \u2581 : \u2581 \" + expect);\n  }\n}\n", "python": "def calc_Expectation(a, n):\n    prb = 1 / n\n    sum = 0\n    for i in range(0, n):\n        sum += a[i] * prb\n    return float(sum)\n\n\nn = 6\na = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\nexpect = calc_Expectation(a, n)\nprint(\" Expectation \u2581 of \u2581 array \u2581 E ( X ) \u2581 is \u2581 : \u2581 \", expect)\n"}
{"text": "Choose points from two ranges such that no point lies in both the ranges ", "java": "class GFG {\n  static void findPoints(int l1, int r1, int l2, int r2) {\n    int x = (l1 != l2) ? Math.min(l1, l2) : -1;\n    int y = (r1 != r2) ? Math.max(r1, r2) : -1;\n    System.out.println(x + \" \u2581 \" + y);\n  }\n\n  public static void main(String[] args) {\n    int l1 = 5, r1 = 10, l2 = 1, r2 = 7;\n    findPoints(l1, r1, l2, r2);\n  }\n}\n", "python": "def findPoints(l1, r1, l2, r2):\n    x = min(l1, l2) if (l1 != l2) else -1\n    y = max(r1, r2) if (r1 != r2) else -1\n    print(x, y)\n\n\nif __name__ == \" _ _ main _ _ \":\n    l1 = 5\n    r1 = 10\n    l2 = 1\n    r2 = 7\n    findPoints(l1, r1, l2, r2)\n"}
{"text": "Tail Recursion ", "java": "class GFG {\n  static int fact(int n) {\n    if (n == 0) return 1;\n    return n * fact(n - 1);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(fact(5));\n  }\n}\n", "python": "def fact(n, a=1):\n    if n == 1:\n        return a\n    return fact(n - 1, n * a)\n\n\nprint(fact(5))\n"}
{"text": "Maximize sum of given array by rearranging array such that the difference between adjacent elements is atmost 1 ", "java": "import java.util.*;\n\nclass GFG {\n  static long maxSum(int[] a) {\n    int n = a.length;\n    int[] count = new int[n + 1];\n    for (int x : a) count[Math.min(x, n)]++;\n    int size = 0;\n    long ans = 0;\n    for (int k = 1; k <= n; k++) {\n      while (count[k] > 0 && size < k) {\n        size++;\n        ans += size;\n        count[k]--;\n      }\n      ans += k * count[k];\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {3, 5, 1};\n    System.out.println(maxSum(arr));\n  }\n}\n", "python": "def maxSum(a, n):\n    count = [0] * (n + 1)\n    for i in range(0, n):\n        count[min(a[i], n)] += 1\n    size = 0\n    ans = 0\n    for k in range(1, n + 1):\n        while count[k] > 0 and size < k:\n            size += 1\n            ans += size\n            count[k] -= 1\n        ans += k * count[k]\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 5, 1]\n    n = len(arr)\n    print(maxSum(arr, n))\n"}
{"text": "Minimum difference between max and min of all K ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int minDifferenceAmongMaxMin(int arr[], int N, int K) {\n    Arrays.sort(arr);\n    int res = 2147483647;\n    for (int i = 0; i <= (N - K); i++) {\n      int curSeqDiff = arr[i + K - 1] - arr[i];\n      res = Math.min(res, curSeqDiff);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {10, 20, 30, 100, 101, 102};\n    int N = arr.length;\n    int K = 3;\n    System.out.print(minDifferenceAmongMaxMin(arr, N, K));\n  }\n}\n", "python": "def minDifferenceAmongMaxMin(arr, N, K):\n    arr.sort()\n    res = 2147483647\n    for i in range((N - K) + 1):\n        curSeqDiff = arr[i + K - 1] - arr[i]\n        res = min(res, curSeqDiff)\n    return res\n\n\narr = [10, 20, 30, 100, 101, 102]\nN = len(arr)\nK = 3\nprint(minDifferenceAmongMaxMin(arr, N, K))\n"}
{"text": "Sum of first N natural numbers which are not powers of K ", "java": "import java.io.*;\n\nclass GFG {\n  static int find_sum(int n, int k) {\n    int total_sum = (n * (n + 1)) / 2;\n    int power = k;\n    while (power <= n) {\n      total_sum -= power;\n      power *= k;\n    }\n    return total_sum;\n  }\n\n  public static void main(String[] args) {\n    int n = 11, k = 2;\n    System.out.println(find_sum(n, k));\n  }\n}\n", "python": "def find_sum(n, k):\n    total_sum = (n * (n + 1)) // 2\n    power = k\n    while power <= n:\n        total_sum -= power\n        power *= k\n    return total_sum\n\n\nn = 11\nk = 2\nprint(find_sum(n, k))\n"}
{"text": "Maze With N doors and 1 Key ", "java": "import java.io.*;\nimport java.util.ArrayList;\n\nclass GFG {\n  static boolean findPath(ArrayList<ArrayList<Integer>> maze, int xpos, int ypos, boolean key) {\n    if (xpos < 0 || xpos >= maze.size() || ypos < 0 || ypos >= maze.size()) return false;\n    if (maze.get(xpos).get(ypos) == '1') {\n      if (key == true) if (xpos == maze.size() - 1 && ypos == maze.size() - 1) return true;\n      return findPath(maze, xpos + 1, ypos, false) || findPath(maze, xpos, ypos + 1, false);\n    }\n    if (xpos == maze.size() - 1 && ypos == maze.size() - 1) return true;\n    return findPath(maze, xpos + 1, ypos, key) || findPath(maze, xpos, ypos + 1, key);\n  }\n\n  static boolean mazeProb(ArrayList<ArrayList<Integer>> maze, int xpos, int ypos) {\n    boolean key = true;\n    if (findPath(maze, xpos, ypos, key)) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int size = 3;\n    ArrayList<ArrayList<Integer>> maze = new ArrayList<ArrayList<Integer>>(size);\n    for (int i = 0; i < size; i++) {\n      maze.add(new ArrayList<Integer>());\n    }\n    maze.get(0).add(0);\n    maze.get(0).add(0);\n    maze.get(0).add(1);\n    maze.get(1).add(1);\n    maze.get(1).add(0);\n    maze.get(1).add(1);\n    maze.get(2).add(1);\n    maze.get(2).add(1);\n    maze.get(2).add(0);\n    if (mazeProb(maze, 0, 0)) System.out.print(\" Yes \");\n    else System.out.print(\" No \");\n  }\n}\n", "python": "def findPath(maze, xpos, ypos, key):\n    if xpos < 0 or xpos >= len(maze) or ypos < 0 or ypos >= len(maze):\n        return False\n    if maze[xpos][ypos] == \"1\":\n        if key == True:\n            if xpos == len(maze) - 1 and ypos == len(maze) - 1:\n                return True\n            return findPath(maze, xpos + 1, ypos, False) or findPath(\n                maze, xpos, ypos + 1, False\n            )\n        return False\n    if xpos == len(maze) - 1 and ypos == len(maze) - 1:\n        return True\n    return findPath(maze, xpos + 1, ypos, key) or findPath(maze, xpos, ypos + 1, key)\n\n\ndef mazeProb(maze, xpos, ypos):\n    key = True\n    if findPath(maze, xpos, ypos, key):\n        return True\n    return False\n\n\nif __name__ == \" _ _ main _ _ \":\n    maze = [[\"0\", \"0\", \"1\"], [\"1\", \"0\", \"1\"], [\"1\", \"1\", \"0\"]]\n    n = len(maze)\n    if mazeProb(maze, 0, 0):\n        print(\" Yes \")\n    else:\n        print(\" No \")\n    DEDENT\n"}
{"text": "Count of Numbers in Range where the number does not contain more than K non zero digits ", "java": "import java.util.*;\n\nclass Solution {\n  static final int M = 20;\n  static int dp[][][] = new int[M][M][2];\n  static int K;\n  static Vector<Integer> num;\n\n  static int countInRangeUtil(int pos, int cnt, int tight) {\n    if (pos == num.size()) {\n      if (cnt <= K) return 1;\n      return 0;\n    }\n    if (dp[pos][cnt][tight] != -1) return dp[pos][cnt][tight];\n    int ans = 0;\n    int limit = (tight != 0 ? 9 : num.get(pos));\n    for (int dig = 0; dig <= limit; dig++) {\n      int currCnt = cnt;\n      if (dig != 0) currCnt++;\n      int currTight = tight;\n      if (dig < num.get(pos)) currTight = 1;\n      ans += countInRangeUtil(pos + 1, currCnt, currTight);\n    }\n    return dp[pos][cnt][tight] = ans;\n  }\n\n  static int countInRange(int x) {\n    num = new Vector<Integer>();\n    while (x != 0) {\n      num.add(x % 10);\n      x /= 10;\n    }\n    Collections.reverse(num);\n    for (int i = 0; i < M; i++)\n      for (int j = 0; j < M; j++) for (int k = 0; k < 2; k++) dp[i][j][k] = -1;\n    return countInRangeUtil(0, 0, 0);\n  }\n\n  public static void main(String args[]) {\n    int L = 1, R = 1000;\n    K = 3;\n    System.out.println(countInRange(R) - countInRange(L - 1));\n    L = 9995;\n    R = 10005;\n    K = 2;\n    System.out.println(countInRange(R) - countInRange(L - 1));\n  }\n}\n", "python": "def countInRangeUtil(pos, cnt, tight, num):\n    if pos == len(num):\n        if cnt <= K:\n            return 1\n        return 0\n    if dp[pos][cnt][tight] != -1:\n        return dp[pos][cnt][tight]\n    ans = 0\n    limit = 9 if tight else num[pos]\n    for dig in range(limit + 1):\n        currCnt = cnt\n        if dig != 0:\n            currCnt += 1\n        currTight = tight\n        if dig < num[pos]:\n            currTight = 1\n        ans += countInRangeUtil(pos + 1, currCnt, currTight, num)\n    dp[pos][cnt][tight] = ans\n    return dp[pos][cnt][tight]\n\n\ndef countInRange(x):\n    global dp, K, M\n    num = []\n    while x:\n        num.append(x % 10)\n        x //= 10\n    num.reverse()\n    dp = [[[-1, -1] for i in range(M)] for j in range(M)]\n    return countInRangeUtil(0, 0, 0, num)\n\n\nif __name__ == \" _ _ main _ _ \":\n    dp = []\n    M = 20\n    K = 0\n    L = 1\n    R = 1000\n    K = 3\n    print(countInRange(R) - countInRange(L - 1))\n    L = 9995\n    R = 10005\n    K = 2\n    print(countInRange(R) - countInRange(L - 1))\n"}
{"text": "Maximum subarray sum in O ( n ) using prefix sum ", "java": "class GFG {\n  static int maximumSumSubarray(int arr[], int n) {\n    int min_prefix_sum = 0;\n    int res = Integer.MIN_VALUE;\n    int prefix_sum[] = new int[n];\n    prefix_sum[0] = arr[0];\n    for (int i = 1; i < n; i++) prefix_sum[i] = prefix_sum[i - 1] + arr[i];\n    for (int i = 0; i < n; i++) {\n      res = Math.max(res, prefix_sum[i] - min_prefix_sum);\n      min_prefix_sum = Math.min(min_prefix_sum, prefix_sum[i]);\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int arr1[] = {-2, -3, 4, -1, -2, 1, 5, -3};\n    int n1 = arr1.length;\n    System.out.println(maximumSumSubarray(arr1, n1));\n    int arr2[] = {4, -8, 9, -4, 1, -8, -1, 6};\n    int n2 = arr2.length;\n    System.out.println(maximumSumSubarray(arr2, n2));\n  }\n}\n", "python": "import math\n\n\ndef maximumSumSubarray(arr, n):\n    min_prefix_sum = 0\n    res = -math.inf\n    prefix_sum = []\n    prefix_sum.append(arr[0])\n    for i in range(1, n):\n        prefix_sum.append(prefix_sum[i - 1] + arr[i])\n    for i in range(n):\n        res = max(res, prefix_sum[i] - min_prefix_sum)\n        min_prefix_sum = min(min_prefix_sum, prefix_sum[i])\n    return res\n\n\narr1 = [-2, -3, 4, -1, -2, 1, 5, -3]\nn1 = len(arr1)\nprint(maximumSumSubarray(arr1, n1))\narr2 = [4, -8, 9, -4, 1, -8, -1, 6]\nn2 = len(arr2)\nprint(maximumSumSubarray(arr2, n2))\n"}
{"text": "Hamming Distance between two strings ", "java": "class GFG {\n  static int hammingDist(String str1, String str2) {\n    int i = 0, count = 0;\n    while (i < str1.length()) {\n      if (str1.charAt(i) != str2.charAt(i)) count++;\n      i++;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    String str1 = \" geekspractice \";\n    String str2 = \" nerdspractise \";\n    System.out.println(hammingDist(str1, str2));\n  }\n}\n", "python": "def hammingDist(str1, str2):\n    i = 0\n    count = 0\n    while i < len(str1):\n        if str1[i] != str2[i]:\n            count += 1\n        i += 1\n    return count\n\n\nstr1 = \" geekspractice \"\nstr2 = \" nerdspractise \"\nprint(hammingDist(str1, str2))\n"}
{"text": "Generate n ", "java": "import java.util.*;\n\nclass GfG {\n  static void generateGrayarr(int n) {\n    if (n <= 0) return;\n    ArrayList<String> arr = new ArrayList<String>();\n    arr.add(\"0\");\n    arr.add(\"1\");\n    int i, j;\n    for (i = 2; i < (1 << n); i = i << 1) {\n      for (j = i - 1; j >= 0; j--) arr.add(arr.get(j));\n      for (j = 0; j < i; j++) arr.set(j, \"0\" + arr.get(j));\n      for (j = i; j < 2 * i; j++) arr.set(j, \"1\" + arr.get(j));\n    }\n    for (i = 0; i < arr.size(); i++) System.out.println(arr.get(i));\n  }\n\n  public static void main(String[] args) {\n    generateGrayarr(3);\n  }\n}\n", "python": "def generateGray(n):\n    if n <= 0:\n        return [\"0\"]\n    if n == 1:\n        return [\"0\", \"1\"]\n    recAns = generateGray(n - 1)\n    mainAns = []\n    for i in range(len(recAns)):\n        s = recAns[i]\n        mainAns.append(\"0\" + s)\n    for i in range(len(recAns) - 1, -1, -1):\n        s = recAns[i]\n        mainAns.append(\"1\" + s)\n    return mainAns\n\n\ndef generateGrayarr(n):\n    arr = generateGray(n)\n    print(*arr, sep=\" \")\n\n\ngenerateGrayarr(3)\n"}
{"text": "Count of Unique Direct Path Between N Points On a Plane ", "java": "import java.io.*;\n\nclass GFG {\n  static int countDirectPath(int N) {\n    return N + (N * (N - 3)) / 2;\n  }\n\n  public static void main(String[] args) {\n    int N = 5;\n    System.out.print(countDirectPath(N));\n  }\n}\n", "python": "def countDirectPath(N):\n    return N + (N * (N - 3)) // 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    print(countDirectPath(N))\n"}
{"text": "Triacontagon Number ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int triacontagonalNum(int n) {\n    return (28 * n * n - 26 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(\"3rd \u2581 triacontagonal \u2581 Number \u2581 is \u2581 = \u2581 \" + triacontagonalNum(n));\n  }\n}\n", "python": "def triacontagonalNum(n):\n    return (28 * n * n - 26 * n) // 2\n\n\nn = 3\nprint(\"3rd \u2581 triacontagonal \u2581 Number \u2581 is \u2581 = \u2581 \", triacontagonalNum(n))\n"}
{"text": "Hexacontagon Number ", "java": "class GFG {\n  public static int hexacontagonNum(int n) {\n    return (58 * n * n - 56 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(\"3rd \u2581 hexacontagon \u2581 Number \u2581 is \u2581 = \u2581 \" + hexacontagonNum(n));\n  }\n}\n", "python": "def hexacontagonNum(n):\n    return (58 * n * n - 56 * n) // 2\n\n\nn = 3\nprint(\"3rd \u2581 hexacontagon \u2581 Number \u2581 is \u2581 = \u2581 \", hexacontagonNum(n))\n"}
{"text": "Enneacontagon Number ", "java": "class GFG {\n  public static int enneacontagonNum(int n) {\n    return (88 * n * n - 86 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(\"3rd \u2581 enneacontagon \u2581 Number \u2581 is \u2581 = \u2581 \" + enneacontagonNum(n));\n  }\n}\n", "python": "def enneacontagonNum(n):\n    return (88 * n * n - 86 * n) // 2\n\n\nn = 3\nprint(\"3rd \u2581 enneacontagon \u2581 Number \u2581 is \u2581 = \u2581 \", enneacontagonNum(n))\n"}
{"text": "Triacontakaidigon Number ", "java": "class GFG {\n  public static int triacontakaidigonNum(int n) {\n    return (30 * n * n - 28 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(\"3rd \u2581 triacontakaidigon \u2581 Number \u2581 is \u2581 = \u2581 \" + triacontakaidigonNum(n));\n  }\n}\n", "python": "def triacontakaidigonNum(n):\n    return (30 * n * n - 28 * n) // 2\n\n\nn = 3\nprint(\"3rd \u2581 triacontakaidigon \u2581 Number \u2581 is \u2581 = \u2581 \", triacontakaidigonNum(n))\n"}
{"text": "Icosihexagonal Number ", "java": "class GFG {\n  public static int IcosihexagonalNum(int n) {\n    return (24 * n * n - 22 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(\"3rd \u2581 Icosihexagonal \u2581 Number \u2581 is \u2581 = \u2581 \" + IcosihexagonalNum(n));\n  }\n}\n", "python": "def IcosihexagonalNum(n):\n    return (24 * n * n - 22 * n) // 2\n\n\nn = 3\nprint(\"3rd \u2581 Icosihexagonal \u2581 Number \u2581 is \u2581 = \u2581 \", IcosihexagonalNum(n))\n"}
{"text": "Icosikaioctagon or Icosioctagon Number ", "java": "class GFG {\n  public static int icosikaioctagonalNum(int n) {\n    return (26 * n * n - 24 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(\"3rd \u2581 icosikaioctagonal \u2581 Number \u2581 is \u2581 = \u2581 \" + icosikaioctagonalNum(n));\n  }\n}\n", "python": "def icosikaioctagonalNum(n):\n    return (26 * n * n - 24 * n) // 2\n\n\nn = 3\nprint(\"3rd \u2581 icosikaioctagonal \u2581 Number \u2581 is \u2581 = \u2581 \", icosikaioctagonalNum(n))\n"}
{"text": "Octacontagon Number ", "java": "import java.util.*;\n\nclass GFG {\n  static int octacontagonNum(int n) {\n    return (78 * n * n - 76 * n) / 2;\n  }\n\n  public static void main(String args[]) {\n    int n = 3;\n    System.out.print(\"3rd \u2581 octacontagon \u2581 Number \u2581 is \u2581 = \u2581 \" + octacontagonNum(n));\n  }\n}\n", "python": "def octacontagonNum(n):\n    return (78 * n * n - 76 * n) // 2\n\n\nn = 3\nprint(\"3rd \u2581 octacontagon \u2581 Number \u2581 is \u2581 = \u2581 \", octacontagonNum(n))\n"}
{"text": "Hectagon Number ", "java": "import java.util.*;\n\nclass GFG {\n  static int hectagonNum(int n) {\n    return (98 * n * n - 96 * n) / 2;\n  }\n\n  public static void main(String args[]) {\n    int n = 3;\n    System.out.print(\"3rd \u2581 hectagon \u2581 Number \u2581 is \u2581 = \u2581 \" + hectagonNum(n));\n  }\n}\n", "python": "def hectagonNum(n):\n    return (98 * n * n - 96 * n) // 2\n\n\nn = 3\nprint(\"3rd \u2581 hectagon \u2581 Number \u2581 is \u2581 = \u2581 \", hectagonNum(n))\n"}
{"text": "Tetracontagon Number ", "java": "import java.util.*;\n\nclass GFG {\n  static int tetracontagonNum(int n) {\n    return (38 * n * n - 36 * n) / 2;\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.println(\"3rd \u2581 tetracontagon \u2581 Number \u2581 is \u2581 = \u2581 \" + tetracontagonNum(n));\n  }\n}\n", "python": "def tetracontagonNum(n):\n    return (38 * n * n - 36 * n) // 2\n\n\nn = 3\nprint(\"3rd \u2581 tetracontagon \u2581 Number \u2581 is \u2581 = \u2581 \", tetracontagonNum(n))\n"}
{"text": "Perimeter of an Ellipse ", "java": "\nclass GFG1 {\n  static void Perimeter(double a, double b) {\n    double Perimeter;\n    Perimeter = (double) 2 * 3.14 * Math.sqrt((a * a + b * b) / (2 * 1.0));\n    System.out.println(\" Perimeter : \u2581 \" + Perimeter);\n  }\n\n  public static void main(String[] args) {\n    double a = 3, b = 2;\n    Perimeter(a, b);\n  }\n}\n", "python": "from math import sqrt\n\n\ndef Perimeter(a, b):\n    perimeter = 0\n    perimeter = 2 * 3.14 * sqrt((a * a + b * b) / (2 * 1.0))\n    print(perimeter)\n\n\na = 3\nb = 2\nPerimeter(a, b)\n"}
{"text": "Largest hexagon that can be inscribed within a square ", "java": "import java.io.*;\n\nclass GFG {\n  static double hexagonside(double a) {\n    if (a < 0) return -1;\n    double x = (0.5176 * a);\n    return x;\n  }\n\n  public static void main(String[] args) {\n    double a = 6;\n    System.out.println(hexagonside(a));\n  }\n}\n", "python": "def hexagonside(a):\n    if a < 0:\n        return -1\n    x = 0.5176 * a\n    return x\n\n\na = 6\nprint(hexagonside(a))\n"}
{"text": "Largest hexagon that can be inscribed within an equilateral triangle ", "java": "class CLG {\n  static float hexagonside(float a) {\n    if (a < 0) return -1;\n    float x = a / 3;\n    return x;\n  }\n\n  public static void main(String[] args) {\n    float a = 6;\n    System.out.println(hexagonside(a));\n  }\n}\n", "python": "def hexagonside(a):\n    if a < 0:\n        return -1\n    x = a // 3\n    return x\n\n\na = 6\nprint(hexagonside(a))\n"}
{"text": "Maximum points of intersection n lines ", "java": "public class GFG {\n  static long countMaxIntersect(long n) {\n    return (n) * (n - 1) / 2;\n  }\n\n  public static void main(String args[]) {\n    long n = 8;\n    System.out.println(countMaxIntersect(n));\n  }\n}\n", "python": "def countMaxIntersect(n):\n    return int(n * (n - 1) / 2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 8\n    print(countMaxIntersect(n))\n"}
{"text": "Program to find volume and surface area of pentagonal prism ", "java": "import java.util.*;\n\nclass solution {\n  static float surfaceArea(float a, float b, float h) {\n    return 5 * a * b + 5 * b * h;\n  }\n\n  static float volume(float b, float h) {\n    return (5 * b * h) / 2;\n  }\n\n  public static void main(String arr[]) {\n    float a = 5;\n    float b = 3;\n    float h = 7;\n    System.out.println(\" surface \u2581 area = \u2581 \" + surfaceArea(a, b, h) + \" , \u2581 \");\n    System.out.println(\" volume = \u2581 \" + volume(b, h));\n  }\n}\n", "python": "def surfaceArea(a, b, h):\n    return 5 * a * b + 5 * b * h\n\n\ndef volume(b, h):\n    return (5 * b * h) / 2\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = 5\n    b = 3\n    h = 7\n    print(\n        \" surface \u2581 area \u2581 = \",\n        surfaceArea(a, b, h),\n        \" , \",\n        \" volume \u2581 = \",\n        volume(b, h),\n    )\n"}
{"text": "Check if a point is inside , outside or on the parabola ", "java": "class solution {\n  static int checkpoint(int h, int k, int x, int y, int a) {\n    int p = (int) Math.pow((y - k), 2) - 4 * a * (x - h);\n    return p;\n  }\n\n  public static void main(String arr[]) {\n    int h = 0, k = 0, x = 2, y = 1, a = 4;\n    if (checkpoint(h, k, x, y, a) > 0) System.out.println(\" Outside \");\n    else if (checkpoint(h, k, x, y, a) == 0) System.out.println(\" On \u2581 the \u2581 parabola \");\n    else System.out.println(\" Inside \");\n  }\n}\n", "python": "def checkpoint(h, k, x, y, a):\n    p = pow((y - k), 2) - 4 * a * (x - h)\n    return p\n\n\nif __name__ == \" _ _ main _ _ \":\n    h = 0\n    k = 0\n    x = 2\n    y = 1\n    a = 4\n    if checkpoint(h, k, x, y, a) > 0:\n        print(\" Outside \")\n    elif checkpoint(h, k, x, y, a) == 0:\n        print(\" On the parabola \")\n    else:\n        print(\" Inside \")\n    DEDENT\n"}
{"text": "Check if a point is inside , outside or on the ellipse ", "java": "import java.util.*;\n\nclass solution {\n  static int checkpoint(int h, int k, int x, int y, int a, int b) {\n    int p =\n        ((int) Math.pow((x - h), 2) / (int) Math.pow(a, 2))\n            + ((int) Math.pow((y - k), 2) / (int) Math.pow(b, 2));\n    return p;\n  }\n\n  public static void main(String arr[]) {\n    int h = 0, k = 0, x = 2, y = 1, a = 4, b = 5;\n    if (checkpoint(h, k, x, y, a, b) > 1) System.out.println(\" Outside \");\n    else if (checkpoint(h, k, x, y, a, b) == 1) System.out.println(\" On \u2581 the \u2581 ellipse \");\n    else System.out.println(\" Inside \");\n  }\n}\n", "python": "import math\n\n\ndef checkpoint(h, k, x, y, a, b):\n    p = (math.pow((x - h), 2) // math.pow(a, 2)) + (\n        math.pow((y - k), 2) // math.pow(b, 2)\n    )\n    return p\n\n\nif __name__ == \" _ _ main _ _ \":\n    h = 0\n    k = 0\n    x = 2\n    y = 1\n    a = 4\n    b = 5\n    if checkpoint(h, k, x, y, a, b) > 1:\n        print(\" Outside \")\n    elif checkpoint(h, k, x, y, a, b) == 1:\n        print(\" On \u2581 the \u2581 ellipse \")\n    else:\n        print(\" Inside \")\n    DEDENT\n"}
{"text": "Centered cube number ", "java": "import java.io.*;\n\nclass GFG {\n  static int centered_cube(int n) {\n    return (2 * n + 1) * (n * n + n + 1);\n  }\n\n  public static void main(String[] args) {\n    int n = 3;\n    System.out.print(n + \" th \u2581 Centered \" + \" \u2581 cube \u2581 number : \u2581 \");\n    System.out.println(centered_cube(n));\n    n = 10;\n    System.out.print(n + \" th \u2581 Centered \" + \" \u2581 cube \u2581 number : \u2581 \");\n    System.out.println(centered_cube(n));\n  }\n}\n", "python": "def centered_cube(n):\n    return (2 * n + 1) * (n * n + n + 1)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 3\n    print(n, \" th \u2581 Centered \u2581 cube \u2581 \" + \" number \u2581 : \u2581 \", centered_cube(n))\n    n = 10\n    print(n, \" th \u2581 Centered \u2581 cube \u2581 \" + \" number \u2581 : \u2581 \", centered_cube(n))\n"}
{"text": "Find the center of the circle using endpoints of diameter ", "java": "class GFG {\n  static void center(int x1, int x2, int y1, int y2) {\n    System.out.print((float) (x1 + x2) / 2 + \" , \u2581 \" + (float) (y1 + y2) / 2);\n  }\n\n  public static void main(String arg[]) {\n    int x1 = -9, y1 = 3, x2 = 5, y2 = -7;\n    center(x1, x2, y1, y2);\n  }\n}\n", "python": "def center(x1, x2, y1, y2):\n    print(int((x1 + x2) / 2), end=\" \")\n    print(\" , \", int((y1 + y2) / 2))\n\n\nx1 = -9\ny1 = 3\nx2 = 5\ny2 = -7\ncenter(x1, x2, y1, y2)\n"}
{"text": "Program to calculate volume of Octahedron ", "java": "import java.io.*;\n\nclass GFG {\n  public static void main(String[] args) {\n    double side = 3;\n    System.out.print(\" Volume \u2581 of \u2581 octahedron \u2581 = \u2581 \");\n    System.out.println(vol_of_octahedron(side));\n  }\n\n  static double vol_of_octahedron(double side) {\n    return ((side * side * side) * (Math.sqrt(2) / 3));\n  }\n}\n", "python": "import math\n\n\ndef vol_of_octahedron(side):\n    return (side * side * side) * (math.sqrt(2) / 3)\n\n\nside = 3\nprint(\" Volume \u2581 of \u2581 octahedron \u2581 = \", round(vol_of_octahedron(side), 4))\n"}
{"text": "Program to calculate volume of Ellipsoid ", "java": "import java.util.*;\n\nclass GfG {\n  public static float volumeOfEllipsoid(float r1, float r2, float r3) {\n    float pi = (float) 3.14;\n    return (float) 1.33 * pi * r1 * r2 * r3;\n  }\n\n  public static void main(String args[]) {\n    float r1 = (float) 2.3, r2 = (float) 3.4, r3 = (float) 5.7;\n    System.out.println(\" volume \u2581 of \u2581 ellipsoid \u2581 is \u2581 : \u2581 \" + volumeOfEllipsoid(r1, r2, r3));\n  }\n}\n", "python": "import math\n\n\ndef volumeOfEllipsoid(r1, r2, r3):\n    return 1.33 * math.pi * r1 * r2 * r3\n\n\nr1 = float(2.3)\nr2 = float(3.4)\nr3 = float(5.7)\nprint(\" Volume \u2581 of \u2581 ellipsoid \u2581 is \u2581 : \u2581 \", volumeOfEllipsoid(r1, r2, r3))\n"}
{"text": "Program to calculate Area Of Octagon ", "java": "import java.io.*;\n\nclass GFG {\n  static double areaOctagon(double side) {\n    return (float) (2 * (1 + Math.sqrt(2)) * side * side);\n  }\n\n  public static void main(String arg[]) {\n    double side = 4;\n    System.out.print(\" Area \u2581 of \u2581 Regular \u2581 Octagon \u2581 = \u2581 \" + areaOctagon(side));\n  }\n}\n", "python": "import math\n\n\ndef areaOctagon(side):\n    return 2 * (1 + (math.sqrt(2))) * side * side\n\n\nside = 4\nprint(\" Area \u2581 of \u2581 Regular \u2581 Octagon \u2581 = \", round(areaOctagon(side), 4))\n"}
{"text": "Program for Volume and Surface Area of Cube ", "java": "class GFG {\n  static double areaCube(double a) {\n    return (a * a * a);\n  }\n\n  static double surfaceCube(double a) {\n    return (6 * a * a);\n  }\n\n  public static void main(String[] args) {\n    double a = 5;\n    System.out.println(\" Area \u2581 = \u2581 \" + areaCube(a));\n    System.out.println(\" Total \u2581 surface \u2581 area \u2581 = \u2581 \" + surfaceCube(a));\n  }\n}\n", "python": "def areaCube(a):\n    return a * a * a\n\n\ndef surfaceCube(a):\n    return 6 * a * a\n\n\na = 5\nprint(\" Area \u2581 = \", areaCube(a))\nprint(\" Total \u2581 surface \u2581 area \u2581 = \", surfaceCube(a))\n"}
{"text": "Find mirror image of a point in 2 ", "java": "class GFG {\n  static class pair {\n    double first, second;\n\n    public pair(double first, double second) {\n      this.first = first;\n      this.second = second;\n    }\n  }\n\n  static pair mirrorImage(double a, double b, double c, double x1, double y1) {\n    double temp = -2 * (a * x1 + b * y1 + c) / (a * a + b * b);\n    double x = temp * a + x1;\n    double y = temp * b + y1;\n    return new pair(x, y);\n  }\n\n  public static void main(String[] args) {\n    double a = -1.0;\n    double b = 1.0;\n    double c = 0.0;\n    double x1 = 1.0;\n    double y1 = 0.0;\n    pair image = mirrorImage(a, b, c, x1, y1);\n    System.out.print(\" Image \u2581 of \u2581 point \u2581 ( \" + x1 + \" , \u2581 \" + y1 + \" ) \u2581 \");\n    System.out.print(\n        \" by \u2581 mirror \u2581 ( \"\n            + a\n            + \" ) x \u2581 + \u2581 ( \"\n            + b\n            + \" ) y \u2581 + \u2581 ( \"\n            + c\n            + \" ) \u2581 = \u2581 0 , \u2581 is \u2581 : \");\n    System.out.println(\" ( \" + image.first + \" , \u2581 \" + image.second + \" ) \");\n  }\n}\n", "python": "def mirrorImage(a, b, c, x1, y1):\n    temp = -2 * (a * x1 + b * y1 + c) / (a * a + b * b)\n    x = temp * a + x1\n    y = temp * b + y1\n    return (x, y)\n\n\na = -1.0\nb = 1.0\nc = 0.0\nx1 = 1.0\ny1 = 0.0\nx, y = mirrorImage(a, b, c, x1, y1)\nprint(\" Image \u2581 of \u2581 point \u2581 ( \" + str(x1) + \" , \u2581 \" + str(y1) + \" ) \u2581 \")\nprint(\n    \" by \u2581 mirror \u2581 ( \"\n    + str(a)\n    + \" ) x \u2581 + \u2581 ( \"\n    + str(b)\n    + \" ) y \u2581 + \u2581 ( \"\n    + str(c)\n    + \" ) \u2581 = \u2581 0 , \u2581 is \u2581 : \"\n)\nprint(\" ( \" + str(x) + \" , \u2581 \" + str(y) + \" ) \")\n"}
{"text": "Minimum revolutions to move center of a circle to a target ", "java": "class GFG {\n  static double minRevolutions(double r, int x1, int y1, int x2, int y2) {\n    double d = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n    return Math.ceil(d / (2 * r));\n  }\n\n  public static void main(String arg[]) {\n    int r = 2, x1 = 0, y1 = 0;\n    int x2 = 0, y2 = 4;\n    System.out.print((int) minRevolutions(r, x1, y1, x2, y2));\n  }\n}\n", "python": "import math\n\n\ndef minRevolutions(r, x1, y1, x2, y2):\n    d = math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))\n    return math.ceil(d / (2 * r))\n\n\nr = 2\nx1 = 0\ny1 = 0\nx2 = 0\ny2 = 4\nprint(minRevolutions(r, x1, y1, x2, y2))\n"}
{"text": "Minimum count of consecutive integers till N whose bitwise AND is 0 with N ", "java": "class GFG {\n  static int count(int N) {\n    String a = Integer.toBinaryString(N);\n    int m = a.length() - 1;\n    int res = (int) (N - (Math.pow(2, m) - 1));\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int N = 18;\n    System.out.println(count(N));\n  }\n}\n", "python": "def count(N):\n    a = bin(N)\n    a = a[2:]\n    m = len(a) - 1\n    res = N - (2 ** m - 1)\n    return res\n\n\nN = 18\nprint(count(N))\n"}
{"text": "Find smallest value of K such that bitwise AND of numbers in range [ N , N ", "java": "import java.io.*;\n\nclass GFG {\n  public static int findSmallestNumK(int n) {\n    int cummAnd = n;\n    int i = n - 1;\n    while (cummAnd != 0) {\n      cummAnd = cummAnd & i;\n      if (cummAnd == 0) {\n        return i;\n      }\n      i--;\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int N = 17;\n    int lastNum = findSmallestNumK(N);\n    int K = lastNum == -1 ? lastNum : N - lastNum;\n    System.out.println(K);\n  }\n}\n", "python": "def findSmallestNumK(n):\n    cummAnd = n\n    i = n - 1\n    while cummAnd != 0:\n        cummAnd = cummAnd & i\n        if cummAnd == 0:\n            return i\n        i -= 1\n    return -1\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 17\n    lastNum = findSmallestNumK(N)\n    K = lastNum if lastNum == -1 else N - lastNum\n    print(K)\n"}
{"text": "Number of cycles formed by joining vertices of n sided polygon at the center ", "java": "import java.math.*;\nimport java.util.*;\n\nclass GFG {\n  static BigInteger findCycles(int N) {\n    BigInteger res, finalResult;\n    long val = 2 * N - 1;\n    String st = String.valueOf(val);\n    BigInteger str = new BigInteger(st);\n    String n1 = String.valueOf((N - 1));\n    String n2 = String.valueOf((N - 2));\n    BigInteger a = new BigInteger(n1);\n    BigInteger b = new BigInteger(n2);\n    res = a.multiply(b);\n    finalResult = res.add(str);\n    return finalResult;\n  }\n\n  public static void main(String args[]) throws Exception {\n    int N = 5;\n    System.out.println(findCycles(N));\n  }\n}\n", "python": "def findCycles(N):\n    res = 0\n    finalResult = 0\n    val = 2 * N - 1\n    s = val\n    res = (N - 1) * (N - 2)\n    finalResult = res + s\n    return finalResult\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    print(findCycles(N))\n"}
{"text": "Rearrange array such that difference of adjacent elements is in descending order ", "java": "import java.util.*;\n\nclass GFG {\n  static void printArray(int[] a, int n) {\n    Arrays.sort(a);\n    int i = 0;\n    int j = n - 1;\n    while (i <= j) {\n      if (i == j) {\n        System.out.print(a[i] + \" \u2581 \");\n      } else {\n        System.out.print(a[j] + \" \u2581 \");\n        System.out.print(a[i] + \" \u2581 \");\n      }\n      i = i + 1;\n      j = j - 1;\n    }\n    System.out.println();\n  }\n\n  public static void main(String[] args) {\n    int arr1[] = {1, 2, 3, 4, 5, 6};\n    int n1 = arr1.length;\n    printArray(arr1, n1);\n  }\n}\n", "python": "def printArray(a, n):\n    a.sort()\n    i = 0\n    j = n - 1\n    while i <= j:\n        if i == j:\n            print(a[i], end=\" \u2581 \")\n        else:\n            print(a[j], end=\" \u2581 \")\n            print(a[i], end=\" \u2581 \")\n        i = i + 1\n        j = j - 1\n    print()\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr1 = [1, 2, 3, 4, 5, 6]\n    n1 = len(arr1)\n    printArray(arr1, n1)\n"}
{"text": "Count total number of even sum sequences ", "java": "import java.util.*;\n\nclass GFG {\n  static final int M = 1000000007;\n\n  static long power(long x, int y, int p) {\n    long res = 1;\n    x = x % p;\n    while (y > 0) {\n      if ((y & 1) == 1) res = (res * x) % p;\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  static long modInverse(long n, int p) {\n    return power(n, p - 2, p);\n  }\n\n  static long nCrModPFermat(long n, int r, int p) {\n    if (r == 0) return 1;\n    long fac[] = new long[(int) n + 1];\n    fac[0] = 1;\n    int i;\n    for (i = 1; i <= n; i++) fac[i] = fac[i - 1] * i % p;\n    return (fac[(int) n] * modInverse(fac[r], p) % p * modInverse(fac[(int) n - r], p) % p) % p;\n  }\n\n  static long countOdd(long n) {\n    long x = n / 2;\n    if (n % 2 == 1) x++;\n    return x;\n  }\n\n  static long counteEven(long n) {\n    long x = n / 2;\n    return x;\n  }\n\n  static long CountEvenSumSequences(long n) {\n    long count = 0;\n    for (int i = 0; i <= n; i++) {\n      int even = i, odd = (int) n - i;\n      if (odd % 2 == 1) continue;\n      long tot = (power(countOdd(n), odd, M) * nCrModPFermat(n, odd, M)) % M;\n      tot = (tot * power(counteEven(n), i, M)) % M;\n      count += tot;\n      count %= M;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    long n = 5;\n    System.out.println(CountEvenSumSequences(n));\n  }\n}\n", "python": "M = 1000000007\n\n\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        x = (x * x) % p\n    return res\n\n\ndef modInverse(n, p):\n    return power(n, p - 2, p)\n\n\ndef nCrModPFermat(n, r, p):\n    if r == 0:\n        return 1\n    fac = [0] * (n + 1)\n    fac[0] = 1\n    for i in range(1, n + 1):\n        fac[i] = fac[i - 1] * i % p\n    return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p\n\n\ndef countOdd(n):\n    x = n // 2\n    if n % 2 == 1:\n        x += 1\n    return x\n\n\ndef counteEven(n):\n    x = n // 2\n    return x\n\n\ndef CountEvenSumSequences(n):\n    count = 0\n    for i in range(n + 1):\n        even = i\n        odd = n - i\n        if odd % 2 == 1:\n            continue\n        tot = (power(countOdd(n), odd, M) * nCrModPFermat(n, odd, M)) % M\n        tot = (tot * power(counteEven(n), i, M)) % M\n        count += tot\n        count %= M\n    return count\n\n\nn = 5\nprint(CountEvenSumSequences(n))\n"}
{"text": "Find number of magical pairs of string of length L ", "java": "class GFG {\n  static int power(int x, int y, int p) {\n    int res = 1;\n    x = x % p;\n    while (y > 0) {\n      if (y % 2 == 1) {\n        res = (res * x) % p;\n      }\n      x = (x * x) % p;\n    }\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int L = 2;\n    int P = (int) Math.pow(10, 9);\n    int ans = power(325, L, P);\n    System.out.println(ans);\n  }\n}\n", "python": "def power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y % 2 == 1:\n            res = (res * x) % p\n        x = (x * x) % p\n    return res\n\n\nL = 2\nP = pow(10, 9)\nans = power(325, L, P)\nprint(ans)\n"}
{"text": "Difference between Recursion and Iteration ", "java": "class GFG {\n  static int factorialUsingRecursion(int n) {\n    if (n == 0) return 1;\n    return n * factorialUsingRecursion(n - 1);\n  }\n\n  static int factorialUsingIteration(int n) {\n    int res = 1, i;\n    for (i = 2; i <= n; i++) res *= i;\n    return res;\n  }\n\n  public static void main(String[] args) {\n    int num = 5;\n    System.out.println(\n        \" Factorial \u2581 of \u2581 \" + num + \" \u2581 using \u2581 Recursion \u2581 is : \u2581 \" + factorialUsingRecursion(5));\n    System.out.println(\n        \" Factorial \u2581 of \u2581 \" + num + \" \u2581 using \u2581 Iteration \u2581 is : \u2581 \" + factorialUsingIteration(5));\n  }\n}\n", "python": "def factorialUsingRecursion(n):\n    if n == 0:\n        return 1\n    return n * factorialUsingRecursion(n - 1)\n\n\ndef factorialUsingIteration(n):\n    res = 1\n    for i in range(2, n + 1):\n        res *= i\n    return res\n\n\nnum = 5\nprint(\" Factorial \u2581 of \", num, \" using \u2581 Recursion \u2581 is : \", factorialUsingRecursion(5))\nprint(\" Factorial \u2581 of \", num, \" using \u2581 Iteration \u2581 is : \", factorialUsingIteration(5))\n"}
{"text": "Minimum count of numbers needed from 1 to N that yields the sum as K ", "java": "import java.io.*;\n\nclass GFG {\n  static int Minimum(int N, int K) {\n    int sum = N * (N + 1) / 2;\n    if (K > sum) return -1;\n    if (K <= N) return 1;\n    sum = 0;\n    int count = 0;\n    while (N >= 1 && sum < K) {\n      count += 1;\n      sum += N;\n      N -= 1;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int N = 5, K = 10;\n    System.out.println(Minimum(N, K));\n  }\n}\n", "python": "def Minimum(N, K):\n    sum = N * (N + 1) // 2\n    if K > sum:\n        return -1\n    if K <= N:\n        return 1\n    sum = 0\n    count = 0\n    while N >= 1 and sum < K:\n        count += 1\n        sum += N\n        N -= 1\n    return count\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 5\n    K = 10\n    print(Minimum(N, K))\n"}
{"text": "Count numbers up to N having Kth bit set ", "java": "class GFG {\n  static long getcount(long n, int k) {\n    long res = (n >> (k + 1)) << k;\n    if (((n >> k) & 1) != 0) res += n & ((1 << k) - 1);\n    return res;\n  }\n\n  public static void main(String[] args) {\n    long N = 14;\n    int K = 2;\n    System.out.println(getcount(N + 1, K));\n  }\n}\n", "python": "def getcount(n, k):\n    res = (n >> (k + 1)) << k\n    if (n >> k) & 1:\n        res += n & ((1 << k) - 1)\n    return res\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 14\n    K = 2\n    print(getcount(N + 1, K))\n"}
{"text": "Count distinct regular bracket sequences which are not N periodic ", "java": "import java.io.*;\n\nclass GFG {\n  static long binomialCoeff(int n, int k) {\n    long res = 1;\n    if (k > n - k) k = n - k;\n    for (int i = 0; i < k; ++i) {\n      res *= (n - i);\n      res /= (i + 1);\n    }\n    return res;\n  }\n\n  static long catalan(int n) {\n    long c = binomialCoeff(2 * n, n);\n    return c / (n + 1);\n  }\n\n  static long findWays(int n) {\n    if ((n & 1) == 1) return 0;\n    return catalan(n / 2);\n  }\n\n  static void countNonNPeriodic(int N) {\n    System.out.println(findWays(2 * N) - findWays(N));\n  }\n\n  public static void main(String[] args) {\n    int N = 4;\n    countNonNPeriodic(N);\n  }\n}\n", "python": "def binomialCoeff(n, k):\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res\n\n\ndef catalan(n):\n    c = binomialCoeff(2 * n, n)\n    return c // (n + 1)\n\n\ndef findWays(n):\n    if (n & 1) == 1:\n        return 0\n    return catalan(n // 2)\n\n\ndef countNonNPeriodic(N):\n    print(findWays(2 * N) - findWays(N))\n\n\nN = 4\ncountNonNPeriodic(N)\n"}
{"text": "Count of Ordered Pairs ( X , Y ) satisfying the Equation 1 / X + 1 / Y = 1 / N ", "java": "class GFG {\n  static void solve(int n) {\n    int ans = 0;\n    for (int y = n + 1; y <= n * n + n; y++) {\n      if ((n * n) % (y - n) == 0) {\n        ans += 1;\n      }\n    }\n    System.out.print(ans);\n  }\n\n  public static void main(String[] args) {\n    int n = 5;\n    solve(n);\n  }\n}\n", "python": "def solve(n):\n    ans = 0\n    y = n + 1\n    while y <= n * n + n:\n        if (n * n) % (y - n) == 0:\n            ans += 1\n        y += 1\n    print(ans)\n\n\nn = 5\nsolve(n)\n"}
{"text": "Partition a set into two subsets such that difference between max of one and min of other is minimized ", "java": "import java.util.*;\n\nclass GFG {\n  static int splitArray(int arr[], int N) {\n    Arrays.sort(arr);\n    int result = Integer.MAX_VALUE;\n    for (int i = 1; i < N; i++) {\n      result = Math.min(result, arr[i] - arr[i - 1]);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 1, 2, 6, 4};\n    int N = arr.length;\n    System.out.print(splitArray(arr, N));\n  }\n}\n", "python": "def splitArray(arr, N):\n    arr = sorted(arr)\n    result = 10 ** 9\n    for i in range(1, N):\n        result = min(result, arr[i] - arr[i - 1])\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 1, 2, 6, 4]\n    N = len(arr)\n    print(splitArray(arr, N))\n"}
{"text": "Find the element at R ' th \u2581 row \u2581 and \u2581 C ' th column in given a 2D pattern ", "java": "import java.io.*;\n\nclass GFG {\n  static int findValue(int R, int C) {\n    int k = (R * (R - 1)) / 2 + 1;\n    int diff = R + 1;\n    for (int i = 1; i < C; i++) {\n      k = (k + diff);\n      diff++;\n    }\n    return k;\n  }\n\n  public static void main(String[] args) {\n    int R = 4;\n    int C = 4;\n    int k = findValue(R, C);\n    System.out.println(k);\n  }\n}\n", "python": "def findValue(R, C):\n    k = (R * (R - 1)) // 2 + 1\n    diff = R + 1\n    for i in range(1, C):\n        k = k + diff\n        diff += 1\n    return k\n\n\nif __name__ == \" _ _ main _ _ \":\n    R = 4\n    C = 4\n    k = findValue(R, C)\n    print(k)\n"}
{"text": "Find two numbers made up of a given digit such that their difference is divisible by N ", "java": "import java.util.*;\n\nclass GFG {\n  static void findNumbers(int N, int M) {\n    int m = M;\n    Map<Integer, Integer> remLen = new HashMap<>();\n    int len, remainder = 0;\n    for (len = 1; len <= N + 1; ++len) {\n      remainder = M % N;\n      if (!remLen.containsKey(remainder)) {\n        remLen.put(remainder, len);\n      } else {\n        break;\n      }\n      M = M * 10 + m;\n      M = M % N;\n    }\n    int LenA = len;\n    int LenB = remLen.getOrDefault(remainder, 0);\n    for (int i = 0; i < LenB; ++i) System.out.print(m);\n    System.out.print(\" \u2581 \");\n    for (int i = 0; i < LenA; ++i) System.out.print(m);\n  }\n\n  public static void main(String[] args) {\n    int N = 8, M = 2;\n    findNumbers(N, M);\n  }\n}\n", "python": "def findNumbers(N, M):\n    m = M\n    remLen = {}\n    for len1 in range(1, N + 1, 1):\n        remainder = M % N\n        if remLen.get(remainder) == None:\n            remLen[remainder] = len1\n        else:\n            break\n        M = M * 10 + m\n        M = M % N\n    LenA = len1\n    LenB = remLen[remainder]\n    for i in range(LenB):\n        print(m, end=\" \")\n    print(\" \u2581 \", end=\" \")\n    for i in range(LenA):\n        print(m, end=\" \")\n    return\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 8\n    M = 2\n    findNumbers(N, M)\n"}
{"text": "Find maximum sum taking every Kth element in the array ", "java": "class GFG {\n  static int maxSum(int arr[], int n, int K) {\n    int maximum = Integer.MIN_VALUE;\n    int[] sum = new int[n];\n    for (int i = n - 1; i >= 0; i--) {\n      if (i + K < n) sum[i] = sum[i + K] + arr[i];\n      else sum[i] = arr[i];\n      maximum = Math.max(maximum, sum[i]);\n    }\n    return maximum;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 6, 4, 7, 2};\n    int n = arr.length;\n    int K = 2;\n    System.out.print(maxSum(arr, n, K));\n  }\n}\n", "python": "import sys\n\n\ndef maxSum(arr, n, K):\n    maximum = -sys.maxsize - 1\n    for i in range(n):\n        sumk = 0\n        for j in range(i, n, K):\n            sumk = sumk + arr[j]\n        maximum = max(maximum, sumk)\n    return maximum\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 6, 4, 7, 2]\n    n = len(arr)\n    K = 2\n    print(maxSum(arr, n, K))\n"}
{"text": "Find a distinct pair ( x , y ) in given range such that x divides y ", "java": "class GFG {\n  static void findpair(int l, int r) {\n    int c = 0;\n    for (int i = l; i <= r; i++) {\n      for (int j = i + 1; j <= r; j++) {\n        if (j % i == 0 && j != i) {\n          System.out.println(i + \" , \u2581 \" + j);\n          c = 1;\n          break;\n        }\n      }\n      if (c == 1) break;\n    }\n  }\n\n  public static void main(String args[]) {\n    int l = 1, r = 10;\n    findpair(l, r);\n  }\n}\n", "python": "def findpair(l, r):\n    ans1 = l\n    ans2 = 2 * l\n    print(ans1, \" , \u2581 \", ans2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    l, r = 1, 10\n    findpair(l, r)\n"}
{"text": "Check if the given array can be reduced to zeros with the given operation performed given number of times ", "java": "import java.util.*;\n\nclass GFG {\n  static boolean check(int arr[], int N, int K) {\n    HashSet<Integer> unique = new HashSet<Integer>();\n    for (int i = 0; i < N; i++) unique.add(arr[i]);\n    if (unique.size() == K) return true;\n    return false;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 1, 2, 3};\n    int N = arr.length;\n    int K = 3;\n    if (check(arr, N, K)) System.out.println(\" Yes \");\n    else System.out.println(\" No \");\n  }\n}\n", "python": "def check(arr, N, K):\n    unique = dict()\n    for i in range(N):\n        unique[arr[i]] = 1\n    if len(unique) == K:\n        return True\n    return False\n\n\narr = [1, 1, 2, 3]\nN = len(arr)\nK = 3\nif check(arr, N, K) == True:\n    print(\" Yes \")\nelse:\n    print(\" No \")\n"}
{"text": "Minimum index i such that all the elements from index i to given index are equal ", "java": "class GFG {\n  static int minIndex(int arr[], int n, int pos) {\n    int num = arr[pos];\n    int i = pos - 1;\n    while (i >= 0) {\n      if (arr[i] != num) break;\n      i--;\n    }\n    return i + 1;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 1, 1, 1, 5, 2};\n    int n = arr.length;\n    int pos = 4;\n    System.out.println(minIndex(arr, n, pos));\n  }\n}\n", "python": "def minIndex(arr, n, pos):\n    num = arr[pos]\n    i = pos - 1\n    while i >= 0:\n        if arr[i] != num:\n            break\n        i -= 1\n    return i + 1\n\n\narr = [2, 1, 1, 1, 5, 2]\nn = len(arr)\npos = 4\nprint(minIndex(arr, n, pos))\n"}
{"text": "Minimum index i such that all the elements from index i to given index are equal ", "java": "class GFG {\n  static int minIndex(int arr[], int pos) {\n    int low = 0;\n    int high = pos;\n    int i = pos;\n    while (low < high) {\n      int mid = (low + high) / 2;\n      if (arr[mid] != arr[pos]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n        i = mid;\n        if (mid > 0 && arr[mid - 1] != arr[pos]) {\n          break;\n        }\n      }\n    }\n    return arr[low] == arr[pos] ? low : i;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 1, 1, 1, 5, 2};\n  }\n}\n", "python": "def minIndex(arr, n, pos):\n    num = arr[pos]\n    i = pos - 1\n    while i >= 0:\n        if arr[i] != num:\n            break\n        i -= 1\n    return i + 1\n\n\narr = [2, 1, 1, 1, 5, 2]\nn = len(arr)\npos = 4\nprint(minIndex(arr, n, pos))\n"}
{"text": "Minimize the maximum minimum difference after one removal from array ", "java": "import java.util.*;\n\nclass solution {\n  static int findMinDifference(int arr[], int n) {\n    Arrays.sort(arr);\n    int diff1 = arr[n - 1] - arr[1];\n    int diff2 = arr[n - 2] - arr[0];\n    return Math.min(diff1, diff2);\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {1, 2, 4, 3, 4};\n    int n = arr.length;\n    System.out.print(findMinDifference(arr, n));\n  }\n}\n", "python": "def findMinDifference(arr, n):\n    arr.sort()\n    diff1 = arr[n - 1] - arr[1]\n    diff2 = arr[n - 2] - arr[0]\n    return min(diff1, diff2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 4, 3, 4]\n    n = len(arr)\n    print(findMinDifference(arr, n))\n"}
{"text": "Minimize the maximum minimum difference after one removal from array ", "java": "public class GFG {\n  static int findMinDifference(int arr[], int n) {\n    int min, secondMin, max, secondMax;\n    min = secondMax = (arr[0] < arr[1]) ? arr[0] : arr[1];\n    max = secondMin = (arr[0] < arr[1]) ? arr[1] : arr[0];\n    for (int i = 2; i < n; i++) {\n      if (arr[i] > max) {\n        secondMax = max;\n        max = arr[i];\n      } else if (arr[i] > secondMax) {\n        secondMax = arr[i];\n      } else if (arr[i] < min) {\n        secondMin = min;\n        min = arr[i];\n      } else if (arr[i] < secondMin) {\n        secondMin = arr[i];\n      }\n    }\n    int diff = Math.min(max - secondMin, secondMax - min);\n    return diff;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 4, 3, 4};\n    int n = arr.length;\n    System.out.println(findMinDifference(arr, n));\n  }\n}\n", "python": "def findMinDifference(arr, n):\n    arr.sort()\n    diff1 = arr[n - 1] - arr[1]\n    diff2 = arr[n - 2] - arr[0]\n    return min(diff1, diff2)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 4, 3, 4]\n    n = len(arr)\n    print(findMinDifference(arr, n))\n"}
{"text": "Longest subarray with elements divisible by k ", "java": "import java.io.*;\n\nclass GFG {\n  static int longestsubarray(int arr[], int n, int k) {\n    int current_count = 0;\n    int max_count = 0;\n    for (int i = 0; i < n; i++) {\n      if (arr[i] % k == 0) current_count++;\n      else current_count = 0;\n      max_count = Math.max(current_count, max_count);\n    }\n    return max_count;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 5, 11, 32, 64, 88};\n    int n = arr.length;\n    int k = 8;\n    System.out.println(longestsubarray(arr, n, k));\n  }\n}\n", "python": "def longestsubarray(arr, n, k):\n    current_count = 0\n    max_count = 0\n    for i in range(0, n, 1):\n        if arr[i] % k == 0:\n            current_count += 1\n        else:\n            current_count = 0\n        max_count = max(current_count, max_count)\n    return max_count\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 5, 11, 32, 64, 88]\n    n = len(arr)\n    k = 8\n    print(longestsubarray(arr, n, k))\n"}
{"text": "Find pair with maximum difference in any column of a Matrix ", "java": "public class GOC1 {\n  static int colMaxDiff(int mat[][]) {\n    int max_diff = Integer.MIN_VALUE;\n    for (int i = 0; i < N; i++) {\n      int max_val = mat[0][i], min_val = mat[0][i];\n      for (int j = 1; j < N; j++) {\n        max_val = Math.max(max_val, mat[j][i]);\n        min_val = Math.min(min_val, mat[j][i]);\n      }\n      max_diff = Math.max(max_diff, max_val - min_val);\n    }\n    return max_diff;\n  }\n\n  public static void main(String args[]) {\n    int mat[][] = {\n      {1, 2, 3, 4, 5}, {5, 3, 5, 4, 0}, {5, 6, 7, 8, 9}, {0, 6, 3, 4, 12}, {9, 7, 12, 4, 3},\n    };\n    System.out.println(\" Max \u2581 difference \u2581 : \u2581 \" + colMaxDiff(mat));\n  }\n}\n", "python": "def colMaxDiff(mat):\n    max_diff = 0\n    for i in range(N):\n        max_val = mat[0][i]\n        min_val = mat[0][i]\n        for j in range(1, N):\n            max_val = max(max_val, mat[j][i])\n            min_val = min(min_val, mat[j][i])\n        max_diff = max(max_diff, max_val - min_val)\n    return max_diff\n\n\nif __name__ == \" _ _ main _ _ \":\n    mat = [\n        [1, 2, 3, 4, 5],\n        [5, 3, 5, 4, 0],\n        [5, 6, 7, 8, 9],\n        [0, 6, 3, 4, 12],\n        [9, 7, 12, 4, 3],\n    ]\n    print(\" Max \u2581 difference \u2581 : \", colMaxDiff(mat))\n"}
{"text": "Find the one missing number in range ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int missingNum(int arr[], int n) {\n    List<Integer> list = new ArrayList<>(arr.length);\n    for (int i : arr) {\n      list.add(Integer.valueOf(i));\n    }\n    int minvalue = Collections.min(list);\n    ;\n    int xornum = 0;\n    for (int i = 0; i < n; i++) {\n      xornum ^= (minvalue) ^ arr[i];\n      minvalue++;\n    }\n    return xornum ^ minvalue;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {13, 12, 11, 15};\n    int n = arr.length;\n    System.out.println(missingNum(arr, n));\n  }\n}\n", "python": "def missingNum(arr, n):\n    minvalue = min(arr)\n    xornum = 0\n    for i in range(0, n):\n        xornum ^= (minvalue) ^ arr[i]\n        minvalue = minvalue + 1\n    return xornum ^ minvalue\n\n\narr = [13, 12, 11, 15]\nn = len(arr)\nprint(missingNum(arr, n))\n"}
{"text": "Find if given number is sum of first n natural numbers ", "java": "import java.io.*;\n\npublic class GFG {\n  static int findS(int s) {\n    int l = 1, r = (s / 2) + 1;\n    while (l <= r) {\n      int mid = (l + r) / 2;\n      int sum = mid * (mid + 1) / 2;\n      if (sum == s) return mid;\n      else if (sum > s) r = mid - 1;\n      else l = mid + 1;\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int s = 15;\n    int n = findS(s);\n    if (n == -1) System.out.println(\" - 1\");\n    else System.out.println(n);\n  }\n}\n", "python": "def findS(s):\n    _sum = 0\n    n = 1\n    while _sum < s:\n        _sum += n\n        n += 1\n    n -= 1\n    if _sum == s:\n        return n\n    return -1\n\n\ns = 15\nn = findS(s)\nif n == -1:\n    print(\" - 1\")\nelse:\n    print(n)\n"}
{"text": "Sort an array using Bubble Sort without using loops ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static ArrayList<Integer> bubble_sort(ArrayList<Integer> ar) {\n    if (ar.size() <= 1) return ar;\n    if (ar.size() == 2) {\n      if (ar.get(0) < ar.get(1)) return ar;\n      else return new ArrayList<Integer>(Arrays.asList(ar.get(1), ar.get(0)));\n    }\n    int a = ar.get(0);\n    int b = ar.get(1);\n    ArrayList<Integer> bs = new ArrayList<>();\n    for (int i = 2; i < ar.size(); i++) bs.add(ar.get(i));\n    ArrayList<Integer> res = new ArrayList<>();\n    if (a < b) {\n      ArrayList<Integer> temp1 = new ArrayList<>();\n      temp1.add(b);\n      for (int i = 0; i < bs.size(); i++) temp1.add(bs.get(i));\n      ArrayList<Integer> v = bubble_sort(temp1);\n      v.add(0, a);\n      res = v;\n    } else {\n      ArrayList<Integer> temp1 = new ArrayList<>();\n      temp1.add(a);\n      for (int i = 0; i < bs.size(); i++) temp1.add(bs.get(i));\n      ArrayList<Integer> v = bubble_sort(temp1);\n      v.add(0, b);\n      res = v;\n    }\n    ArrayList<Integer> pass = new ArrayList<>();\n    for (int i = 0; i < res.size() - 1; i++) pass.add(res.get(i));\n    ArrayList<Integer> ans = bubble_sort(pass);\n    ans.add(res.get(res.size() - 1));\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Integer> arr = new ArrayList<Integer>(Arrays.asList(1, 3, 4, 5, 6, 2));\n    ArrayList<Integer> res = bubble_sort(arr);\n    for (int i = 0; i < res.size(); i++) System.out.print(res.get(i) + \" \u2581 \");\n  }\n}\n", "python": "def bubble_sort(ar):\n    if len(ar) <= 1:\n        return ar\n    if len(ar) == 2:\n        return ar if ar[0] < ar[1] else [ar[1], ar[0]]\n    a, b = ar[0], ar[1]\n    bs = ar[2:]\n    res = []\n    if a < b:\n        res = [a] + bubble_sort([b] + bs)\n    else:\n        res = [b] + bubble_sort([a] + bs)\n    return bubble_sort(res[:-1]) + res[-1:]\n\n\narr = [1, 3, 4, 5, 6, 2]\nres = bubble_sort(arr)\nprint(*res)\n"}
{"text": "Minimum sum of absolute differences between pairs of a triplet from an array ", "java": "import java.util.*;\n\nclass GFG {\n  static int minimum_sum(int[] A, int N) {\n    Arrays.sort(A);\n    int sum = 2147483647;\n    for (int i = 0; i <= N - 3; i++) {\n      sum = Math.min(sum, Math.abs(A[i] - A[i + 1]) + Math.abs(A[i + 1] - A[i + 2]));\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int[] A = {1, 1, 2, 3};\n    int N = A.length;\n    System.out.print(minimum_sum(A, N));\n  }\n}\n", "python": "import sys\n\n\ndef minimum_sum(A, N):\n    A.sort(reverse=False)\n    sum = sys.maxsize\n    for i in range(N - 2):\n        sum = min(sum, abs(A[i] - A[i + 1]) + abs(A[i + 1] - A[i + 2]))\n    print(sum)\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [1, 1, 2, 3]\n    N = len(A)\n    minimum_sum(A, N)\n"}
{"text": "Make all characters of a string same by minimum number of increments or decrements of ASCII values of characters ", "java": "import java.io.*;\nimport java.util.Arrays;\n\nclass GFG {\n  static void sameChar(String S, int N) {\n    char temp[] = S.toCharArray();\n    Arrays.sort(temp);\n    String s = new String(temp);\n    int mid = s.charAt(N / 2);\n    int total_operations = 0;\n    for (int i = 0; i < N; i++) {\n      total_operations += Math.abs(((s.charAt(i) - 0) - mid));\n    }\n    System.out.print(total_operations);\n  }\n\n  public static void main(String[] args) {\n    String S = \" geeks \";\n    int N = S.length();\n    sameChar(S, N);\n  }\n}\n", "python": "def sameChar(S, N):\n    S = \" \".join(sorted(S))\n    mid = ord(S[N // 2])\n    total_operations = 0\n    for i in range(N):\n        total_operations += abs(ord(S[i]) - mid)\n    print(total_operations)\n\n\nS = \" geeks \"\nN = len(S)\nsameChar(S, N)\n"}
{"text": "Maximum score possible from an array with jumps of at most length K ", "java": "import java.io.*;\nimport java.math.*;\nimport java.util.*;\n\npublic class GFG {\n  static int maxScore(int i, int A[], int K, int N, int dp[]) {\n    if (i >= N - 1) return A[N - 1];\n    if (dp[i] != -1) return dp[i];\n    int score = Integer.MIN_VALUE;\n    for (int j = 1; j <= K; j++) {\n      score = Math.max(score, maxScore(i + j, A, K, N, dp));\n    }\n    return dp[i] = score + A[i];\n  }\n\n  static void getScore(int A[], int N, int K) {\n    int dp[] = new int[N];\n    for (int i = 0; i < N; i++) dp[i] = -1;\n    System.out.println(maxScore(0, A, K, N, dp));\n  }\n\n  public static void main(String args[]) {\n    int A[] = {100, -30, -50, -15, -20, -30};\n    int K = 3;\n    int N = A.length;\n    getScore(A, N, K);\n  }\n}\n", "python": "import sys\n\n\ndef maxScore(i, A, K, N, dp):\n    if i >= N - 1:\n        return A[N - 1]\n    if dp[i] != -1:\n        return dp[i]\n    score = 1 - sys.maxsize\n    for j in range(1, K + 1):\n        score = max(score, maxScore(i + j, A, K, N, dp))\n    dp[i] = score + A[i]\n    return dp[i]\n\n\ndef getScore(A, N, K):\n    dp = [0] * N\n    for i in range(N):\n        dp[i] = -1\n    print(maxScore(0, A, K, N, dp))\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [100, -30, -50, -15, -20, -30]\n    K = 3\n    N = len(A)\n    getScore(A, N, K)\n"}
{"text": "Partition array into two subsets with minimum Bitwise XOR between their maximum and minimum ", "java": "import java.util.*;\n\nclass GFG {\n  static int splitArray(int arr[], int N) {\n    Arrays.sort(arr);\n    int result = Integer.MAX_VALUE;\n    for (int i = 1; i < N; i++) {\n      result = Math.min(result, arr[i] - arr[i - 1]);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {3, 1, 2, 6, 4};\n    int N = arr.length;\n    System.out.print(splitArray(arr, N));\n  }\n}\n", "python": "def splitArray(arr, N):\n    arr = sorted(arr)\n    result = 10 ** 9\n    for i in range(1, N):\n        result = min(result, arr[i] ^ arr[i - 1])\n    return result\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [3, 1, 2, 6, 4]\n    N = len(arr)\n    print(splitArray(arr, N))\n"}
{"text": "Count ways to distribute exactly one coin to each worker ", "java": "import java.util.*;\n\nclass GFG {\n  static int MOD = 1000000007;\n\n  static int solve(Vector<Integer> values, Vector<Integer> salary) {\n    int ret = 1;\n    int amt = 0;\n    Collections.sort(values);\n    Collections.sort(salary);\n    while (salary.size() > 0) {\n      while (values.size() > 0 && values.get(values.size() - 1) >= salary.get(salary.size() - 1)) {\n        amt++;\n        values.remove(values.size() - 1);\n      }\n      if (amt == 0) return 0;\n      ret *= amt--;\n      ret %= MOD;\n      salary.remove(salary.size() - 1);\n    }\n    return ret;\n  }\n\n  public static void main(String[] args) {\n    Vector<Integer> values = new Vector<Integer>();\n    values.add(1);\n    values.add(2);\n    Vector<Integer> salary = new Vector<Integer>();\n    salary.add(2);\n    System.out.print(solve(values, salary));\n  }\n}\n", "python": "MOD = 1000000007\n\n\ndef solve(values, salary):\n    ret = 1\n    amt = 0\n    values = sorted(values)\n    salary = sorted(salary)\n    while len(salary) > 0:\n        while len(values) and values[-1] >= salary[-1]:\n            amt += 1\n            del values[-1]\n        if amt == 0:\n            return 0\n        ret *= amt\n        amt -= 1\n        ret %= MOD\n        del salary[-1]\n    return ret\n\n\nif __name__ == \" _ _ main _ _ \":\n    values = [1, 2]\n    salary = [2]\n    print(solve(values, salary))\n"}
{"text": "Minimize the sum of differences of consecutive elements after removing exactly K elements ", "java": "class GFG {\n  static final int N = 100;\n  static final int INF = 1000000;\n  static int dp[][] = new int[N][N];\n  static int vis[][] = new int[N][N];\n\n  static int findSum(int[] arr, int n, int k, int l, int r) {\n    if ((l) + (n - 1 - r) == k) return arr[r] - arr[l];\n    if (vis[l][r] == 1) return dp[l][r];\n    vis[l][r] = 1;\n    dp[l][r] = Math.min(findSum(arr, n, k, l, r - 1), findSum(arr, n, k, l + 1, r));\n    return dp[l][r];\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 2, 100, 120, 140};\n    int k = 2;\n    int n = arr.length;\n    System.out.println(findSum(arr, n, k, 0, n - 1));\n  }\n}\n", "python": "def findSum(arr, n, k):\n    ans = arr[n - k - 1] - arr[0]\n    for i in range(1, k + 1):\n        ans = min(arr[n - 1 - (k - i)] - arr[i], ans)\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [1, 2, 100, 120, 140]\n    k = 2\n    n = len(arr)\n    print(findSum(arr, n, k))\n"}
{"text": "Find Kth element in an array containing odd elements first and then even elements ", "java": "import java.io.*;\n\nclass GFG {\n  static int getNumber(int n, int k) {\n    int pos;\n    if ((n % 2) == 0) {\n      pos = n / 2;\n    } else {\n      pos = (n / 2) + 1;\n    }\n    if (k <= pos) {\n      return (k * 2 - 1);\n    } else return ((k - pos) * 2);\n  }\n\n  public static void main(String[] args) {\n    int n = 8, k = 5;\n    System.out.println(getNumber(n, k));\n  }\n}\n", "python": "def getNumber(n, k):\n    arr = [0] * n\n    i = 0\n    odd = 1\n    while odd <= n:\n        arr[i] = odd\n        i += 1\n        odd += 2\n    even = 2\n    while even <= n:\n        arr[i] = even\n        i += 1\n        even += 2\n    return arr[k - 1]\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 8\n    k = 5\n    print(getNumber(n, k))\n"}
{"text": "Minimum number of increment / decrement operations such that array contains all elements from 1 to N ", "java": "import java.util.*;\n\nclass solution {\n  static long minimumMoves(int a[], int n) {\n    long operations = 0;\n    Arrays.sort(a);\n    for (int i = 0; i < n; i++) operations += (long) Math.abs(a[i] - (i + 1));\n    return operations;\n  }\n\n  public static void main(String args[]) {\n    int arr[] = {5, 3, 2};\n    int n = arr.length;\n    System.out.print(minimumMoves(arr, n));\n  }\n}\n", "python": "def minimumMoves(a, n):\n    operations = 0\n    a.sort(reverse=False)\n    for i in range(0, n, 1):\n        operations = operations + abs(a[i] - (i + 1))\n    return operations\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [5, 3, 2]\n    n = len(arr)\n    print(minimumMoves(arr, n))\n"}
{"text": "Sum of width ( max and min diff ) of all Subsequences ", "java": "import java.util.Arrays;\n\nclass GFG {\n  static int MOD = 1000000007;\n\n  static int SubseqWidths(int[] A, int n) {\n    Arrays.sort(A);\n    int[] pow2 = new int[n];\n    pow2[0] = 1;\n    for (int i = 1; i < n; ++i) pow2[i] = (pow2[i - 1] * 2) % MOD;\n    int ans = 0;\n    for (int i = 0; i < n; ++i) ans = (ans + (pow2[i] - pow2[n - 1 - i]) * A[i]) % MOD;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int[] A = new int[] {5, 6, 4, 3, 8};\n    int n = A.length;\n    System.out.println(SubseqWidths(A, n));\n  }\n}\n", "python": "def SubseqWidths(A):\n    MOD = 10 ** 9 + 7\n    N = len(A)\n    A.sort()\n    pow2 = [1]\n    for i in range(1, N):\n        pow2.append(pow2[-1] * 2 % MOD)\n    ans = 0\n    for i, x in enumerate(A):\n        ans = (ans + (pow2[i] - pow2[N - 1 - i]) * x) % MOD\n    return ans\n\n\nA = [5, 6, 4, 3, 8]\nprint(SubseqWidths(A))\n"}
{"text": "Maximum Sum of Products of Two Arrays ", "java": "import java.io.*;\nimport java.util.*;\n\npublic class GFG {\n  static int maximumSOP(int[] a, int[] b) {\n    int sop = 0;\n    int n = a.length;\n    Arrays.sort(a);\n    Arrays.sort(b);\n    for (int i = 0; i < n; i++) {\n      sop += a[i] * b[i];\n    }\n    return sop;\n  }\n\n  public static void main(String args[]) {\n    int[] A = {1, 2, 3};\n    int[] B = {4, 5, 1};\n    System.out.println(maximumSOP(A, B));\n  }\n}\n", "python": "def maximumSOP(a, b):\n    sop = 0\n    n = len(a)\n    a.sort()\n    b.sort()\n    for i in range(n):\n        sop += a[i] * b[i]\n    return sop\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [1, 2, 3]\n    B = [4, 5, 1]\n    print(maximumSOP(A, B))\n"}
{"text": "Sort 3 numbers ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void sort3(int arr[], int temp[]) {\n    if (arr[1] < arr[0]) {\n      temp[0] = arr[0];\n      arr[0] = arr[1];\n      arr[1] = temp[0];\n    }\n    if (arr[2] < arr[1]) {\n      temp[0] = arr[1];\n      arr[1] = arr[2];\n      arr[2] = temp[0];\n      if (arr[1] < arr[0]) {\n        temp[0] = arr[0];\n        arr[0] = arr[1];\n        arr[1] = temp[0];\n      }\n    }\n  }\n\n  public static void main(String args[]) {\n    int a[] = new int[] {10, 12, 5};\n    int temp1[] = new int[10];\n    sort3(a, temp1);\n    for (int i = 0; i < 3; i++) System.out.print(a[i] + \" \u2581 \");\n  }\n}\n", "python": "a = [10, 12, 5]\na.sort()\nfor i in range(len(a)):\n    print(a[i], end=\" \u2581 \")\n"}
{"text": "Sort array after converting elements to their squares ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  public static void sortSquares(int arr[]) {\n    int n = arr.length;\n    for (int i = 0; i < n; i++) arr[i] = arr[i] * arr[i];\n    Arrays.sort(arr);\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {-6, -3, -1, 2, 4, 5};\n    int n = arr.length;\n    System.out.println(\" Before \u2581 sort \u2581 \");\n    for (int i = 0; i < n; i++) System.out.print(arr[i] + \" \u2581 \");\n    sortSquares(arr);\n    System.out.println(\" \");\n    System.out.println(\" After \u2581 Sort \u2581 \");\n    for (int i = 0; i < n; i++) System.out.print(arr[i] + \" \u2581 \");\n  }\n}\n", "python": "def sortSquare(arr, n):\n    for i in range(n):\n        arr[i] = arr[i] * arr[i]\n    arr.sort()\n\n\narr = [-6, -3, -1, 2, 4, 5]\nn = len(arr)\nprint(\" Before \u2581 sort \")\nfor i in range(n):\n    print(arr[i], end=\" \u2581 \")\nprint(\" \")\nsortSquare(arr, n)\nprint(\" After \u2581 sort \")\nfor i in range(n):\n    print(arr[i], end=\" \u2581 \")\n"}
{"text": "Sort an array when two halves are sorted ", "java": "import java.io.*;\n\nclass GFG {\n  static void mergeTwoHalf(int[] A, int n) {\n    int i;\n    int[] temp = new int[n];\n    for (i = 0; i < n - 1; i++) {\n      if (A[i] > A[i + 1]) {\n        half_i = i + 1;\n        break;\n      }\n    }\n    if (half_i == 0) return;\n    i = 0;\n    int j = half_i;\n    int k = 0;\n    while (i < half_i && j < n) {\n      if (A[i] < A[j]) temp[k++] = A[i++];\n      else temp[k++] = A[j++];\n    }\n    while (i < half_i) temp[k++] = A[i++];\n    while (j < n) temp[k++] = A[j++];\n    for (i = 0; i < n; i++) A[i] = temp[i];\n  }\n\n  public static void main(String[] args) {\n    int[] A = {2, 3, 8, -1, 7, 10};\n    int n = A.length;\n    mergeTwoHalf(A, n);\n    for (int i = 0; i < n; i++) System.out.print(A[i] + \" \u2581 \");\n  }\n}\n", "python": "def mergeTwoHalf(A, n):\n    A.sort()\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [2, 3, 8, -1, 7, 10]\n    n = len(A)\n    mergeTwoHalf(A, n)\n    for i in range(n):\n        print(A[i], end=\" \u2581 \")\n    DEDENT\n"}
{"text": "Absolute distinct count in a sorted array ", "java": "import java.util.*;\n\nclass GFG {\n  static int distinctCount(int arr[], int n) {\n    Set<Integer> s = new HashSet<Integer>();\n    for (int i = 0; i < n; i++) s.add(Math.abs(arr[i]));\n    return s.size();\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {-2, -1, 0, 1, 1};\n    int n = arr.length;\n    System.out.println(\" Count \u2581 of \u2581 absolute \u2581 distinct \u2581 values \u2581 : \u2581 \" + distinctCount(arr, n));\n  }\n}\n", "python": "def distinctCount(arr, n):\n    s = set()\n    for i in range(n):\n        s.add(abs(arr[i]))\n    return len(s)\n\n\narr = [-2, -1, 0, 1, 1]\nn = len(arr)\nprint(\" Count \u2581 of \u2581 absolute \u2581 distinct \u2581 values : \", distinctCount(arr, n))\n"}
{"text": "Absolute distinct count in a sorted array ", "java": "import java.io.*;\n\nclass GFG {\n  static int distinctCount(int arr[], int n) {\n    int count = n;\n    int i = 0, j = n - 1, sum = 0;\n    while (i < j) {\n      while (i != j && arr[i] == arr[i + 1]) {\n        count--;\n        i++;\n      }\n      while (i != j && arr[j] == arr[j - 1]) {\n        count--;\n        j--;\n      }\n      if (i == j) break;\n      sum = arr[i] + arr[j];\n      if (sum == 0) {\n        count--;\n        i++;\n        j--;\n      } else if (sum < 0) i++;\n      else j--;\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {-2, -1, 0, 1, 1};\n    int n = arr.length;\n    System.out.println(\" Count \u2581 of \u2581 absolute \u2581 distinct \u2581 values \u2581 : \u2581 \" + distinctCount(arr, n));\n  }\n}\n", "python": "def distinctCount(arr, n):\n    s = set()\n    for i in range(n):\n        s.add(abs(arr[i]))\n    return len(s)\n\n\narr = [-2, -1, 0, 1, 1]\nn = len(arr)\nprint(\" Count \u2581 of \u2581 absolute \u2581 distinct \u2581 values : \", distinctCount(arr, n))\n"}
{"text": "Convert A into B by incrementing or decrementing 1 , 2 , or 5 any number of times ", "java": "import java.io.*;\n\nclass GFG {\n  static int minimumSteps(int a, int b) {\n    int cnt = 0;\n    a = Math.abs(a - b);\n    cnt = (a / 5) + (a % 5) / 2 + (a % 5) % 2;\n    return cnt;\n  }\n\n  public static void main(String[] args) {\n    int A = 3, B = 9;\n    System.out.println(minimumSteps(A, B));\n  }\n}\n", "python": "def minimumSteps(a, b):\n    cnt = 0\n    a = abs(a - b)\n    cnt = (a // 5) + (a % 5) // 2 + (a % 5) % 2\n    return cnt\n\n\nA = 3\nB = 9\nprint(minimumSteps(A, B))\n"}
{"text": "Maximize number of circular buildings that can be covered by L length wire ", "java": "import java.io.*;\n\nclass GFG {\n  static final double Pi = 3.141592;\n\n  static int MaxBuildingsCovered(int arr[], int N, int L) {\n    double curr_sum = 0;\n    int start = 0, curr_count = 0, max_count = 0;\n    for (int i = 0; i < N; i++) {\n      curr_sum = curr_sum + ((double) arr[i] * Pi);\n      if (i != 0) curr_sum += 1;\n      if (curr_sum <= L) {\n        curr_count++;\n      } else if (curr_sum > L) {\n        curr_sum = curr_sum - ((double) arr[start] * Pi);\n        curr_sum -= 1;\n        start++;\n        curr_count--;\n      }\n      max_count = Math.max(curr_count, max_count);\n    }\n    return max_count;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {4, 1, 6, 2};\n    int L = 24;\n    int N = arr.length;\n    System.out.println(MaxBuildingsCovered(arr, N, L));\n  }\n}\n", "python": "Pi = 3.141592\n\n\ndef MaxBuildingsCovered(arr, N, L):\n    curr_sum = 0\n    start = 0\n    curr_count = 0\n    max_count = 0\n    for i in range(N):\n        curr_sum = curr_sum + (arr[i] * Pi)\n        if i != 0:\n            curr_sum += 1\n        if curr_sum <= L:\n            curr_count += 1\n        elif curr_sum > L:\n            curr_sum = curr_sum - (arr[start] * Pi)\n            curr_sum -= 1\n            start += 1\n            curr_count -= 1\n        max_count = max(curr_count, max_count)\n    return max_count\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [4, 1, 6, 2]\n    L = 24\n    N = len(arr)\n    print(MaxBuildingsCovered(arr, N, L))\n"}
{"text": "Count numbers less than N whose Bitwise AND with N is zero ", "java": "import java.util.*;\n\nclass GFG {\n  static int countUnsetBits(int N) {\n    int c = 0;\n    while (N != 0) {\n      if (N % 2 == 0) {\n        c += 1;\n      }\n      N = N >> 1;\n    }\n    return c;\n  }\n\n  static void countBitwiseZero(int N) {\n    int unsetBits = countUnsetBits(N);\n    System.out.print(1 << unsetBits);\n  }\n\n  public static void main(String[] args) {\n    int N = 9;\n    countBitwiseZero(N);\n  }\n}\n", "python": "def countUnsetBits(N):\n    c = 0\n    while N:\n        if N % 2 == 0:\n            c += 1\n        N = N >> 1\n    return c\n\n\ndef countBitwiseZero(N):\n    unsetBits = countUnsetBits(N)\n    print((1 << unsetBits))\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 9\n    countBitwiseZero(N)\n"}
{"text": "Maximize count of distinct profits possible by N transactions ", "java": "\nclass GFG {\n  static int numberOfWays(int N, int X, int Y) {\n    int S1 = (N - 1) * X + Y;\n    int S2 = (N - 1) * Y + X;\n    return (S2 - S1 + 1);\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    int X = 13;\n    int Y = 15;\n    System.out.println(numberOfWays(N, X, Y));\n  }\n}\n", "python": "def numberOfWays(N, X, Y):\n    S1 = (N - 1) * X + Y\n    S2 = (N - 1) * Y + X\n    return S2 - S1 + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    N = 3\n    X = 13\n    Y = 15\n    print(numberOfWays(N, X, Y))\n"}
{"text": "Minimum number of operations required to make a permutation of first N natural numbers equal ", "java": "import java.io.*;\n\nclass GFG {\n  static int MinimumOperations(int[] A, int N, int K) {\n    int Count = 0;\n    int i = 0;\n    while (i < N - 1) {\n      i = i + K - 1;\n      Count++;\n    }\n    return Count;\n  }\n\n  public static void main(String[] args) {\n    int[] A = {5, 4, 3, 1, 2};\n    int K = 3;\n    int N = A.length;\n    System.out.println(MinimumOperations(A, N, K));\n  }\n}\n", "python": "def MinimumOperations(A, N, K):\n    Count = 0\n    i = 0\n    while i < N - 1:\n        i = i + K - 1\n        Count += 1\n    return Count\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [5, 4, 3, 1, 2]\n    K = 3\n    N = len(A)\n    print(MinimumOperations(A, N, K))\n"}
{"text": "Count distinct sum of pairs possible from a given range ", "java": "import java.io.*;\n\nclass GFG {\n  static int distIntegers(int L, int R) {\n    return 2 * R - 2 * L + 1;\n  }\n\n  public static void main(String[] args) {\n    int L = 3, R = 8;\n    System.out.println(distIntegers(L, R));\n  }\n}\n", "python": "def distIntegers(L, R):\n    return 2 * R - 2 * L + 1\n\n\nif __name__ == \" _ _ main _ _ \":\n    L, R = 3, 8\n    print(distIntegers(L, R))\n"}
{"text": "Count pairs having distinct sum from a given range ", "java": "import java.io.*;\n\nclass GFG {\n  static void countPairs(long L, long R) {\n    long firstNum = 2 * L;\n    long lastNum = 2 * R;\n    long Cntpairs = lastNum - firstNum + 1;\n    System.out.println(Cntpairs);\n  }\n\n  public static void main(String[] args) {\n    long L = 2, R = 3;\n    countPairs(L, R);\n  }\n}\n", "python": "def countPairs(L, R):\n    firstNum = 2 * L\n    lastNum = 2 * R\n    Cntpairs = lastNum - firstNum + 1\n    print(Cntpairs)\n\n\nif __name__ == \" _ _ main _ _ \":\n    L, R = 2, 3\n    countPairs(L, R)\n"}
{"text": "Minimum increments to modify array such that value of any array element can be splitted to make all remaining elements equal ", "java": "import java.io.*;\n\nclass GFG {\n  public static void minimumMoves(int[] arr, int N) {\n    int sum = 0;\n    int maxelement = -1;\n    if (N == 2) {\n      System.out.print(\"0\");\n      return;\n    }\n    for (int i = 0; i < N; i++) {\n      sum += arr[i];\n      maxelement = Math.max(maxelement, arr[i]);\n    }\n    int k = (sum + N - 2) / (N - 1);\n    k = Math.max(maxelement, k);\n    int ans = k * (N - 1) - sum;\n    System.out.println(ans);\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {2, 3, 7};\n    int N = arr.length;\n    minimumMoves(arr, N);\n  }\n}\n", "python": "def minimumMoves(arr, N):\n    sum = 0\n    maxelement = -1\n    if N == 2:\n        print(0, end=\" \")\n    for i in range(N):\n        sum += arr[i]\n        maxelement = max(maxelement, arr[i])\n    K = (sum + N - 2) // (N - 1)\n    K = max(maxelement, K)\n    ans = K * (N - 1) - sum\n    print(ans)\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 3, 7]\n    N = 3\n    minimumMoves(arr, N)\n"}
{"text": "Unset least significant K bits of a given number ", "java": "import java.util.*;\n\nclass GFG {\n  static int clearLastBit(int N, int K) {\n    int mask = (-1 << K + 1);\n    return N = N & mask;\n  }\n\n  public static void main(String[] args) {\n    int N = 730, K = 3;\n    System.out.print(clearLastBit(N, K));\n  }\n}\n", "python": "def clearLastBit(N, K):\n    mask = -1 << K + 1\n    N = N & mask\n    return N\n\n\nN = 730\nK = 3\nprint(clearLastBit(N, K))\n"}
{"text": "Count of subarrays having sum equal to its length ", "java": "import java.util.*;\n\nclass GFG {\n  static int countOfSubarray(int arr[], int N) {\n    for (int i = 0; i < N; i++) arr[i]--;\n    int[] pref = new int[N];\n    pref[0] = arr[0];\n    for (int i = 1; i < N; i++) pref[i] = pref[i - 1] + arr[i];\n    HashMap<Integer, Integer> mp = new HashMap<Integer, Integer>();\n    int answer = 0;\n    mp.put(0, 1);\n    for (int i = 0; i < N; i++) {\n      if (mp.containsKey(pref[i])) {\n        answer += mp.get(pref[i]);\n        mp.put(pref[i], mp.get(pref[i]) + 1);\n      } else {\n        mp.put(pref[i], 1);\n      }\n    }\n    return answer;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {1, 1, 0};\n    int N = arr.length;\n    System.out.print(countOfSubarray(arr, N));\n  }\n}\n", "python": "from collections import defaultdict\n\n\ndef countOfSubarray(arr, N):\n    for i in range(N):\n        arr[i] -= 1\n    pref = [0] * N\n    pref[0] = arr[0]\n    for i in range(1, N):\n        pref[i] = pref[i - 1] + arr[i]\n    mp = defaultdict(lambda: 0)\n    answer = 0\n    mp[0] += 1\n    for i in range(N):\n        answer += mp[pref[i]]\n        mp[pref[i]] += 1\n    return answer\n\n\narr = [1, 1, 0]\nN = len(arr)\nprint(countOfSubarray(arr, N))\n"}
{"text": "Nth Subset of the Sequence consisting of powers of K in increasing order of their Sum ", "java": "import java.util.*;\n\nclass GFG {\n  static void printsubset(int n, int k) {\n    int count = 0, x = 0;\n    ArrayList<Integer> vec = new ArrayList<>();\n    while (n != 0) {\n      x = n & 1;\n      if (x != 0) {\n        vec.add((int) Math.pow(k, count));\n      }\n      n = n >> 1;\n      count++;\n    }\n    for (int i = 0; i < vec.size(); i++) System.out.print(vec.get(i) + \" \u2581 \");\n  }\n\n  public static void main(String[] args) {\n    int n = 7, k = 4;\n    printsubset(n, k);\n  }\n}\n", "python": "import math\n\n\ndef printSubset(N, K):\n    answer = \" \"\n    while N > 0:\n        p = int(math.log(N, 2))\n        answer = str(K ** p) + \" \u2581 \" + answer\n        N = N % (2 ** p)\n    print(answer)\n\n\nN = 5\nK = 4\nprintSubset(N, K)\n"}
{"text": "Count total set bits in all numbers from range L to R ", "java": "class GFG {\n  static int countSetBitsUtil(int x) {\n    if (x <= 0) return 0;\n    return ((x % 2 == 0 ? 0 : 1) + countSetBitsUtil(x / 2));\n  }\n\n  static int countSetBits(int L, int R) {\n    int bitCount = 0;\n    for (int i = L; i <= R; i++) {\n      bitCount += countSetBitsUtil(i);\n    }\n    return bitCount;\n  }\n\n  public static void main(String[] args) {\n    int L = 3, R = 5;\n    System.out.printf(\" Total \u2581 set \u2581 bit \u2581 count \u2581 is \u2581 % d \", countSetBits(L, R));\n  }\n}\n", "python": "def getLeftmostBit(n):\n    m = 0\n    while n > 1:\n        n = n >> 1\n        m += 1\n    return m\n\n\ndef getNextLeftmostBit(n, m):\n    temp = 1 << m\n    while n < temp:\n        temp = temp >> 1\n        m -= 1\n    return m\n\n\ndef countSetBit(n):\n    m = getLeftmostBit(n)\n    return _countSetBit(n, m)\n\n\ndef _countSetBit(n, m):\n    if n == 0:\n        return 0\n    m = getNextLeftmostBit(n, m)\n    if n == int(1 << (m + 1)) - 1:\n        return int(m + 1) * (1 << m)\n    n = n - (1 << m)\n    return (n + 1) + countSetBit(n) + m * (1 << (m - 1))\n\n\ndef countSetBits(L, R):\n    return abs(countSetBit(R) - countSetBit(L - 1))\n\n\nif __name__ == \" _ _ main _ _ \":\n    L = 3\n    R = 5\n    print(\" Total \u2581 set \u2581 bit \u2581 count \u2581 is \u2581 \", countSetBits(L, R))\n"}
{"text": "Maximum area of a Rectangle that can be circumscribed about a given Rectangle of size LxW ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static double AreaofRectangle(int L, int W) {\n    double area = (W + L) * (W + L) / 2;\n    return area;\n  }\n\n  public static void main(String args[]) {\n    int L = 18;\n    int W = 12;\n    System.out.println(AreaofRectangle(L, W));\n  }\n}\n", "python": "def AreaofRectangle(L, W):\n    area = (W + L) * (W + L) / 2\n    return area\n\n\nif __name__ == \" _ _ main _ _ \":\n    L = 18\n    W = 12\n    print(AreaofRectangle(L, W))\n"}
{"text": "Minimum number of operations required to reduce N to 0 ", "java": "class GFG {\n  static int downToZero(int n) {\n    if (n <= 3) return n;\n    int[] dp = new int[n + 1];\n    for (int i = 0; i < n + 1; i++) dp[i] = -1;\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 2;\n    dp[3] = 3;\n    int sqr;\n    for (int i = 4; i <= n; i++) {\n      sqr = (int) Math.sqrt(i);\n      int best = Integer.MAX_VALUE;\n      while (sqr > 1) {\n        if (i % sqr == 0) {\n          best = Math.min(best, 1 + dp[sqr]);\n        }\n        sqr--;\n      }\n      best = Math.min(best, 1 + dp[i - 1]);\n      dp[i] = best;\n    }\n    return dp[n];\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.print(downToZero(n));\n  }\n}\n", "python": "import math\nimport sys\n\n\ndef downToZero(n):\n    if n <= 3:\n        return n\n    dp = [-1] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    for i in range(4, n + 1):\n        sqr = (int)(math.sqrt(i))\n        best = sys.maxsize\n        while sqr > 1:\n            if i % sqr == 0:\n                best = min(best, 1 + dp[sqr])\n            sqr -= 1\n        best = min(best, 1 + dp[i - 1])\n        dp[i] = best\n    return dp[n]\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(downToZero(n))\n"}
{"text": "Minimum number of operations required to reduce N to 0 ", "java": "class GFG {\n  static int downToZero(int n) {\n    if (n <= 3) return n;\n    return n % 2 == 0 ? 3 : 4;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.println(downToZero(n));\n  }\n}\n", "python": "import math\nimport sys\n\n\ndef downToZero(n):\n    if n <= 3:\n        return n\n    dp = [-1] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    for i in range(4, n + 1):\n        sqr = (int)(math.sqrt(i))\n        best = sys.maxsize\n        while sqr > 1:\n            if i % sqr == 0:\n                best = min(best, 1 + dp[sqr])\n            sqr -= 1\n        best = min(best, 1 + dp[i - 1])\n        dp[i] = best\n    return dp[n]\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(downToZero(n))\n"}
{"text": "Sum of product of all integers upto N with their count of divisors ", "java": "class GFG {\n  static int sumOfFactors(int N) {\n    int ans = 0;\n    for (int i = 1; i <= N; i++) {\n      int first = i;\n      int last = (N / i) * i;\n      int factors = (last - first) / i + 1;\n      int totalContribution = (((factors) * (factors + 1)) / 2) * i;\n      ans += totalContribution;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    System.out.println(sumOfFactors(N));\n  }\n}\n", "python": "def sumOfFactors(N):\n    ans = 0\n    for i in range(1, N + 1):\n        first = i\n        last = (N // i) * i\n        factors = (last - first) // i + 1\n        totalContribution = ((factors * (factors + 1)) // 2) * i\n        ans += totalContribution\n    return ans\n\n\nN = 3\nprint(sumOfFactors(N))\n"}
{"text": "Minimum number of distinct elements after removing M items ", "java": "import java.util.*;\n\nclass GFG {\n  static int distinctNumbers(int arr[], int m, int n) {\n    Map<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (int i = 0; i < n; i++) count.put(arr[i], count.getOrDefault(arr[i], 0) + 1);\n    int[] fre_arr = new int[n + 1];\n    for (Integer it : count.values()) {\n      fre_arr[it]++;\n    }\n    int ans = count.size();\n    for (int i = 1; i <= n; i++) {\n      int temp = fre_arr[i];\n      if (temp == 0) continue;\n      int t = Math.min(temp, m / i);\n      ans -= t;\n      m -= i * t;\n    }\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int arr[] = {2, 4, 1, 5, 3, 5, 1, 3};\n    int n = arr.length;\n    int m = 2;\n    System.out.println(distinctNumbers(arr, m, n));\n  }\n}\n", "python": "def distinctNumbers(arr, m, n):\n    count = {}\n    for i in range(n):\n        count[arr[i]] = count.get(arr[i], 0) + 1\n    fre_arr = [0] * (n + 1)\n    for it in count:\n        fre_arr[count[it]] += 1\n    ans = len(count)\n    for i in range(1, n + 1):\n        temp = fre_arr[i]\n        if temp == 0:\n            continue\n        t = min(temp, m // i)\n        ans -= t\n        m -= i * t\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    arr = [2, 4, 1, 5, 3, 5, 1, 3]\n    n = len(arr)\n    m = 2\n    print(distinctNumbers(arr, m, n))\n"}
{"text": "Maximum sum of values in a given range of an Array for Q queries when shuffling is allowed ", "java": "import java.util.*;\n\nclass GFG {\n  static int maximumSubarraySum(int a[], int n, ArrayList<List<Integer>> subarrays) {\n    int i, maxsum = 0;\n    int[] prefixArray = new int[n];\n    for (i = 0; i < subarrays.size(); ++i) {\n      prefixArray[subarrays.get(i).get(0) - 1]++;\n      prefixArray[subarrays.get(i).get(1)]--;\n    }\n    for (i = 1; i < n; i++) {\n      prefixArray[i] += prefixArray[i - 1];\n    }\n    Arrays.sort(prefixArray);\n    Arrays.sort(a);\n    for (i = 0; i < n; i++) maxsum += a[i] * prefixArray[i];\n    return maxsum;\n  }\n\n  public static void main(String[] args) {\n    int n = 6;\n    int a[] = {4, 1, 2, 1, 9, 2};\n    ArrayList<List<Integer>> subarrays = new ArrayList<>();\n    subarrays.add(Arrays.asList(1, 2));\n    subarrays.add(Arrays.asList(1, 3));\n    subarrays.add(Arrays.asList(1, 4));\n    subarrays.add(Arrays.asList(3, 4));\n    System.out.println(maximumSubarraySum(a, n, subarrays));\n  }\n}\n", "python": "def maximumSubarraySum(a, n, subarrays):\n    maxsum = 0\n    prefixArray = [0] * n\n    for i in range(len(subarrays)):\n        prefixArray[subarrays[i][0] - 1] += 1\n        prefixArray[subarrays[i][1]] -= 1\n    for i in range(1, n):\n        prefixArray[i] += prefixArray[i - 1]\n    prefixArray.sort()\n    prefixArray.reverse()\n    a.sort()\n    a.reverse()\n    for i in range(n):\n        maxsum += a[i] * prefixArray[i]\n    return maxsum\n\n\nn = 6\na = [4, 1, 2, 1, 9, 2]\nsubarrays = [[1, 2], [1, 3], [1, 4], [3, 4]]\nprint(maximumSubarraySum(a, n, subarrays))\n"}
{"text": "Maximize the sum of modulus with every Array element ", "java": "import java.io.*;\n\nclass GFG {\n  static int maxModulosum(int a[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += a[i];\n    }\n    return sum - n;\n  }\n\n  public static void main(String[] args) {\n    int a[] = new int[] {3, 4, 6};\n    int n = a.length;\n    System.out.println(maxModulosum(a, n));\n  }\n}\n", "python": "def maxModulosum(a, n):\n    sum1 = 0\n    for i in range(0, n):\n        sum1 += a[i]\n    return sum1 - n\n\n\na = [3, 4, 6]\nn = len(a)\nprint(maxModulosum(a, n))\n"}
{"text": "Minimize the non ", "java": "class GFG {\n  static int minOccupiedPosition(int A[], int n) {\n    int minPos = 0;\n    for (int i = 0; i < n; ++i) {\n      if (A[i] > 0) {\n        ++minPos;\n        i += 2;\n      }\n    }\n    return minPos;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {8, 0, 7, 0, 0, 6};\n    int n = A.length;\n    System.out.print(minOccupiedPosition(A, n));\n  }\n}\n", "python": "def minOccupiedPosition(A, n):\n    minPos = 0\n    i = 0\n    while i < n:\n        if A[i] > 0:\n            minPos += 1\n            i += 2\n        i += 1\n    return minPos\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [8, 0, 7, 0, 0, 6]\n    n = len(A)\n    print(minOccupiedPosition(A, n))\n"}
{"text": "Find minimum number K such that sum of array after multiplication by K exceed S ", "java": "import java.io.*;\n\nclass GFG {\n  static int findMinimumK(int a[], int n, int S) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += a[i];\n    }\n    return (int) Math.ceil(((S + 1) * 1.0) / (sum * 1.0));\n  }\n\n  public static void main(String[] args) {\n    int a[] = {10, 7, 8, 10, 12, 19};\n    int n = a.length;\n    int S = 200;\n    System.out.print(findMinimumK(a, n, S));\n  }\n}\n", "python": "import math\n\n\ndef findMinimumK(a, n, S):\n    sum = 0\n    for i in range(0, n):\n        sum += a[i]\n    return math.ceil(((S + 1) * 1.0) / (sum * 1.0))\n\n\na = [10, 7, 8, 10, 12, 19]\nn = len(a)\ns = 200\nprint(findMinimumK(a, n, s))\n"}
{"text": "Partition first N natural number into two sets such that their sum is not coprime ", "java": "import java.io.*;\n\nclass GFG {\n  static void find_set(int n) {\n    if (n <= 2) {\n      System.out.println(\" - 1\");\n      return;\n    }\n    int sum1 = (n * (n - 1)) / 2;\n    int sum2 = n;\n    System.out.println(sum1 + \" \u2581 \" + sum2);\n  }\n\n  public static void main(String[] args) {\n    int n = 8;\n    find_set(n);\n  }\n}\n", "python": "def find_set(n):\n    if n <= 2:\n        print(\" - 1\")\n        return\n    sum1 = (n * (n - 1)) / 2\n    sum2 = n\n    print(sum1, \" \u2581 \", sum2)\n\n\nn = 8\nfind_set(n)\n"}
{"text": "Count common elements in two arrays containing multiples of N and M ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int gcd(int a, int b) {\n    if (a == 0) return b;\n    return gcd(b % a, a);\n  }\n\n  static int lcm(int n, int m) {\n    return (n * m) / gcd(n, m);\n  }\n\n  public static void main(String[] args) {\n    int n = 2, m = 3, k = 5;\n    System.out.print(k / lcm(n, m));\n  }\n}\n", "python": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef lcm(n, m):\n    return (n * m) // gcd(n, m)\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 2\n    m = 3\n    k = 5\n    print(k // lcm(n, m))\n"}
{"text": "Number of times the largest perfect square number can be subtracted from N ", "java": "\npublic class GfG {\n  static int countSteps(int n) {\n    int steps = 0;\n    while (n > 0) {\n      int largest = (int) Math.sqrt(n);\n      n -= (largest * largest);\n      steps++;\n    }\n    return steps;\n  }\n\n  public static void main(String[] args) {\n    int n = 85;\n    System.out.println(countSteps(n));\n  }\n}\n", "python": "from math import sqrt\n\n\ndef countSteps(n):\n    steps = 0\n    while n:\n        largest = int(sqrt(n))\n        n -= largest * largest\n        steps += 1\n    return steps\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 85\n    print(countSteps(n))\n"}
{"text": "Given count of digits 1 , 2 , 3 , 4 , find the maximum sum possible ", "java": "class GFG {\n  static int Maxsum(int c1, int c2, int c3, int c4) {\n    int sum = 0;\n    int two34 = Math.min(c2, Math.min(c3, c4));\n    sum = two34 * 234;\n    c2 -= two34;\n    sum += Math.min(c2, c1) * 12;\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int c1 = 5, c2 = 2, c3 = 3, c4 = 4;\n    System.out.println(Maxsum(c1, c2, c3, c4));\n  }\n}\n", "python": "def Maxsum(c1, c2, c3, c4):\n    sum = 0\n    two34 = min(c2, min(c3, c4))\n    sum = two34 * 234\n    c2 -= two34\n    sum += min(c2, c1) * 12\n    return sum\n\n\nc1 = 5\nc2 = 2\nc3 = 3\nc4 = 4\nprint(Maxsum(c1, c2, c3, c4))\n"}
{"text": "Count of pairs from 1 to a and 1 to b whose sum is divisible by N ", "java": "import java.io.*;\n\nclass GFG {\n  static int findCountOfPairs(int a, int b, int n) {\n    int ans = 0;\n    ans += n * (a / n) * (b / n);\n    ans += (a / n) * (b % n);\n    ans += (a % n) * (b / n);\n    ans += ((a % n) + (b % n)) / n;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int a = 5, b = 13, n = 3;\n    System.out.println(findCountOfPairs(a, b, n));\n  }\n}\n", "python": "def findCountOfPairs(a, b, n):\n    ans = 0\n    for i in range(1, a + 1):\n        ans += b // n\n        ans += 1 if (i % n + b % n) >= n else 0\n    return ans\n\n\na = 5\nb = 13\nn = 3\nprint(findCountOfPairs(a, b, n))\n"}
{"text": "Number of chocolates left after k iterations ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static int results(int n, int k) {\n    return (int) Math.round(Math.pow(n, (1.0 / Math.pow(2.0, k))));\n  }\n\n  public static void main(String args[]) {\n    int k = 3, n = 100000000;\n    System.out.print(\n        \" Chocolates \u2581 left \u2581 after \u2581 \" + k + \" \u2581 iterations \u2581 are \u2581 \" + results(n, k));\n  }\n}\n", "python": "def results(n, k):\n    return round(pow(n, (1.0 / pow(2, k))))\n\n\nk = 3\nn = 100000000\nprint(\" Chocolates \u2581 left \u2581 after \"),\nprint(k),\nprint(\" iterations \u2581 are \"),\nprint(int(results(n, k)))\n"}
{"text": "Make array elements equal in Minimum Steps ", "java": "import java.io.*;\n\nclass GFG {\n  static int steps(int N, int M) {\n    if (N == 1) return 0;\n    return M;\n    return 2 * M + (N - 3);\n  }\n\n  public static void main(String[] args) {\n    int N = 4, M = 4;\n    System.out.print(steps(N, M));\n  }\n}\n", "python": "def steps(N, M):\n    if N == 1:\n        return 0\n    elif N == 2:\n        return M\n    return 2 * M + (N - 3)\n\n\nN = 4\nM = 4\nprint(steps(N, M))\n"}
{"text": "Minimum increment / decrement to make array non ", "java": "import java.util.PriorityQueue;\n\nclass GFG {\n  public static int DecreasingArray(int a[], int n) {\n    int sum = 0, dif = 0;\n    PriorityQueue<Integer> pq = new PriorityQueue<>();\n    for (int i = 0; i < n; i++) {\n      if (!pq.isEmpty() && pq.element() < a[i]) {\n        dif = a[i] - pq.element();\n        sum += dif;\n        pq.remove();\n      }\n      pq.add(a[i]);\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int[] a = {3, 1, 2, 1};\n    int n = a.length;\n    System.out.println(DecreasingArray(a, n));\n  }\n}\n", "python": "from queue import PriorityQueue\n\n\ndef DecreasingArray(a, n):\n    ss, dif = (0, 0)\n    pq = PriorityQueue()\n    for i in range(n):\n        tmp = 0\n        if not pq.empty():\n            tmp = pq.get()\n            pq.put(tmp)\n        if not pq.empty() and tmp < a[i]:\n            dif = a[i] - tmp\n            ss += dif\n            pq.get()\n        pq.put(a[i])\n    return ss\n\n\nif __name__ == \" _ _ main _ _ \":\n    a = [3, 1, 2, 1]\n    n = len(a)\n    print(DecreasingArray(a, n))\n"}
{"text": "Count of subarrays with maximum value as K ", "java": "import java.io.*;\n\nclass GFG {\n  static int totalSubarrays(int arr[], int n, int k) {\n    int ans = 0, i = 0;\n    while (i < n) {\n      if (arr[i] > k) {\n        i++;\n        continue;\n      }\n      int count = 0;\n      while (i < n && arr[i] <= k) {\n        i++;\n        count++;\n      }\n      ans += ((count * (count + 1)) / 2);\n    }\n    return ans;\n  }\n\n  static int countSubarrays(int arr[], int n, int k) {\n    int count1 = totalSubarrays(arr, n, k - 1);\n    int count2 = totalSubarrays(arr, n, k);\n    int ans = count2 - count1;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 4, k = 3;\n    int arr[] = {2, 1, 3, 4};\n    System.out.println(countSubarrays(arr, n, k));\n  }\n}\n", "python": "def totalSubarrays(arr, n, k):\n    ans = 0\n    i = 0\n    while i < n:\n        if arr[i] > k:\n            i += 1\n            continue\n        count = 0\n        while i < n and arr[i] <= k:\n            i += 1\n            count += 1\n        ans += (count * (count + 1)) // 2\n    return ans\n\n\ndef countSubarrays(arr, n, k):\n    count1 = totalSubarrays(arr, n, k - 1)\n    count2 = totalSubarrays(arr, n, k)\n    ans = count2 - count1\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    k = 3\n    arr = [2, 1, 3, 4]\n    print(countSubarrays(arr, n, k))\n"}
{"text": "Maximum subsequence sum such that no three are consecutive in O ( 1 ) space ", "java": "import java.io.*;\n\nclass GFG {\n  public static int maxSumWO3Consec(int A[], int N) {\n    if (N == 1) return A[0];\n    if (N == 2) return A[0] + A[1];\n    int third = A[0];\n    int second = third + A[1];\n    int first = Math.max(second, A[1] + A[2]);\n    int sum = Math.max(Math.max(third, second), first);\n    for (int i = 3; i < N; i++) {\n      sum = Math.max(Math.max(first, second + A[i]), third + A[i] + A[i - 1]);\n      third = second;\n      second = first;\n      first = sum;\n    }\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int A[] = {3000, 2000, 1000, 3, 10};\n    int N = A.length;\n    int res = maxSumWO3Consec(A, N);\n    System.out.println(res);\n  }\n}\n", "python": "def maxSumWO3Consec(A, N):\n    if N == 1:\n        return A[0]\n    if N == 2:\n        return A[0] + A[1]\n    third = A[0]\n    second = third + A[1]\n    first = max(second, A[1] + A[2])\n    sum = max(max(third, second), first)\n    for i in range(3, N, 1):\n        sum = max(max(first, second + A[i]), third + A[i] + A[i - 1])\n        third = second\n        second = first\n        first = sum\n    return sum\n\n\nif __name__ == \" _ _ main _ _ \":\n    A = [3000, 2000, 1000, 3, 10]\n    N = len(A)\n    print(maxSumWO3Consec(A, N))\n"}
{"text": "Number of M ", "java": "public class Main {\n  static int countSortedArrays(int n, int m) {\n    int[] dp = new int[(m + 1)];\n    dp[0] = 1;\n    for (int i = 1; i <= n; i++) {\n      for (int j = 1; j <= m; j++) {\n        dp[j] = dp[j - 1] + dp[j];\n      }\n    }\n    return dp[m];\n  }\n\n  public static void main(String[] args) {\n    int n = 2, m = 3;\n    System.out.print(countSortedArrays(n, m));\n  }\n}\n", "python": "def countSortedArrays(start, m, size, n):\n    if size == m:\n        return 1\n    if start > n:\n        return 0\n    notTaken, taken = 0, 0\n    taken = countSortedArrays(start, m, size + 1, n)\n    notTaken = countSortedArrays(start + 1, m, size, n)\n    return taken + notTaken\n\n\nif __name__ == \" _ _ main _ _ \":\n    n, m = 2, 3\n    print(countSortedArrays(1, m, 0, n))\n"}
{"text": "Railway Station ", "java": "import java.util.*;\n\nclass GFG {\n  static int dp[] = new int[100000];\n\n  static int findWays(int x) {\n    if (x < 0) return 0;\n    if (x == 0) return 1;\n    if (x == 1) return 2;\n    if (x == 2) return 4;\n    if (dp[x] != -1) return dp[x];\n    int count = findWays(x - 1);\n    count += findWays(x - 2);\n    count += findWays(x - 3);\n    dp[x] = count;\n    return dp[x];\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    Arrays.fill(dp, -1);\n    System.out.print(findWays(n));\n  }\n}\n", "python": "dp = [-1 for i in range(100000)]\n\n\ndef findWays(x):\n    if x < 0:\n        return 0\n    if x == 0:\n        return 1\n    if x == 1:\n        return 2\n    if x == 2:\n        return 4\n    if dp[x] != -1:\n        return dp[x]\n    count = findWays(x - 1)\n    count += findWays(x - 2)\n    count += findWays(x - 3)\n    dp[x] = count\n    return dp[x]\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(findWays(n))\n"}
{"text": "Minimize cost of painting N houses such that adjacent houses have different colors ", "java": "import java.io.*;\nimport java.util.*;\n\nclass GFG {\n  static void minCost(int costs[][], int N) {\n    if (N == 0) return;\n    int dp[][] = new int[N][3];\n    dp[0][0] = costs[0][0];\n    dp[0][1] = costs[0][1];\n    dp[0][2] = costs[0][2];\n    for (int i = 1; i < N; i++) {\n      dp[i][0] = Math.min(dp[i - 1][1], dp[i - 1][2]) + costs[i][0];\n      dp[i][1] = Math.min(dp[i - 1][0], dp[i - 1][2]) + costs[i][1];\n      dp[i][2] = Math.min(dp[i - 1][0], dp[i - 1][1]) + costs[i][2];\n    }\n    System.out.println(Math.min(dp[N - 1][0], Math.min(dp[N - 1][1], dp[N - 1][2])));\n  }\n\n  public static void main(String[] args) {\n    int costs[][] = {{14, 2, 11}, {11, 14, 5}, {14, 3, 10}};\n    int N = costs.length;\n    minCost(costs, N);\n  }\n}\n", "python": "def minCost(costs, N):\n    if N == 0:\n        return 0\n    dp = [[0 for i in range(3)] for j in range(3)]\n    dp[0][0] = costs[0][0]\n    dp[0][1] = costs[0][1]\n    dp[0][2] = costs[0][2]\n    for i in range(1, N, 1):\n        dp[i][0] = min(dp[i - 1][1], dp[i - 1][2]) + costs[i][0]\n        dp[i][1] = min(dp[i - 1][0], dp[i - 1][2]) + costs[i][1]\n        dp[i][2] = min(dp[i - 1][0], dp[i - 1][1]) + costs[i][2]\n    print(min(dp[N - 1][0], min(dp[N - 1][1], dp[N - 1][2])))\n\n\nif __name__ == \" _ _ main _ _ \":\n    costs = [[14, 2, 11], [11, 14, 5], [14, 3, 10]]\n    N = len(costs)\n    minCost(costs, N)\n"}
{"text": "Count all possible paths from top left to bottom right of a Matrix without crossing the diagonal ", "java": "import java.util.*;\n\nclass GFG {\n  static int binCoff(int n, int r) {\n    int val = 1;\n    int i;\n    if (r > (n - r)) {\n      r = (n - r);\n    }\n    for (i = 0; i < r; i++) {\n      val *= (n - i);\n      val /= (i + 1);\n    }\n    return val;\n  }\n\n  static int findWays(int n) {\n    n--;\n    int a, b, ans;\n    a = binCoff(2 * n, n);\n    b = a / (n + 1);\n    ans = b;\n    return ans;\n  }\n\n  public static void main(String[] args) {\n    int n = 4;\n    System.out.print(findWays(n));\n  }\n}\n", "python": "def binCoff(n, r):\n    val = 1\n    if r > (n - r):\n        r = n - r\n    for i in range(r):\n        val *= n - i\n        val //= i + 1\n    return val\n\n\ndef findWays(n):\n    n = n - 1\n    a = binCoff(2 * n, n)\n    b = a // (n + 1)\n    ans = b\n    return ans\n\n\nif __name__ == \" _ _ main _ _ \":\n    n = 4\n    print(findWays(n))\n"}
{"text": "Count of binary strings of length N with even set bit count and at most K consecutive 1 s ", "java": "class GFG {\n  static int[][][] dp = new int[100001][20][2];\n\n  static int possibleBinaries(int pos, int ones, int sum, int k) {\n    if (ones == k) return 0;\n    if (pos == 0) return (sum == 0) ? 1 : 0;\n    if (dp[pos][ones][sum] != -1) return dp[pos][ones][sum];\n    int ret =\n        possibleBinaries(pos - 1, ones + 1, (sum + 1) % 2, k)\n            + possibleBinaries(pos - 1, 0, sum, k);\n    dp[pos][ones][sum] = ret;\n    return dp[pos][ones][sum];\n  }\n\n  public static void main(String[] args) {\n    int N = 3;\n    int K = 2;\n    for (int i = 0; i < 100001; i++) {\n      for (int j = 0; j < 20; j++) {\n        for (int l = 0; l < 2; l++) dp[i][j][l] = -1;\n      }\n    }\n    System.out.print(possibleBinaries(N, 0, 0, K));\n  }\n}\n", "python": "import numpy as np\n\ndp = np.ones(((100002, 21, 3)))\ndp = -1 * dp\n\n\ndef possibleBinaries(pos, ones, sum, k):\n    if ones == k:\n        return 0\n    if pos == 0:\n        return 1 if (sum == 0) else 0\n    if dp[pos][ones][sum] != -1:\n        return dp[pos][ones][sum]\n    ret = possibleBinaries(pos - 1, ones + 1, (sum + 1) % 2, k) + possibleBinaries(\n        pos - 1, 0, sum, k\n    )\n    dp[pos][ones][sum] = ret\n    return dp[pos][ones][sum]\n\n\nN = 3\nK = 2\nprint(int(possibleBinaries(N, 0, 0, K)))\n"}
